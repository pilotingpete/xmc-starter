   1              	 .cpu cortex-m0
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,0
  10              	 .eabi_attribute 18,4
  11              	 .file "xmc_ccu8.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.XMC_CCU8_StartPrescaler,"ax",%progbits
  16              	 .align 1
  17              	 .arch armv6s-m
  18              	 .syntax unified
  19              	 .code 16
  20              	 .thumb_func
  21              	 .fpu softvfp
  23              	XMC_CCU8_StartPrescaler:
  24              	.LFB43:
  25              	 .file 1 "..//Libraries/XMCLib/inc/xmc_ccu8.h"
   1:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
   2:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @file xmc_ccu8.h
   3:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @date 2017-09-15
   4:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
   5:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @cond
   6:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  **************************************************************************************************
   7:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
   9:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * All rights reserved.                        
  11:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                                             
  12:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * following conditions are met:   
  14:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                                                                              
  15:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * disclaimer.                        
  17:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 
  18:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 
  21:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * products derived from this software without specific prior written permission.                  
  23:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                                                                              
  24:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                                                                              
  32:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  **************************************************************************************************
  35:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
  36:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Change History
  37:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * --------------
  38:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
  39:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 2015-02-20:
  40:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - Initial <br>
  41:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - Documentation updates <br>
  42:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
  43:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 2015-06-20:
  44:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_LoadSelector() API, to select which compare register value has to be 
  46:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *       during external load event.
  47:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
  48:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 2015-07-01:
  49:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_CHECK_INTERRUPT macro, fixed the missing item for compare match down for
  50:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
  51:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 2015-07-24:
  52:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  53:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
  54:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 2015-08-17:
  55:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  56:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t is added for all the devices except XMC45 devices, t
  57:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *       shadow transfer has to happen. <br>
  58:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - XMC_CCU8_SOURCE_OUT0_t, XMC_CCU8_SOURCE_OUT1_t, XMC_CCU8_SOURCE_OUT2_t, XMC_CCU8_SOURCE_OU
  59:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *       to maps one of the ST to OUT0, OUT1, OUT3, OUT4 signals.
  60:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_COMPARE_CONFIG_t structure, selector_out0, selector_out1, selector_out2,
  61:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *       added to support XMC14 devices.
  62:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - XMC_CCU8_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  63:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_EnableCascadedShadowTransfer(), XMC_CCU8_SLICE_DisableCascadedShadowTransfe
  64:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *       XMC_CCU8_SLICE_SetShadowTransferMode() API are supported for all the devices except XMC45.
  65:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
  66:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 2015-09-29:
  67:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - In XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  68:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *       settings.
  69:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
  70:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 2015-10-07:
  71:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(), XMC_CCU8_SLICE_SetTimerCompareMatchChannel2
  72:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *       added to update the respective compare registers directly.
  73:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_GetEvent() is made as inline.
  74:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU8_SLICE_EnableMultipleEvents(
  75:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *       XMC_CCU8_SLICE_DisableMultipleEvents() APIs.
  76:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - DOC updates for the newly added APIs.
  77:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
  78:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 2016-03-09:
  79:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - Optimization of write only registers
  80:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
  81:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 2016-05-20:
  82:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - Added XMC_CCU8_SLICE_StopClearTimer()
  83:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - Changed XMC_CCU8_SLICE_StopTimer() and XMC_CCU8_SLICE_ClearTimer() 
  84:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
  85:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 2017-04-27:
  86:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - XMC_CCU8_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU8_SLICE_PRESCALER_t
  87:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
  88:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 2017-09-15:
  89:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - Fix XMC_CCU8_SLICE_SetShadowTransferMode()
  90:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *     - Added parity checking functionality
  91:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
  92:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @endcond
  93:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
  94:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
  95:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #ifndef XMC_CCU8_H
  96:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #define XMC_CCU8_H
  97:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
  98:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**************************************************************************************************
  99:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * HEADER FILES
 100:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  **************************************************************************************************
 101:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #include "xmc_common.h"
 102:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 103:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if defined(CCU80)
 104:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 105:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if UC_FAMILY == XMC1
 106:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  #include "xmc1_ccu8_map.h"
 107:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
 108:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 109:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if UC_FAMILY == XMC4
 110:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  #include "xmc4_ccu8_map.h"
 111:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
 112:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 113:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 114:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @addtogroup XMClib XMC Peripheral Library
 115:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @{
 116:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 117:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 118:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 119:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @addtogroup CCU8
 120:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
 121:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @brief Capture Compare Unit 8 (CCU8) low level driver for XMC family of microcontrollers<br>
 122:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
 123:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The CCU8 peripheral functions play a major role in applications that need complex Pulse Width Mo
 124:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * generation, with complementary high side and low side switches, multi phase control. These funct
 125:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * with a very flexible and programmable signal conditioning scheme, make the CCU8 the must have pe
 126:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * of the art motor control, multi phase and multi level power electronics systems.\n
 127:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Each CCU8 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC8y (where
 128:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * timer slice can work in compare mode or in capture mode.
 129:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
 130:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * APIs provided in this file cover the following functional blocks of CCU8:
 131:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 132:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par Note:
 133:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU8_SLICE_)
 134:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU8_)
 135:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
 136:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par Timer(Compare mode) configuration:
 137:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_COMPARE_CONFIG_t, 
 138:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t and the initialization functions XMC_CCU8_SLICE_CompareInit(),
 139:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
 140:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * It can be used to:
 141:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * -# Start and Stop the timer. (XMC_CCU8_SLICE_StartTimer(), XMC_CCU8_SLICE_StopTimer())
 142:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU8_SLICE_SetTimerPe
 143:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetTimerCompareMatch(), XMC_CCU8_SLICE_SetPrescaler(), XMC_CCU8_SLICE_SetDithe
 144:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    XMC_CCU8_SLICE_SetPassiveLevel())
 145:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * -# Configure the dead time.(XMC_CCU8_SLICE_SetDeadTimeValue(), XMC_CCU8_SLICE_SetDeadTimePrescal
 146:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU8_SLICE_EnableMultiChannelMode())
 147:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 
 148:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par Capture configuration:
 149:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_CAPTURE_CONFIG_t and
 150:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * function XMC_CCU8_SLICE_CaptureInit().
 151:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
 152:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * It can be used to:
 153:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * -# Configure the capture functionality. (XMC_CCU8_SLICE_Capture0Config(), XMC_CCU8_SLICE_Capture
 154:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 155:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    (XMC_CCU8_SLICE_GetCaptureRegisterValue())
 156:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 
 157:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par Function/Event configuration:
 158:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This section of the LLD provides the configuration structure XMC_CCU8_SLICE_EVENT_CONFIG_t.
 159:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 
 160:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * It can be used to:
 161:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * -# Enable and Disable the events. (XMC_CCU8_SLICE_EnableEvent(), XMC_CCU8_SLICE_DisableEvent())
 162:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU8_SLICE_StartConfig(), XMC_C
 163:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU8_SLICE_ModulationConfig(), 
 164:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    XMC_CCU8_SLICE_LoadConfig(), XMC_CCU8_SLICE_GateConfig())
 165:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU8_SLICE_Directi
 166:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * -# Count the external events.(XMC_CCU8_SLICE_CountConfig())
 167:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU8_SLICE_EnableTrap(), XMC_CCU8
 168:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    XMC_CCU8_SLICE_TrapConfig())
 169:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
 170:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par Interrupt configuration:
 171:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 172:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
 173:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @{
 174:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 175:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 176:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**************************************************************************************************
 177:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * MACROS
 178:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  **************************************************************************************************
 179:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_INTERRUPT(interrupt) \
 180:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     ((interrupt == XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 181:..//Libraries/XMCLib/inc/xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH)              || \
 182:..//Libraries/XMCLib/inc/xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1)  || \
 183:..//Libraries/XMCLib/inc/xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1)|| \
 184:..//Libraries/XMCLib/inc/xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2)  || \
 185:..//Libraries/XMCLib/inc/xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2)|| \
 186:..//Libraries/XMCLib/inc/xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT0)                 || \
 187:..//Libraries/XMCLib/inc/xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT1)                 || \
 188:..//Libraries/XMCLib/inc/xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_EVENT2)                 || \
 189:..//Libraries/XMCLib/inc/xmc_ccu8.h ****      (interrupt == XMC_CCU8_SLICE_IRQ_ID_TRAP))
 190:..//Libraries/XMCLib/inc/xmc_ccu8.h ****      
 191:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /* Macro to check if the slice ptr passed is valid */
 192:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #define XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(cmp_channel) \
 193:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     ((cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_1) || \
 194:..//Libraries/XMCLib/inc/xmc_ccu8.h ****      (cmp_channel == XMC_CCU8_SLICE_COMPARE_CHANNEL_2))
 195:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 196:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**************************************************************************************************
 197:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * ENUMS
 198:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  **************************************************************************************************
 199:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 200:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 201:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Typedef for CCU8 Global data structure
 202:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 203:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef CCU8_GLOBAL_TypeDef XMC_CCU8_MODULE_t;
 204:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 205:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 206:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Typedef for CCU8 Slice data structure
 207:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 208:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef CCU8_CC8_TypeDef XMC_CCU8_SLICE_t;
 209:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 210:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 211:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Return Value of an API
 212:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 213:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_STATUS
 214:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 215:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_STATUS_OK      = 0U, /**< API fulfils request */
 216:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_STATUS_ERROR       , /**< API cannot fulfil request */
 217:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_STATUS_RUNNING     , /**< The timer slice is currently running */
 218:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_STATUS_IDLE          /**< The timer slice is currently idle */
 219:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_STATUS_t;
 220:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 221:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 222:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * CCU8 module clock
 223:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 224:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_CLOCK
 225:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 226:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 227:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_A     , /**< External clock-A */
 228:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_B     , /**< External clock-B */
 229:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_CLOCK_EXTERNAL_C       /**< External clock-C */
 230:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_CLOCK_t;
 231:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 232:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 233:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * CCU8 set the shadow transfer type for multichannel mode
 234:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 235:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER
 236:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 237:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 238:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                      only for slice
 239:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 240:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                      and hardware f
 241:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 242:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                      only for slice
 243:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 244:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                      and hardware f
 245:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 246:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                       only for slic
 247:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 248:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                       and hardware 
 249:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 250:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                       only for slic
 251:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 252:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                       and hardware 
 253:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 254:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 255:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 256:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Operational modes of CCU8 slice
 257:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 258:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODE
 259:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 260:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_COMPARE  = 0U, /**< slice(CC8y) operates in Compare Mode */
 261:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MODE_CAPTURE        /**< slice(CC8y) operates in Capture Mode */
 262:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_MODE_t;
 263:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 264:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 265:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Slice Output selection
 266:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 267:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT
 268:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 269:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_0  = 1U, /**< Slice Output-0 */
 270:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_1  = 2U, /**< Slice Output-1 */
 271:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_2  = 4U, /**< Slice Output-2 */
 272:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_3  = 8U  /**< Slice Output-3 */
 273:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_t;
 274:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 275:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 276:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Timer counting modes for the slice
 277:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 278:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_MODE
 279:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 280:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 281:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA        /**< Centre Aligned Mode */
 282:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_MODE_t;
 283:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 284:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 285:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Timer repetition mode for the slice
 286:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 287:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_REPEAT_MODE
 288:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 289:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U, /**< Repetitive mode: continuous mode of operation 
 290:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE       /**< Single shot mode: Once a Period match/One matc
 291:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                      occurs timer goes to idle state */
 292:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t;
 293:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 294:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 295:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Timer counting direction for the CCU8 slice
 296:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 297:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_COUNT_DIR
 298:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 299:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 300:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 301:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_COUNT_DIR_t;
 302:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 303:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 304:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Capture mode register sets
 305:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 306:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_CAP_REG_SET
 307:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 308:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 309:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_CAP_REG_SET_HIGH       /**< Capture register-0, Capture register-1 used */
 310:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_CAP_REG_SET_t;
 311:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 312:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 313:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Prescaler mode
 314:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 315:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER_MODE
 316:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 317:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 318:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider */
 319:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_MODE_t;
 320:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 321:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 322:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Timer output passive level
 323:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 324:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL
 325:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 326:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 327:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 328:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 329:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 330:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 331:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Compare Channel selection
 332:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 333:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_COMPARE_CHANNEL
 334:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 335:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_1  = 0U, /**< Compare Channel-1 */
 336:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_COMPARE_CHANNEL_2        /**< Compare Channel-2 */
 337:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CHANNEL_t;
 338:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 339:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 340:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Timer clock Divider
 341:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 342:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_PRESCALER
 343:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 344:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu8 */
 345:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2      , /**< Slice Clock = fccu8/2 */
 346:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4      , /**< Slice Clock = fccu8/4 */
 347:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8      , /**< Slice Clock = fccu8/8 */
 348:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16     , /**< Slice Clock = fccu8/16 */
 349:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32     , /**< Slice Clock = fccu8/32 */
 350:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_64     , /**< Slice Clock = fccu8/64 */
 351:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_128    , /**< Slice Clock = fccu8/128 */
 352:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_256    , /**< Slice Clock = fccu8/256 */
 353:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_512    , /**< Slice Clock = fccu8/512 */
 354:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu8/1024 */
 355:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu8/2048 */
 356:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu8/4096 */
 357:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu8/8192 */
 358:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu8/16384 */
 359:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_PRESCALER_32768    /**< Slice Clock = fccu8/32768 */
 360:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_PRESCALER_t;
 361:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 362:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 363:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Dead Time Generator Clock Divider
 364:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 365:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_DTC_DIV
 366:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 367:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_1  = 0U, /**< DTC clock = Slice Clock */
 368:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_2      , /**< DTC clock = Slice Clock/2 */
 369:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_4      , /**< DTC clock = Slice Clock/4 */
 370:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_DTC_DIV_8        /**< DTC clock = Slice Clock/8 */
 371:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_DTC_DIV_t;
 372:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 373:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 374:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 375:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  The compare channel output which is routed to the slice output signal(STy).
 376:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 377:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_STATUS
 378:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 379:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1        = 0U, /**< Channel-1 status connected to Slice Status */
 380:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_2            , /**< Channel-2 status connected to Slice Status */
 381:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2      , /**< \b Wired \b AND of Channel-1 and Channel-2 stat
 382:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                     Slice status */
 383:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if ((UC_SERIES == XMC13) || (UC_SERIES == XMC14)) || defined(DOXYGEN)
 384:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_STATUS_CHANNEL_1_OR_2         /**< \b Wired \b OR of Channel-1 and Channel-2 statu
 385:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                     status. @note Only available for XMC1300 and XM
 386:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
 387:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_STATUS_t;
 388:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 389:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 390:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Compare channel for which modulation has to be applied
 391:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 392:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_CHANNEL
 393:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 394:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_NONE  = 0U, /**< No modulation */
 395:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1         , /**< Modulation for Compare Channel-1 */
 396:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_2         , /**< Modulation for Compare Channel-2 */
 397:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2     /**< Modulation for Compare Channel-1 and Compare C
 398:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_CHANNEL_t;
 399:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 400:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 401:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  External Function list
 402:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 403:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_FUNCTION
 404:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 405:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_START           = 0U, /**< Start function */
 406:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_STOP                , /**< Stop function */
 407:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 408:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                      generation */
 409:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 410:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                      generation */
 411:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_GATING              , /**< Gating function */
 412:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 413:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_LOAD                , /**< Load function */
 414:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_COUNT               , /**< Counting function */
 415:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 416:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 417:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_FUNCTION_TRAP                  /**< Trap function */
 418:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_FUNCTION_t;
 419:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 420:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 421:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  External Event list
 422:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 423:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT
 424:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 425:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_NONE  = 0U, /**< None */
 426:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_0         , /**< Event-0 */
 427:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_1         , /**< Event-1 */
 428:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_2           /**< Event-2 */
 429:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_t;
 430:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 431:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 432:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  External Event trigger criteria  - Edge sensitivity
 433:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 434:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY
 435:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 436:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE          = 0U, /**< None */
 437:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE       , /**< Rising Edge of the input signal ge
 438:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                  event trigger */
 439:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE      , /**< Falling Edge of the input signal g
 440:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                  trigger */
 441:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE           /**< Both Rising and Falling edges caus
 442:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t;
 443:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 444:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 445:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  External Event trigger criteria  - Level sensitivity
 446:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 447:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY
 448:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 449:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 450:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 451:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     /* Below enum items can be utilised specific to the functionality */
 452:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 453:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 454:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 455:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 456:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 457:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 458:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 459:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_EVENT_FILTER
 460:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 461:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filtering is applied */
 462:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_3_CYCLES      , /**< Input should be stable for 3 clock cycles */
 463:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_5_CYCLES      , /**< Input should be stable for 5 clock cycles */
 464:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_7_CYCLES        /**< Input should be stable for 7 clock cycles */
 465:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_FILTER_t;
 466:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 467:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 468:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU8 slice.
 469:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Interconnects are specific to each device.
 470:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 471:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef uint8_t XMC_CCU8_SLICE_INPUT_t;
 472:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 473:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 474:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 475:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 476:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 477:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_END_MODE
 478:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 479:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 480:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 481:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 482:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_END_MODE_t;
 483:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 484:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 485:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Actions that can be performed upon detection of an external Timer START event
 486:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 487:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_START_MODE
 488:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 489:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 490:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 491:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_START_MODE_t;
 492:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 493:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 494:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Modulation of timer output signals
 495:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 496:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MODULATION_MODE
 497:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 498:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 499:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 500:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_MODULATION_MODE_t;
 501:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 502:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 503:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Trap exit mode
 504:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 505:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TRAP_EXIT_MODE
 506:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 507:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 508:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 509:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_TRAP_EXIT_MODE_t;
 510:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 511:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 512:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Timer clear on capture
 513:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 514:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_TIMER_CLEAR_MODE
 515:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 516:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 517:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 518:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 519:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 520:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t;
 521:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 522:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 523:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Multi Channel Shadow transfer request configuration options
 524:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 525:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MCMS_ACTION
 526:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 527:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 528:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                 the actual registers upon MCS xfer 
 529:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 530:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                 register values to the actual regis
 531:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                 request */
 532:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 533:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                 Compare register values to the actu
 534:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                 MCS xfer request */
 535:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_MCMS_ACTION_t;
 536:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 537:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 538:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Available Interrupt Event Ids
 539:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 540:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_IRQ_ID
 541:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 542:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH            = 0U , /**< Period match counting up */
 543:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH               = 1U , /**< One match counting down */
 544:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 2U , /**< Compare match counting up for channel 1
 545:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 3U , /**< Compare match counting down for channel
 546:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 4U , /**< Compare match counting up for channel 2
 547:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 5U , /**< Compare match counting down for channel
 548:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT0                  = 8U , /**< Event-0 occurrence */
 549:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT1                  = 9U , /**< Event-1 occurrence */
 550:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_EVENT2                  = 10U, /**< Event-2 occurrence */
 551:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_IRQ_ID_TRAP                    = 11U  /**< Trap occurrence */
 552:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_IRQ_ID_t;
 553:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 554:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 555:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 556:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 557:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MULTI_IRQ_ID
 558:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 559:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_PERIOD_MATCH            = 0x1U,   /**< Period match counting up */
 560:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_ONE_MATCH               = 0x2U,   /**< One match counting down */
 561:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_1   = 0x4U,   /**< Compare match counting up for 
 562:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_1 = 0x8U,   /**< Compare match counting down fo
 563:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP_CH_2   = 0x10U,  /**< Compare match counting up for 
 564:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN_CH_2 = 0x20U,  /**< Compare match counting down fo
 565:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT0                  = 0x100U, /**< Event-0 occurrence */
 566:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT1                  = 0x200U, /**< Event-1 occurrence */
 567:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MULTI_IRQ_ID_EVENT2                  = 0x400U, /**< Event-2 occurrence */
 568:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_MULTI_IRQ_ID_t;
 569:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 570:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 571:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Service Request Lines for CCU8. Event are mapped to these SR lines and these are used to generat
 572:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 573:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SR_ID
 574:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 575:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 576:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 577:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 578:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 579:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_SR_ID_t;
 580:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 581:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 582:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 583:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Slice shadow transfer options.
 584:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 585:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SHADOW_TRANSFER
 586:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 587:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_0            = CCU8_GCSS_S0SE_Msk,  /**< Transfer Period, Compare 
 588:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           shadow register values to
 589:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           SLICE-0 */
 590:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU8_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 591:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           to actual register for SL
 592:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU8_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 593:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           actual register for SLICE
 594:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_1            = CCU8_GCSS_S1SE_Msk,  /**< Transfer Period, Compare 
 595:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           shadow register values to
 596:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           SLICE-1 */
 597:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU8_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 598:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           to actual registers for S
 599:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU8_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 600:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           actual register for SLICE
 601:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_2            = CCU8_GCSS_S2SE_Msk,  /**< Transfer Period, Compare 
 602:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           shadow register values to
 603:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           SLICE-2 */
 604:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU8_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 605:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           to actual register for SL
 606:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU8_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 607:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           actual register for SLICE
 608:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_SLICE_3            = CCU8_GCSS_S3SE_Msk,  /**< Transfer Period, Compare 
 609:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           shadow register values to
 610:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           SLICE-3 */
 611:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU8_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 612:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           to actual register for SL
 613:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU8_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 614:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                           actual register for SLICE
 615:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SHADOW_TRANSFER_t;
 616:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 617:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if (UC_SERIES != XMC45) || defined(DOXYGEN)
 618:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 619:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Slice shadow transfer mode options.
 620:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @note Not available for XMC4500 series
 621:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 622:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE
 623:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 624:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U, /**< Shadow transfer is d
 625:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                One match. */
 626:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 627:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 628:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t;
 629:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
 630:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 631:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if defined(CCU8V3) || defined(DOXYGEN) /* Defined for XMC1400 devices only */
 632:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 633:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Output sources for OUTy0 signal
 634:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @note Only available for XMC1400 series
 635:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 636:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT0
 637:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 638:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST1      = (uint32_t)0x0, /**< CCU8yST1 signal path is connected the CCU8x.O
 639:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST1  = (uint32_t)0x1, /**< Inverted CCU8yST1 signal path is connected th
 640:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_ST2      = (uint32_t)0x2, /**< CCU8yST2 signal path is connected the CCU8x.O
 641:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT0_INV_ST2  = (uint32_t)0x3  /**< Inverted CCU8yST2 signal path is connected th
 642:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT0_t;
 643:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 644:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 645:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Output sources for OUTy1 signal
 646:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 647:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 648:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT1
 649:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 650:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST1      = (uint32_t)0x1, /**< CCU8yST1 signal path is connected the CCU8x.O
 651:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST1  = (uint32_t)0x0, /**< Inverted CCU8yST1 signal path is connected th
 652:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_ST2      = (uint32_t)0x3, /**< CCU8yST2 signal path is connected the CCU8x.O
 653:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT1_INV_ST2  = (uint32_t)0x2  /**< Inverted CCU8yST2 signal path is connected th
 654:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT1_t;
 655:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 656:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 657:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Output sources for OUTy2 signal
 658:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @note Only available for XMC1400 series
 659:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 660:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT2
 661:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 662:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST2      = (uint32_t)0x0, /**< CCU8yST2 signal path is connected the CCU8x.O
 663:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST2  = (uint32_t)0x1, /**< Inverted CCU8yST2 signal path is connected th
 664:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_ST1      = (uint32_t)0x2, /**< CCU8yST1 signal path is connected the CCU8x.O
 665:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT2_INV_ST1  = (uint32_t)0x3  /**< Inverted CCU8yST1 signal path is connected th
 666:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT2_t;
 667:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 668:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 669:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Output sources for OUTy3 signal
 670:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 671:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 672:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  typedef enum XMC_CCU8_SOURCE_OUT3
 673:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 674:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST2      = (uint32_t)0x1, /**< CCU8yST2 signal path is connected the CCU8x.O
 675:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST2  = (uint32_t)0x0, /**< Inverted CCU8yST2 signal path is connected th
 676:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_ST1      = (uint32_t)0x3, /**< CCU8yST1 signal path is connected the CCU8x.O
 677:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SOURCE_OUT3_INV_ST1  = (uint32_t)0x2  /**< Inverted CCU8yST1 signal path is connected th
 678:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SOURCE_OUT3_t;
 679:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
 680:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 681:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 682:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 683:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Output selector for CCU8x.OUT0-3
 684:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 685:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
 686:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 687:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 688:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x20000, /**< CCU8yST1 signal path is connected the C
 689:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x20002, /**< Inverted CCU8yST1 signal path is connec
 690:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x40000, /**< CCU8yST1 signal path is connected the C
 691:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x40004, /**< Inverted CCU8yST1 signal path is connec
 692:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x80000, /**< CCU8yST2 signal path is connected the C
 693:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x80008, /**< Inverted CCU8yST2 signal path is connec
 694:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0x100000,/**< CCU8yST2 signal path is connected the C
 695:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0x100010 /**< Inverted CCU8yST2 signal path is connec
 696:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 697:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #else
 698:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_OUT_PATH
 699:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 700:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST1      = (uint32_t)0x000C0, /**< CCU8yST1 signal path is connected the C
 701:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST1  = (uint32_t)0x000D0, /**< Inverted CCU8yST1 signal path is connec
 702:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_ST2      = (uint32_t)0x000E0, /**< CCU8yST2 signal path is connected the C
 703:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT0_INV_ST2  = (uint32_t)0x000F0, /**< Inverted CCU8yST2 signal path is connec
 704:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST1      = (uint32_t)0x00D00, /**< CCU8yST1 signal path is connected the C
 705:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST1  = (uint32_t)0x00C00, /**< Inverted CCU8yST1 signal path is connec
 706:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_ST2      = (uint32_t)0x00F00, /**< CCU8yST2 signal path is connected the C
 707:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT1_INV_ST2  = (uint32_t)0x00E00, /**< Inverted CCU8yST2 signal path is connec
 708:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST2      = (uint32_t)0x0C000, /**< CCU8yST2 signal path is connected the C
 709:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST2  = (uint32_t)0x0D000, /**< Inverted CCU8yST2 signal path is connec
 710:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_ST1      = (uint32_t)0x0E000, /**< CCU8yST1 signal path is connected the C
 711:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT2_INV_ST1  = (uint32_t)0x0F000, /**< Inverted CCU8yST1 signal path is connec
 712:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST2      = (uint32_t)0xD0000, /**< CCU8yST2 signal path is connected the C
 713:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST2  = (uint32_t)0xC0000, /**< Inverted CCU8yST2 signal path is connec
 714:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_ST1      = (uint32_t)0xF0000, /**< CCU8yST1 signal path is connected the C
 715:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_OUT_PATH_OUT3_INV_ST1  = (uint32_t)0xE0000  /**< Inverted CCU8yST1 signal path is connec
 716:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_OUT_PATH_t;
 717:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 718:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 719:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Immediate write into configuration register
 720:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 721:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 722:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_WRITE_INTO
 723:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 724:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU8_CC8_STC_IRPC_Msk,                  /**< Imm
 725:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                 Wri
 726:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                 Con
 727:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE1_CONFIGURATION = CCU8_CC8_STC_IRCC1_Msk,               /**< Imm
 728:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                 Wri
 729:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                 Con
 730:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_COMPARE2_CONFIGURATION = CCU8_CC8_STC_IRCC2_Msk,               /**< Imm
 731:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                 Wri
 732:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                 Con
 733:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU8_CC8_STC_IRLC_Msk,           /**< Imm
 734:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                 Wri
 735:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                                                            Config
 736:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRDC_Msk,            /**< Imm
 737:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                 Wri
 738:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                                                            Config
 739:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU8_CC8_STC_IRFC_Msk /**< Imm
 740:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                 Wri
 741:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                 Val
 742:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_WRITE_INTO_t;
 743:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 744:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 745:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 746:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 747:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  @note Only available for XMC1400 series
 748:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 749:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 750:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 751:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU8_CC8_STC_ASPC_Msk,        
 752:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                                                                  
 753:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                    
 754:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                    
 755:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE1_SHADOW = CCU8_CC8_STC_ASCC1_Msk,     
 756:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                                                                  
 757:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                                                                  
 758:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                                                                  
 759:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE2_SHADOW = CCU8_CC8_STC_ASCC2_Msk,     
 760:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                                                                  
 761:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                                                                  
 762:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                                                                  
 763:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU8_CC8_STC_ASLC_Msk,        
 764:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                                                                  
 765:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                    
 766:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU8_CC8_STC_ASDC_Msk,        
 767:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                    
 768:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                    
 769:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU8_CC8_STC_ASFC_
 770:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                                                                  
 771:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                    
 772:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                                    
 773:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 774:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 775:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
 776:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 777:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 778:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  CCU8 slice mask which can be used for the APIs as input where multi slice support is available
 779:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 780:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_SLICE_MASK
 781:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 782:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 783:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 784:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 785:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 786:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_MASK_t;
 787:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 788:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 789:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Selects which signal is controlling the delay between the change at the CCU8 outputs and effect
 790:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 791:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_PARITY_CHECKER_DELAY_INPUT
 792:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 793:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTA = 0 << CCU8_GPCHK_PCDS_Pos,
 794:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTB = 1 << CCU8_GPCHK_PCDS_Pos,
 795:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTC = 2 << CCU8_GPCHK_PCDS_Pos,
 796:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_IGBTD = 3 << CCU8_GPCHK_PCDS_Pos
 797:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_PARITY_CHECKER_DELAY_INPUT_t;
 798:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 799:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 800:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 801:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Selects which signal contains the driver parity information
 802:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 803:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT
 804:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 805:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_0 = 0 << CCU8_GPCHK_PISEL_Pos,
 806:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_1 = 1 << CCU8_GPCHK_PISEL_Pos,
 807:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_2 = 2 << CCU8_GPCHK_PISEL_Pos,
 808:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_SLICE_3 = 3 << CCU8_GPCHK_PISEL_Pos,
 809:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_PARITY_CHECKER_DRIVER_INPUT_t;
 810:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 811:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 812:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Selects if we have an odd or even parity
 813:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 814:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef enum XMC_CCU8_PARITY_CHECKER_TYPE
 815:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 816:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_TYPE_EVEN = 0 << CCU8_GPCHK_PCTS_Pos,
 817:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_PARITY_CHECKER_TYPE_ODD = 1 << CCU8_GPCHK_PCTS_Pos,
 818:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_PARITY_CHECKER_TYPE_t;
 819:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 820:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**************************************************************************************************
 821:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * DATA STRUCTURES
 822:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  **************************************************************************************************
 823:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 824:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 825:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 826:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Needed to configure the various aspects of an External Event.
 827:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  This structure will not connect the external event with an external function.
 828:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 829:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_EVENT_CONFIG
 830:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 831:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event. 
 832:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 833:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                               This is needed for an edge sensitive 
 834:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 835:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                               This is needed for an level sensitive
 836:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_CCU8_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 837:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_EVENT_CONFIG_t;
 838:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 839:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /*Anonymous structure/union guard start*/
 840:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if defined(__CC_ARM)
 841:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   #pragma push
 842:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   #pragma anon_unions
 843:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #elif defined(__TASKING__)
 844:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   #pragma warning 586
 845:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
 846:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 847:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 848:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Dead Time configuration
 849:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 850:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_DEAD_TIME_CONFIG
 851:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 852:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   union
 853:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   {
 854:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     struct
 855:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     {
 856:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t enable_dead_time_channel1 : 1; /**< Enable dead time for Compare Channel-1 */
 857:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t enable_dead_time_channel2 : 1; /**< Enable dead time for Compare Channel-2 */
 858:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t channel1_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 859:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t channel1_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 860:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                    Compare Channel-1? */
 861:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t channel2_st_path : 1;          /**< Should dead time be applied to ST output of Comp
 862:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t channel2_inv_st_path : 1;      /**< Should dead time be applied to inverse ST output
 863:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                    Compare Channel-2? */
 864:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t div : 2;                       /**< Dead time prescaler divider value.
 865:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                    Accepts enum ::XMC_CCU8_SLICE_DTC_DIV_t*/
 866:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 24;
 867:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     };
 868:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     uint32_t dtc;
 869:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   };
 870:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   union
 871:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   {
 872:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     struct
 873:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     {
 874:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t channel1_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 875:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                       for compare channel-1. Range: [0x0 to 0xFF]
 876:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t channel1_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 877:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                        for compare channel-1. Range: [0x0 to 0xFF
 878:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 16;
 879:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     };
 880:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     uint32_t dc1r;
 881:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   };
 882:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   union
 883:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   {
 884:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     struct
 885:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     {
 886:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t channel2_st_rising_edge_counter : 8; /**< Contains the delay value that is applied t
 887:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 888:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t channel2_st_falling_edge_counter : 8; /**< Contains the delay value that is applied 
 889:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                                     for compare channel-2. Range: [0x0 to 0xFF]*/
 890:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 16;
 891:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     };
 892:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     uint32_t dc2r;
 893:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   };
 894:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t;
 895:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 896:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 897:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to compare 
 898:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  This excludes event and function configuration.
 899:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 900:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_COMPARE_CONFIG
 901:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 902:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   union
 903:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   {
 904:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     struct
 905:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     {
 906:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 907:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_COUNT_MODE_t */
 908:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 909:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t */
 910:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t shadow_xfer_clear : 1; /**< Should PR and CR shadow xfer happen when timer is cleare
 911:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 10;
 912:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 913:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 914:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 1;
 915:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 916:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_MODE_t */
 917:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 8;
 918:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t mcm_ch1_enable : 1;     /**< Multi-Channel mode for compare channel 1 enable? */
 919:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t mcm_ch2_enable : 1;     /**< Multi-Channel mode for compare channel 2 enable? */
 920:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 2;
 921:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t slice_status : 2;       /**< Which of the two channels drives the slice status outpu
 922:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_STATUS_t*/
 923:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 1;
 924:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     };
 925:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     uint32_t tc;
 926:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   };
 927:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   union
 928:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   {
 929:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     struct
 930:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     {
 931:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t passive_level_out0 : 1; /**< ST and OUT passive levels Configuration for OUT0. 
 932:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 933:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t passive_level_out1 : 1; /**< ST and OUT passive levels Configuration for OUT1. 
 934:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 935:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t passive_level_out2 : 1; /**< ST and OUT passive levels Configuration for OUT2. 
 936:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 937:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t passive_level_out3 : 1; /**< ST and OUT passive levels Configuration for OUT3. 
 938:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 	                                          Accepts enum :: XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t */
 939:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 28;
 940:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     };
 941:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     uint32_t psl;
 942:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   };
 943:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   union
 944:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   {
 945:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     struct
 946:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     {
 947:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t asymmetric_pwm : 1;     /**< Should the PWM be a function of the 2 compare channels
 948:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             rather than period value? */
 949:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   #if !defined(CCU8V3)    /* Defined for all devices except XMC1400 */                             
 950:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t invert_out0 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT0? *
 951:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t invert_out1 : 1;        /**< Should inverted ST of Channel-1 be connected to OUT1? *
 952:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t invert_out2 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT2? *
 953:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t invert_out3 : 1;        /**< Should inverted ST of Channel-2 be connected to OUT3? *
 954:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 27;
 955:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   #else
 956:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 3;
 957:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t selector_out0 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 958:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT0_t 
 959:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             refer OCS1 bit-field of CHC register. 
 960:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 961:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 2;
 962:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t selector_out1 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 963:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT1_t 
 964:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             refer OCS2 bit-field of CHC register. 
 965:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 966:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 2;
 967:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t selector_out2 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 968:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT2_t 
 969:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             refer OCS3 bit-field of CHC register.
 970:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 971:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 2;
 972:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t selector_out3 : 2;      /**< Connect ST or inverted ST of Channel-1 or Channel-2 be 
 973:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SOURCE_OUT3_t 
 974:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             refer OCS4 bit-field of CHC register.
 975:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 											@note Only available for XMC1400 series */
 976:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 14;
 977:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   #endif
 978:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     };
 979:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     uint32_t chc;
 980:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   };
 981:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 982:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             Accepts enum :: XMC_CCU8_SLICE_PRESCALER_t */
 983:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 984:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             Range : [0 to 15] */
 985:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering 
 986:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                             Range : [0 to 15] */
 987:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true*/
 988:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_COMPARE_CONFIG_t;
 989:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
 990:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
 991:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Configuration data structure for CCU8 slice. Specifically configures the CCU8 slice to capture 
 992:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  This excludes event and function configuration.
 993:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
 994:..//Libraries/XMCLib/inc/xmc_ccu8.h **** typedef struct XMC_CCU8_SLICE_CAPTURE_CONFIG
 995:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 996:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   union
 997:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   {
 998:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     struct
 999:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     {
1000:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 4;
1001:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
1002:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
1003:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                           Accepts enum ::XMC_CCU8_SLICE_TIMER_CLEAR_MODE_t */
1004:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 4;
1005:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
1006:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
1007:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 3;
1008:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU8_SLI
1009:..//Libraries/XMCLib/inc/xmc_ccu8.h ****       uint32_t : 15;
1010:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     };
1011:..//Libraries/XMCLib/inc/xmc_ccu8.h ****     uint32_t tc;
1012:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   };
1013:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
1014:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
1015:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer */
1016:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } XMC_CCU8_SLICE_CAPTURE_CONFIG_t;
1017:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /*Anonymous structure/union guard end*/
1018:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if defined(__CC_ARM)
1019:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   #pragma pop
1020:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #elif defined(__TASKING__)
1021:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   #pragma warning restore
1022:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
1023:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**************************************************************************************************
1024:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * API Prototypes
1025:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  **************************************************************************************************
1026:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #ifdef __cplusplus
1027:..//Libraries/XMCLib/inc/xmc_ccu8.h **** extern "C" {
1028:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
1029:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1030:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidModule(const XMC_CCU8_MODULE_t *const module)
1031:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1032:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   bool tmp = false;
1033:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   
1034:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   tmp = (module == CCU80);
1035:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   
1036:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if defined(CCU81)
1037:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   tmp = tmp || (module == CCU81);
1038:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
1039:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   
1040:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return tmp;  
1041:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } 
1042:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1043:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsValidSlice(const XMC_CCU8_SLICE_t *const slice)
1044:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1045:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   bool tmp = false;
1046:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   
1047:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   tmp = (slice == CCU80_CC80);
1048:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if defined(CCU80_CC81)  
1049:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC81);
1050:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
1051:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if defined(CCU80_CC82)  
1052:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC82);
1053:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
1054:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if defined(CCU80_CC83)  
1055:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   tmp = tmp || (slice == CCU80_CC83);
1056:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
1057:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if defined(CCU81)  
1058:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC80);
1059:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if defined(CCU81_CC81)  
1060:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC81);
1061:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
1062:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if defined(CCU81_CC82)  
1063:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC82);
1064:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
1065:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if defined(CCU81_CC83)  
1066:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   tmp = tmp || (slice == CCU81_CC83);
1067:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
1068:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif 
1069:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  
1070:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return tmp;  
1071:..//Libraries/XMCLib/inc/xmc_ccu8.h **** } 
1072:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1073:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1074:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1075:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param mcs_action multi-channel shadow transfer request configuration
1076:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1077:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1078:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1079:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1080:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Initialization of global register GCTRL.\n\n
1081:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  As part of module initialization, behaviour of the module upon detection
1082:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU8_EnableModule().
1083:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  The API call would bring up the required CCU8 module and also initialize the module for
1084:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  the required multi-channel shadow transfer.
1085:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1086:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1087:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureInit().
1088:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1089:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action);
1090:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1091:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1092:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1093:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1094:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1095:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1096:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1097:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Enables the CCU8 module and brings it to active state.\n\n
1098:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
1099:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Invoke this API before any operations are done on the CCU8 module. Invoked from  XMC_CCU8_Init()
1100:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1101:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1102:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_SetModuleClock()<BR>  XMC_CCU8_DisableModule()<BR>  XMC_CCU8_StartPrescaler().
1103:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1104:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module);
1105:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1106:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1107:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1108:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1109:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1110:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1111:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1112:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Brings the CCU8 module to reset state and enables gating of the clock signal(if applicable depen
1113:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * on the device being selected).\n\n
1114:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Invoke this API when a CCU8 module needs to be disabled completely.
1115:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Any operation on the CCU8 module will have no effect after this API is called.
1116:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1117:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1118:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_EnableModule()<BR> XMC_CCU8_DisableModule().
1119:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1120:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_DisableModule(XMC_CCU8_MODULE_t *const module);
1121:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1122:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1123:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1124:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param clock Choice of input clock to the module
1125:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1126:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1127:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1128:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1129:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.\n\n
1130:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
1131:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Call to this API is valid after the XMC_CCU8_Init().
1132:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1133:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1134:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * None.<BR>
1135:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1136:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock);
1137:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1138:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1139:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1140:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1141:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1142:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1143:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1144:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1145:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<br>\n
1146:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
1147:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU8_Init()
1148:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  (Mandatory to fully initialize the module).
1149:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1150:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1151:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPres
1152:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_StopPrescaler().
1153:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1154:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
1155:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
  26              	 .loc 1 1155 1
  27              	 .cfi_startproc
  28              	 
  29              	 
  30 0000 80B5     	 push {r7,lr}
  31              	.LCFI0:
  32              	 .cfi_def_cfa_offset 8
  33              	 .cfi_offset 7,-8
  34              	 .cfi_offset 14,-4
  35 0002 82B0     	 sub sp,sp,#8
  36              	.LCFI1:
  37              	 .cfi_def_cfa_offset 16
  38 0004 00AF     	 add r7,sp,#0
  39              	.LCFI2:
  40              	 .cfi_def_cfa_register 7
  41 0006 7860     	 str r0,[r7,#4]
1156:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1157:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
  42              	 .loc 1 1157 17
  43 0008 7B68     	 ldr r3,[r7,#4]
  44 000a DB68     	 ldr r3,[r3,#12]
  45 000c 8022     	 movs r2,#128
  46 000e 5200     	 lsls r2,r2,#1
  47 0010 1A43     	 orrs r2,r3
  48 0012 7B68     	 ldr r3,[r7,#4]
  49 0014 DA60     	 str r2,[r3,#12]
1158:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
  50              	 .loc 1 1158 1
  51 0016 C046     	 nop
  52 0018 BD46     	 mov sp,r7
  53 001a 02B0     	 add sp,sp,#8
  54              	 
  55 001c 80BD     	 pop {r7,pc}
  56              	 .cfi_endproc
  57              	.LFE43:
  59              	 .section .text.XMC_CCU8_SLICE_StopTimer,"ax",%progbits
  60              	 .align 1
  61              	 .syntax unified
  62              	 .code 16
  63              	 .thumb_func
  64              	 .fpu softvfp
  66              	XMC_CCU8_SLICE_StopTimer:
  67              	.LFB66:
1159:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1160:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1161:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1162:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1163:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1164:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1165:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1166:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Starts the parity function.<br>\n
1167:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Invoke this  API after XMC_CCU8_Init()
1168:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1169:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1170:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR> XMC_CCU8_StopParity
1171:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1172:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StartParityChecker(XMC_CCU8_MODULE_t *const module)
1173:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1174:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StartParityChecker:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1175:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   module->GIDLC |= (uint32_t) CCU8_GIDLC_SPCH_Msk;
1176:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1177:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1178:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1179:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1180:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1181:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1182:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1183:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1184:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.\n\n
1185:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
1186:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * the slices of the module.
1187:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1188:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1189:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8
1190:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1191:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StopPrescaler(XMC_CCU8_MODULE_t *const module)
1192:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1193:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StopPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1194:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   module->GIDLS |= (uint32_t) CCU8_GIDLS_CPRB_Msk;
1195:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1196:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1197:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1198:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1199:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1200:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1201:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1202:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1203:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Stops the parity function.<br>\n
1204:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1205:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1206:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartParityChecker()<BR>
1207:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1208:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_StopParityChecker(XMC_CCU8_MODULE_t *const module)
1209:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1210:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_StopParityChecker:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1211:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   module->GIDLS |= (uint32_t) CCU8_GIDLS_CPCH_Msk;
1212:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1213:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1214:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1215:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1216:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1217:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1218:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1219:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1220:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.\n\n
1221:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * If clock is being supplied to the slices of the  module then returns as true. 
1222:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1223:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1224:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler()<BR> XMC_CCU8_EnableClock()<BR>  XMC_CCU8
1225:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1226:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsPrescalerRunning(XMC_CCU8_MODULE_t *const module)
1227:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1228:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1229:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return((bool)((module->GSTAT & (uint32_t) CCU8_GSTAT_PRB_Msk) == CCU8_GSTAT_PRB_Msk));
1230:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1231:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1232:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1233:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1234:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1235:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1236:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1237:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1238:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Returns the state of the parity checker.\n\n
1239:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1240:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1241:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>  XMC_CCU8_StopParityChecker()<BR> XMC_CCU8_EnableClock()<BR>  
1242:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1243:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_IsParityCheckerRunning(XMC_CCU8_MODULE_t *const module)
1244:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1245:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1246:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return((bool)((module->GSTAT & (uint32_t) CCU8_GSTAT_PCRB_Msk) == CCU8_GSTAT_PCRB_Msk));
1247:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1248:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1249:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1250:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1251:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
1252:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively. 
1253:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1254:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1255:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1256:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1257:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1258:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
1259:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * GIDLC.CS3I bits.\n\n
1260:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
1261:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * of the idle state simultaneously.
1262:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1263:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1264:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock().
1265:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1266:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableMultipleClocks(XMC_CCU8_MODULE_t *const module, const uint8_t c
1267:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1268:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU8_IsValidModule(module)
1269:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableMultipleClocks:Invalid clock mask", (clock_mask < 16U));
1270:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1271:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   module->GIDLC |= (uint32_t) clock_mask;
1272:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1273:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1274:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1275:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1276:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param compare_init Pointer to slice configuration structure
1277:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1278:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1279:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1280:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1281:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Initialization of a CC8 slice to compare mode, by configuring CC8yTC, CC8yCMC, CC8yPSC, CC8yDITH
1282:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * CC8yFPCS, CC8yCHC registers.\n\n
1283:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * CC8 slice is configured with Timer configurations in this routine. Timer is stopped before initi
1284:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable
1285:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * the shadow transfer for the required values by calling XMC_CCU8_EnableShadowTransfer() with appr
1286:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1287:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1288:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * None.
1289:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1290:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
1291:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init);
1292:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1293:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1294:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1295:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param capture_init Pointer to slice configuration structure
1296:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1297:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1298:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1299:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1300:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Initialization of a CC8 slice to capture mode, by configuring CC8yTC, CC8yCMC, CC8yPSC,CC8yFPCS 
1301:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * CC8 slice is configured with Capture configurations in  this routine. Timer is stopped before in
1302:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * by calling XMC_CCU8_SLICE_StopTimer(). After initialization user has to explicitly enable the sh
1303:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * for the required  values by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask. 
1304:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1305:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1306:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config().
1307:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1308:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_CaptureInit(XMC_CCU8_SLICE_t *const slice,
1309:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_CAPTURE_CONFIG_t *const capture_init);
1310:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1311:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1312:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1313:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be Enabled.
1314:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1315:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1316:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1317:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1318:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1319:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
1320:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
1321:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
1322:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  slice whose clock needs to be enabled. Directly accessed register is GIDLC.
1323:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1324:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1325:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR> 
1326:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1327:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_numb
1328:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1329:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1330:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));
1331:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1332:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   module->GIDLC |= ((uint32_t) 1 << slice_number);
1333:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1334:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1335:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1336:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1337:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1338:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1339:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1340:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1341:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1342:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1343:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
1344:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
1345:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * It is possible to disable clock at slice level using the module pointer.
1346:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
1347:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1348:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1349:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_EnableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  
1350:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1351:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_DisableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_num
1352:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1353:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
1354:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_DisableClock:Invalid Slice Number", (slice_number < 4U));
1355:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1356:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   module->GIDLS |= ((uint32_t) 1 << slice_number);
1357:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1358:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1359:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1360:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1361:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1362:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1363:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param output Slice output.
1364:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1365:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1366:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1367:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1368:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Enables slice outputs to be used to perform the parity check. 
1369:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1370:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1371:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>  XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput()<BR>
1372:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1373:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput(XMC_CCU8_MODULE_t *const module,
1374:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1375:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput:Invalid Module Pointer", XMC_CCU8_IsVal
1376:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput:Invalid Slice Number", (slice_number < 
1377:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1378:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   module->GPCHK |= (uint32_t)(((output & (1 << slice_number)) << CCU8_GPCHK_PCSEL0_Pos) |
1379:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                               ((output & (2 << slice_number)) << CCU8_GPCHK_PCSEL1_Pos) |
1380:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                               ((output & (4 << slice_number)) << CCU8_GPCHK_PCSEL2_Pos) |
1381:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                               ((output & (8 << slice_number)) << CCU8_GPCHK_PCSEL3_Pos));
1382:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1383:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1384:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1385:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1386:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice_number Slice for which the clock should be disabled.
1387:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                   Range: [0x0 to 0x3]
1388:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param output Slice output ::XMC_CCU8_SLICE_OUTPUT_t.
1389:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1390:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1391:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1392:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1393:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Enables slice outputs to be used to perform the parity check. 
1394:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1395:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1396:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>  XMC_CCU8_SLICE_ParityCheckerEnableSliceOutput()<BR>
1397:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1398:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput(XMC_CCU8_MODULE_t *const module
1399:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1400:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput:Invalid Slice Pointer", XMC_CCU8_IsVal
1401:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerDisableSliceOutput:Invalid Slice Number", (slice_number <
1402:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1403:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   module->GPCHK &= (uint32_t)~(((output & (1 << slice_number)) << CCU8_GPCHK_PCSEL0_Pos) |
1404:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                ((output & (2 << slice_number)) << CCU8_GPCHK_PCSEL1_Pos) |
1405:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                ((output & (4 << slice_number)) << CCU8_GPCHK_PCSEL2_Pos) |
1406:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                ((output & (8 << slice_number)) << CCU8_GPCHK_PCSEL3_Pos));
1407:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1408:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1409:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1410:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1411:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param input signal controlling the delay between the change at the CCU8 outputs and effective c
1412:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1413:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1414:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1415:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1416:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Selects which signal is controlling the delay between the change at the CCU8 outputs and effecti
1417:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1418:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1419:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>
1420:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1421:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerSetDelayInput(XMC_CCU8_MODULE_t *const module, con
1422:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1423:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1424:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   module->GPCHK = (module->GPCHK & (uint32_t)~CCU8_GPCHK_PCDS_Msk) | input;
1425:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1426:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1427:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1428:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1429:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param input signal contains the driver parity information ::XMC_CCU8_PARITY_CHECKER_DRIVER_INPU
1430:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1431:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1432:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1433:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1434:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Selects which signal contains the driver parity information.
1435:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The signal must be selected throughout the input selector mux of each slice. The signal must be 
1436:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1437:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1438:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker(), XMC_CCU8_SLICE_SetInput()<BR>.
1439:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1440:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerSetDriverInput(XMC_CCU8_MODULE_t *const module, co
1441:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1442:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1443:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   module->GPCHK = (module->GPCHK & (uint32_t)~CCU8_GPCHK_PISEL_Msk) | input;
1444:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1445:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1446:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1447:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1448:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param type odd or even parity ::XMC_CCU8_PARITY_CHECKER_TYPE_t.
1449:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1450:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1451:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1452:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1453:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Selects if we have an odd or even parity.
1454:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1455:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1456:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>.
1457:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1458:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ParityCheckerSetType(XMC_CCU8_MODULE_t *const module, const XMC
1459:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1460:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1461:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   module->GPCHK = (module->GPCHK & (uint32_t)~CCU8_GPCHK_PCTS_Msk) | type;
1462:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1463:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1464:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1465:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1466:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1467:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return status of parity checker. If >0 then an error is dectected
1468:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1469:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1470:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Returns current value of the XOR chain.
1471:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1472:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1473:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_StartParityChecker()<BR>
1474:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1475:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE uint32_t XMC_CCU8_SLICE_ParityCheckerGetStatus(XMC_CCU8_MODULE_t *const module)
1476:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1477:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ParityCheckerSetDelayInput:Invalid Module Pointer", XMC_CCU8_IsValidMo
1478:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return (module->GPCHK & CCU8_GPCHK_PCST_Msk);
1479:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1480:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1481:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1482:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1483:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param out_path_msk configuration for output path selection.
1484:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *        combination of XMC_CCU8_OUT_PATH_t enum items can be used to create a mask.
1485:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 
1486:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1487:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1488:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1489:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1490:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Configure the out the path of the two compare channels with specified ST signal, by configuring 
1491:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  ^ CC8yCHC register.\n\n
1492:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 
1493:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * For the two compare channels it is possible to select either direct ST signal or inverted ST sig
1494:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \b out_path_msk is used to set the required out put path.
1495:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1496:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1497:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * None
1498:..//Libraries/XMCLib/inc/xmc_ccu8.h **** */
1499:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk);
1500:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1501:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1502:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1503:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param event Map an External event to the External Start Function
1504:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param start_mode Behaviour of slice when the start function is activated
1505:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1506:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1507:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1508:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1509:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Configures the Start Function of the slice, by configuring CC8yCMC.ENDS and CC8yTC.ENDM bits.\n
1510:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC8 ti
1511:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1512:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1513:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1514:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1515:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1516:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
1517:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_EVENT_t event,
1518:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                 const XMC_CCU8_SLICE_START_MODE_t start_mode);
1519:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1520:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1521:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1522:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param event Map an External event to the External Stop Function
1523:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param end_mode Behaviour of slice when the stop function is activated
1524:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1525:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1526:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1527:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1528:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Configures the Stop function for the slice, by configuring CC8yCMC.STRTS and CC8yTC.STRM bits.\n
1529:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU8 tim
1530:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1531:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1532:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1533:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput()
1534:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1535:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
1536:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                const XMC_CCU8_SLICE_EVENT_t event,
1537:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                const XMC_CCU8_SLICE_END_MODE_t end_mode);
1538:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1539:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1540:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1541:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param event Map an External event to the External load Function
1542:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1543:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1544:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1545:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1546:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Configures the Load Function for the slice, by configuring CC8yCMC.LDS bit.\n\n
1547:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1548:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 0,CC8yTIMER register is reloaded with the value from compare channel 1 
1549:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                            compare channel 2\n
1550:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  if CC8yTCST.CDIR set to 1,CC8yTIMER register is reloaded with the value from period register\n
1551:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  
1552:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1553:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1554:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1555:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1556:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1557:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1558:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1559:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1560:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param ch_num Select which compare channel value has to be loaded to the Timer register during e
1561:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1562:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1563:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1564:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1565:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Up on occurrence of the external load event, if CC8yTCST.CDIR set to 0, CC8yTIMER register can 
1566:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  with the value from compare channel 1 or compare channel 2\n
1567:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  If CC8yTC.TLS is 0, compare channel 1 value is loaded to the CC8yTIMER register\n
1568:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  If CC8yTC.TLS is 1, compare channel 2 value is loaded to the CC8yTIMER register\n
1569:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1570:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1571:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1572:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1573:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNE
1574:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1575:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1576:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1577:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param event Map an External event to the External Modulation Function
1578:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param mod_mode Desired Modulation mode
1579:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param channel Specify the channel(s) on which the modulation should be applied.
1580:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1581:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1582:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1583:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1584:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1585:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1586:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Configures the Output Modulation Function of the slice, by configuring CC8yCMC.MOS, CC8yTC.EMT a
1587:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * CC8yTC.EMS bits.\n\n
1588:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1589:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1590:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * of the modulation function is configured as well.
1591:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1592:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1593:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1594:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1595:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
1596:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_EVENT_t event,
1597:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
1598:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                      const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel, 
1599:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                      const bool synch_with_pwm
1600:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                      );
1601:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1602:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1603:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1604:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param event Map an External event to the External Count Function
1605:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1606:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1607:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1608:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1609:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Configures the Count Function of the slice, by configuring CC8yCMC.CNTS bit.\n\n
1610:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Count function is mapped with one of the 3 events. CCU8 slice can take an external
1611:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * signal to act as the counting event. The CCU8 slice would count the
1612:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * edges present on the \b event selected. 
1613:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1614:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1615:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1616:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1617:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1618:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1619:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1620:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1621:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param event  Map an External event to the External Gating Function
1622:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1623:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1624:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1625:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1626:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Configures the Gating Function of the slice, by configuring CC8yCMC.GATES bit.\n\n
1627:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Gating function is mapped with one of the 3 events.  A CCU8 slice can use an input signal that w
1628:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1629:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1630:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1631:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1632:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1633:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event);
1634:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1635:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1636:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1637:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param event Map an External event to the Capture-0 Function
1638:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1639:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1640:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1641:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1642:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Configures the Capture-0 Function of the slice, by configuring CC8yCMC.CAP0S bit.\n\n
1643:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events.  A CCU8 slice can be configured into captur
1644:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC0V and 
1645:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1646:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1647:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1648:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1649:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture0Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1650:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1651:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1652:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1653:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param event Map an External event to the Capture-1 Function
1654:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1655:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1656:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1657:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1658:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Configures the Capture-1 Function of the slice, by configuring CC8yCMC.CAP1S bit.\n\n
1659:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Capture function is mapped with one of the 3 events. A CCU8 slice can be configured into capture
1660:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * mode with the selected \b event. In this mode the CCU8 will capture the timer value into CC8yC2V
1661:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1662:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1663:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1664:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1665:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_Capture1Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
1666:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1667:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1668:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1669:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1670:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1671:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1672:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1673:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC8yTC.E
1674:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * In this mode the there is only one associated read address for all the capture registers.
1675:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Individual capture registers can still be accessed in this mode.
1676:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1677:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1678:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_GetCapturedValueFromFifo().
1679:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1680:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsExtendedCapReadEnabled(const XMC_CCU8_SLICE_t *const slice)
1681:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1682:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_IsPrescalerRunning:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1683:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return((bool)((slice->TC & (uint32_t) CCU8_CC8_TC_ECM_Msk) == (uint32_t)CCU8_CC8_TC_ECM_Msk));
1684:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1685:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1686:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #if defined(CCU8V1) /* Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices onl
1687:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1688:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
1689:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice_number to check whether read value belongs to required slice or not
1690:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1691:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1692:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1693:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                     Range: [0x0 to 0xFFFF]
1694:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1695:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1696:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Read captured value from FIFO(ECRD register).\n\n
1697:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1698:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1699:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1700:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * derived/inferred from the captured values.
1701:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1702:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1703:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1704:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1705:..//Libraries/XMCLib/inc/xmc_ccu8.h **** int32_t XMC_CCU8_GetCapturedValueFromFifo(const XMC_CCU8_MODULE_t *const module, const uint8_t slic
1706:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #else
1707:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1708:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1709:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param set The capture register set from which the captured value is to be retrieved
1710:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1711:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    uint32_t Returns the value captured in the \b slice_number
1712:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *             Range: [0x0 to 0xFFFF]
1713:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1714:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1715:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Read captured value from FIFO(CC8yECRD0 and CC8yECRD1).\n\n
1716:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1717:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1718:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1719:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * derived/inferred from the captured values.
1720:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1721:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1722:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsExtendedCapReadEnabled().
1723:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1724:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1725:..//Libraries/XMCLib/inc/xmc_ccu8.h **** uint32_t XMC_CCU8_SLICE_GetCapturedValueFromFifo(const XMC_CCU8_SLICE_t *const slice,
1726:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 		                                             const XMC_CCU8_SLICE_CAP_REG_SET_t set);
1727:..//Libraries/XMCLib/inc/xmc_ccu8.h **** #endif
1728:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1729:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1730:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1731:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param event Map an External event to the External Count Direction Function
1732:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1733:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1734:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1735:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1736:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Configures the Count Direction of the slice, by configuring CC8yCMC.UDS bit.\n\n
1737:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1738:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * CC8yTIMER count direction depending on an external signal.
1739:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1740:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1741:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1742:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1743:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t eve
1744:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1745:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1746:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1747:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1748:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1749:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1750:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1751:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Configures the status bit override Function of the slice, by configuring CC8yCMC.OFS bit.\n\n
1752:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1753:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * output of the timer's CC8yST1 signal depending on an external signal.
1754:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1755:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1756:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent().
1757:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1758:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice);
1759:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1760:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1761:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1762:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param exit_mode How should a previously logged trap state be exited?
1763:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1764:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1765:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1766:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1767:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1768:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1769:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Configures the Trap Function of the slice, by configuring CC8yCMC.TS, CC8yTC.TRPSE, and CC8yTC.T
1770:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1771:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1772:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1773:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1774:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1775:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1776:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ConfigureEvent()<BR>  XMC_CCU8_SLICE_SetInput().
1777:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1778:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
1779:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
1780:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                bool synch_with_pwm);
1781:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1782:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1783:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1784:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param ev1_config Pointer to event 1 configuration data
1785:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param ev2_config Pointer to event 2 configuration data
1786:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1787:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1788:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1789:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1790:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1791:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC8yINS reg
1792:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1793:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1794:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Event-2 input would be the override value.
1795:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1796:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1797:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig().
1798:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1799:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
1800:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_
1801:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_
1802:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1803:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1804:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1805:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1806:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param config Pointer to event configuration data.
1807:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1808:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1809:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1810:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1811:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Configures an External Event of the slice, by updating CC8yINS register .\n\n
1812:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1813:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1814:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1815:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1816:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1817:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1818:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR>  XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateCon
1819:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR> XMC_CCU8_SLICE_Capture1Config()<BR>  XMC_CCU8_SLICE_Directi
1820:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1821:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1822:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
1823:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_t event,
1824:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *config);
1825:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1826:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1827:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1828:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param event The External Event which needs to be configured.
1829:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1830:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1831:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1832:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1833:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1834:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1835:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Selects an input for an external event, by configuring CC8yINS register.\n\n
1836:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1837:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This configures the CC8yINS.EVxIS for the selected event.
1838:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1839:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1840:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartConfig()<BR>  XMC_CCU8_SLICE_StopConfig()<BR>  XMC_CCU8_SLICE_LoadConfig()<
1841:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_ModulationConfig()<BR> XMC_CCU8_SLICE_CountConfig()<BR>  XMC_CCU8_SLICE_GateConf
1842:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_Capture0Config()<BR>  XMC_CCU8_SLICE_Capture1Config()<BR> XMC_CCU8_SLICE_Directi
1843:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StatusBitOverrideConfig()<BR>  XMC_CCU8_SLICE_TrapConfig().
1844:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1845:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_SetInput(XMC_CCU8_SLICE_t *const slice,
1846:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                              const XMC_CCU8_SLICE_EVENT_t event,
1847:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                              const XMC_CCU8_SLICE_INPUT_t input);
1848:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1849:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1850:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1851:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be activated.
1852:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1853:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                   using a bit wise OR operation
1854:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1855:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1856:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1857:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1858:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1859:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Enables the trap feature, by setting CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TRAP
1860:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \a out_mask.\n\n
1861:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1862:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1863:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1864:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1865:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEven
1866:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetInput().
1867:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1868:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_ma
1869:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1870:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1871:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
1872:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1873:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1874:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1875:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1876:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param out_mask  Output signals for which the Trap function needs to be deactivated.
1877:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                   Use ::XMC_CCU8_SLICE_OUTPUT_t enum items to create a mask of choice,
1878:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                   using a bit wise OR operation.
1879:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                   Range: [0x1 to 0xF]
1880:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1881:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1882:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1883:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1884:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Disables the trap feature, by clearing CC8yTC.TRAPE0, CC8yTC.TRAPE1, CC8yTC.TRAPE2 and CC8yTC.TR
1885:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \a out_mask.\n\n.\n\n
1886:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This API will revert the changes done by XMC_CCU8_SLICE_EnableTrap().
1887:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU8 slice.
1888:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1889:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1890:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableTrap().
1891:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1892:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_m
1893:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1894:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1895:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   
1896:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   slice->TC &= ~((uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos);
1897:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1898:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1899:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1900:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1901:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1902:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1903:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1904:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1905:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC8yTCST.TRB bit.
1906:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1907:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1908:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
1909:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1910:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
1911:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1912:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1913:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
1914:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1915:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1916:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1917:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1918:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1919:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-1 is running else it returns
1920:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1921:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1922:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Returns the state of the  Dead time counter 1 (Either Running or stopped(idle)), by reading CC8y
1923:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-1.
1924:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1925:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1926:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr2Running().
1927:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1928:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr1Running(const XMC_CCU8_SLICE_t *const slice)
1929:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1930:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr1Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
1931:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_DTR1_Msk) == (uint32_t)CCU8_CC8_TCST_DTR1_Msk);
1932:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1933:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1934:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1935:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Pointer to an instance of CC8 slice
1936:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1937:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    bool returns \b true if the dead time counter of Compare channel-2 is running else it returns
1938:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1939:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1940:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Returns the state of the  Dead time counter 2 (Either Running or stopped(idle)), by reading CC8y
1941:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This returns the state of the dead time counter which is linked to Compare channel-2.
1942:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1943:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1944:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_IsDeadTimeCntr1Running().
1945:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1946:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsDeadTimeCntr2Running(const XMC_CCU8_SLICE_t *const slice)
1947:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1948:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_IsDeadTimeCntr2Running:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(s
1949:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return(bool)(((slice->TCST) & CCU8_CC8_TCST_DTR2_Msk) == (uint32_t)CCU8_CC8_TCST_DTR2_Msk);
1950:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1951:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1952:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1953:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1954:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1955:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *   ::XMC_CCU8_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1956:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1957:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1958:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Returns the timer counting direction, by reading CC8yTCST.CDIR bit.\n\n
1959:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This API will return the direction in which the timer is currently
1960:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * incrementing(XMC_CCU8_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU8_SLICE_TIMER_COUNT_DIR_
1961:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1962:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1963:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  None.
1964:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1965:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_DIR_t XMC_CCU8_SLICE_GetCountingDir(const XMC_CCU8_SLICE
1966:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1967:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1968:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU8_CC8_TCST_CDIR_Msk) >> CCU8_CC8_TC
1969:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1970:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1971:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1972:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1973:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1974:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1975:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1976:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Starts the timer counting operation, by setting CC8yTCSET.TRBS bit.\n\n
1977:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * It is necessary to have configured the CC8 slice before starting its timer.
1978:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1979:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1980:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1981:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StopTimer().
1982:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
1983:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
1984:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
1985:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1986:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
1987:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
1988:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
1989:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
1990:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
1991:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
1992:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
1993:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1994:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
1995:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Stops the Timer.\n\n
1996:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC8yTCCLR.TRBC bit.
1997:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
1998:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
1999:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
2000:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2001:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
2002:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
  68              	 .loc 1 2002 1
  69              	 .cfi_startproc
  70              	 
  71              	 
  72 0000 80B5     	 push {r7,lr}
  73              	.LCFI3:
  74              	 .cfi_def_cfa_offset 8
  75              	 .cfi_offset 7,-8
  76              	 .cfi_offset 14,-4
  77 0002 82B0     	 sub sp,sp,#8
  78              	.LCFI4:
  79              	 .cfi_def_cfa_offset 16
  80 0004 00AF     	 add r7,sp,#0
  81              	.LCFI5:
  82              	 .cfi_def_cfa_register 7
  83 0006 7860     	 str r0,[r7,#4]
2003:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2004:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
  84              	 .loc 1 2004 16
  85 0008 7B68     	 ldr r3,[r7,#4]
  86 000a 0122     	 movs r2,#1
  87 000c 1A61     	 str r2,[r3,#16]
2005:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
  88              	 .loc 1 2005 1
  89 000e C046     	 nop
  90 0010 BD46     	 mov sp,r7
  91 0012 02B0     	 add sp,sp,#8
  92              	 
  93 0014 80BD     	 pop {r7,pc}
  94              	 .cfi_endproc
  95              	.LFE66:
  97              	 .section .text.XMC_CCU8_SLICE_SetDitherCompareValue,"ax",%progbits
  98              	 .align 1
  99              	 .syntax unified
 100              	 .code 16
 101              	 .thumb_func
 102              	 .fpu softvfp
 104              	XMC_CCU8_SLICE_SetDitherCompareValue:
 105              	.LFB81:
2006:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2007:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2008:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2009:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2010:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2011:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2012:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2013:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Resets the timer count to zero, by setting CC8yTCCLR.TCC bit.\n\n
2014:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * A timer which has been stopped can still retain the last counted value.
2015:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * After invoking this API the timer value will be cleared.
2016:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2017:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2018:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
2019:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2020:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
2021:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2022:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2023:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
2024:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2025:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2026:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2027:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2028:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2029:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2030:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2031:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2032:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Stops and resets the timer count to zero, by setting CC8yTCCLR.TCC and CC8yTCCLR.TRBC bit.\n\n
2033:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2034:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2035:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_StartTimer().
2036:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2037:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_StopClearTimer(XMC_CCU8_SLICE_t *const slice)
2038:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2039:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_StopClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2040:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   slice->TCCLR = CCU8_CC8_TCCLR_TRBC_Msk | CCU8_CC8_TCCLR_TCC_Msk;
2041:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2042:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2043:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2044:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2045:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2046:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    ::XMC_CCU8_SLICE_MODE_t returns XMC_CCU8_SLICE_MODE_COMPARE if the slice is operating in comp
2047:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                          returns XMC_CCU8_SLICE_MODE_CAPTURE if the slice is operating in captur
2048:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2049:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2050:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
2051:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * CC8yTC.CMOD bit.\n\n
2052:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Ensure that before invoking this API the CCU8 slice should be configured otherwise the output of
2053:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * invalid.
2054:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2055:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2056:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  None.
2057:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2058:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_MODE_t XMC_CCU8_SLICE_GetSliceMode(const XMC_CCU8_SLICE_t *const sli
2059:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2060:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2061:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return((XMC_CCU8_SLICE_MODE_t)(((slice->TC) & CCU8_CC8_TC_CMOD_Msk) >> CCU8_CC8_TC_CMOD_Pos));
2062:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2063:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2064:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2065:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2066:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
2067:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2068:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2069:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2070:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2071:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC8yTC.TSSM b
2072:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
2073:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
2074:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * reaching the terminal count.
2075:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2076:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2077:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerRepeatMode().
2078:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2079:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerRepeatMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_RE
2080:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2081:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2082:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2083:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <br>
2084:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
2085:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
2086:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2087:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2088:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC8yTC.T
2089:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The timer will count upto the terminal count as specified in the period register and stops immed
2090:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
2091:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * all over again after reaching the terminal count.
2092:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2093:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2094:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerRepeatMode().
2095:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2096:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t XMC_CCU8_SLICE_GetTimerRepeatMode(
2097:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                                                                     const XMC_CCU8_
2098:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2099:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice
2100:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TSSM_Msk) >> CCU8_CC8_TC_T
2101:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2102:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2103:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2104:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
2105:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2106:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2107:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2108:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2109:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC8yTC.
2110:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
2111:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
2112:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
2113:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
2114:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * greater than the compare value.
2115:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2116:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2117:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerCountingMode().
2118:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2119:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCountingMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_
2120:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2121:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2122:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2123:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <br>
2124:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  ::XMC_CCU8_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
2125:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                                     returns XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA if center aligned
2126:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2127:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2128:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC8yTC.TCM bit.\
2129:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2130:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2131:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCountingMode().
2132:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2133:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE XMC_CCU8_SLICE_TIMER_COUNT_MODE_t XMC_CCU8_SLICE_GetTimerCountingMode(
2134:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 		                                                                            const XMC_CCU8_SLICE_
2135:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2136:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
2137:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return((XMC_CCU8_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU8_CC8_TC_TCM_Msk) >> CCU8_CC8_TC_TCM
2138:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2139:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2140:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2141:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param period_val Timer period value
2142:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *        Range: [0x0 to 0xFFFF]
2143:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2144:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2145:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2146:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2147:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Programs the timer period, by writing CC8yPRS register.\n\n
2148:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
2149:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
2150:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
2151:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual period register.
2152:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2153:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2154:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerPeriodMatch().
2155:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2156:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val);
2157:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2158:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2159:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2160:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2161:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *   uint16_t returns the current timer period value
2162:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2163:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2164:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2165:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Retrieves the timer period value currently effective, by reading CC8yPR register.\n\n
2166:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
2167:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2168:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Note:</b><br>
2169:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
2170:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
2171:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerPeri
2172:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
2173:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2174:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2175:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerPeriodMatch().
2176:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2177:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerPeriodMatch(const XMC_CCU8_SLICE_t *const slice)
2178:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2179:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slic
2180:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return((uint16_t) slice->PR);
2181:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2182:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2183:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2184:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param channel Select the compare channel to which the \b compare_val has to programmed.
2185:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param compare_val Timer compare value
2186:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2187:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2188:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2189:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2190:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Programs the timer compare value, by writing CC8yCR1S and CC8yCR2S registers.\n\n
2191:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  The PWM duty cycle is determined by this value.\n\n
2192:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2193:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with
2194:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
2195:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * a period match transfers the value from the shadow register to the actual compare register.
2196:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2197:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2198:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2199:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2200:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
2201:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                          const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
2202:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                          const uint16_t compare_val);
2203:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2204:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2205:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2206:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param compare_val Timer compare value
2207:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2208:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2209:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2210:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2211:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Programs the timer compare1 value, by writing CC8yCR1S register.\n\n
2212:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
2213:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2214:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
2215:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
2216:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * the shadow register to the actual compare register.
2217:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2218:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2219:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2220:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2221:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel1(XMC_CCU8_SLICE_t *const slice, con
2222:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2223:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel1:Invalid Slice Pointer", XMC_CCU8_IsValidS
2224:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   slice->CR1S = (uint32_t) compare_val;
2225:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2226:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2227:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2228:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2229:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param compare_val Timer compare value
2230:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2231:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2232:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2233:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2234:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Programs the timer compare2 value, by writing CC8yCR2S register.\n\n
2235:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The PWM duty cycle is determined by this value.\n\n
2236:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
2237:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * the the period/compare value by calling XMC_CCU8_EnableShadowTransfer() with appropriate mask.
2238:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * If shadow transfer is enabled and the timer is running, a period match transfers the value from
2239:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * the shadow register to the actual compare register.
2240:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2241:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2242:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_EnableShadowTransfer().
2243:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2244:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerCompareMatchChannel2(XMC_CCU8_SLICE_t *const slice, con
2245:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2246:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatchChannel2:Invalid Slice Pointer", XMC_CCU8_IsValidS
2247:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   slice->CR2S = (uint32_t) compare_val;
2248:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2249:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2250:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2251:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2252:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param channel Select the compare channel to retrieve from.
2253:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2254:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *   uint16_t returns the current timer compare value
2255:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2256:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2257:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2258:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Retrieves the timer compare value currently effective, by reading CC8yCR1S and CC8yCR2S register
2259:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
2260:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2261:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Note:</b><br>
2262:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The XMC_CCU8_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
2263:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
2264:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU8_SLICE_GetTimerComp
2265:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * would not reflect the new values until the shadow transfer completes.
2266:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2267:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2268:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerCompareMatch().
2269:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2270:..//Libraries/XMCLib/inc/xmc_ccu8.h **** uint16_t XMC_CCU8_SLICE_GetTimerCompareMatch(const XMC_CCU8_SLICE_t *const slice,
2271:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                              const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel);
2272:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2273:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2274:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param module Constant pointer to CCU8 module
2275:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
2276:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                            Use ::XMC_CCU8_SHADOW_TRANSFER_t enum items to create a mask of choic
2277:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                            using a bit wise OR operation.
2278:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2279:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2280:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2281:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2282:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
2283:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * the GCSS register.\n\n
2284:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
2285:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * shadow transfer trigger after the API is called.
2286:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2287:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Any call to XMC_CCU8_SLICE_SetTimerPeriodMatch()<BR>  XMC_CCU8_SLICE_SetTimerCompareMatch()<BR> 
2288:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_XMC_CCU8_SLICE_SetPrescaler()<BR> XMC_CCU8_SLICE_CompareInit()<BR> XMC_CCU8_SLICE_CaptureIni
2289:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * must be succeeded by this API.
2290:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2291:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2292:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  None.
2293:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2294:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t 
2295:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2296:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module)
2297:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;  
2298:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2299:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2300:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2301:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2302:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2303:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *   uint16_t returns the current timer value
2304:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *            Range: [0x0 to 0xFFFF]
2305:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2306:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2307:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Retrieves the latest timer value, from CC8yTIMER register.\n\n
2308:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2309:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2310:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetTimerValue().
2311:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2312:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerValue(const XMC_CCU8_SLICE_t *const slice)
2313:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2314:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2315:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   return((uint16_t) slice->TIMER);
2316:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2317:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2318:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2319:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
2320:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                  Range: [0x0 to 0xFFFF]
2321:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2322:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2323:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2324:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2325:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Loads a new timer value, by setting CC8yTIMER register.\n\n
2326:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * 
2327:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Note:</b><br>
2328:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  Request to load is ignored if the timer is running.
2329:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2330:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2331:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_GetTimerValue().
2332:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2333:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t tim
2334:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2335:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
2336:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   slice->TIMER = (uint32_t) timer_val;
2337:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2338:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2339:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2340:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param period_dither Boolean instruction on dithering of period match
2341:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param duty_dither Boolean instruction on dithering of compare match
2342:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param spread Dither compare value
2343:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2344:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2345:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2346:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2347:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC8yTC.DITHE and CC8yDITS bits
2348:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
2349:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
2350:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
2351:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
2352:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
2353:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * XMC_CCU8_SLICE_SetDitherCompareValue().
2354:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2355:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Note:</b><br>
2356:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * After this API call, XMC_CCU8_EnableShadowTransfer() has to be called with appropriate mask
2357:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * to transfer the dither value.
2358:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2359:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2360:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_DisableDithering().
2361:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2362:..//Libraries/XMCLib/inc/xmc_ccu8.h **** void XMC_CCU8_SLICE_EnableDithering(XMC_CCU8_SLICE_t *const slice,
2363:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                     const bool period_dither,
2364:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                     const bool duty_dither,
2365:..//Libraries/XMCLib/inc/xmc_ccu8.h ****                                     const uint8_t spread);
2366:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2367:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2368:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2369:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2370:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2371:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2372:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2373:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC8yTC.DITHE bits.\n\n
2374:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This disables the Dither mode that was set in XMC_CCU8_SLICE_EnableDithering().
2375:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This API will not clear the dither compare value.
2376:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2377:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2378:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2379:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2380:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableDithering(XMC_CCU8_SLICE_t *const slice)
2381:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2382:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
2383:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_DITHE_Msk);
2384:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2385:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2386:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2387:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2388:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2389:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2390:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2391:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2392:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Enables the floating prescaler, by setting CC8yTC.FPE bit.\n\n
2393:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
2394:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
2395:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
2396:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2397:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Related APIs:</b><br>
2398:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_SetFloatingPrescalerCompareValue()<BR>  XMC_CCU8_SLICE_DisableFloatingPrescaler(
2399:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_XMC_CCU8_SLICE_SetPrescaler().
2400:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2401:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_EnableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2402:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2403:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
2404:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   slice->TC |= (uint32_t) CCU8_CC8_TC_FPE_Msk;
2405:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2406:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2407:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2408:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2409:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2410:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2411:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2412:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2413:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Disables the floating prescaler, by clearing CC8yTC.FPE bit.\n\n
2414:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This would return the prescaler to the normal mode.
2415:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * The prescaler that would be applied is the value present in CC8yPSC.
2416:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2417:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2418:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableFloatingPrescaler().
2419:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2420:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_DisableFloatingPrescaler(XMC_CCU8_SLICE_t *const slice)
2421:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
2422:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
2423:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_FPE_Msk);
2424:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
2425:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2426:..//Libraries/XMCLib/inc/xmc_ccu8.h **** /**
2427:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param slice Constant pointer to CC8 Slice
2428:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @param comp_val Dither compare value
2429:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *                 Range: [0x0 to 0xF]
2430:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * @return <BR>
2431:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *    None<BR>
2432:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2433:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * \par<b>Description:</b><br>
2434:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * Sets the dither spread/compare value, by setting CC8yDITS.DCVS bits.\n\n
2435:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
2436:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
2437:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU8_EnableShadowTransfer()
2438:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  * called with appropriate mask.
2439:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *
2440:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   * \par<b>Related APIs:</b><br>
2441:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  *  XMC_CCU8_SLICE_EnableDithering().
2442:..//Libraries/XMCLib/inc/xmc_ccu8.h ****  */
2443:..//Libraries/XMCLib/inc/xmc_ccu8.h **** __STATIC_INLINE void XMC_CCU8_SLICE_SetDitherCompareValue(XMC_CCU8_SLICE_t *const slice, const uint
2444:..//Libraries/XMCLib/inc/xmc_ccu8.h **** {
 106              	 .loc 1 2444 1
 107              	 .cfi_startproc
 108              	 
 109              	 
 110 0000 80B5     	 push {r7,lr}
 111              	.LCFI6:
 112              	 .cfi_def_cfa_offset 8
 113              	 .cfi_offset 7,-8
 114              	 .cfi_offset 14,-4
 115 0002 82B0     	 sub sp,sp,#8
 116              	.LCFI7:
 117              	 .cfi_def_cfa_offset 16
 118 0004 00AF     	 add r7,sp,#0
 119              	.LCFI8:
 120              	 .cfi_def_cfa_register 7
 121 0006 7860     	 str r0,[r7,#4]
 122 0008 0A00     	 movs r2,r1
 123 000a FB1C     	 adds r3,r7,#3
 124 000c 1A70     	 strb r2,[r3]
2445:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sl
2446:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Dither compare value", (comp_val <= 15U)
2447:..//Libraries/XMCLib/inc/xmc_ccu8.h **** 
2448:..//Libraries/XMCLib/inc/xmc_ccu8.h ****   slice->DITS = comp_val;
 125              	 .loc 1 2448 15
 126 000e FB1C     	 adds r3,r7,#3
 127 0010 1A78     	 ldrb r2,[r3]
 128 0012 7B68     	 ldr r3,[r7,#4]
 129 0014 1A62     	 str r2,[r3,#32]
2449:..//Libraries/XMCLib/inc/xmc_ccu8.h **** }
 130              	 .loc 1 2449 1
 131 0016 C046     	 nop
 132 0018 BD46     	 mov sp,r7
 133 001a 02B0     	 add sp,sp,#8
 134              	 
 135 001c 80BD     	 pop {r7,pc}
 136              	 .cfi_endproc
 137              	.LFE81:
 139              	 .section .text.XMC_CCU8_lGateClock,"ax",%progbits
 140              	 .align 1
 141              	 .syntax unified
 142              	 .code 16
 143              	 .thumb_func
 144              	 .fpu softvfp
 146              	XMC_CCU8_lGateClock:
 147              	.LFB115:
 148              	 .file 2 "../Libraries/XMCLib/src/xmc_ccu8.c"
   1:../Libraries/XMCLib/src/xmc_ccu8.c **** /**
   2:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @file xmc_ccu8.c
   3:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @date 2017-04-27
   4:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
   5:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_ccu8.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
   9:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_ccu8.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_ccu8.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_ccu8.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 
  18:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_ccu8.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 
  21:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_ccu8.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_ccu8.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_ccu8.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_ccu8.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_ccu8.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_ccu8.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_ccu8.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_ccu8.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_ccu8.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_ccu8.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  36:../Libraries/XMCLib/src/xmc_ccu8.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_ccu8.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  39:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  42:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Added XMC_CCU8_SLICE_LoadSelector() API, to select which compare register value has to be 
  45:../Libraries/XMCLib/src/xmc_ccu8.c ****  *       during external load event. 
  46:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  47:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-07-24:
  48:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  49:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  50:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-08-17:
  51:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_CHC_CONFIG_MASK is not applicable to XMC14 devices. <br>
  52:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Start of prescaler XMC_CCU8_StartPrescaler() is invoked in XMC_CCU8_Init() API. <br>
  53:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - In XMC_CCU8_SLICE_CompareInit(), CHC register is updated according to the device. <br>
  54:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - Bug fix XMC_CCU8_SLICE_ConfigureEvent() during the level setting for XMC14 devices. <br>
  55:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_EnableShadowTransfer() definition is removed, since the API is made as inline. <b
  56:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 
  57:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2015-10-07:
  58:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_GetEvent() is made as inline.
  59:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - DOC updates for the newly added APIs.
  60:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  61:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2017-02-25:
  62:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_lAssertReset(), XMC_CCU8_lDeassertReset(), XMC_CCU8_lGateClock() and XMC_CCU8_lUn
  63:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  64:../Libraries/XMCLib/src/xmc_ccu8.c ****  * 2017-04-27:
  65:../Libraries/XMCLib/src/xmc_ccu8.c ****  *     - XMC_CCU8_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU8_SLICE_PRESCALER_t
  66:../Libraries/XMCLib/src/xmc_ccu8.c ****  *
  67:../Libraries/XMCLib/src/xmc_ccu8.c ****  * @endcond
  68:../Libraries/XMCLib/src/xmc_ccu8.c ****  */
  69:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
  70:../Libraries/XMCLib/src/xmc_ccu8.c ****  * HEADER FILES
  71:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
  72:../Libraries/XMCLib/src/xmc_ccu8.c **** #include "xmc_ccu8.h"
  73:../Libraries/XMCLib/src/xmc_ccu8.c **** 
  74:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU80)
  75:../Libraries/XMCLib/src/xmc_ccu8.c **** #include "xmc_scu.h"
  76:../Libraries/XMCLib/src/xmc_ccu8.c **** 
  77:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
  78:../Libraries/XMCLib/src/xmc_ccu8.c ****  * MACROS
  79:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
  80:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_NUM_SLICES_PER_MODULE          (4U)
  81:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_DITHER_PERIOD_MASK       (1U)
  82:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_DITHER_DUTYCYCLE_MASK    (2U)
  83:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK   (3U)
  84:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK  (1U)
  85:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK (3U)
  86:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices */
  87:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK  CCU8_CC8_INS1_EV0IS_Msk
  88:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
  89:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK  CCU8_CC8_INS_EV0IS_Msk
  90:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
  91:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GIDLC_CLOCK_MASK               (15U)
  92:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE0_MASK               (1U)
  93:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE1_MASK               (16U)
  94:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE2_MASK               (256U)
  95:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_GCSS_SLICE3_MASK               (4096U)
  96:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_DEAD_TIME_CONFIG_MASK    (63U)
  97:../Libraries/XMCLib/src/xmc_ccu8.c **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
  98:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHC_CONFIG_MASK          (20U)
  99:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 100:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 101:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_DTC_DIV(div) \
 102:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((div == XMC_CCU8_SLICE_DTC_DIV_1) || \
 103:../Libraries/XMCLib/src/xmc_ccu8.c ****      (div == XMC_CCU8_SLICE_DTC_DIV_2) || \
 104:../Libraries/XMCLib/src/xmc_ccu8.c ****      (div == XMC_CCU8_SLICE_DTC_DIV_4) || \
 105:../Libraries/XMCLib/src/xmc_ccu8.c ****      (div == XMC_CCU8_SLICE_DTC_DIV_8))
 106:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 107:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_CLOCK(clock) \
 108:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((clock == XMC_CCU8_CLOCK_SCU)        || \
 109:../Libraries/XMCLib/src/xmc_ccu8.c ****      (clock == XMC_CCU8_CLOCK_EXTERNAL_A) || \
 110:../Libraries/XMCLib/src/xmc_ccu8.c ****      (clock == XMC_CCU8_CLOCK_EXTERNAL_B) || \
 111:../Libraries/XMCLib/src/xmc_ccu8.c ****      (clock == XMC_CCU8_CLOCK_EXTERNAL_C))
 112:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 113:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_OUTPUT(out) \
 114:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((out == XMC_CCU8_SLICE_OUTPUT_0) || \
 115:../Libraries/XMCLib/src/xmc_ccu8.c ****      (out == XMC_CCU8_SLICE_OUTPUT_1) || \
 116:../Libraries/XMCLib/src/xmc_ccu8.c ****      (out == XMC_CCU8_SLICE_OUTPUT_2) || \
 117:../Libraries/XMCLib/src/xmc_ccu8.c ****      (out == XMC_CCU8_SLICE_OUTPUT_3))
 118:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 119:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_END_MODE(end_mode) \
 120:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((end_mode == XMC_CCU8_SLICE_END_MODE_TIMER_STOP) || \
 121:../Libraries/XMCLib/src/xmc_ccu8.c ****      (end_mode == XMC_CCU8_SLICE_END_MODE_TIMER_CLEAR) || \
 122:../Libraries/XMCLib/src/xmc_ccu8.c ****      (end_mode == XMC_CCU8_SLICE_END_MODE_TIMER_STOP_CLEAR))
 123:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 124:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_EVENT_ID(event_id) \
 125:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((event_id == XMC_CCU8_SLICE_EVENT_NONE)|| \
 126:../Libraries/XMCLib/src/xmc_ccu8.c ****      (event_id == XMC_CCU8_SLICE_EVENT_0)   || \
 127:../Libraries/XMCLib/src/xmc_ccu8.c ****      (event_id == XMC_CCU8_SLICE_EVENT_1)   || \
 128:../Libraries/XMCLib/src/xmc_ccu8.c ****      (event_id == XMC_CCU8_SLICE_EVENT_2))
 129:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 130:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(edge) \
 131:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE)        || \
 132:../Libraries/XMCLib/src/xmc_ccu8.c ****      (edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE) || \
 133:../Libraries/XMCLib/src/xmc_ccu8.c ****      (edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE)|| \
 134:../Libraries/XMCLib/src/xmc_ccu8.c ****      (edge == XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE))
 135:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 136:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_EVENT_FILTER(cycles) \
 137:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((cycles == XMC_CCU8_SLICE_EVENT_FILTER_DISABLED) || \
 138:../Libraries/XMCLib/src/xmc_ccu8.c ****      (cycles == XMC_CCU8_SLICE_EVENT_FILTER_3_CYCLES) || \
 139:../Libraries/XMCLib/src/xmc_ccu8.c ****      (cycles == XMC_CCU8_SLICE_EVENT_FILTER_5_CYCLES) || \
 140:../Libraries/XMCLib/src/xmc_ccu8.c ****      (cycles == XMC_CCU8_SLICE_EVENT_FILTER_7_CYCLES))
 141:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 142:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_CAP_TIMER_CLEAR_MODE(mode) \
 143:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_NEVER)   || \
 144:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_HIGH)|| \
 145:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_CAP_LOW) || \
 146:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mode == XMC_CCU8_SLICE_TIMER_CLEAR_MODE_ALWAYS))
 147:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 148:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action) \
 149:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((mcs_action == XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR)      || \
 150:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mcs_action == XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP) || \
 151:../Libraries/XMCLib/src/xmc_ccu8.c ****      (mcs_action == XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT))
 152:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 153:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_SR_ID(id) \
 154:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((id == XMC_CCU8_SLICE_SR_ID_0) || \
 155:../Libraries/XMCLib/src/xmc_ccu8.c ****      (id == XMC_CCU8_SLICE_SR_ID_1) || \
 156:../Libraries/XMCLib/src/xmc_ccu8.c ****      (id == XMC_CCU8_SLICE_SR_ID_2) || \
 157:../Libraries/XMCLib/src/xmc_ccu8.c ****      (id == XMC_CCU8_SLICE_SR_ID_3))
 158:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 159:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel) \
 160:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_NONE) || \
 161:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_1)    || \
 162:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_2)    || \
 163:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2))
 164:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 165:../Libraries/XMCLib/src/xmc_ccu8.c **** #if((UC_SERIES == XMC13) || (UC_SERIES == XMC14))
 166:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel) \
 167:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1)       || \
 168:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_2)       || \
 169:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2) || \
 170:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1_OR_2))
 171:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 172:../Libraries/XMCLib/src/xmc_ccu8.c **** #define XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel) \
 173:../Libraries/XMCLib/src/xmc_ccu8.c ****     ((channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1)       || \
 174:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_2)       || \
 175:../Libraries/XMCLib/src/xmc_ccu8.c ****      (channel == XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2))
 176:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 177:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 178:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
 179:../Libraries/XMCLib/src/xmc_ccu8.c ****  * LOCAL ROUTINES
 180:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
 181:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 182:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lAssertReset(const XMC_CCU8_MODULE_t *const module)
 183:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 184:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (module == CCU80)
 185:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 186:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 187:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 188:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 189:../Libraries/XMCLib/src/xmc_ccu8.c ****   else if (module == CCU81)
 190:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 191:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 192:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 193:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 194:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 195:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 196:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
 197:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 198:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 199:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 200:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
 201:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 202:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (module == CCU80)
 203:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 204:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 205:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 206:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 207:../Libraries/XMCLib/src/xmc_ccu8.c ****   else if (module == CCU81)
 208:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 209:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 210:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 211:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 212:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 213:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 214:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
 215:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 216:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 217:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 218:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 219:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CLOCK_GATING_SUPPORTED)
 220:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lGateClock(XMC_CCU8_MODULE_t *const module)
 221:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 149              	 .loc 2 221 1
 150              	 .cfi_startproc
 151              	 
 152              	 
 153 0000 80B5     	 push {r7,lr}
 154              	.LCFI9:
 155              	 .cfi_def_cfa_offset 8
 156              	 .cfi_offset 7,-8
 157              	 .cfi_offset 14,-4
 158 0002 82B0     	 sub sp,sp,#8
 159              	.LCFI10:
 160              	 .cfi_def_cfa_offset 16
 161 0004 00AF     	 add r7,sp,#0
 162              	.LCFI11:
 163              	 .cfi_def_cfa_register 7
 164 0006 7860     	 str r0,[r7,#4]
 222:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (module == CCU80)
 165              	 .loc 2 222 6
 166 0008 7A68     	 ldr r2,[r7,#4]
 167 000a A023     	 movs r3,#160
 168 000c DB05     	 lsls r3,r3,#23
 169 000e 9A42     	 cmp r2,r3
 170 0010 02D1     	 bne .L6
 223:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 224:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 171              	 .loc 2 224 5
 172 0012 0220     	 movs r0,#2
 173 0014 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 174              	.L6:
 225:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 226:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 227:../Libraries/XMCLib/src/xmc_ccu8.c ****   else if (module == CCU81)
 228:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 229:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 230:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 231:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 232:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 233:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 234:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
 235:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 236:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 175              	 .loc 2 236 1
 176 0018 C046     	 nop
 177 001a BD46     	 mov sp,r7
 178 001c 02B0     	 add sp,sp,#8
 179              	 
 180 001e 80BD     	 pop {r7,pc}
 181              	 .cfi_endproc
 182              	.LFE115:
 184              	 .section .text.XMC_CCU8_lUngateClock,"ax",%progbits
 185              	 .align 1
 186              	 .syntax unified
 187              	 .code 16
 188              	 .thumb_func
 189              	 .fpu softvfp
 191              	XMC_CCU8_lUngateClock:
 192              	.LFB116:
 237:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 238:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
 239:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 193              	 .loc 2 239 1
 194              	 .cfi_startproc
 195              	 
 196              	 
 197 0000 80B5     	 push {r7,lr}
 198              	.LCFI12:
 199              	 .cfi_def_cfa_offset 8
 200              	 .cfi_offset 7,-8
 201              	 .cfi_offset 14,-4
 202 0002 82B0     	 sub sp,sp,#8
 203              	.LCFI13:
 204              	 .cfi_def_cfa_offset 16
 205 0004 00AF     	 add r7,sp,#0
 206              	.LCFI14:
 207              	 .cfi_def_cfa_register 7
 208 0006 7860     	 str r0,[r7,#4]
 240:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (module == CCU80)
 209              	 .loc 2 240 6
 210 0008 7A68     	 ldr r2,[r7,#4]
 211 000a A023     	 movs r3,#160
 212 000c DB05     	 lsls r3,r3,#23
 213 000e 9A42     	 cmp r2,r3
 214 0010 02D1     	 bne .L9
 241:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 242:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 215              	 .loc 2 242 5
 216 0012 0220     	 movs r0,#2
 217 0014 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 218              	.L9:
 243:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 244:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU81)
 245:../Libraries/XMCLib/src/xmc_ccu8.c ****   else if (module == CCU81)
 246:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 247:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 248:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 249:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 250:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 251:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 252:../Libraries/XMCLib/src/xmc_ccu8.c ****     XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
 253:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 254:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 219              	 .loc 2 254 1
 220 0018 C046     	 nop
 221 001a BD46     	 mov sp,r7
 222 001c 02B0     	 add sp,sp,#8
 223              	 
 224 001e 80BD     	 pop {r7,pc}
 225              	 .cfi_endproc
 226              	.LFE116:
 228              	 .section .text.XMC_CCU8_EnableModule,"ax",%progbits
 229              	 .align 1
 230              	 .global XMC_CCU8_EnableModule
 231              	 .syntax unified
 232              	 .code 16
 233              	 .thumb_func
 234              	 .fpu softvfp
 236              	XMC_CCU8_EnableModule:
 237              	.LFB117:
 255:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 256:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 257:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined (XMC_ASSERT_ENABLE)
 258:../Libraries/XMCLib/src/xmc_ccu8.c **** __STATIC_INLINE bool XMC_CCU8_SLICE_IsInputvalid(XMC_CCU8_SLICE_INPUT_t input)
 259:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 260:../Libraries/XMCLib/src/xmc_ccu8.c **** #if (UC_SERIES == XMC14)
 261:../Libraries/XMCLib/src/xmc_ccu8.c ****   return (input < 48U);
 262:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 263:../Libraries/XMCLib/src/xmc_ccu8.c ****   return (input < 16U);
 264:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 265:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 266:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 267:../Libraries/XMCLib/src/xmc_ccu8.c **** /**************************************************************************************************
 268:../Libraries/XMCLib/src/xmc_ccu8.c ****  * API IMPLEMENTATION
 269:../Libraries/XMCLib/src/xmc_ccu8.c ****  **************************************************************************************************
 270:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 271:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to set the CCU8 module as active and enable the clock  */
 272:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
 273:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 238              	 .loc 2 273 1
 239              	 .cfi_startproc
 240              	 
 241              	 
 242 0000 80B5     	 push {r7,lr}
 243              	.LCFI15:
 244              	 .cfi_def_cfa_offset 8
 245              	 .cfi_offset 7,-8
 246              	 .cfi_offset 14,-4
 247 0002 82B0     	 sub sp,sp,#8
 248              	.LCFI16:
 249              	 .cfi_def_cfa_offset 16
 250 0004 00AF     	 add r7,sp,#0
 251              	.LCFI17:
 252              	 .cfi_def_cfa_register 7
 253 0006 7860     	 str r0,[r7,#4]
 274:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 275:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 276:../Libraries/XMCLib/src/xmc_ccu8.c **** #if (UC_FAMILY == XMC4)
 277:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable CCU8 module clock */
 278:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 279:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 280:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 281:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CLOCK_GATING_SUPPORTED)
 282:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lUngateClock(module);
 254              	 .loc 2 282 3
 255 0008 7B68     	 ldr r3,[r7,#4]
 256 000a 1800     	 movs r0,r3
 257 000c FFF7FEFF 	 bl XMC_CCU8_lUngateClock
 283:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 284:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 285:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 286:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lDeassertReset(module);
 287:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 288:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 258              	 .loc 2 288 1
 259 0010 C046     	 nop
 260 0012 BD46     	 mov sp,r7
 261 0014 02B0     	 add sp,sp,#8
 262              	 
 263 0016 80BD     	 pop {r7,pc}
 264              	 .cfi_endproc
 265              	.LFE117:
 267              	 .section .text.XMC_CCU8_DisableModule,"ax",%progbits
 268              	 .align 1
 269              	 .global XMC_CCU8_DisableModule
 270              	 .syntax unified
 271              	 .code 16
 272              	 .thumb_func
 273              	 .fpu softvfp
 275              	XMC_CCU8_DisableModule:
 276              	.LFB118:
 289:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 290:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to set the CCU8 module as idle and disable the clock  */
 291:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_DisableModule(XMC_CCU8_MODULE_t *const module)
 292:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 277              	 .loc 2 292 1
 278              	 .cfi_startproc
 279              	 
 280              	 
 281 0000 80B5     	 push {r7,lr}
 282              	.LCFI18:
 283              	 .cfi_def_cfa_offset 8
 284              	 .cfi_offset 7,-8
 285              	 .cfi_offset 14,-4
 286 0002 82B0     	 sub sp,sp,#8
 287              	.LCFI19:
 288              	 .cfi_def_cfa_offset 16
 289 0004 00AF     	 add r7,sp,#0
 290              	.LCFI20:
 291              	 .cfi_def_cfa_register 7
 292 0006 7860     	 str r0,[r7,#4]
 293:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_DisableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 294:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 295:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 296:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lAssertReset(module);
 297:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 298:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 299:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CLOCK_GATING_SUPPORTED)
 300:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_lGateClock(module);
 293              	 .loc 2 300 3
 294 0008 7B68     	 ldr r3,[r7,#4]
 295 000a 1800     	 movs r0,r3
 296 000c FFF7FEFF 	 bl XMC_CCU8_lGateClock
 301:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 302:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 297              	 .loc 2 302 1
 298 0010 C046     	 nop
 299 0012 BD46     	 mov sp,r7
 300 0014 02B0     	 add sp,sp,#8
 301              	 
 302 0016 80BD     	 pop {r7,pc}
 303              	 .cfi_endproc
 304              	.LFE118:
 306              	 .section .text.XMC_CCU8_Init,"ax",%progbits
 307              	 .align 1
 308              	 .global XMC_CCU8_Init
 309              	 .syntax unified
 310              	 .code 16
 311              	 .thumb_func
 312              	 .fpu softvfp
 314              	XMC_CCU8_Init:
 315              	.LFB119:
 303:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 304:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to initialize CCU8 global resources  */
 305:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
 306:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 316              	 .loc 2 306 1
 317              	 .cfi_startproc
 318              	 
 319              	 
 320 0000 80B5     	 push {r7,lr}
 321              	.LCFI21:
 322              	 .cfi_def_cfa_offset 8
 323              	 .cfi_offset 7,-8
 324              	 .cfi_offset 14,-4
 325 0002 84B0     	 sub sp,sp,#16
 326              	.LCFI22:
 327              	 .cfi_def_cfa_offset 24
 328 0004 00AF     	 add r7,sp,#0
 329              	.LCFI23:
 330              	 .cfi_def_cfa_register 7
 331 0006 7860     	 str r0,[r7,#4]
 332 0008 0A00     	 movs r2,r1
 333 000a FB1C     	 adds r3,r7,#3
 334 000c 1A70     	 strb r2,[r3]
 307:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t gctrl;
 308:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 309:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 310:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));
 311:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 312:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable CCU8 module */
 313:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_EnableModule(module);
 335              	 .loc 2 313 3
 336 000e 7B68     	 ldr r3,[r7,#4]
 337 0010 1800     	 movs r0,r3
 338 0012 FFF7FEFF 	 bl XMC_CCU8_EnableModule
 314:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Start the prescaler */
 315:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_StartPrescaler(module);
 339              	 .loc 2 315 3
 340 0016 7B68     	 ldr r3,[r7,#4]
 341 0018 1800     	 movs r0,r3
 342 001a FFF7FEFF 	 bl XMC_CCU8_StartPrescaler
 316:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 317:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl = module->GCTRL;
 343              	 .loc 2 317 9
 344 001e 7B68     	 ldr r3,[r7,#4]
 345 0020 1B68     	 ldr r3,[r3]
 346 0022 FB60     	 str r3,[r7,#12]
 318:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 347              	 .loc 2 318 9
 348 0024 FB68     	 ldr r3,[r7,#12]
 349 0026 084A     	 ldr r2,.L13
 350 0028 1340     	 ands r3,r2
 351 002a FB60     	 str r3,[r7,#12]
 319:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 352              	 .loc 2 319 12
 353 002c FB1C     	 adds r3,r7,#3
 354 002e 1B78     	 ldrb r3,[r3]
 355              	 .loc 2 319 33
 356 0030 9B03     	 lsls r3,r3,#14
 357              	 .loc 2 319 9
 358 0032 FA68     	 ldr r2,[r7,#12]
 359 0034 1343     	 orrs r3,r2
 360 0036 FB60     	 str r3,[r7,#12]
 320:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 321:../Libraries/XMCLib/src/xmc_ccu8.c ****   module->GCTRL = gctrl;
 361              	 .loc 2 321 17
 362 0038 7B68     	 ldr r3,[r7,#4]
 363 003a FA68     	 ldr r2,[r7,#12]
 364 003c 1A60     	 str r2,[r3]
 322:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 365              	 .loc 2 322 1
 366 003e C046     	 nop
 367 0040 BD46     	 mov sp,r7
 368 0042 04B0     	 add sp,sp,#16
 369              	 
 370 0044 80BD     	 pop {r7,pc}
 371              	.L14:
 372 0046 C046     	 .align 2
 373              	.L13:
 374 0048 FF3FFFFF 	 .word -49153
 375              	 .cfi_endproc
 376              	.LFE119:
 378              	 .section .text.XMC_CCU8_SetModuleClock,"ax",%progbits
 379              	 .align 1
 380              	 .global XMC_CCU8_SetModuleClock
 381              	 .syntax unified
 382              	 .code 16
 383              	 .thumb_func
 384              	 .fpu softvfp
 386              	XMC_CCU8_SetModuleClock:
 387              	.LFB120:
 323:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 324:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to select CCU8 module clock */
 325:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock)
 326:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 388              	 .loc 2 326 1
 389              	 .cfi_startproc
 390              	 
 391              	 
 392 0000 80B5     	 push {r7,lr}
 393              	.LCFI24:
 394              	 .cfi_def_cfa_offset 8
 395              	 .cfi_offset 7,-8
 396              	 .cfi_offset 14,-4
 397 0002 84B0     	 sub sp,sp,#16
 398              	.LCFI25:
 399              	 .cfi_def_cfa_offset 24
 400 0004 00AF     	 add r7,sp,#0
 401              	.LCFI26:
 402              	 .cfi_def_cfa_register 7
 403 0006 7860     	 str r0,[r7,#4]
 404 0008 0A00     	 movs r2,r1
 405 000a FB1C     	 adds r3,r7,#3
 406 000c 1A70     	 strb r2,[r3]
 327:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t gctrl;
 328:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 329:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
 330:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Clock", XMC_CCU8_SLICE_CHECK_CLOCK(clock));
 331:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 332:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl = module->GCTRL;
 407              	 .loc 2 332 9
 408 000e 7B68     	 ldr r3,[r7,#4]
 409 0010 1B68     	 ldr r3,[r3]
 410 0012 FB60     	 str r3,[r7,#12]
 333:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl &= ~((uint32_t) CCU8_GCTRL_PCIS_Msk);
 411              	 .loc 2 333 9
 412 0014 FB68     	 ldr r3,[r7,#12]
 413 0016 3022     	 movs r2,#48
 414 0018 9343     	 bics r3,r2
 415 001a FB60     	 str r3,[r7,#12]
 334:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl |= ((uint32_t) clock) << CCU8_GCTRL_PCIS_Pos;
 416              	 .loc 2 334 13
 417 001c FB1C     	 adds r3,r7,#3
 418 001e 1B78     	 ldrb r3,[r3]
 419              	 .loc 2 334 31
 420 0020 1B01     	 lsls r3,r3,#4
 421              	 .loc 2 334 9
 422 0022 FA68     	 ldr r2,[r7,#12]
 423 0024 1343     	 orrs r3,r2
 424 0026 FB60     	 str r3,[r7,#12]
 335:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 336:../Libraries/XMCLib/src/xmc_ccu8.c ****   module->GCTRL = gctrl;
 425              	 .loc 2 336 17
 426 0028 7B68     	 ldr r3,[r7,#4]
 427 002a FA68     	 ldr r2,[r7,#12]
 428 002c 1A60     	 str r2,[r3]
 337:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 429              	 .loc 2 337 1
 430 002e C046     	 nop
 431 0030 BD46     	 mov sp,r7
 432 0032 04B0     	 add sp,sp,#16
 433              	 
 434 0034 80BD     	 pop {r7,pc}
 435              	 .cfi_endproc
 436              	.LFE120:
 438              	 .section .text.XMC_CCU8_SLICE_CompareInit,"ax",%progbits
 439              	 .align 1
 440              	 .global XMC_CCU8_SLICE_CompareInit
 441              	 .syntax unified
 442              	 .code 16
 443              	 .thumb_func
 444              	 .fpu softvfp
 446              	XMC_CCU8_SLICE_CompareInit:
 447              	.LFB121:
 338:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 339:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure CC8 Slice in Compare mode */
 340:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
 341:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
 342:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 448              	 .loc 2 342 1
 449              	 .cfi_startproc
 450              	 
 451              	 
 452 0000 80B5     	 push {r7,lr}
 453              	.LCFI27:
 454              	 .cfi_def_cfa_offset 8
 455              	 .cfi_offset 7,-8
 456              	 .cfi_offset 14,-4
 457 0002 82B0     	 sub sp,sp,#8
 458              	.LCFI28:
 459              	 .cfi_def_cfa_offset 16
 460 0004 00AF     	 add r7,sp,#0
 461              	.LCFI29:
 462              	 .cfi_def_cfa_register 7
 463 0006 7860     	 str r0,[r7,#4]
 464 0008 3960     	 str r1,[r7]
 343:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 344:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
 345:../Libraries/XMCLib/src/xmc_ccu8.c ****              (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
 346:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Stops the timer */
 347:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_SLICE_StopTimer(slice);
 465              	 .loc 2 347 3
 466 000a 7B68     	 ldr r3,[r7,#4]
 467 000c 1800     	 movs r0,r3
 468 000e FFF7FEFF 	 bl XMC_CCU8_SLICE_StopTimer
 348:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program the timer mode */
 349:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = compare_init->tc;
 469              	 .loc 2 349 27
 470 0012 3B68     	 ldr r3,[r7]
 471 0014 1A68     	 ldr r2,[r3]
 472              	 .loc 2 349 13
 473 0016 7B68     	 ldr r3,[r7,#4]
 474 0018 5A61     	 str r2,[r3,#20]
 350:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable the timer concatenation */
 351:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 475              	 .loc 2 351 39
 476 001a 3B68     	 ldr r3,[r7]
 477 001c 5B7B     	 ldrb r3,[r3,#13]
 478 001e DB06     	 lsls r3,r3,#27
 479 0020 DB0F     	 lsrs r3,r3,#31
 480 0022 DBB2     	 uxtb r3,r3
 481              	 .loc 2 351 61
 482 0024 1A05     	 lsls r2,r3,#20
 483              	 .loc 2 351 14
 484 0026 7B68     	 ldr r3,[r7,#4]
 485 0028 5A60     	 str r2,[r3,#4]
 352:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program initial prescaler divider value */
 353:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSC = (uint32_t) compare_init->prescaler_initval;
 486              	 .loc 2 353 39
 487 002a 3B68     	 ldr r3,[r7]
 488 002c 1B7B     	 ldrb r3,[r3,#12]
 489 002e 1B07     	 lsls r3,r3,#28
 490 0030 1B0F     	 lsrs r3,r3,#28
 491 0032 DBB2     	 uxtb r3,r3
 492              	 .loc 2 353 16
 493 0034 1A00     	 movs r2,r3
 494              	 .loc 2 353 14
 495 0036 7B68     	 ldr r3,[r7,#4]
 496 0038 5A62     	 str r2,[r3,#36]
 354:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program floating prescaler compare value */
 355:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->FPCS = (uint32_t) compare_init->float_limit;
 497              	 .loc 2 355 40
 498 003a 3B68     	 ldr r3,[r7]
 499 003c 1B7B     	 ldrb r3,[r3,#12]
 500 003e 1B06     	 lsls r3,r3,#24
 501 0040 1B0F     	 lsrs r3,r3,#28
 502 0042 DBB2     	 uxtb r3,r3
 503              	 .loc 2 355 17
 504 0044 1A00     	 movs r2,r3
 505              	 .loc 2 355 15
 506 0046 7B68     	 ldr r3,[r7,#4]
 507 0048 DA62     	 str r2,[r3,#44]
 356:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program the dither compare value */
 357:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DITS = (uint32_t) compare_init->dither_limit;
 508              	 .loc 2 357 40
 509 004a 3B68     	 ldr r3,[r7]
 510 004c 5B7B     	 ldrb r3,[r3,#13]
 511 004e 1B07     	 lsls r3,r3,#28
 512 0050 1B0F     	 lsrs r3,r3,#28
 513 0052 DBB2     	 uxtb r3,r3
 514              	 .loc 2 357 17
 515 0054 1A00     	 movs r2,r3
 516              	 .loc 2 357 15
 517 0056 7B68     	 ldr r3,[r7,#4]
 518 0058 1A62     	 str r2,[r3,#32]
 358:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program timer output passive level */
 359:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSL = (uint32_t) compare_init->psl;
 519              	 .loc 2 359 39
 520 005a 3B68     	 ldr r3,[r7]
 521 005c 5A68     	 ldr r2,[r3,#4]
 522              	 .loc 2 359 14
 523 005e 7B68     	 ldr r3,[r7,#4]
 524 0060 9A61     	 str r2,[r3,#24]
 360:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Asymmetric PWM and Slice output routing configuration */
 361:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 362:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CHC = (uint32_t) compare_init->chc;
 363:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 364:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 525              	 .loc 2 364 49
 526 0062 3B68     	 ldr r3,[r7]
 527 0064 9B68     	 ldr r3,[r3,#8]
 528              	 .loc 2 364 16
 529 0066 1422     	 movs r2,#20
 530 0068 5A40     	 eors r2,r3
 531              	 .loc 2 364 14
 532 006a 7B68     	 ldr r3,[r7,#4]
 533 006c 9A64     	 str r2,[r3,#72]
 365:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 366:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 534              	 .loc 2 366 1
 535 006e C046     	 nop
 536 0070 BD46     	 mov sp,r7
 537 0072 02B0     	 add sp,sp,#8
 538              	 
 539 0074 80BD     	 pop {r7,pc}
 540              	 .cfi_endproc
 541              	.LFE121:
 543              	 .section .text.XMC_CCU8_SLICE_CaptureInit,"ax",%progbits
 544              	 .align 1
 545              	 .global XMC_CCU8_SLICE_CaptureInit
 546              	 .syntax unified
 547              	 .code 16
 548              	 .thumb_func
 549              	 .fpu softvfp
 551              	XMC_CCU8_SLICE_CaptureInit:
 552              	.LFB122:
 367:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 368:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure CC8 Slice in Capture mode */
 369:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_CaptureInit(XMC_CCU8_SLICE_t *const slice, 
 370:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_CAPTURE_CONFIG_t *const capture_init)
 371:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 553              	 .loc 2 371 1
 554              	 .cfi_startproc
 555              	 
 556              	 
 557 0000 80B5     	 push {r7,lr}
 558              	.LCFI30:
 559              	 .cfi_def_cfa_offset 8
 560              	 .cfi_offset 7,-8
 561              	 .cfi_offset 14,-4
 562 0002 82B0     	 sub sp,sp,#8
 563              	.LCFI31:
 564              	 .cfi_def_cfa_offset 16
 565 0004 00AF     	 add r7,sp,#0
 566              	.LCFI32:
 567              	 .cfi_def_cfa_register 7
 568 0006 7860     	 str r0,[r7,#4]
 569 0008 3960     	 str r1,[r7]
 372:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 373:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CaptureInit:Capture Init Pointer is NULL", 
 374:../Libraries/XMCLib/src/xmc_ccu8.c ****              (XMC_CCU8_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);
 375:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Stops the timer */
 376:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_SLICE_StopTimer(slice);
 570              	 .loc 2 376 3
 571 000a 7B68     	 ldr r3,[r7,#4]
 572 000c 1800     	 movs r0,r3
 573 000e FFF7FEFF 	 bl XMC_CCU8_SLICE_StopTimer
 377:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Capture mode configuration */
 378:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = capture_init->tc;
 574              	 .loc 2 378 27
 575 0012 3B68     	 ldr r3,[r7]
 576 0014 1A68     	 ldr r2,[r3]
 577              	 .loc 2 378 13
 578 0016 7B68     	 ldr r3,[r7,#4]
 579 0018 5A61     	 str r2,[r3,#20]
 379:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Enable the timer concatenation */
 380:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = (uint32_t)capture_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 580              	 .loc 2 380 38
 581 001a 3B68     	 ldr r3,[r7]
 582 001c 5B79     	 ldrb r3,[r3,#5]
 583 001e DB07     	 lsls r3,r3,#31
 584 0020 DB0F     	 lsrs r3,r3,#31
 585 0022 DBB2     	 uxtb r3,r3
 586              	 .loc 2 380 60
 587 0024 1A05     	 lsls r2,r3,#20
 588              	 .loc 2 380 14
 589 0026 7B68     	 ldr r3,[r7,#4]
 590 0028 5A60     	 str r2,[r3,#4]
 381:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program floating prescaler compare value */
 382:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->FPCS = (uint32_t) capture_init->float_limit;
 591              	 .loc 2 382 40
 592 002a 3B68     	 ldr r3,[r7]
 593 002c 1B79     	 ldrb r3,[r3,#4]
 594 002e 1B06     	 lsls r3,r3,#24
 595 0030 1B0F     	 lsrs r3,r3,#28
 596 0032 DBB2     	 uxtb r3,r3
 597              	 .loc 2 382 17
 598 0034 1A00     	 movs r2,r3
 599              	 .loc 2 382 15
 600 0036 7B68     	 ldr r3,[r7,#4]
 601 0038 DA62     	 str r2,[r3,#44]
 383:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program initial prescaler divider value */
 384:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSC = (uint32_t) capture_init->prescaler_initval;
 602              	 .loc 2 384 39
 603 003a 3B68     	 ldr r3,[r7]
 604 003c 1B79     	 ldrb r3,[r3,#4]
 605 003e 1B07     	 lsls r3,r3,#28
 606 0040 1B0F     	 lsrs r3,r3,#28
 607 0042 DBB2     	 uxtb r3,r3
 608              	 .loc 2 384 16
 609 0044 1A00     	 movs r2,r3
 610              	 .loc 2 384 14
 611 0046 7B68     	 ldr r3,[r7,#4]
 612 0048 5A62     	 str r2,[r3,#36]
 385:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 613              	 .loc 2 385 1
 614 004a C046     	 nop
 615 004c BD46     	 mov sp,r7
 616 004e 02B0     	 add sp,sp,#8
 617              	 
 618 0050 80BD     	 pop {r7,pc}
 619              	 .cfi_endproc
 620              	.LFE122:
 622              	 .section .text.XMC_CCU8_SLICE_SetOutPath,"ax",%progbits
 623              	 .align 1
 624              	 .global XMC_CCU8_SLICE_SetOutPath
 625              	 .syntax unified
 626              	 .code 16
 627              	 .thumb_func
 628              	 .fpu softvfp
 630              	XMC_CCU8_SLICE_SetOutPath:
 631              	.LFB123:
 386:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 387:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the each output of the slice with either STx or inverted STx. */
 388:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk)
 389:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 632              	 .loc 2 389 1
 633              	 .cfi_startproc
 634              	 
 635              	 
 636 0000 80B5     	 push {r7,lr}
 637              	.LCFI33:
 638              	 .cfi_def_cfa_offset 8
 639              	 .cfi_offset 7,-8
 640              	 .cfi_offset 14,-4
 641 0002 84B0     	 sub sp,sp,#16
 642              	.LCFI34:
 643              	 .cfi_def_cfa_offset 24
 644 0004 00AF     	 add r7,sp,#0
 645              	.LCFI35:
 646              	 .cfi_def_cfa_register 7
 647 0006 7860     	 str r0,[r7,#4]
 648 0008 3960     	 str r1,[r7]
 390:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t chc;
 391:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetOutPath:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 392:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc = slice->CHC;
 649              	 .loc 2 392 7
 650 000a 7B68     	 ldr r3,[r7,#4]
 651 000c 9B6C     	 ldr r3,[r3,#72]
 652 000e FB60     	 str r3,[r7,#12]
 393:../Libraries/XMCLib/src/xmc_ccu8.c **** #if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
 394:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc &= ~((uint32_t)out_path_msk >> 16U);
 653              	 .loc 2 394 35
 654 0010 3B68     	 ldr r3,[r7]
 655 0012 1B0C     	 lsrs r3,r3,#16
 656              	 .loc 2 394 10
 657 0014 DA43     	 mvns r2,r3
 658              	 .loc 2 394 7
 659 0016 FB68     	 ldr r3,[r7,#12]
 660 0018 1340     	 ands r3,r2
 661 001a FB60     	 str r3,[r7,#12]
 395:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc |= ((uint32_t)out_path_msk & 0xFFFFU);
 662              	 .loc 2 395 34
 663 001c 3B68     	 ldr r3,[r7]
 664 001e 1B04     	 lsls r3,r3,#16
 665 0020 1B0C     	 lsrs r3,r3,#16
 666              	 .loc 2 395 7
 667 0022 FA68     	 ldr r2,[r7,#12]
 668 0024 1343     	 orrs r3,r2
 669 0026 FB60     	 str r3,[r7,#12]
 396:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 397:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc &= ~((uint32_t)((uint32_t)(out_path_msk & 0xCCCC0U) >> 2U));
 398:../Libraries/XMCLib/src/xmc_ccu8.c ****   chc |= ((uint32_t)out_path_msk & 0x33330U);
 399:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 400:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CHC = chc;
 670              	 .loc 2 400 14
 671 0028 7B68     	 ldr r3,[r7,#4]
 672 002a FA68     	 ldr r2,[r7,#12]
 673 002c 9A64     	 str r2,[r3,#72]
 401:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 674              	 .loc 2 401 1
 675 002e C046     	 nop
 676 0030 BD46     	 mov sp,r7
 677 0032 04B0     	 add sp,sp,#16
 678              	 
 679 0034 80BD     	 pop {r7,pc}
 680              	 .cfi_endproc
 681              	.LFE123:
 683              	 .section .text.XMC_CCU8_SetMultiChannelShadowTransferMode,"ax",%progbits
 684              	 .align 1
 685              	 .global XMC_CCU8_SetMultiChannelShadowTransferMode
 686              	 .syntax unified
 687              	 .code 16
 688              	 .thumb_func
 689              	 .fpu softvfp
 691              	XMC_CCU8_SetMultiChannelShadowTransferMode:
 692              	.LFB124:
 402:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 403:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. *
 404:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t sli
 405:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 693              	 .loc 2 405 1
 694              	 .cfi_startproc
 695              	 
 696              	 
 697 0000 80B5     	 push {r7,lr}
 698              	.LCFI36:
 699              	 .cfi_def_cfa_offset 8
 700              	 .cfi_offset 7,-8
 701              	 .cfi_offset 14,-4
 702 0002 84B0     	 sub sp,sp,#16
 703              	.LCFI37:
 704              	 .cfi_def_cfa_offset 24
 705 0004 00AF     	 add r7,sp,#0
 706              	.LCFI38:
 707              	 .cfi_def_cfa_register 7
 708 0006 7860     	 str r0,[r7,#4]
 709 0008 3960     	 str r1,[r7]
 406:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t gctrl;
 407:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 408:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidM
 409:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 410:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl = module->GCTRL;
 710              	 .loc 2 410 9
 711 000a 7B68     	 ldr r3,[r7,#4]
 712 000c 1B68     	 ldr r3,[r3]
 713 000e FB60     	 str r3,[r7,#12]
 411:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 714              	 .loc 2 411 39
 715 0010 3B68     	 ldr r3,[r7]
 716 0012 1B0C     	 lsrs r3,r3,#16
 717              	 .loc 2 411 12
 718 0014 DA43     	 mvns r2,r3
 719              	 .loc 2 411 9
 720 0016 FB68     	 ldr r3,[r7,#12]
 721 0018 1340     	 ands r3,r2
 722 001a FB60     	 str r3,[r7,#12]
 412:../Libraries/XMCLib/src/xmc_ccu8.c ****   gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 723              	 .loc 2 412 38
 724 001c 3B68     	 ldr r3,[r7]
 725 001e 1B04     	 lsls r3,r3,#16
 726 0020 1B0C     	 lsrs r3,r3,#16
 727              	 .loc 2 412 9
 728 0022 FA68     	 ldr r2,[r7,#12]
 729 0024 1343     	 orrs r3,r2
 730 0026 FB60     	 str r3,[r7,#12]
 413:../Libraries/XMCLib/src/xmc_ccu8.c ****   module->GCTRL = gctrl;
 731              	 .loc 2 413 17
 732 0028 7B68     	 ldr r3,[r7,#4]
 733 002a FA68     	 ldr r2,[r7,#12]
 734 002c 1A60     	 str r2,[r3]
 414:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 735              	 .loc 2 414 1
 736 002e C046     	 nop
 737 0030 BD46     	 mov sp,r7
 738 0032 04B0     	 add sp,sp,#16
 739              	 
 740 0034 80BD     	 pop {r7,pc}
 741              	 .cfi_endproc
 742              	.LFE124:
 744              	 .section .text.XMC_CCU8_SLICE_StartConfig,"ax",%progbits
 745              	 .align 1
 746              	 .global XMC_CCU8_SLICE_StartConfig
 747              	 .syntax unified
 748              	 .code 16
 749              	 .thumb_func
 750              	 .fpu softvfp
 752              	XMC_CCU8_SLICE_StartConfig:
 753              	.LFB125:
 415:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 416:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 417:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the Start trigger function of a slice*/
 418:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
 419:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_EVENT_t event,
 420:../Libraries/XMCLib/src/xmc_ccu8.c ****                                 const XMC_CCU8_SLICE_START_MODE_t start_mode)
 421:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 754              	 .loc 2 421 1
 755              	 .cfi_startproc
 756              	 
 757              	 
 758 0000 80B5     	 push {r7,lr}
 759              	.LCFI39:
 760              	 .cfi_def_cfa_offset 8
 761              	 .cfi_offset 7,-8
 762              	 .cfi_offset 14,-4
 763 0002 84B0     	 sub sp,sp,#16
 764              	.LCFI40:
 765              	 .cfi_def_cfa_offset 24
 766 0004 00AF     	 add r7,sp,#0
 767              	.LCFI41:
 768              	 .cfi_def_cfa_register 7
 769 0006 7860     	 str r0,[r7,#4]
 770 0008 0800     	 movs r0,r1
 771 000a 1100     	 movs r1,r2
 772 000c FB1C     	 adds r3,r7,#3
 773 000e 021C     	 adds r2,r0,#0
 774 0010 1A70     	 strb r2,[r3]
 775 0012 BB1C     	 adds r3,r7,#2
 776 0014 0A1C     	 adds r2,r1,#0
 777 0016 1A70     	 strb r2,[r3]
 422:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 423:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 424:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 425:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 426:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 427:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
 428:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
 429:../Libraries/XMCLib/src/xmc_ccu8.c ****               (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
 430:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 778              	 .loc 2 430 7
 779 0018 7B68     	 ldr r3,[r7,#4]
 780 001a 5B68     	 ldr r3,[r3,#4]
 781 001c BB60     	 str r3,[r7,#8]
 431:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 432:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 782              	 .loc 2 432 7
 783 001e BB68     	 ldr r3,[r7,#8]
 784 0020 0322     	 movs r2,#3
 785 0022 9343     	 bics r3,r2
 786 0024 BB60     	 str r3,[r7,#8]
 433:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 787              	 .loc 2 433 29
 788 0026 FB1C     	 adds r3,r7,#3
 789 0028 1B78     	 ldrb r3,[r3]
 790              	 .loc 2 433 7
 791 002a BA68     	 ldr r2,[r7,#8]
 792 002c 1343     	 orrs r3,r2
 793 002e BB60     	 str r3,[r7,#8]
 434:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 435:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 794              	 .loc 2 435 14
 795 0030 7B68     	 ldr r3,[r7,#4]
 796 0032 BA68     	 ldr r2,[r7,#8]
 797 0034 5A60     	 str r2,[r3,#4]
 436:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 437:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc  = slice->TC;
 798              	 .loc 2 437 7
 799 0036 7B68     	 ldr r3,[r7,#4]
 800 0038 5B69     	 ldr r3,[r3,#20]
 801 003a FB60     	 str r3,[r7,#12]
 438:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 439:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 802              	 .loc 2 439 5
 803 003c BB1C     	 adds r3,r7,#2
 804 003e 1B78     	 ldrb r3,[r3]
 805 0040 012B     	 cmp r3,#1
 806 0042 05D1     	 bne .L21
 440:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 441:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 807              	 .loc 2 441 8
 808 0044 FB68     	 ldr r3,[r7,#12]
 809 0046 8022     	 movs r2,#128
 810 0048 D200     	 lsls r2,r2,#3
 811 004a 1343     	 orrs r3,r2
 812 004c FB60     	 str r3,[r7,#12]
 813 004e 03E0     	 b .L22
 814              	.L21:
 442:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 443:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 444:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 445:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 815              	 .loc 2 445 8
 816 0050 FB68     	 ldr r3,[r7,#12]
 817 0052 054A     	 ldr r2,.L23
 818 0054 1340     	 ands r3,r2
 819 0056 FB60     	 str r3,[r7,#12]
 820              	.L22:
 446:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 447:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 448:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 821              	 .loc 2 448 13
 822 0058 7B68     	 ldr r3,[r7,#4]
 823 005a FA68     	 ldr r2,[r7,#12]
 824 005c 5A61     	 str r2,[r3,#20]
 449:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 825              	 .loc 2 449 1
 826 005e C046     	 nop
 827 0060 BD46     	 mov sp,r7
 828 0062 04B0     	 add sp,sp,#16
 829              	 
 830 0064 80BD     	 pop {r7,pc}
 831              	.L24:
 832 0066 C046     	 .align 2
 833              	.L23:
 834 0068 FFFBFFFF 	 .word -1025
 835              	 .cfi_endproc
 836              	.LFE125:
 838              	 .section .text.XMC_CCU8_SLICE_StopConfig,"ax",%progbits
 839              	 .align 1
 840              	 .global XMC_CCU8_SLICE_StopConfig
 841              	 .syntax unified
 842              	 .code 16
 843              	 .thumb_func
 844              	 .fpu softvfp
 846              	XMC_CCU8_SLICE_StopConfig:
 847              	.LFB126:
 450:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 451:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the Stop trigger function of a slice */
 452:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
 453:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const XMC_CCU8_SLICE_EVENT_t event,
 454:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const XMC_CCU8_SLICE_END_MODE_t end_mode)
 455:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 848              	 .loc 2 455 1
 849              	 .cfi_startproc
 850              	 
 851              	 
 852 0000 80B5     	 push {r7,lr}
 853              	.LCFI42:
 854              	 .cfi_def_cfa_offset 8
 855              	 .cfi_offset 7,-8
 856              	 .cfi_offset 14,-4
 857 0002 84B0     	 sub sp,sp,#16
 858              	.LCFI43:
 859              	 .cfi_def_cfa_offset 24
 860 0004 00AF     	 add r7,sp,#0
 861              	.LCFI44:
 862              	 .cfi_def_cfa_register 7
 863 0006 7860     	 str r0,[r7,#4]
 864 0008 0800     	 movs r0,r1
 865 000a 1100     	 movs r1,r2
 866 000c FB1C     	 adds r3,r7,#3
 867 000e 021C     	 adds r2,r0,#0
 868 0010 1A70     	 strb r2,[r3]
 869 0012 BB1C     	 adds r3,r7,#2
 870 0014 0A1C     	 adds r2,r1,#0
 871 0016 1A70     	 strb r2,[r3]
 456:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 457:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 458:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 459:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 460:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 461:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode))
 462:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 463:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 872              	 .loc 2 463 7
 873 0018 7B68     	 ldr r3,[r7,#4]
 874 001a 5B68     	 ldr r3,[r3,#4]
 875 001c FB60     	 str r3,[r7,#12]
 464:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the stop function */
 465:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
 876              	 .loc 2 465 7
 877 001e FB68     	 ldr r3,[r7,#12]
 878 0020 0C22     	 movs r2,#12
 879 0022 9343     	 bics r3,r2
 880 0024 FB60     	 str r3,[r7,#12]
 466:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
 881              	 .loc 2 466 11
 882 0026 FB1C     	 adds r3,r7,#3
 883 0028 1B78     	 ldrb r3,[r3]
 884              	 .loc 2 466 29
 885 002a 9B00     	 lsls r3,r3,#2
 886              	 .loc 2 466 7
 887 002c FA68     	 ldr r2,[r7,#12]
 888 002e 1343     	 orrs r3,r2
 889 0030 FB60     	 str r3,[r7,#12]
 467:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 468:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 890              	 .loc 2 468 14
 891 0032 7B68     	 ldr r3,[r7,#4]
 892 0034 FA68     	 ldr r2,[r7,#12]
 893 0036 5A60     	 str r2,[r3,#4]
 469:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 470:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the stop mode */
 471:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 894              	 .loc 2 471 6
 895 0038 7B68     	 ldr r3,[r7,#4]
 896 003a 5B69     	 ldr r3,[r3,#20]
 897 003c BB60     	 str r3,[r7,#8]
 472:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
 898              	 .loc 2 472 6
 899 003e BB68     	 ldr r3,[r7,#8]
 900 0040 074A     	 ldr r2,.L26
 901 0042 1340     	 ands r3,r2
 902 0044 BB60     	 str r3,[r7,#8]
 473:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
 903              	 .loc 2 473 10
 904 0046 BB1C     	 adds r3,r7,#2
 905 0048 1B78     	 ldrb r3,[r3]
 906              	 .loc 2 473 31
 907 004a 1B02     	 lsls r3,r3,#8
 908              	 .loc 2 473 6
 909 004c BA68     	 ldr r2,[r7,#8]
 910 004e 1343     	 orrs r3,r2
 911 0050 BB60     	 str r3,[r7,#8]
 474:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 475:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 912              	 .loc 2 475 13
 913 0052 7B68     	 ldr r3,[r7,#4]
 914 0054 BA68     	 ldr r2,[r7,#8]
 915 0056 5A61     	 str r2,[r3,#20]
 476:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 916              	 .loc 2 476 1
 917 0058 C046     	 nop
 918 005a BD46     	 mov sp,r7
 919 005c 04B0     	 add sp,sp,#16
 920              	 
 921 005e 80BD     	 pop {r7,pc}
 922              	.L27:
 923              	 .align 2
 924              	.L26:
 925 0060 FFFCFFFF 	 .word -769
 926              	 .cfi_endproc
 927              	.LFE126:
 929              	 .section .text.XMC_CCU8_SLICE_LoadConfig,"ax",%progbits
 930              	 .align 1
 931              	 .global XMC_CCU8_SLICE_LoadConfig
 932              	 .syntax unified
 933              	 .code 16
 934              	 .thumb_func
 935              	 .fpu softvfp
 937              	XMC_CCU8_SLICE_LoadConfig:
 938              	.LFB127:
 477:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 478:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the Load trigger function of a slice*/
 479:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
 480:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 939              	 .loc 2 480 1
 940              	 .cfi_startproc
 941              	 
 942              	 
 943 0000 80B5     	 push {r7,lr}
 944              	.LCFI45:
 945              	 .cfi_def_cfa_offset 8
 946              	 .cfi_offset 7,-8
 947              	 .cfi_offset 14,-4
 948 0002 84B0     	 sub sp,sp,#16
 949              	.LCFI46:
 950              	 .cfi_def_cfa_offset 24
 951 0004 00AF     	 add r7,sp,#0
 952              	.LCFI47:
 953              	 .cfi_def_cfa_register 7
 954 0006 7860     	 str r0,[r7,#4]
 955 0008 0A00     	 movs r2,r1
 956 000a FB1C     	 adds r3,r7,#3
 957 000c 1A70     	 strb r2,[r3]
 481:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 482:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 483:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 484:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 485:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 486:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 958              	 .loc 2 486 7
 959 000e 7B68     	 ldr r3,[r7,#4]
 960 0010 5B68     	 ldr r3,[r3,#4]
 961 0012 FB60     	 str r3,[r7,#12]
 487:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 488:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the load function */
 489:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
 962              	 .loc 2 489 7
 963 0014 FB68     	 ldr r3,[r7,#12]
 964 0016 084A     	 ldr r2,.L29
 965 0018 1340     	 ands r3,r2
 966 001a FB60     	 str r3,[r7,#12]
 490:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
 967              	 .loc 2 490 11
 968 001c FB1C     	 adds r3,r7,#3
 969 001e 1B78     	 ldrb r3,[r3]
 970              	 .loc 2 490 29
 971 0020 1B03     	 lsls r3,r3,#12
 972              	 .loc 2 490 7
 973 0022 FA68     	 ldr r2,[r7,#12]
 974 0024 1343     	 orrs r3,r2
 975 0026 FB60     	 str r3,[r7,#12]
 491:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 492:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 976              	 .loc 2 492 14
 977 0028 7B68     	 ldr r3,[r7,#4]
 978 002a FA68     	 ldr r2,[r7,#12]
 979 002c 5A60     	 str r2,[r3,#4]
 493:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 980              	 .loc 2 493 1
 981 002e C046     	 nop
 982 0030 BD46     	 mov sp,r7
 983 0032 04B0     	 add sp,sp,#16
 984              	 
 985 0034 80BD     	 pop {r7,pc}
 986              	.L30:
 987 0036 C046     	 .align 2
 988              	.L29:
 989 0038 FFCFFFFF 	 .word -12289
 990              	 .cfi_endproc
 991              	.LFE127:
 993              	 .section .text.XMC_CCU8_SLICE_LoadSelector,"ax",%progbits
 994              	 .align 1
 995              	 .global XMC_CCU8_SLICE_LoadSelector
 996              	 .syntax unified
 997              	 .code 16
 998              	 .thumb_func
 999              	 .fpu softvfp
 1001              	XMC_CCU8_SLICE_LoadSelector:
 1002              	.LFB128:
 494:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 495:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure, which compare register value has to be loaded during external load event */
 496:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNE
 497:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1003              	 .loc 2 497 1
 1004              	 .cfi_startproc
 1005              	 
 1006              	 
 1007 0000 80B5     	 push {r7,lr}
 1008              	.LCFI48:
 1009              	 .cfi_def_cfa_offset 8
 1010              	 .cfi_offset 7,-8
 1011              	 .cfi_offset 14,-4
 1012 0002 84B0     	 sub sp,sp,#16
 1013              	.LCFI49:
 1014              	 .cfi_def_cfa_offset 24
 1015 0004 00AF     	 add r7,sp,#0
 1016              	.LCFI50:
 1017              	 .cfi_def_cfa_register 7
 1018 0006 7860     	 str r0,[r7,#4]
 1019 0008 0A00     	 movs r2,r1
 1020 000a FB1C     	 adds r3,r7,#3
 1021 000c 1A70     	 strb r2,[r3]
 498:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 499:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 500:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 501:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNE
 502:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 503:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 1022              	 .loc 2 503 6
 1023 000e 7B68     	 ldr r3,[r7,#4]
 1024 0010 5B69     	 ldr r3,[r3,#20]
 1025 0012 FB60     	 str r3,[r7,#12]
 504:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 505:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the load function */
 506:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
 1026              	 .loc 2 506 6
 1027 0014 FB68     	 ldr r3,[r7,#12]
 1028 0016 8022     	 movs r2,#128
 1029 0018 9343     	 bics r3,r2
 1030 001a FB60     	 str r3,[r7,#12]
 507:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
 1031              	 .loc 2 507 9
 1032 001c FB1C     	 adds r3,r7,#3
 1033 001e 1B78     	 ldrb r3,[r3]
 1034              	 .loc 2 507 26
 1035 0020 DB01     	 lsls r3,r3,#7
 1036              	 .loc 2 507 6
 1037 0022 FA68     	 ldr r2,[r7,#12]
 1038 0024 1343     	 orrs r3,r2
 1039 0026 FB60     	 str r3,[r7,#12]
 508:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 509:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 1040              	 .loc 2 509 13
 1041 0028 7B68     	 ldr r3,[r7,#4]
 1042 002a FA68     	 ldr r2,[r7,#12]
 1043 002c 5A61     	 str r2,[r3,#20]
 510:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1044              	 .loc 2 510 1
 1045 002e C046     	 nop
 1046 0030 BD46     	 mov sp,r7
 1047 0032 04B0     	 add sp,sp,#16
 1048              	 
 1049 0034 80BD     	 pop {r7,pc}
 1050              	 .cfi_endproc
 1051              	.LFE128:
 1053              	 .section .text.XMC_CCU8_SLICE_ModulationConfig,"ax",%progbits
 1054              	 .align 1
 1055              	 .global XMC_CCU8_SLICE_ModulationConfig
 1056              	 .syntax unified
 1057              	 .code 16
 1058              	 .thumb_func
 1059              	 .fpu softvfp
 1061              	XMC_CCU8_SLICE_ModulationConfig:
 1062              	.LFB129:
 511:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 512:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the slice modulation function */
 513:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
 514:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_EVENT_t event,
 515:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
 516:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
 517:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const bool synch_with_pwm)
 518:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1063              	 .loc 2 518 1
 1064              	 .cfi_startproc
 1065              	 
 1066              	 
 1067 0000 90B5     	 push {r4,r7,lr}
 1068              	.LCFI51:
 1069              	 .cfi_def_cfa_offset 12
 1070              	 .cfi_offset 4,-12
 1071              	 .cfi_offset 7,-8
 1072              	 .cfi_offset 14,-4
 1073 0002 85B0     	 sub sp,sp,#20
 1074              	.LCFI52:
 1075              	 .cfi_def_cfa_offset 32
 1076 0004 00AF     	 add r7,sp,#0
 1077              	.LCFI53:
 1078              	 .cfi_def_cfa_register 7
 1079 0006 7860     	 str r0,[r7,#4]
 1080 0008 0C00     	 movs r4,r1
 1081 000a 1000     	 movs r0,r2
 1082 000c 1900     	 movs r1,r3
 1083 000e FB1C     	 adds r3,r7,#3
 1084 0010 221C     	 adds r2,r4,#0
 1085 0012 1A70     	 strb r2,[r3]
 1086 0014 BB1C     	 adds r3,r7,#2
 1087 0016 021C     	 adds r2,r0,#0
 1088 0018 1A70     	 strb r2,[r3]
 1089 001a 7B1C     	 adds r3,r7,#1
 1090 001c 0A1C     	 adds r2,r1,#0
 1091 001e 1A70     	 strb r2,[r3]
 519:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 520:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 521:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 522:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
 523:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(even
 524:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid channel for modulation", 
 525:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
 526:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode", 
 527:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) ||\
 528:../Libraries/XMCLib/src/xmc_ccu8.c ****               (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));
 529:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 530:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1092              	 .loc 2 530 7
 1093 0020 7B68     	 ldr r3,[r7,#4]
 1094 0022 5B68     	 ldr r3,[r3,#4]
 1095 0024 BB60     	 str r3,[r7,#8]
 531:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 532:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the modulation function */
 533:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
 1096              	 .loc 2 533 7
 1097 0026 BB68     	 ldr r3,[r7,#8]
 1098 0028 1E4A     	 ldr r2,.L37
 1099 002a 1340     	 ands r3,r2
 1100 002c BB60     	 str r3,[r7,#8]
 534:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
 1101              	 .loc 2 534 11
 1102 002e FB1C     	 adds r3,r7,#3
 1103 0030 1B78     	 ldrb r3,[r3]
 1104              	 .loc 2 534 29
 1105 0032 9B04     	 lsls r3,r3,#18
 1106              	 .loc 2 534 7
 1107 0034 BA68     	 ldr r2,[r7,#8]
 1108 0036 1343     	 orrs r3,r2
 1109 0038 BB60     	 str r3,[r7,#8]
 535:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 536:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1110              	 .loc 2 536 14
 1111 003a 7B68     	 ldr r3,[r7,#4]
 1112 003c BA68     	 ldr r2,[r7,#8]
 1113 003e 5A60     	 str r2,[r3,#4]
 537:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 538:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc  = slice->TC;
 1114              	 .loc 2 538 7
 1115 0040 7B68     	 ldr r3,[r7,#4]
 1116 0042 5B69     	 ldr r3,[r3,#20]
 1117 0044 FB60     	 str r3,[r7,#12]
 539:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 540:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, Modulation mode */
 541:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
 1118              	 .loc 2 541 5
 1119 0046 BB1C     	 adds r3,r7,#2
 1120 0048 1B78     	 ldrb r3,[r3]
 1121 004a 012B     	 cmp r3,#1
 1122 004c 05D1     	 bne .L33
 542:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 543:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
 1123              	 .loc 2 543 8
 1124 004e FB68     	 ldr r3,[r7,#12]
 1125 0050 8022     	 movs r2,#128
 1126 0052 5204     	 lsls r2,r2,#17
 1127 0054 1343     	 orrs r3,r2
 1128 0056 FB60     	 str r3,[r7,#12]
 1129 0058 03E0     	 b .L34
 1130              	.L33:
 544:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 545:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 546:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 547:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
 1131              	 .loc 2 547 8
 1132 005a FB68     	 ldr r3,[r7,#12]
 1133 005c 124A     	 ldr r2,.L37+4
 1134 005e 1340     	 ands r3,r2
 1135 0060 FB60     	 str r3,[r7,#12]
 1136              	.L34:
 548:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 549:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 550:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Synchronization of modulation effect with PWM cycle */
 551:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(synch_with_pwm == true)
 1137              	 .loc 2 551 5
 1138 0062 2023     	 movs r3,#32
 1139 0064 FB18     	 adds r3,r7,r3
 1140 0066 1B78     	 ldrb r3,[r3]
 1141 0068 002B     	 cmp r3,#0
 1142 006a 05D0     	 beq .L35
 552:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 553:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
 1143              	 .loc 2 553 8
 1144 006c FB68     	 ldr r3,[r7,#12]
 1145 006e 8022     	 movs r2,#128
 1146 0070 1204     	 lsls r2,r2,#16
 1147 0072 1343     	 orrs r3,r2
 1148 0074 FB60     	 str r3,[r7,#12]
 1149 0076 03E0     	 b .L36
 1150              	.L35:
 554:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 555:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 556:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 557:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
 1151              	 .loc 2 557 8
 1152 0078 FB68     	 ldr r3,[r7,#12]
 1153 007a 0C4A     	 ldr r2,.L37+8
 1154 007c 1340     	 ands r3,r2
 1155 007e FB60     	 str r3,[r7,#12]
 1156              	.L36:
 558:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 559:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 560:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure on which channel external modulation to be applied */
 561:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
 1157              	 .loc 2 561 6
 1158 0080 FB68     	 ldr r3,[r7,#12]
 1159 0082 0B4A     	 ldr r2,.L37+12
 1160 0084 1340     	 ands r3,r2
 1161 0086 FB60     	 str r3,[r7,#12]
 562:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
 1162              	 .loc 2 562 9
 1163 0088 7B1C     	 adds r3,r7,#1
 1164 008a 1B78     	 ldrb r3,[r3]
 1165              	 .loc 2 562 27
 1166 008c DB06     	 lsls r3,r3,#27
 1167              	 .loc 2 562 6
 1168 008e FA68     	 ldr r2,[r7,#12]
 1169 0090 1343     	 orrs r3,r2
 1170 0092 FB60     	 str r3,[r7,#12]
 563:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 564:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 1171              	 .loc 2 564 13
 1172 0094 7B68     	 ldr r3,[r7,#4]
 1173 0096 FA68     	 ldr r2,[r7,#12]
 1174 0098 5A61     	 str r2,[r3,#20]
 565:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1175              	 .loc 2 565 1
 1176 009a C046     	 nop
 1177 009c BD46     	 mov sp,r7
 1178 009e 05B0     	 add sp,sp,#20
 1179              	 
 1180 00a0 90BD     	 pop {r4,r7,pc}
 1181              	.L38:
 1182 00a2 C046     	 .align 2
 1183              	.L37:
 1184 00a4 FFFFF3FF 	 .word -786433
 1185 00a8 FFFFFFFE 	 .word -16777217
 1186 00ac FFFF7FFF 	 .word -8388609
 1187 00b0 FFFFFFE7 	 .word -402653185
 1188              	 .cfi_endproc
 1189              	.LFE129:
 1191              	 .section .text.XMC_CCU8_SLICE_CountConfig,"ax",%progbits
 1192              	 .align 1
 1193              	 .global XMC_CCU8_SLICE_CountConfig
 1194              	 .syntax unified
 1195              	 .code 16
 1196              	 .thumb_func
 1197              	 .fpu softvfp
 1199              	XMC_CCU8_SLICE_CountConfig:
 1200              	.LFB130:
 566:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 567:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure the slice count function */
 568:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
 569:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1201              	 .loc 2 569 1
 1202              	 .cfi_startproc
 1203              	 
 1204              	 
 1205 0000 80B5     	 push {r7,lr}
 1206              	.LCFI54:
 1207              	 .cfi_def_cfa_offset 8
 1208              	 .cfi_offset 7,-8
 1209              	 .cfi_offset 14,-4
 1210 0002 84B0     	 sub sp,sp,#16
 1211              	.LCFI55:
 1212              	 .cfi_def_cfa_offset 24
 1213 0004 00AF     	 add r7,sp,#0
 1214              	.LCFI56:
 1215              	 .cfi_def_cfa_register 7
 1216 0006 7860     	 str r0,[r7,#4]
 1217 0008 0A00     	 movs r2,r1
 1218 000a FB1C     	 adds r3,r7,#3
 1219 000c 1A70     	 strb r2,[r3]
 570:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 571:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 572:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 573:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 574:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 575:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1220              	 .loc 2 575 7
 1221 000e 7B68     	 ldr r3,[r7,#4]
 1222 0010 5B68     	 ldr r3,[r3,#4]
 1223 0012 FB60     	 str r3,[r7,#12]
 576:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 577:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the count function */
 578:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
 1224              	 .loc 2 578 7
 1225 0014 FB68     	 ldr r3,[r7,#12]
 1226 0016 084A     	 ldr r2,.L40
 1227 0018 1340     	 ands r3,r2
 1228 001a FB60     	 str r3,[r7,#12]
 579:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
 1229              	 .loc 2 579 11
 1230 001c FB1C     	 adds r3,r7,#3
 1231 001e 1B78     	 ldrb r3,[r3]
 1232              	 .loc 2 579 29
 1233 0020 9B03     	 lsls r3,r3,#14
 1234              	 .loc 2 579 7
 1235 0022 FA68     	 ldr r2,[r7,#12]
 1236 0024 1343     	 orrs r3,r2
 1237 0026 FB60     	 str r3,[r7,#12]
 580:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 581:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1238              	 .loc 2 581 14
 1239 0028 7B68     	 ldr r3,[r7,#4]
 1240 002a FA68     	 ldr r2,[r7,#12]
 1241 002c 5A60     	 str r2,[r3,#4]
 582:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1242              	 .loc 2 582 1
 1243 002e C046     	 nop
 1244 0030 BD46     	 mov sp,r7
 1245 0032 04B0     	 add sp,sp,#16
 1246              	 
 1247 0034 80BD     	 pop {r7,pc}
 1248              	.L41:
 1249 0036 C046     	 .align 2
 1250              	.L40:
 1251 0038 FF3FFFFF 	 .word -49153
 1252              	 .cfi_endproc
 1253              	.LFE130:
 1255              	 .section .text.XMC_CCU8_SLICE_GateConfig,"ax",%progbits
 1256              	 .align 1
 1257              	 .global XMC_CCU8_SLICE_GateConfig
 1258              	 .syntax unified
 1259              	 .code 16
 1260              	 .thumb_func
 1261              	 .fpu softvfp
 1263              	XMC_CCU8_SLICE_GateConfig:
 1264              	.LFB131:
 583:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 584:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure slice gate function */
 585:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
 586:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1265              	 .loc 2 586 1
 1266              	 .cfi_startproc
 1267              	 
 1268              	 
 1269 0000 80B5     	 push {r7,lr}
 1270              	.LCFI57:
 1271              	 .cfi_def_cfa_offset 8
 1272              	 .cfi_offset 7,-8
 1273              	 .cfi_offset 14,-4
 1274 0002 84B0     	 sub sp,sp,#16
 1275              	.LCFI58:
 1276              	 .cfi_def_cfa_offset 24
 1277 0004 00AF     	 add r7,sp,#0
 1278              	.LCFI59:
 1279              	 .cfi_def_cfa_register 7
 1280 0006 7860     	 str r0,[r7,#4]
 1281 0008 0A00     	 movs r2,r1
 1282 000a FB1C     	 adds r3,r7,#3
 1283 000c 1A70     	 strb r2,[r3]
 587:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 588:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 589:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 590:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 591:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 592:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1284              	 .loc 2 592 7
 1285 000e 7B68     	 ldr r3,[r7,#4]
 1286 0010 5B68     	 ldr r3,[r3,#4]
 1287 0012 FB60     	 str r3,[r7,#12]
 593:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 594:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the gate function */
 595:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
 1288              	 .loc 2 595 7
 1289 0014 FB68     	 ldr r3,[r7,#12]
 1290 0016 084A     	 ldr r2,.L43
 1291 0018 1340     	 ands r3,r2
 1292 001a FB60     	 str r3,[r7,#12]
 596:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
 1293              	 .loc 2 596 11
 1294 001c FB1C     	 adds r3,r7,#3
 1295 001e 1B78     	 ldrb r3,[r3]
 1296              	 .loc 2 596 29
 1297 0020 1B02     	 lsls r3,r3,#8
 1298              	 .loc 2 596 7
 1299 0022 FA68     	 ldr r2,[r7,#12]
 1300 0024 1343     	 orrs r3,r2
 1301 0026 FB60     	 str r3,[r7,#12]
 597:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 598:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1302              	 .loc 2 598 14
 1303 0028 7B68     	 ldr r3,[r7,#4]
 1304 002a FA68     	 ldr r2,[r7,#12]
 1305 002c 5A60     	 str r2,[r3,#4]
 599:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1306              	 .loc 2 599 1
 1307 002e C046     	 nop
 1308 0030 BD46     	 mov sp,r7
 1309 0032 04B0     	 add sp,sp,#16
 1310              	 
 1311 0034 80BD     	 pop {r7,pc}
 1312              	.L44:
 1313 0036 C046     	 .align 2
 1314              	.L43:
 1315 0038 FFFCFFFF 	 .word -769
 1316              	 .cfi_endproc
 1317              	.LFE131:
 1319              	 .section .text.XMC_CCU8_SLICE_Capture0Config,"ax",%progbits
 1320              	 .align 1
 1321              	 .global XMC_CCU8_SLICE_Capture0Config
 1322              	 .syntax unified
 1323              	 .code 16
 1324              	 .thumb_func
 1325              	 .fpu softvfp
 1327              	XMC_CCU8_SLICE_Capture0Config:
 1328              	.LFB132:
 600:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 601:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure Capture-0 function */
 602:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_Capture0Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
 603:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1329              	 .loc 2 603 1
 1330              	 .cfi_startproc
 1331              	 
 1332              	 
 1333 0000 80B5     	 push {r7,lr}
 1334              	.LCFI60:
 1335              	 .cfi_def_cfa_offset 8
 1336              	 .cfi_offset 7,-8
 1337              	 .cfi_offset 14,-4
 1338 0002 84B0     	 sub sp,sp,#16
 1339              	.LCFI61:
 1340              	 .cfi_def_cfa_offset 24
 1341 0004 00AF     	 add r7,sp,#0
 1342              	.LCFI62:
 1343              	 .cfi_def_cfa_register 7
 1344 0006 7860     	 str r0,[r7,#4]
 1345 0008 0A00     	 movs r2,r1
 1346 000a FB1C     	 adds r3,r7,#3
 1347 000c 1A70     	 strb r2,[r3]
 604:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 605:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 606:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 607:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture0Config:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event)
 608:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 609:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1348              	 .loc 2 609 7
 1349 000e 7B68     	 ldr r3,[r7,#4]
 1350 0010 5B68     	 ldr r3,[r3,#4]
 1351 0012 FB60     	 str r3,[r7,#12]
 610:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 611:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the gate function */
 612:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_CAP0S_Msk);
 1352              	 .loc 2 612 7
 1353 0014 FB68     	 ldr r3,[r7,#12]
 1354 0016 3022     	 movs r2,#48
 1355 0018 9343     	 bics r3,r2
 1356 001a FB60     	 str r3,[r7,#12]
 613:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CAP0S_Pos;
 1357              	 .loc 2 613 11
 1358 001c FB1C     	 adds r3,r7,#3
 1359 001e 1B78     	 ldrb r3,[r3]
 1360              	 .loc 2 613 29
 1361 0020 1B01     	 lsls r3,r3,#4
 1362              	 .loc 2 613 7
 1363 0022 FA68     	 ldr r2,[r7,#12]
 1364 0024 1343     	 orrs r3,r2
 1365 0026 FB60     	 str r3,[r7,#12]
 614:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 615:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1366              	 .loc 2 615 14
 1367 0028 7B68     	 ldr r3,[r7,#4]
 1368 002a FA68     	 ldr r2,[r7,#12]
 1369 002c 5A60     	 str r2,[r3,#4]
 616:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1370              	 .loc 2 616 1
 1371 002e C046     	 nop
 1372 0030 BD46     	 mov sp,r7
 1373 0032 04B0     	 add sp,sp,#16
 1374              	 
 1375 0034 80BD     	 pop {r7,pc}
 1376              	 .cfi_endproc
 1377              	.LFE132:
 1379              	 .section .text.XMC_CCU8_SLICE_Capture1Config,"ax",%progbits
 1380              	 .align 1
 1381              	 .global XMC_CCU8_SLICE_Capture1Config
 1382              	 .syntax unified
 1383              	 .code 16
 1384              	 .thumb_func
 1385              	 .fpu softvfp
 1387              	XMC_CCU8_SLICE_Capture1Config:
 1388              	.LFB133:
 617:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 618:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure Capture-1 function */
 619:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_Capture1Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t even
 620:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1389              	 .loc 2 620 1
 1390              	 .cfi_startproc
 1391              	 
 1392              	 
 1393 0000 80B5     	 push {r7,lr}
 1394              	.LCFI63:
 1395              	 .cfi_def_cfa_offset 8
 1396              	 .cfi_offset 7,-8
 1397              	 .cfi_offset 14,-4
 1398 0002 84B0     	 sub sp,sp,#16
 1399              	.LCFI64:
 1400              	 .cfi_def_cfa_offset 24
 1401 0004 00AF     	 add r7,sp,#0
 1402              	.LCFI65:
 1403              	 .cfi_def_cfa_register 7
 1404 0006 7860     	 str r0,[r7,#4]
 1405 0008 0A00     	 movs r2,r1
 1406 000a FB1C     	 adds r3,r7,#3
 1407 000c 1A70     	 strb r2,[r3]
 621:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 622:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 623:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 624:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_Capture1Config:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event)
 625:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 626:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 627:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1408              	 .loc 2 627 7
 1409 000e 7B68     	 ldr r3,[r7,#4]
 1410 0010 5B68     	 ldr r3,[r3,#4]
 1411 0012 FB60     	 str r3,[r7,#12]
 628:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 629:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the gate function */
 630:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_CAP1S_Msk);
 1412              	 .loc 2 630 7
 1413 0014 FB68     	 ldr r3,[r7,#12]
 1414 0016 C022     	 movs r2,#192
 1415 0018 9343     	 bics r3,r2
 1416 001a FB60     	 str r3,[r7,#12]
 631:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CAP1S_Pos;
 1417              	 .loc 2 631 11
 1418 001c FB1C     	 adds r3,r7,#3
 1419 001e 1B78     	 ldrb r3,[r3]
 1420              	 .loc 2 631 29
 1421 0020 9B01     	 lsls r3,r3,#6
 1422              	 .loc 2 631 7
 1423 0022 FA68     	 ldr r2,[r7,#12]
 1424 0024 1343     	 orrs r3,r2
 1425 0026 FB60     	 str r3,[r7,#12]
 632:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 633:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1426              	 .loc 2 633 14
 1427 0028 7B68     	 ldr r3,[r7,#4]
 1428 002a FA68     	 ldr r2,[r7,#12]
 1429 002c 5A60     	 str r2,[r3,#4]
 634:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1430              	 .loc 2 634 1
 1431 002e C046     	 nop
 1432 0030 BD46     	 mov sp,r7
 1433 0032 04B0     	 add sp,sp,#16
 1434              	 
 1435 0034 80BD     	 pop {r7,pc}
 1436              	 .cfi_endproc
 1437              	.LFE133:
 1439              	 .section .text.XMC_CCU8_SLICE_DirectionConfig,"ax",%progbits
 1440              	 .align 1
 1441              	 .global XMC_CCU8_SLICE_DirectionConfig
 1442              	 .syntax unified
 1443              	 .code 16
 1444              	 .thumb_func
 1445              	 .fpu softvfp
 1447              	XMC_CCU8_SLICE_DirectionConfig:
 1448              	.LFB134:
 635:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 636:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure direction function */
 637:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t eve
 638:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1449              	 .loc 2 638 1
 1450              	 .cfi_startproc
 1451              	 
 1452              	 
 1453 0000 80B5     	 push {r7,lr}
 1454              	.LCFI66:
 1455              	 .cfi_def_cfa_offset 8
 1456              	 .cfi_offset 7,-8
 1457              	 .cfi_offset 14,-4
 1458 0002 84B0     	 sub sp,sp,#16
 1459              	.LCFI67:
 1460              	 .cfi_def_cfa_offset 24
 1461 0004 00AF     	 add r7,sp,#0
 1462              	.LCFI68:
 1463              	 .cfi_def_cfa_register 7
 1464 0006 7860     	 str r0,[r7,#4]
 1465 0008 0A00     	 movs r2,r1
 1466 000a FB1C     	 adds r3,r7,#3
 1467 000c 1A70     	 strb r2,[r3]
 639:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 640:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 641:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 642:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event
 643:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 644:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1468              	 .loc 2 644 7
 1469 000e 7B68     	 ldr r3,[r7,#4]
 1470 0010 5B68     	 ldr r3,[r3,#4]
 1471 0012 FB60     	 str r3,[r7,#12]
 645:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 646:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, Bind the event with the direction function */
 647:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 1472              	 .loc 2 647 7
 1473 0014 FB68     	 ldr r3,[r7,#12]
 1474 0016 084A     	 ldr r2,.L48
 1475 0018 1340     	 ands r3,r2
 1476 001a FB60     	 str r3,[r7,#12]
 648:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 1477              	 .loc 2 648 11
 1478 001c FB1C     	 adds r3,r7,#3
 1479 001e 1B78     	 ldrb r3,[r3]
 1480              	 .loc 2 648 29
 1481 0020 9B02     	 lsls r3,r3,#10
 1482              	 .loc 2 648 7
 1483 0022 FA68     	 ldr r2,[r7,#12]
 1484 0024 1343     	 orrs r3,r2
 1485 0026 FB60     	 str r3,[r7,#12]
 649:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 650:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1486              	 .loc 2 650 14
 1487 0028 7B68     	 ldr r3,[r7,#4]
 1488 002a FA68     	 ldr r2,[r7,#12]
 1489 002c 5A60     	 str r2,[r3,#4]
 651:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1490              	 .loc 2 651 1
 1491 002e C046     	 nop
 1492 0030 BD46     	 mov sp,r7
 1493 0032 04B0     	 add sp,sp,#16
 1494              	 
 1495 0034 80BD     	 pop {r7,pc}
 1496              	.L49:
 1497 0036 C046     	 .align 2
 1498              	.L48:
 1499 0038 FFF3FFFF 	 .word -3073
 1500              	 .cfi_endproc
 1501              	.LFE134:
 1503              	 .section .text.XMC_CCU8_SLICE_StatusBitOverrideConfig,"ax",%progbits
 1504              	 .align 1
 1505              	 .global XMC_CCU8_SLICE_StatusBitOverrideConfig
 1506              	 .syntax unified
 1507              	 .code 16
 1508              	 .thumb_func
 1509              	 .fpu softvfp
 1511              	XMC_CCU8_SLICE_StatusBitOverrideConfig:
 1512              	.LFB135:
 652:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 653:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure slice status bit override function */
 654:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
 655:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1513              	 .loc 2 655 1
 1514              	 .cfi_startproc
 1515              	 
 1516              	 
 1517 0000 80B5     	 push {r7,lr}
 1518              	.LCFI69:
 1519              	 .cfi_def_cfa_offset 8
 1520              	 .cfi_offset 7,-8
 1521              	 .cfi_offset 14,-4
 1522 0002 84B0     	 sub sp,sp,#16
 1523              	.LCFI70:
 1524              	 .cfi_def_cfa_offset 24
 1525 0004 00AF     	 add r7,sp,#0
 1526              	.LCFI71:
 1527              	 .cfi_def_cfa_register 7
 1528 0006 7860     	 str r0,[r7,#4]
 656:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 657:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 658:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
 659:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 660:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1529              	 .loc 2 660 7
 1530 0008 7B68     	 ldr r3,[r7,#4]
 1531 000a 5B68     	 ldr r3,[r3,#4]
 1532 000c FB60     	 str r3,[r7,#12]
 661:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 662:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Map status bit trigger override to Event 1 &
 663:../Libraries/XMCLib/src/xmc_ccu8.c ****          status bit value override to Event 2 */
 664:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
 1533              	 .loc 2 664 7
 1534 000e FB68     	 ldr r3,[r7,#12]
 1535 0010 074A     	 ldr r2,.L51
 1536 0012 1340     	 ands r3,r2
 1537 0014 FB60     	 str r3,[r7,#12]
 665:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
 1538              	 .loc 2 665 7
 1539 0016 FB68     	 ldr r3,[r7,#12]
 1540 0018 8022     	 movs r2,#128
 1541 001a 5202     	 lsls r2,r2,#9
 1542 001c 1343     	 orrs r3,r2
 1543 001e FB60     	 str r3,[r7,#12]
 666:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 667:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1544              	 .loc 2 667 14
 1545 0020 7B68     	 ldr r3,[r7,#4]
 1546 0022 FA68     	 ldr r2,[r7,#12]
 1547 0024 5A60     	 str r2,[r3,#4]
 668:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1548              	 .loc 2 668 1
 1549 0026 C046     	 nop
 1550 0028 BD46     	 mov sp,r7
 1551 002a 04B0     	 add sp,sp,#16
 1552              	 
 1553 002c 80BD     	 pop {r7,pc}
 1554              	.L52:
 1555 002e C046     	 .align 2
 1556              	.L51:
 1557 0030 FFFFFEFF 	 .word -65537
 1558              	 .cfi_endproc
 1559              	.LFE135:
 1561              	 .section .text.XMC_CCU8_SLICE_TrapConfig,"ax",%progbits
 1562              	 .align 1
 1563              	 .global XMC_CCU8_SLICE_TrapConfig
 1564              	 .syntax unified
 1565              	 .code 16
 1566              	 .thumb_func
 1567              	 .fpu softvfp
 1569              	XMC_CCU8_SLICE_TrapConfig:
 1570              	.LFB136:
 669:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 670:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure trap function*/
 671:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
 672:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
 673:../Libraries/XMCLib/src/xmc_ccu8.c ****                                const bool synch_with_pwm)
 674:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1571              	 .loc 2 674 1
 1572              	 .cfi_startproc
 1573              	 
 1574              	 
 1575 0000 80B5     	 push {r7,lr}
 1576              	.LCFI72:
 1577              	 .cfi_def_cfa_offset 8
 1578              	 .cfi_offset 7,-8
 1579              	 .cfi_offset 14,-4
 1580 0002 84B0     	 sub sp,sp,#16
 1581              	.LCFI73:
 1582              	 .cfi_def_cfa_offset 24
 1583 0004 00AF     	 add r7,sp,#0
 1584              	.LCFI74:
 1585              	 .cfi_def_cfa_register 7
 1586 0006 7860     	 str r0,[r7,#4]
 1587 0008 0800     	 movs r0,r1
 1588 000a 1100     	 movs r1,r2
 1589 000c FB1C     	 adds r3,r7,#3
 1590 000e 021C     	 adds r2,r0,#0
 1591 0010 1A70     	 strb r2,[r3]
 1592 0012 BB1C     	 adds r3,r7,#2
 1593 0014 0A1C     	 adds r2,r1,#0
 1594 0016 1A70     	 strb r2,[r3]
 675:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cmc;
 676:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 677:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 678:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 679:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT
 680:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                              (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT
 681:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 682:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc = slice->CMC;
 1595              	 .loc 2 682 7
 1596 0018 7B68     	 ldr r3,[r7,#4]
 1597 001a 5B68     	 ldr r3,[r3,#4]
 1598 001c BB60     	 str r3,[r7,#8]
 683:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 684:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Map trap function to Event 2 */
 685:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 1599              	 .loc 2 685 7
 1600 001e BB68     	 ldr r3,[r7,#8]
 1601 0020 184A     	 ldr r2,.L58
 1602 0022 1340     	 ands r3,r2
 1603 0024 BB60     	 str r3,[r7,#8]
 686:../Libraries/XMCLib/src/xmc_ccu8.c ****   cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 1604              	 .loc 2 686 7
 1605 0026 BB68     	 ldr r3,[r7,#8]
 1606 0028 8022     	 movs r2,#128
 1607 002a 9202     	 lsls r2,r2,#10
 1608 002c 1343     	 orrs r3,r2
 1609 002e BB60     	 str r3,[r7,#8]
 687:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 688:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->CMC = cmc;
 1610              	 .loc 2 688 14
 1611 0030 7B68     	 ldr r3,[r7,#4]
 1612 0032 BA68     	 ldr r2,[r7,#8]
 1613 0034 5A60     	 str r2,[r3,#4]
 689:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 690:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 1614              	 .loc 2 690 6
 1615 0036 7B68     	 ldr r3,[r7,#4]
 1616 0038 5B69     	 ldr r3,[r3,#20]
 1617 003a FB60     	 str r3,[r7,#12]
 691:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 692:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure synchronization option */
 693:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(synch_with_pwm == true)
 1618              	 .loc 2 693 5
 1619 003c BB1C     	 adds r3,r7,#2
 1620 003e 1B78     	 ldrb r3,[r3]
 1621 0040 002B     	 cmp r3,#0
 1622 0042 05D0     	 beq .L54
 694:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 695:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 1623              	 .loc 2 695 8
 1624 0044 FB68     	 ldr r3,[r7,#12]
 1625 0046 8022     	 movs r2,#128
 1626 0048 9203     	 lsls r2,r2,#14
 1627 004a 1343     	 orrs r3,r2
 1628 004c FB60     	 str r3,[r7,#12]
 1629 004e 03E0     	 b .L55
 1630              	.L54:
 696:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 697:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 698:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 699:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 1631              	 .loc 2 699 8
 1632 0050 FB68     	 ldr r3,[r7,#12]
 1633 0052 0D4A     	 ldr r2,.L58+4
 1634 0054 1340     	 ands r3,r2
 1635 0056 FB60     	 str r3,[r7,#12]
 1636              	.L55:
 700:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 701:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 702:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure exit mode */
 703:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 1637              	 .loc 2 703 5
 1638 0058 FB1C     	 adds r3,r7,#3
 1639 005a 1B78     	 ldrb r3,[r3]
 1640 005c 012B     	 cmp r3,#1
 1641 005e 05D1     	 bne .L56
 704:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 705:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 1642              	 .loc 2 705 8
 1643 0060 FB68     	 ldr r3,[r7,#12]
 1644 0062 8022     	 movs r2,#128
 1645 0064 D203     	 lsls r2,r2,#15
 1646 0066 1343     	 orrs r3,r2
 1647 0068 FB60     	 str r3,[r7,#12]
 1648 006a 03E0     	 b .L57
 1649              	.L56:
 706:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 707:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 708:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 709:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 1650              	 .loc 2 709 8
 1651 006c FB68     	 ldr r3,[r7,#12]
 1652 006e 074A     	 ldr r2,.L58+8
 1653 0070 1340     	 ands r3,r2
 1654 0072 FB60     	 str r3,[r7,#12]
 1655              	.L57:
 710:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 711:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 712:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 1656              	 .loc 2 712 13
 1657 0074 7B68     	 ldr r3,[r7,#4]
 1658 0076 FA68     	 ldr r2,[r7,#12]
 1659 0078 5A61     	 str r2,[r3,#20]
 713:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1660              	 .loc 2 713 1
 1661 007a C046     	 nop
 1662 007c BD46     	 mov sp,r7
 1663 007e 04B0     	 add sp,sp,#16
 1664              	 
 1665 0080 80BD     	 pop {r7,pc}
 1666              	.L59:
 1667 0082 C046     	 .align 2
 1668              	.L58:
 1669 0084 FFFFFDFF 	 .word -131073
 1670 0088 FFFFDFFF 	 .word -2097153
 1671 008c FFFFBFFF 	 .word -4194305
 1672              	 .cfi_endproc
 1673              	.LFE136:
 1675              	 .section .text.XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent,"ax",%progbits
 1676              	 .align 1
 1677              	 .global XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent
 1678              	 .syntax unified
 1679              	 .code 16
 1680              	 .thumb_func
 1681              	 .fpu softvfp
 1683              	XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:
 1684              	.LFB137:
 714:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 715:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure a slice Status Bit Override event */
 716:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
 717:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_
 718:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                     const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_
 719:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1685              	 .loc 2 719 1
 1686              	 .cfi_startproc
 1687              	 
 1688              	 
 1689 0000 80B5     	 push {r7,lr}
 1690              	.LCFI75:
 1691              	 .cfi_def_cfa_offset 8
 1692              	 .cfi_offset 7,-8
 1693              	 .cfi_offset 14,-4
 1694 0002 86B0     	 sub sp,sp,#24
 1695              	.LCFI76:
 1696              	 .cfi_def_cfa_offset 32
 1697 0004 00AF     	 add r7,sp,#0
 1698              	.LCFI77:
 1699              	 .cfi_def_cfa_register 7
 1700 0006 F860     	 str r0,[r7,#12]
 1701 0008 B960     	 str r1,[r7,#8]
 1702 000a 7A60     	 str r2,[r7,#4]
 720:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 721:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 722:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Slice Pointer", XMC_CCU8_IsVal
 723:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 724:../Libraries/XMCLib/src/xmc_ccu8.c ****          XMC_CCU8_SLICE_IsInputvalid(ev1_config->mapped_input));
 725:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity", 
 726:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(ev1_config->edge));
 727:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity", 
 728:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((ev1_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 729:../Libraries/XMCLib/src/xmc_ccu8.c ****               (ev1_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 730:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
 731:../Libraries/XMCLib/src/xmc_ccu8.c ****               XMC_CCU8_SLICE_CHECK_EVENT_FILTER(ev1_config->duration));
 732:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 733:../Libraries/XMCLib/src/xmc_ccu8.c ****           XMC_CCU8_SLICE_IsInputvalid(ev2_config->mapped_input));
 734:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity",
 735:../Libraries/XMCLib/src/xmc_ccu8.c ****               XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(ev2_config->edge));
 736:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity",
 737:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((ev2_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 738:../Libraries/XMCLib/src/xmc_ccu8.c ****               (ev2_config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 739:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
 740:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EVENT_FILTER(ev2_config->duration));
 741:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 742:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 743:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS2;
 744:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 745:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 1 */
 746:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS2_EV1EM_Pos);
 747:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS2_EV1EM_Pos;
 748:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 749:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 2 */
 750:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS2_EV2EM_Pos);
 751:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS2_EV2EM_Pos;
 752:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 753:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 1 */
 754:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS2_EV1LM_Pos);
 755:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS2_EV1LM_Pos;
 756:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 757:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 2 */
 758:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS2_EV2LM_Pos);
 759:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS2_EV2LM_Pos;
 760:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 761:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 1 */
 762:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS2_LPF1M_Pos);
 763:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS2_LPF1M_Pos;
 764:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 765:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 2 */
 766:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS2_LPF2M_Pos);
 767:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS2_LPF2M_Pos;
 768:../Libraries/XMCLib/src/xmc_ccu8.c ****   
 769:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS2 = ins; 
 770:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 771:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS1;
 772:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the input for Event1 */
 773:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV1IS_Pos);
 774:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS1_EV1IS_Pos;
 775:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 776:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally, the input for Event2 */
 777:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
 778:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;
 779:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 780:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS1 = ins;  
 781:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 782:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS;
 1703              	 .loc 2 782 7
 1704 000c FB68     	 ldr r3,[r7,#12]
 1705 000e 1B68     	 ldr r3,[r3]
 1706 0010 7B61     	 str r3,[r7,#20]
 783:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 784:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 1 */
 785:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
 1707              	 .loc 2 785 7
 1708 0012 7B69     	 ldr r3,[r7,#20]
 1709 0014 2A4A     	 ldr r2,.L61
 1710 0016 1340     	 ands r3,r2
 1711 0018 7B61     	 str r3,[r7,#20]
 786:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 1712              	 .loc 2 786 32
 1713 001a BB68     	 ldr r3,[r7,#8]
 1714 001c 5B78     	 ldrb r3,[r3,#1]
 1715              	 .loc 2 786 40
 1716 001e 9B04     	 lsls r3,r3,#18
 1717              	 .loc 2 786 7
 1718 0020 7A69     	 ldr r2,[r7,#20]
 1719 0022 1343     	 orrs r3,r2
 1720 0024 7B61     	 str r3,[r7,#20]
 787:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 788:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the edge sensitivity for event 2 */
 789:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
 1721              	 .loc 2 789 7
 1722 0026 7B69     	 ldr r3,[r7,#20]
 1723 0028 264A     	 ldr r2,.L61+4
 1724 002a 1340     	 ands r3,r2
 1725 002c 7B61     	 str r3,[r7,#20]
 790:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 1726              	 .loc 2 790 32
 1727 002e 7B68     	 ldr r3,[r7,#4]
 1728 0030 5B78     	 ldrb r3,[r3,#1]
 1729              	 .loc 2 790 40
 1730 0032 1B05     	 lsls r3,r3,#20
 1731              	 .loc 2 790 7
 1732 0034 7A69     	 ldr r2,[r7,#20]
 1733 0036 1343     	 orrs r3,r2
 1734 0038 7B61     	 str r3,[r7,#20]
 791:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 792:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 1 */
 793:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
 1735              	 .loc 2 793 7
 1736 003a 7B69     	 ldr r3,[r7,#20]
 1737 003c 224A     	 ldr r2,.L61+8
 1738 003e 1340     	 ands r3,r2
 1739 0040 7B61     	 str r3,[r7,#20]
 794:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 1740              	 .loc 2 794 32
 1741 0042 BB68     	 ldr r3,[r7,#8]
 1742 0044 9B78     	 ldrb r3,[r3,#2]
 1743              	 .loc 2 794 41
 1744 0046 DB05     	 lsls r3,r3,#23
 1745              	 .loc 2 794 7
 1746 0048 7A69     	 ldr r2,[r7,#20]
 1747 004a 1343     	 orrs r3,r2
 1748 004c 7B61     	 str r3,[r7,#20]
 795:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 796:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the level sensitivity for event 2 */
 797:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
 1749              	 .loc 2 797 7
 1750 004e 7B69     	 ldr r3,[r7,#20]
 1751 0050 1E4A     	 ldr r2,.L61+12
 1752 0052 1340     	 ands r3,r2
 1753 0054 7B61     	 str r3,[r7,#20]
 798:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 1754              	 .loc 2 798 32
 1755 0056 7B68     	 ldr r3,[r7,#4]
 1756 0058 9B78     	 ldrb r3,[r3,#2]
 1757              	 .loc 2 798 41
 1758 005a 1B06     	 lsls r3,r3,#24
 1759              	 .loc 2 798 7
 1760 005c 7A69     	 ldr r2,[r7,#20]
 1761 005e 1343     	 orrs r3,r2
 1762 0060 7B61     	 str r3,[r7,#20]
 799:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 800:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 1 */
 801:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
 1763              	 .loc 2 801 7
 1764 0062 7B69     	 ldr r3,[r7,#20]
 1765 0064 1A4A     	 ldr r2,.L61+16
 1766 0066 1340     	 ands r3,r2
 1767 0068 7B61     	 str r3,[r7,#20]
 802:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 1768              	 .loc 2 802 32
 1769 006a BB68     	 ldr r3,[r7,#8]
 1770 006c DB78     	 ldrb r3,[r3,#3]
 1771              	 .loc 2 802 44
 1772 006e DB06     	 lsls r3,r3,#27
 1773              	 .loc 2 802 7
 1774 0070 7A69     	 ldr r2,[r7,#20]
 1775 0072 1343     	 orrs r3,r2
 1776 0074 7B61     	 str r3,[r7,#20]
 803:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 804:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Configure the debounce filter for event 2 */
 805:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
 1777              	 .loc 2 805 7
 1778 0076 7B69     	 ldr r3,[r7,#20]
 1779 0078 164A     	 ldr r2,.L61+20
 1780 007a 1340     	 ands r3,r2
 1781 007c 7B61     	 str r3,[r7,#20]
 806:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 1782              	 .loc 2 806 32
 1783 007e 7B68     	 ldr r3,[r7,#4]
 1784 0080 DB78     	 ldrb r3,[r3,#3]
 1785              	 .loc 2 806 44
 1786 0082 5B07     	 lsls r3,r3,#29
 1787              	 .loc 2 806 7
 1788 0084 7A69     	 ldr r2,[r7,#20]
 1789 0086 1343     	 orrs r3,r2
 1790 0088 7B61     	 str r3,[r7,#20]
 807:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 808:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the input for Event1 */
 809:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
 1791              	 .loc 2 809 7
 1792 008a 7B69     	 ldr r3,[r7,#20]
 1793 008c F022     	 movs r2,#240
 1794 008e 9343     	 bics r3,r2
 1795 0090 7B61     	 str r3,[r7,#20]
 810:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 1796              	 .loc 2 810 32
 1797 0092 BB68     	 ldr r3,[r7,#8]
 1798 0094 1B78     	 ldrb r3,[r3]
 1799              	 .loc 2 810 48
 1800 0096 1B01     	 lsls r3,r3,#4
 1801              	 .loc 2 810 7
 1802 0098 7A69     	 ldr r2,[r7,#20]
 1803 009a 1343     	 orrs r3,r2
 1804 009c 7B61     	 str r3,[r7,#20]
 811:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 812:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally, the input for Event2 */
 813:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
 1805              	 .loc 2 813 7
 1806 009e 7B69     	 ldr r3,[r7,#20]
 1807 00a0 0D4A     	 ldr r2,.L61+24
 1808 00a2 1340     	 ands r3,r2
 1809 00a4 7B61     	 str r3,[r7,#20]
 814:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 1810              	 .loc 2 814 32
 1811 00a6 7B68     	 ldr r3,[r7,#4]
 1812 00a8 1B78     	 ldrb r3,[r3]
 1813              	 .loc 2 814 48
 1814 00aa 1B02     	 lsls r3,r3,#8
 1815              	 .loc 2 814 7
 1816 00ac 7A69     	 ldr r2,[r7,#20]
 1817 00ae 1343     	 orrs r3,r2
 1818 00b0 7B61     	 str r3,[r7,#20]
 815:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 816:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS = ins;
 1819              	 .loc 2 816 14
 1820 00b2 FB68     	 ldr r3,[r7,#12]
 1821 00b4 7A69     	 ldr r2,[r7,#20]
 1822 00b6 1A60     	 str r2,[r3]
 817:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 818:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 1823              	 .loc 2 818 1
 1824 00b8 C046     	 nop
 1825 00ba BD46     	 mov sp,r7
 1826 00bc 06B0     	 add sp,sp,#24
 1827              	 
 1828 00be 80BD     	 pop {r7,pc}
 1829              	.L62:
 1830              	 .align 2
 1831              	.L61:
 1832 00c0 FFFFF3FF 	 .word -786433
 1833 00c4 FFFFCFFF 	 .word -3145729
 1834 00c8 FFFF7FFF 	 .word -8388609
 1835 00cc FFFFFFFE 	 .word -16777217
 1836 00d0 FFFFFFE7 	 .word -402653185
 1837 00d4 FFFFFF9F 	 .word -1610612737
 1838 00d8 FFF0FFFF 	 .word -3841
 1839              	 .cfi_endproc
 1840              	.LFE137:
 1842              	 .section .text.XMC_CCU8_SLICE_ConfigureEvent,"ax",%progbits
 1843              	 .align 1
 1844              	 .global XMC_CCU8_SLICE_ConfigureEvent
 1845              	 .syntax unified
 1846              	 .code 16
 1847              	 .thumb_func
 1848              	 .fpu softvfp
 1850              	XMC_CCU8_SLICE_ConfigureEvent:
 1851              	.LFB138:
 819:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 820:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to configure a slice trigger event */
 821:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
 822:../Libraries/XMCLib/src/xmc_ccu8.c ****                                    const XMC_CCU8_SLICE_EVENT_t event,
 823:../Libraries/XMCLib/src/xmc_ccu8.c ****                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
 824:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 1852              	 .loc 2 824 1
 1853              	 .cfi_startproc
 1854              	 
 1855              	 
 1856 0000 90B5     	 push {r4,r7,lr}
 1857              	.LCFI78:
 1858              	 .cfi_def_cfa_offset 12
 1859              	 .cfi_offset 4,-12
 1860              	 .cfi_offset 7,-8
 1861              	 .cfi_offset 14,-4
 1862 0002 89B0     	 sub sp,sp,#36
 1863              	.LCFI79:
 1864              	 .cfi_def_cfa_offset 48
 1865 0004 00AF     	 add r7,sp,#0
 1866              	.LCFI80:
 1867              	 .cfi_def_cfa_register 7
 1868 0006 F860     	 str r0,[r7,#12]
 1869 0008 7A60     	 str r2,[r7,#4]
 1870 000a 0B24     	 movs r4,#11
 1871 000c 3B19     	 adds r3,r7,r4
 1872 000e 0A1C     	 adds r2,r1,#0
 1873 0010 1A70     	 strb r2,[r3]
 825:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 826:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  pos;
 827:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  offset;
 828:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 829:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 830:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event)
 831:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Input",  XMC_CCU8_SLICE_IsInputvalid(config->ma
 832:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Edge Sensitivity",
 833:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EDGE_SENSITIVITY(config->edge));
 834:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Level Sensitivity", 
 835:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 836:../Libraries/XMCLib/src/xmc_ccu8.c ****               (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 837:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
 838:../Libraries/XMCLib/src/xmc_ccu8.c ****              XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));
 839:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 840:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Calculate offset with reference to event */
 841:../Libraries/XMCLib/src/xmc_ccu8.c ****   offset = ((uint8_t) event) - 1U;
 1874              	 .loc 2 841 10
 1875 0012 1F20     	 movs r0,#31
 1876 0014 3B18     	 adds r3,r7,r0
 1877 0016 3A19     	 adds r2,r7,r4
 1878 0018 1278     	 ldrb r2,[r2]
 1879 001a 013A     	 subs r2,r2,#1
 1880 001c 1A70     	 strb r2,[r3]
 842:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 843:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 844:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS2;
 845:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 846:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, configure the edge sensitivity */
 847:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS2_EV0EM_Pos) + (uint8_t)(offset << 2U);
 848:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 849:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->edge) << pos;
 850:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 851:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the level */
 852:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS2_EV0LM_Pos) + (uint8_t)(offset << 2U);
 853:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 854:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) (config->level)) << pos;
 855:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 856:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the debounce filter */
 857:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS2_LPF0M_Pos) + (uint8_t)(offset << 2U);
 858:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 859:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->duration) << pos;
 860:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 861:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS2 = ins;
 862:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 863:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS1;
 864:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 865:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally the input */
 866:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS1_EV0IS_Pos) + (uint8_t)(offset << 3U);
 867:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 868:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 869:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 870:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS1 = ins;
 871:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 872:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 873:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS;
 1881              	 .loc 2 873 7
 1882 001e FB68     	 ldr r3,[r7,#12]
 1883 0020 1B68     	 ldr r3,[r3]
 1884 0022 BB61     	 str r3,[r7,#24]
 874:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 875:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First, configure the edge sensitivity */
 876:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 1885              	 .loc 2 876 46
 1886 0024 3B18     	 adds r3,r7,r0
 1887 0026 1B78     	 ldrb r3,[r3]
 1888 0028 DB18     	 adds r3,r3,r3
 1889 002a DAB2     	 uxtb r2,r3
 1890              	 .loc 2 876 7
 1891 002c 1721     	 movs r1,#23
 1892 002e 7B18     	 adds r3,r7,r1
 1893 0030 1032     	 adds r2,r2,#16
 1894 0032 1A70     	 strb r2,[r3]
 877:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 1895              	 .loc 2 877 63
 1896 0034 7B18     	 adds r3,r7,r1
 1897 0036 1B78     	 ldrb r3,[r3]
 1898 0038 0322     	 movs r2,#3
 1899 003a 9A40     	 lsls r2,r2,r3
 1900 003c 1300     	 movs r3,r2
 1901              	 .loc 2 877 10
 1902 003e DA43     	 mvns r2,r3
 1903              	 .loc 2 877 7
 1904 0040 BB69     	 ldr r3,[r7,#24]
 1905 0042 1340     	 ands r3,r2
 1906 0044 BB61     	 str r3,[r7,#24]
 878:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->edge) << pos;
 1907              	 .loc 2 878 28
 1908 0046 7B68     	 ldr r3,[r7,#4]
 1909 0048 5B78     	 ldrb r3,[r3,#1]
 1910              	 .loc 2 878 11
 1911 004a 1A00     	 movs r2,r3
 1912              	 .loc 2 878 36
 1913 004c 7B18     	 adds r3,r7,r1
 1914 004e 1B78     	 ldrb r3,[r3]
 1915 0050 9A40     	 lsls r2,r2,r3
 1916 0052 1300     	 movs r3,r2
 1917              	 .loc 2 878 7
 1918 0054 BA69     	 ldr r2,[r7,#24]
 1919 0056 1343     	 orrs r3,r2
 1920 0058 BB61     	 str r3,[r7,#24]
 879:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 880:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the level */
 881:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 1921              	 .loc 2 881 7
 1922 005a 7B18     	 adds r3,r7,r1
 1923 005c 3A18     	 adds r2,r7,r0
 1924 005e 1278     	 ldrb r2,[r2]
 1925 0060 1632     	 adds r2,r2,#22
 1926 0062 1A70     	 strb r2,[r3]
 882:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 1927              	 .loc 2 882 64
 1928 0064 7B18     	 adds r3,r7,r1
 1929 0066 1B78     	 ldrb r3,[r3]
 1930 0068 0122     	 movs r2,#1
 1931 006a 9A40     	 lsls r2,r2,r3
 1932 006c 1300     	 movs r3,r2
 1933              	 .loc 2 882 10
 1934 006e DA43     	 mvns r2,r3
 1935              	 .loc 2 882 7
 1936 0070 BB69     	 ldr r3,[r7,#24]
 1937 0072 1340     	 ands r3,r2
 1938 0074 BB61     	 str r3,[r7,#24]
 883:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) (config->level)) << pos;
 1939              	 .loc 2 883 29
 1940 0076 7B68     	 ldr r3,[r7,#4]
 1941 0078 9B78     	 ldrb r3,[r3,#2]
 1942              	 .loc 2 883 11
 1943 007a 1A00     	 movs r2,r3
 1944              	 .loc 2 883 39
 1945 007c 7B18     	 adds r3,r7,r1
 1946 007e 1B78     	 ldrb r3,[r3]
 1947 0080 9A40     	 lsls r2,r2,r3
 1948 0082 1300     	 movs r3,r2
 1949              	 .loc 2 883 7
 1950 0084 BA69     	 ldr r2,[r7,#24]
 1951 0086 1343     	 orrs r3,r2
 1952 0088 BB61     	 str r3,[r7,#24]
 884:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 885:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Next, the debounce filter */
 886:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 1953              	 .loc 2 886 46
 1954 008a 3B18     	 adds r3,r7,r0
 1955 008c 1B78     	 ldrb r3,[r3]
 1956 008e DB18     	 adds r3,r3,r3
 1957 0090 DAB2     	 uxtb r2,r3
 1958              	 .loc 2 886 7
 1959 0092 7B18     	 adds r3,r7,r1
 1960 0094 1932     	 adds r2,r2,#25
 1961 0096 1A70     	 strb r2,[r3]
 887:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 1962              	 .loc 2 887 65
 1963 0098 7B18     	 adds r3,r7,r1
 1964 009a 1B78     	 ldrb r3,[r3]
 1965 009c 0322     	 movs r2,#3
 1966 009e 9A40     	 lsls r2,r2,r3
 1967 00a0 1300     	 movs r3,r2
 1968              	 .loc 2 887 10
 1969 00a2 DA43     	 mvns r2,r3
 1970              	 .loc 2 887 7
 1971 00a4 BB69     	 ldr r3,[r7,#24]
 1972 00a6 1340     	 ands r3,r2
 1973 00a8 BB61     	 str r3,[r7,#24]
 888:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->duration) << pos;
 1974              	 .loc 2 888 28
 1975 00aa 7B68     	 ldr r3,[r7,#4]
 1976 00ac DB78     	 ldrb r3,[r3,#3]
 1977              	 .loc 2 888 11
 1978 00ae 1A00     	 movs r2,r3
 1979              	 .loc 2 888 40
 1980 00b0 7B18     	 adds r3,r7,r1
 1981 00b2 1B78     	 ldrb r3,[r3]
 1982 00b4 9A40     	 lsls r2,r2,r3
 1983 00b6 1300     	 movs r3,r2
 1984              	 .loc 2 888 7
 1985 00b8 BA69     	 ldr r2,[r7,#24]
 1986 00ba 1343     	 orrs r3,r2
 1987 00bc BB61     	 str r3,[r7,#24]
 889:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 890:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Finally the input */
 891:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 1988              	 .loc 2 891 7
 1989 00be 7B18     	 adds r3,r7,r1
 1990 00c0 3A18     	 adds r2,r7,r0
 1991 00c2 1278     	 ldrb r2,[r2]
 1992 00c4 9200     	 lsls r2,r2,#2
 1993 00c6 1A70     	 strb r2,[r3]
 892:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 1994              	 .loc 2 892 64
 1995 00c8 7B18     	 adds r3,r7,r1
 1996 00ca 1B78     	 ldrb r3,[r3]
 1997 00cc 0F22     	 movs r2,#15
 1998 00ce 9A40     	 lsls r2,r2,r3
 1999 00d0 1300     	 movs r3,r2
 2000              	 .loc 2 892 10
 2001 00d2 DA43     	 mvns r2,r3
 2002              	 .loc 2 892 7
 2003 00d4 BB69     	 ldr r3,[r7,#24]
 2004 00d6 1340     	 ands r3,r2
 2005 00d8 BB61     	 str r3,[r7,#24]
 893:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 2006              	 .loc 2 893 28
 2007 00da 7B68     	 ldr r3,[r7,#4]
 2008 00dc 1B78     	 ldrb r3,[r3]
 2009              	 .loc 2 893 11
 2010 00de 1A00     	 movs r2,r3
 2011              	 .loc 2 893 44
 2012 00e0 7B18     	 adds r3,r7,r1
 2013 00e2 1B78     	 ldrb r3,[r3]
 2014 00e4 9A40     	 lsls r2,r2,r3
 2015 00e6 1300     	 movs r3,r2
 2016              	 .loc 2 893 7
 2017 00e8 BA69     	 ldr r2,[r7,#24]
 2018 00ea 1343     	 orrs r3,r2
 2019 00ec BB61     	 str r3,[r7,#24]
 894:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 895:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS = ins;
 2020              	 .loc 2 895 14
 2021 00ee FB68     	 ldr r3,[r7,#12]
 2022 00f0 BA69     	 ldr r2,[r7,#24]
 2023 00f2 1A60     	 str r2,[r3]
 896:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 897:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2024              	 .loc 2 897 1
 2025 00f4 C046     	 nop
 2026 00f6 BD46     	 mov sp,r7
 2027 00f8 09B0     	 add sp,sp,#36
 2028              	 
 2029 00fa 90BD     	 pop {r4,r7,pc}
 2030              	 .cfi_endproc
 2031              	.LFE138:
 2033              	 .section .text.XMC_CCU8_SLICE_SetInput,"ax",%progbits
 2034              	 .align 1
 2035              	 .global XMC_CCU8_SLICE_SetInput
 2036              	 .syntax unified
 2037              	 .code 16
 2038              	 .thumb_func
 2039              	 .fpu softvfp
 2041              	XMC_CCU8_SLICE_SetInput:
 2042              	.LFB139:
 898:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 899:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to bind an input to a slice trigger event */
 900:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetInput(XMC_CCU8_SLICE_t *const slice,
 901:../Libraries/XMCLib/src/xmc_ccu8.c ****                          const XMC_CCU8_SLICE_EVENT_t event,
 902:../Libraries/XMCLib/src/xmc_ccu8.c ****                              const XMC_CCU8_SLICE_INPUT_t input)
 903:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2043              	 .loc 2 903 1
 2044              	 .cfi_startproc
 2045              	 
 2046              	 
 2047 0000 80B5     	 push {r7,lr}
 2048              	.LCFI81:
 2049              	 .cfi_def_cfa_offset 8
 2050              	 .cfi_offset 7,-8
 2051              	 .cfi_offset 14,-4
 2052 0002 84B0     	 sub sp,sp,#16
 2053              	.LCFI82:
 2054              	 .cfi_def_cfa_offset 24
 2055 0004 00AF     	 add r7,sp,#0
 2056              	.LCFI83:
 2057              	 .cfi_def_cfa_register 7
 2058 0006 7860     	 str r0,[r7,#4]
 2059 0008 0800     	 movs r0,r1
 2060 000a 1100     	 movs r1,r2
 2061 000c FB1C     	 adds r3,r7,#3
 2062 000e 021C     	 adds r2,r0,#0
 2063 0010 1A70     	 strb r2,[r3]
 2064 0012 BB1C     	 adds r3,r7,#2
 2065 0014 0A1C     	 adds r2,r1,#0
 2066 0016 1A70     	 strb r2,[r3]
 904:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t ins;
 905:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  pos;
 906:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t  offset;
 907:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 908:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
 909:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
 910:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Input", XMC_CCU8_SLICE_IsInputvalid(input));
 911:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 912:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Calculate offset with reference to event */
 913:../Libraries/XMCLib/src/xmc_ccu8.c ****   offset = ((uint8_t) event) - 1U;
 2067              	 .loc 2 913 10
 2068 0018 0F20     	 movs r0,#15
 2069 001a 3B18     	 adds r3,r7,r0
 2070 001c FA1C     	 adds r2,r7,#3
 2071 001e 1278     	 ldrb r2,[r2]
 2072 0020 013A     	 subs r2,r2,#1
 2073 0022 1A70     	 strb r2,[r3]
 914:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 915:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V3) /* Defined for XMC1400 devices only */
 916:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS1_EV0IS_Pos) + (uint8_t) (offset << 3U);
 917:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS1;
 918:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 919:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) input) << pos;
 920:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 921:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS1 = ins;
 922:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
 923:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 924:../Libraries/XMCLib/src/xmc_ccu8.c ****   pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 2074              	 .loc 2 924 7
 2075 0024 0E21     	 movs r1,#14
 2076 0026 7B18     	 adds r3,r7,r1
 2077 0028 3A18     	 adds r2,r7,r0
 2078 002a 1278     	 ldrb r2,[r2]
 2079 002c 9200     	 lsls r2,r2,#2
 2080 002e 1A70     	 strb r2,[r3]
 925:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins = slice->INS;
 2081              	 .loc 2 925 7
 2082 0030 7B68     	 ldr r3,[r7,#4]
 2083 0032 1B68     	 ldr r3,[r3]
 2084 0034 BB60     	 str r3,[r7,#8]
 926:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 2085              	 .loc 2 926 64
 2086 0036 7B18     	 adds r3,r7,r1
 2087 0038 1B78     	 ldrb r3,[r3]
 2088 003a 0F22     	 movs r2,#15
 2089 003c 9A40     	 lsls r2,r2,r3
 2090 003e 1300     	 movs r3,r2
 2091              	 .loc 2 926 10
 2092 0040 DA43     	 mvns r2,r3
 2093              	 .loc 2 926 7
 2094 0042 BB68     	 ldr r3,[r7,#8]
 2095 0044 1340     	 ands r3,r2
 2096 0046 BB60     	 str r3,[r7,#8]
 927:../Libraries/XMCLib/src/xmc_ccu8.c ****   ins |= ((uint32_t) input) << pos;
 2097              	 .loc 2 927 11
 2098 0048 BB1C     	 adds r3,r7,#2
 2099 004a 1A78     	 ldrb r2,[r3]
 2100              	 .loc 2 927 29
 2101 004c 7B18     	 adds r3,r7,r1
 2102 004e 1B78     	 ldrb r3,[r3]
 2103 0050 9A40     	 lsls r2,r2,r3
 2104 0052 1300     	 movs r3,r2
 2105              	 .loc 2 927 7
 2106 0054 BA68     	 ldr r2,[r7,#8]
 2107 0056 1343     	 orrs r3,r2
 2108 0058 BB60     	 str r3,[r7,#8]
 928:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 929:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->INS = ins;
 2109              	 .loc 2 929 14
 2110 005a 7B68     	 ldr r3,[r7,#4]
 2111 005c BA68     	 ldr r2,[r7,#8]
 2112 005e 1A60     	 str r2,[r3]
 930:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
 931:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2113              	 .loc 2 931 1
 2114 0060 C046     	 nop
 2115 0062 BD46     	 mov sp,r7
 2116 0064 04B0     	 add sp,sp,#16
 2117              	 
 2118 0066 80BD     	 pop {r7,pc}
 2119              	 .cfi_endproc
 2120              	.LFE139:
 2122              	 .section .text.XMC_CCU8_SLICE_SetTimerRepeatMode,"ax",%progbits
 2123              	 .align 1
 2124              	 .global XMC_CCU8_SLICE_SetTimerRepeatMode
 2125              	 .syntax unified
 2126              	 .code 16
 2127              	 .thumb_func
 2128              	 .fpu softvfp
 2130              	XMC_CCU8_SLICE_SetTimerRepeatMode:
 2131              	.LFB140:
 932:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 933:../Libraries/XMCLib/src/xmc_ccu8.c **** /* API to program timer repeat mode - Single shot vs repeat  */
 934:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerRepeatMode(XMC_CCU8_SLICE_t *const slice,
 935:../Libraries/XMCLib/src/xmc_ccu8.c ****                                    const XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t mode)
 936:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2132              	 .loc 2 936 1
 2133              	 .cfi_startproc
 2134              	 
 2135              	 
 2136 0000 80B5     	 push {r7,lr}
 2137              	.LCFI84:
 2138              	 .cfi_def_cfa_offset 8
 2139              	 .cfi_offset 7,-8
 2140              	 .cfi_offset 14,-4
 2141 0002 84B0     	 sub sp,sp,#16
 2142              	.LCFI85:
 2143              	 .cfi_def_cfa_offset 24
 2144 0004 00AF     	 add r7,sp,#0
 2145              	.LCFI86:
 2146              	 .cfi_def_cfa_register 7
 2147 0006 7860     	 str r0,[r7,#4]
 2148 0008 0A00     	 movs r2,r1
 2149 000a FB1C     	 adds r3,r7,#3
 2150 000c 1A70     	 strb r2,[r3]
 937:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 938:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 939:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice
 940:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode", 
 941:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((mode == XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
 942:../Libraries/XMCLib/src/xmc_ccu8.c ****               (mode == (mode == XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT))));
 943:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 944:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 2151              	 .loc 2 944 6
 2152 000e 7B68     	 ldr r3,[r7,#4]
 2153 0010 5B69     	 ldr r3,[r3,#20]
 2154 0012 FB60     	 str r3,[r7,#12]
 945:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 946:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 2155              	 .loc 2 946 5
 2156 0014 FB1C     	 adds r3,r7,#3
 2157 0016 1B78     	 ldrb r3,[r3]
 2158 0018 002B     	 cmp r3,#0
 2159 001a 04D1     	 bne .L66
 947:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 948:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TSSM_Msk);
 2160              	 .loc 2 948 8
 2161 001c FB68     	 ldr r3,[r7,#12]
 2162 001e 0222     	 movs r2,#2
 2163 0020 9343     	 bics r3,r2
 2164 0022 FB60     	 str r3,[r7,#12]
 2165 0024 03E0     	 b .L67
 2166              	.L66:
 949:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 950:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 951:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 952:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TSSM_Msk;
 2167              	 .loc 2 952 8
 2168 0026 FB68     	 ldr r3,[r7,#12]
 2169 0028 0222     	 movs r2,#2
 2170 002a 1343     	 orrs r3,r2
 2171 002c FB60     	 str r3,[r7,#12]
 2172              	.L67:
 953:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 954:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 955:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 2173              	 .loc 2 955 13
 2174 002e 7B68     	 ldr r3,[r7,#4]
 2175 0030 FA68     	 ldr r2,[r7,#12]
 2176 0032 5A61     	 str r2,[r3,#20]
 956:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2177              	 .loc 2 956 1
 2178 0034 C046     	 nop
 2179 0036 BD46     	 mov sp,r7
 2180 0038 04B0     	 add sp,sp,#16
 2181              	 
 2182 003a 80BD     	 pop {r7,pc}
 2183              	 .cfi_endproc
 2184              	.LFE140:
 2186              	 .section .text.XMC_CCU8_SLICE_SetTimerCountingMode,"ax",%progbits
 2187              	 .align 1
 2188              	 .global XMC_CCU8_SLICE_SetTimerCountingMode
 2189              	 .syntax unified
 2190              	 .code 16
 2191              	 .thumb_func
 2192              	 .fpu softvfp
 2194              	XMC_CCU8_SLICE_SetTimerCountingMode:
 2195              	.LFB141:
 957:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 958:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs timer counting mode  */
 959:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerCountingMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_
 960:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2196              	 .loc 2 960 1
 2197              	 .cfi_startproc
 2198              	 
 2199              	 
 2200 0000 80B5     	 push {r7,lr}
 2201              	.LCFI87:
 2202              	 .cfi_def_cfa_offset 8
 2203              	 .cfi_offset 7,-8
 2204              	 .cfi_offset 14,-4
 2205 0002 84B0     	 sub sp,sp,#16
 2206              	.LCFI88:
 2207              	 .cfi_def_cfa_offset 24
 2208 0004 00AF     	 add r7,sp,#0
 2209              	.LCFI89:
 2210              	 .cfi_def_cfa_register 7
 2211 0006 7860     	 str r0,[r7,#4]
 2212 0008 0A00     	 movs r2,r1
 2213 000a FB1C     	 adds r3,r7,#3
 2214 000c 1A70     	 strb r2,[r3]
 961:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
 962:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 963:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
 964:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCountingMode:Invalid Timer Count Mode",
 965:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((mode == XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA) ||\
 966:../Libraries/XMCLib/src/xmc_ccu8.c ****               (mode == XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA)));
 967:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 968:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 2215              	 .loc 2 968 6
 2216 000e 7B68     	 ldr r3,[r7,#4]
 2217 0010 5B69     	 ldr r3,[r3,#20]
 2218 0012 FB60     	 str r3,[r7,#12]
 969:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 970:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA == mode)
 2219              	 .loc 2 970 5
 2220 0014 FB1C     	 adds r3,r7,#3
 2221 0016 1B78     	 ldrb r3,[r3]
 2222 0018 002B     	 cmp r3,#0
 2223 001a 04D1     	 bne .L69
 971:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 972:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc &= ~((uint32_t) CCU8_CC8_TC_TCM_Msk);
 2224              	 .loc 2 972 8
 2225 001c FB68     	 ldr r3,[r7,#12]
 2226 001e 0122     	 movs r2,#1
 2227 0020 9343     	 bics r3,r2
 2228 0022 FB60     	 str r3,[r7,#12]
 2229 0024 03E0     	 b .L70
 2230              	.L69:
 973:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 974:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
 975:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 976:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (uint32_t) CCU8_CC8_TC_TCM_Msk;
 2231              	 .loc 2 976 8
 2232 0026 FB68     	 ldr r3,[r7,#12]
 2233 0028 0122     	 movs r2,#1
 2234 002a 1343     	 orrs r3,r2
 2235 002c FB60     	 str r3,[r7,#12]
 2236              	.L70:
 977:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 978:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 979:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 2237              	 .loc 2 979 13
 2238 002e 7B68     	 ldr r3,[r7,#4]
 2239 0030 FA68     	 ldr r2,[r7,#12]
 2240 0032 5A61     	 str r2,[r3,#20]
 980:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2241              	 .loc 2 980 1
 2242 0034 C046     	 nop
 2243 0036 BD46     	 mov sp,r7
 2244 0038 04B0     	 add sp,sp,#16
 2245              	 
 2246 003a 80BD     	 pop {r7,pc}
 2247              	 .cfi_endproc
 2248              	.LFE141:
 2250              	 .section .text.XMC_CCU8_SLICE_SetTimerPeriodMatch,"ax",%progbits
 2251              	 .align 1
 2252              	 .global XMC_CCU8_SLICE_SetTimerPeriodMatch
 2253              	 .syntax unified
 2254              	 .code 16
 2255              	 .thumb_func
 2256              	 .fpu softvfp
 2258              	XMC_CCU8_SLICE_SetTimerPeriodMatch:
 2259              	.LFB142:
 981:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 982:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs period match value of the timer  */
 983:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
 984:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2260              	 .loc 2 984 1
 2261              	 .cfi_startproc
 2262              	 
 2263              	 
 2264 0000 80B5     	 push {r7,lr}
 2265              	.LCFI90:
 2266              	 .cfi_def_cfa_offset 8
 2267              	 .cfi_offset 7,-8
 2268              	 .cfi_offset 14,-4
 2269 0002 82B0     	 sub sp,sp,#8
 2270              	.LCFI91:
 2271              	 .cfi_def_cfa_offset 16
 2272 0004 00AF     	 add r7,sp,#0
 2273              	.LCFI92:
 2274              	 .cfi_def_cfa_register 7
 2275 0006 7860     	 str r0,[r7,#4]
 2276 0008 0A00     	 movs r2,r1
 2277 000a BB1C     	 adds r3,r7,#2
 2278 000c 1A80     	 strh r2,[r3]
 985:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slic
 986:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PRS = (uint32_t) period_val;
 2279              	 .loc 2 986 16
 2280 000e BB1C     	 adds r3,r7,#2
 2281 0010 1A88     	 ldrh r2,[r3]
 2282              	 .loc 2 986 14
 2283 0012 7B68     	 ldr r3,[r7,#4]
 2284 0014 5A63     	 str r2,[r3,#52]
 987:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2285              	 .loc 2 987 1
 2286 0016 C046     	 nop
 2287 0018 BD46     	 mov sp,r7
 2288 001a 02B0     	 add sp,sp,#8
 2289              	 
 2290 001c 80BD     	 pop {r7,pc}
 2291              	 .cfi_endproc
 2292              	.LFE142:
 2294              	 .section .text.XMC_CCU8_SLICE_GetCaptureRegisterValue,"ax",%progbits
 2295              	 .align 1
 2296              	 .global XMC_CCU8_SLICE_GetCaptureRegisterValue
 2297              	 .syntax unified
 2298              	 .code 16
 2299              	 .thumb_func
 2300              	 .fpu softvfp
 2302              	XMC_CCU8_SLICE_GetCaptureRegisterValue:
 2303              	.LFB143:
 988:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 989:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Retrieves desired capture register value */
 990:../Libraries/XMCLib/src/xmc_ccu8.c **** uint32_t XMC_CCU8_SLICE_GetCaptureRegisterValue(const XMC_CCU8_SLICE_t *const slice, const uint8_t 
 991:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2304              	 .loc 2 991 1
 2305              	 .cfi_startproc
 2306              	 
 2307              	 
 2308 0000 80B5     	 push {r7,lr}
 2309              	.LCFI93:
 2310              	 .cfi_def_cfa_offset 8
 2311              	 .cfi_offset 7,-8
 2312              	 .cfi_offset 14,-4
 2313 0002 82B0     	 sub sp,sp,#8
 2314              	.LCFI94:
 2315              	 .cfi_def_cfa_offset 16
 2316 0004 00AF     	 add r7,sp,#0
 2317              	.LCFI95:
 2318              	 .cfi_def_cfa_register 7
 2319 0006 7860     	 str r0,[r7,#4]
 2320 0008 0A00     	 movs r2,r1
 2321 000a FB1C     	 adds r3,r7,#3
 2322 000c 1A70     	 strb r2,[r3]
 992:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(
 993:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
 994:../Libraries/XMCLib/src/xmc_ccu8.c ****   return(slice->CV[reg_num]);
 2323              	 .loc 2 994 19
 2324 000e FB1C     	 adds r3,r7,#3
 2325 0010 1B78     	 ldrb r3,[r3]
 2326 0012 7A68     	 ldr r2,[r7,#4]
 2327 0014 1C33     	 adds r3,r3,#28
 2328 0016 9B00     	 lsls r3,r3,#2
 2329 0018 D318     	 adds r3,r2,r3
 2330 001a 0433     	 adds r3,r3,#4
 2331 001c 1B68     	 ldr r3,[r3]
 995:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2332              	 .loc 2 995 1
 2333 001e 1800     	 movs r0,r3
 2334 0020 BD46     	 mov sp,r7
 2335 0022 02B0     	 add sp,sp,#8
 2336              	 
 2337 0024 80BD     	 pop {r7,pc}
 2338              	 .cfi_endproc
 2339              	.LFE143:
 2341              	 .section .text.XMC_CCU8_SLICE_GetLastCapturedTimerValue,"ax",%progbits
 2342              	 .align 1
 2343              	 .global XMC_CCU8_SLICE_GetLastCapturedTimerValue
 2344              	 .syntax unified
 2345              	 .code 16
 2346              	 .thumb_func
 2347              	 .fpu softvfp
 2349              	XMC_CCU8_SLICE_GetLastCapturedTimerValue:
 2350              	.LFB144:
 996:../Libraries/XMCLib/src/xmc_ccu8.c **** 
 997:../Libraries/XMCLib/src/xmc_ccu8.c **** /* @brief Retrieves the latest captured timer value */
 998:../Libraries/XMCLib/src/xmc_ccu8.c **** XMC_CCU8_STATUS_t XMC_CCU8_SLICE_GetLastCapturedTimerValue(const XMC_CCU8_SLICE_t *const slice,
 999:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                            const XMC_CCU8_SLICE_CAP_REG_SET_t set,
1000:../Libraries/XMCLib/src/xmc_ccu8.c ****                                                            uint32_t *val_ptr)
1001:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2351              	 .loc 2 1001 1
 2352              	 .cfi_startproc
 2353              	 
 2354              	 
 2355 0000 80B5     	 push {r7,lr}
 2356              	.LCFI96:
 2357              	 .cfi_def_cfa_offset 8
 2358              	 .cfi_offset 7,-8
 2359              	 .cfi_offset 14,-4
 2360 0002 86B0     	 sub sp,sp,#24
 2361              	.LCFI97:
 2362              	 .cfi_def_cfa_offset 32
 2363 0004 00AF     	 add r7,sp,#0
 2364              	.LCFI98:
 2365              	 .cfi_def_cfa_register 7
 2366 0006 F860     	 str r0,[r7,#12]
 2367 0008 7A60     	 str r2,[r7,#4]
 2368 000a 0B23     	 movs r3,#11
 2369 000c FB18     	 adds r3,r7,r3
 2370 000e 0A1C     	 adds r2,r1,#0
 2371 0010 1A70     	 strb r2,[r3]
1002:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1003:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_STATUS_t retval;
1004:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t i;
1005:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t start;
1006:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint8_t end;
1007:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1008:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlic
1009:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetLastCapturedTimerValue:Invalid Register Set",
1010:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((set == XMC_CCU8_SLICE_CAP_REG_SET_LOW) ||\
1011:../Libraries/XMCLib/src/xmc_ccu8.c ****               (set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)));
1012:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1013:../Libraries/XMCLib/src/xmc_ccu8.c ****   retval = XMC_CCU8_STATUS_ERROR;
 2372              	 .loc 2 1013 10
 2373 0012 1723     	 movs r3,#23
 2374 0014 FB18     	 adds r3,r7,r3
 2375 0016 0122     	 movs r2,#1
 2376 0018 1A70     	 strb r2,[r3]
1014:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1015:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First check if extended capture mode is enabled */
1016:../Libraries/XMCLib/src/xmc_ccu8.c ****   if((slice->TC) & CCU8_CC8_TC_ECM_Msk)
 2377              	 .loc 2 1016 12
 2378 001a FB68     	 ldr r3,[r7,#12]
 2379 001c 5B69     	 ldr r3,[r3,#20]
 2380              	 .loc 2 1016 18
 2381 001e 1022     	 movs r2,#16
 2382 0020 1340     	 ands r3,r2
 2383              	 .loc 2 1016 5
 2384 0022 08D0     	 beq .L75
1017:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1018:../Libraries/XMCLib/src/xmc_ccu8.c ****     /* Extended capture mode has been enabled. So start with the lowest capture register and work y
1019:../Libraries/XMCLib/src/xmc_ccu8.c ****     start = 0U;
 2385              	 .loc 2 1019 11
 2386 0024 1523     	 movs r3,#21
 2387 0026 FB18     	 adds r3,r7,r3
 2388 0028 0022     	 movs r2,#0
 2389 002a 1A70     	 strb r2,[r3]
1020:../Libraries/XMCLib/src/xmc_ccu8.c ****     end = XMC_CCU8_NUM_SLICES_PER_MODULE;
 2390              	 .loc 2 1020 9
 2391 002c 1423     	 movs r3,#20
 2392 002e FB18     	 adds r3,r7,r3
 2393 0030 0422     	 movs r2,#4
 2394 0032 1A70     	 strb r2,[r3]
 2395 0034 15E0     	 b .L76
 2396              	.L75:
1021:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1022:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1023:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1024:../Libraries/XMCLib/src/xmc_ccu8.c ****     /* Extended capture mode is not enabled */
1025:../Libraries/XMCLib/src/xmc_ccu8.c ****     if(set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)
 2397              	 .loc 2 1025 7
 2398 0036 0B23     	 movs r3,#11
 2399 0038 FB18     	 adds r3,r7,r3
 2400 003a 1B78     	 ldrb r3,[r3]
 2401 003c 012B     	 cmp r3,#1
 2402 003e 08D1     	 bne .L77
1026:../Libraries/XMCLib/src/xmc_ccu8.c ****     {
1027:../Libraries/XMCLib/src/xmc_ccu8.c ****       start = ((uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE) >> 1U;
 2403              	 .loc 2 1027 13
 2404 0040 1523     	 movs r3,#21
 2405 0042 FB18     	 adds r3,r7,r3
 2406 0044 0222     	 movs r2,#2
 2407 0046 1A70     	 strb r2,[r3]
1028:../Libraries/XMCLib/src/xmc_ccu8.c ****       end   = (uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE;
 2408              	 .loc 2 1028 13
 2409 0048 1423     	 movs r3,#20
 2410 004a FB18     	 adds r3,r7,r3
 2411 004c 0422     	 movs r2,#4
 2412 004e 1A70     	 strb r2,[r3]
 2413 0050 07E0     	 b .L76
 2414              	.L77:
1029:../Libraries/XMCLib/src/xmc_ccu8.c ****     }
1030:../Libraries/XMCLib/src/xmc_ccu8.c ****     else
1031:../Libraries/XMCLib/src/xmc_ccu8.c ****     {
1032:../Libraries/XMCLib/src/xmc_ccu8.c ****       start = 0U;
 2415              	 .loc 2 1032 13
 2416 0052 1523     	 movs r3,#21
 2417 0054 FB18     	 adds r3,r7,r3
 2418 0056 0022     	 movs r2,#0
 2419 0058 1A70     	 strb r2,[r3]
1033:../Libraries/XMCLib/src/xmc_ccu8.c ****       end = ((uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE) >> 1U;
 2420              	 .loc 2 1033 11
 2421 005a 1423     	 movs r3,#20
 2422 005c FB18     	 adds r3,r7,r3
 2423 005e 0222     	 movs r2,#2
 2424 0060 1A70     	 strb r2,[r3]
 2425              	.L76:
1034:../Libraries/XMCLib/src/xmc_ccu8.c ****     }
1035:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1036:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1037:../Libraries/XMCLib/src/xmc_ccu8.c ****   for(i=start; i<end; i++)
 2426              	 .loc 2 1037 8
 2427 0062 1623     	 movs r3,#22
 2428 0064 FB18     	 adds r3,r7,r3
 2429 0066 1522     	 movs r2,#21
 2430 0068 BA18     	 adds r2,r7,r2
 2431 006a 1278     	 ldrb r2,[r2]
 2432 006c 1A70     	 strb r2,[r3]
 2433              	 .loc 2 1037 3
 2434 006e 21E0     	 b .L78
 2435              	.L81:
1038:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1039:../Libraries/XMCLib/src/xmc_ccu8.c ****     if( (slice->CV[i]) & CCU8_CC8_CV_FFL_Msk )
 2436              	 .loc 2 1039 19
 2437 0070 1621     	 movs r1,#22
 2438 0072 7B18     	 adds r3,r7,r1
 2439 0074 1B78     	 ldrb r3,[r3]
 2440 0076 FA68     	 ldr r2,[r7,#12]
 2441 0078 1C33     	 adds r3,r3,#28
 2442 007a 9B00     	 lsls r3,r3,#2
 2443 007c D318     	 adds r3,r2,r3
 2444 007e 0433     	 adds r3,r3,#4
 2445 0080 1A68     	 ldr r2,[r3]
 2446              	 .loc 2 1039 24
 2447 0082 8023     	 movs r3,#128
 2448 0084 5B03     	 lsls r3,r3,#13
 2449 0086 1340     	 ands r3,r2
 2450              	 .loc 2 1039 7
 2451 0088 0ED0     	 beq .L79
1040:../Libraries/XMCLib/src/xmc_ccu8.c ****     {
1041:../Libraries/XMCLib/src/xmc_ccu8.c ****       *val_ptr = slice->CV[i];
 2452              	 .loc 2 1041 27
 2453 008a 7B18     	 adds r3,r7,r1
 2454 008c 1B78     	 ldrb r3,[r3]
 2455 008e FA68     	 ldr r2,[r7,#12]
 2456 0090 1C33     	 adds r3,r3,#28
 2457 0092 9B00     	 lsls r3,r3,#2
 2458 0094 D318     	 adds r3,r2,r3
 2459 0096 0433     	 adds r3,r3,#4
 2460 0098 1A68     	 ldr r2,[r3]
 2461              	 .loc 2 1041 16
 2462 009a 7B68     	 ldr r3,[r7,#4]
 2463 009c 1A60     	 str r2,[r3]
1042:../Libraries/XMCLib/src/xmc_ccu8.c ****       retval = XMC_CCU8_STATUS_OK;
 2464              	 .loc 2 1042 14
 2465 009e 1723     	 movs r3,#23
 2466 00a0 FB18     	 adds r3,r7,r3
 2467 00a2 0022     	 movs r2,#0
 2468 00a4 1A70     	 strb r2,[r3]
1043:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2469              	 .loc 2 1043 7
 2470 00a6 0DE0     	 b .L80
 2471              	.L79:
1037:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 2472              	 .loc 2 1037 24 discriminator 2
 2473 00a8 1621     	 movs r1,#22
 2474 00aa 7B18     	 adds r3,r7,r1
 2475 00ac 1A78     	 ldrb r2,[r3]
 2476 00ae 7B18     	 adds r3,r7,r1
 2477 00b0 0132     	 adds r2,r2,#1
 2478 00b2 1A70     	 strb r2,[r3]
 2479              	.L78:
1037:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
 2480              	 .loc 2 1037 3 discriminator 1
 2481 00b4 1623     	 movs r3,#22
 2482 00b6 FA18     	 adds r2,r7,r3
 2483 00b8 1423     	 movs r3,#20
 2484 00ba FB18     	 adds r3,r7,r3
 2485 00bc 1278     	 ldrb r2,[r2]
 2486 00be 1B78     	 ldrb r3,[r3]
 2487 00c0 9A42     	 cmp r2,r3
 2488 00c2 D5D3     	 bcc .L81
 2489              	.L80:
1044:../Libraries/XMCLib/src/xmc_ccu8.c ****     }
1045:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1046:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1047:../Libraries/XMCLib/src/xmc_ccu8.c ****   return retval;
 2490              	 .loc 2 1047 10
 2491 00c4 1723     	 movs r3,#23
 2492 00c6 FB18     	 adds r3,r7,r3
 2493 00c8 1B78     	 ldrb r3,[r3]
1048:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2494              	 .loc 2 1048 1
 2495 00ca 1800     	 movs r0,r3
 2496 00cc BD46     	 mov sp,r7
 2497 00ce 06B0     	 add sp,sp,#24
 2498              	 
 2499 00d0 80BD     	 pop {r7,pc}
 2500              	 .cfi_endproc
 2501              	.LFE144:
 2503              	 .section .text.XMC_CCU8_SLICE_GetCapturedValueFromFifo,"ax",%progbits
 2504              	 .align 1
 2505              	 .global XMC_CCU8_SLICE_GetCapturedValueFromFifo
 2506              	 .syntax unified
 2507              	 .code 16
 2508              	 .thumb_func
 2509              	 .fpu softvfp
 2511              	XMC_CCU8_SLICE_GetCapturedValueFromFifo:
 2512              	.LFB145:
1049:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Retrieves timer capture value from a FIFO made of capture registers */
1050:../Libraries/XMCLib/src/xmc_ccu8.c **** #if defined(CCU8V1) /* Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices onl
1051:../Libraries/XMCLib/src/xmc_ccu8.c **** int32_t XMC_CCU8_GetCapturedValueFromFifo(const XMC_CCU8_MODULE_t *const module, const uint8_t slic
1052:../Libraries/XMCLib/src/xmc_ccu8.c **** {
1053:../Libraries/XMCLib/src/xmc_ccu8.c ****   int32_t  cap;
1054:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t extracted_slice;
1055:../Libraries/XMCLib/src/xmc_ccu8.c ****   
1056:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU8_IsValidModule(modu
1057:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1058:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* First read the global fifo register */
1059:../Libraries/XMCLib/src/xmc_ccu8.c ****   cap = (int32_t) module->ECRD;
1060:../Libraries/XMCLib/src/xmc_ccu8.c ****     
1061:../Libraries/XMCLib/src/xmc_ccu8.c ****   extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU8_ECRD_SPTR_Msk)) >> CCU8_ECRD_SPTR_Pos;
1062:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1063:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Return captured result only if it were applicable to this slice */
1064:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(extracted_slice != ((uint32_t)slice_number))
1065:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1066:../Libraries/XMCLib/src/xmc_ccu8.c ****     cap = -1;
1067:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1068:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1069:../Libraries/XMCLib/src/xmc_ccu8.c ****   return (cap);
1070:../Libraries/XMCLib/src/xmc_ccu8.c **** }
1071:../Libraries/XMCLib/src/xmc_ccu8.c **** #else
1072:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Retrieves timer capture value from a FIFO made of capture registers */
1073:../Libraries/XMCLib/src/xmc_ccu8.c **** uint32_t XMC_CCU8_SLICE_GetCapturedValueFromFifo(const XMC_CCU8_SLICE_t *const slice, const XMC_CCU
1074:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2513              	 .loc 2 1074 1
 2514              	 .cfi_startproc
 2515              	 
 2516              	 
 2517 0000 80B5     	 push {r7,lr}
 2518              	.LCFI99:
 2519              	 .cfi_def_cfa_offset 8
 2520              	 .cfi_offset 7,-8
 2521              	 .cfi_offset 14,-4
 2522 0002 84B0     	 sub sp,sp,#16
 2523              	.LCFI100:
 2524              	 .cfi_def_cfa_offset 24
 2525 0004 00AF     	 add r7,sp,#0
 2526              	.LCFI101:
 2527              	 .cfi_def_cfa_register 7
 2528 0006 7860     	 str r0,[r7,#4]
 2529 0008 0A00     	 movs r2,r1
 2530 000a FB1C     	 adds r3,r7,#3
 2531 000c 1A70     	 strb r2,[r3]
1075:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t cap;
1076:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1077:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
1078:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCapturedValueFromFifo:Invalid Register Set", 
1079:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((set == XMC_CCU8_SLICE_CAP_REG_SET_LOW) ||\
1080:../Libraries/XMCLib/src/xmc_ccu8.c ****               (set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)));
1081:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1082:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(XMC_CCU8_SLICE_CAP_REG_SET_LOW == set)
 2532              	 .loc 2 1082 5
 2533 000e FB1C     	 adds r3,r7,#3
 2534 0010 1B78     	 ldrb r3,[r3]
 2535 0012 002B     	 cmp r3,#0
 2536 0014 04D1     	 bne .L84
1083:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1084:../Libraries/XMCLib/src/xmc_ccu8.c ****     cap = slice->ECRD0;
 2537              	 .loc 2 1084 9
 2538 0016 7B68     	 ldr r3,[r7,#4]
 2539 0018 B822     	 movs r2,#184
 2540 001a 9B58     	 ldr r3,[r3,r2]
 2541 001c FB60     	 str r3,[r7,#12]
 2542 001e 03E0     	 b .L85
 2543              	.L84:
1085:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1086:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1087:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1088:../Libraries/XMCLib/src/xmc_ccu8.c ****     cap = slice->ECRD1;
 2544              	 .loc 2 1088 9
 2545 0020 7B68     	 ldr r3,[r7,#4]
 2546 0022 BC22     	 movs r2,#188
 2547 0024 9B58     	 ldr r3,[r3,r2]
 2548 0026 FB60     	 str r3,[r7,#12]
 2549              	.L85:
1089:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1090:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1091:../Libraries/XMCLib/src/xmc_ccu8.c ****   return cap;
 2550              	 .loc 2 1091 10
 2551 0028 FB68     	 ldr r3,[r7,#12]
1092:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2552              	 .loc 2 1092 1
 2553 002a 1800     	 movs r0,r3
 2554 002c BD46     	 mov sp,r7
 2555 002e 04B0     	 add sp,sp,#16
 2556              	 
 2557 0030 80BD     	 pop {r7,pc}
 2558              	 .cfi_endproc
 2559              	.LFE145:
 2561              	 .section .text.XMC_CCU8_SLICE_EnableDithering,"ax",%progbits
 2562              	 .align 1
 2563              	 .global XMC_CCU8_SLICE_EnableDithering
 2564              	 .syntax unified
 2565              	 .code 16
 2566              	 .thumb_func
 2567              	 .fpu softvfp
 2569              	XMC_CCU8_SLICE_EnableDithering:
 2570              	.LFB146:
1093:../Libraries/XMCLib/src/xmc_ccu8.c **** #endif
1094:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1095:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Enables PWM dithering feature */
1096:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_EnableDithering(XMC_CCU8_SLICE_t *const slice,
1097:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const bool period_dither,
1098:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const bool duty_dither,
1099:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const uint8_t spread)
1100:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2571              	 .loc 2 1100 1
 2572              	 .cfi_startproc
 2573              	 
 2574              	 
 2575 0000 90B5     	 push {r4,r7,lr}
 2576              	.LCFI102:
 2577              	 .cfi_def_cfa_offset 12
 2578              	 .cfi_offset 4,-12
 2579              	 .cfi_offset 7,-8
 2580              	 .cfi_offset 14,-4
 2581 0002 85B0     	 sub sp,sp,#20
 2582              	.LCFI103:
 2583              	 .cfi_def_cfa_offset 32
 2584 0004 00AF     	 add r7,sp,#0
 2585              	.LCFI104:
 2586              	 .cfi_def_cfa_register 7
 2587 0006 7860     	 str r0,[r7,#4]
 2588 0008 0C00     	 movs r4,r1
 2589 000a 1000     	 movs r0,r2
 2590 000c 1900     	 movs r1,r3
 2591 000e FB1C     	 adds r3,r7,#3
 2592 0010 221C     	 adds r2,r4,#0
 2593 0012 1A70     	 strb r2,[r3]
 2594 0014 BB1C     	 adds r3,r7,#2
 2595 0016 021C     	 adds r2,r0,#0
 2596 0018 1A70     	 strb r2,[r3]
 2597 001a 7B1C     	 adds r3,r7,#1
 2598 001c 0A1C     	 adds r2,r1,#0
 2599 001e 1A70     	 strb r2,[r3]
1101:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t tc;
1102:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1103:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1104:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1105:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc = slice->TC;
 2600              	 .loc 2 1105 6
 2601 0020 7B68     	 ldr r3,[r7,#4]
 2602 0022 5B69     	 ldr r3,[r3,#20]
 2603 0024 FB60     	 str r3,[r7,#12]
1106:../Libraries/XMCLib/src/xmc_ccu8.c ****   tc &= ~((uint32_t) CCU8_CC8_TC_DITHE_Msk);
 2604              	 .loc 2 1106 6
 2605 0026 FB68     	 ldr r3,[r7,#12]
 2606 0028 114A     	 ldr r2,.L90
 2607 002a 1340     	 ands r3,r2
 2608 002c FB60     	 str r3,[r7,#12]
1107:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1108:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(true == period_dither)
 2609              	 .loc 2 1108 5
 2610 002e FB1C     	 adds r3,r7,#3
 2611 0030 1B78     	 ldrb r3,[r3]
 2612 0032 002B     	 cmp r3,#0
 2613 0034 04D0     	 beq .L88
1109:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1110:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (((uint32_t) XMC_CCU8_SLICE_DITHER_PERIOD_MASK) << CCU8_CC8_TC_DITHE_Pos);
 2614              	 .loc 2 1110 8
 2615 0036 FB68     	 ldr r3,[r7,#12]
 2616 0038 8022     	 movs r2,#128
 2617 003a 9201     	 lsls r2,r2,#6
 2618 003c 1343     	 orrs r3,r2
 2619 003e FB60     	 str r3,[r7,#12]
 2620              	.L88:
1111:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1112:../Libraries/XMCLib/src/xmc_ccu8.c ****   if(true == duty_dither)
 2621              	 .loc 2 1112 5
 2622 0040 BB1C     	 adds r3,r7,#2
 2623 0042 1B78     	 ldrb r3,[r3]
 2624 0044 002B     	 cmp r3,#0
 2625 0046 04D0     	 beq .L89
1113:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1114:../Libraries/XMCLib/src/xmc_ccu8.c ****     tc |= (((uint32_t) XMC_CCU8_SLICE_DITHER_DUTYCYCLE_MASK) << CCU8_CC8_TC_DITHE_Pos);
 2626              	 .loc 2 1114 8
 2627 0048 FB68     	 ldr r3,[r7,#12]
 2628 004a 8022     	 movs r2,#128
 2629 004c D201     	 lsls r2,r2,#7
 2630 004e 1343     	 orrs r3,r2
 2631 0050 FB60     	 str r3,[r7,#12]
 2632              	.L89:
1115:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1116:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1117:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC = tc;
 2633              	 .loc 2 1117 13
 2634 0052 7B68     	 ldr r3,[r7,#4]
 2635 0054 FA68     	 ldr r2,[r7,#12]
 2636 0056 5A61     	 str r2,[r3,#20]
1118:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1119:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_CCU8_SLICE_SetDitherCompareValue((XMC_CCU8_SLICE_t *)slice, (uint8_t)spread);
 2637              	 .loc 2 1119 3
 2638 0058 7B1C     	 adds r3,r7,#1
 2639 005a 1A78     	 ldrb r2,[r3]
 2640 005c 7B68     	 ldr r3,[r7,#4]
 2641 005e 1100     	 movs r1,r2
 2642 0060 1800     	 movs r0,r3
 2643 0062 FFF7FEFF 	 bl XMC_CCU8_SLICE_SetDitherCompareValue
1120:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2644              	 .loc 2 1120 1
 2645 0066 C046     	 nop
 2646 0068 BD46     	 mov sp,r7
 2647 006a 05B0     	 add sp,sp,#20
 2648              	 
 2649 006c 90BD     	 pop {r4,r7,pc}
 2650              	.L91:
 2651 006e C046     	 .align 2
 2652              	.L90:
 2653 0070 FF9FFFFF 	 .word -24577
 2654              	 .cfi_endproc
 2655              	.LFE146:
 2657              	 .section .text.XMC_CCU8_SLICE_SetPrescaler,"ax",%progbits
 2658              	 .align 1
 2659              	 .global XMC_CCU8_SLICE_SetPrescaler
 2660              	 .syntax unified
 2661              	 .code 16
 2662              	 .thumb_func
 2663              	 .fpu softvfp
 2665              	XMC_CCU8_SLICE_SetPrescaler:
 2666              	.LFB147:
1121:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1122:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs Pre-scaler divider  */
1123:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetPrescaler(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_PRESCALER_t di
1124:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2667              	 .loc 2 1124 1
 2668              	 .cfi_startproc
 2669              	 
 2670              	 
 2671 0000 80B5     	 push {r7,lr}
 2672              	.LCFI105:
 2673              	 .cfi_def_cfa_offset 8
 2674              	 .cfi_offset 7,-8
 2675              	 .cfi_offset 14,-4
 2676 0002 84B0     	 sub sp,sp,#16
 2677              	.LCFI106:
 2678              	 .cfi_def_cfa_offset 24
 2679 0004 00AF     	 add r7,sp,#0
 2680              	.LCFI107:
 2681              	 .cfi_def_cfa_register 7
 2682 0006 7860     	 str r0,[r7,#4]
 2683 0008 0A00     	 movs r2,r1
 2684 000a FB1C     	 adds r3,r7,#3
 2685 000c 1A70     	 strb r2,[r3]
1125:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t fpc;
1126:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1127:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1128:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1129:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* If the prescaler is not running, update directly the divider*/
1130:../Libraries/XMCLib/src/xmc_ccu8.c ****   fpc = slice->FPC;
 2686              	 .loc 2 1130 7
 2687 000e 7B68     	 ldr r3,[r7,#4]
 2688 0010 9B6A     	 ldr r3,[r3,#40]
 2689 0012 FB60     	 str r3,[r7,#12]
1131:../Libraries/XMCLib/src/xmc_ccu8.c ****   fpc &= ~((uint32_t) CCU8_CC8_FPC_PVAL_Msk);
 2690              	 .loc 2 1131 7
 2691 0014 FB68     	 ldr r3,[r7,#12]
 2692 0016 0A4A     	 ldr r2,.L93
 2693 0018 1340     	 ands r3,r2
 2694 001a FB60     	 str r3,[r7,#12]
1132:../Libraries/XMCLib/src/xmc_ccu8.c ****   fpc |= ((uint32_t) div_val) << CCU8_CC8_FPC_PVAL_Pos;
 2695              	 .loc 2 1132 11
 2696 001c FB1C     	 adds r3,r7,#3
 2697 001e 1B78     	 ldrb r3,[r3]
 2698              	 .loc 2 1132 31
 2699 0020 1B02     	 lsls r3,r3,#8
 2700              	 .loc 2 1132 7
 2701 0022 FA68     	 ldr r2,[r7,#12]
 2702 0024 1343     	 orrs r3,r2
 2703 0026 FB60     	 str r3,[r7,#12]
1133:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->FPC = fpc;
 2704              	 .loc 2 1133 14
 2705 0028 7B68     	 ldr r3,[r7,#4]
 2706 002a FA68     	 ldr r2,[r7,#12]
 2707 002c 9A62     	 str r2,[r3,#40]
1134:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1135:../Libraries/XMCLib/src/xmc_ccu8.c ****   /*
1136:../Libraries/XMCLib/src/xmc_ccu8.c ****    * In any case, update the initial value of the divider which is to be loaded once the prescaler 
1137:../Libraries/XMCLib/src/xmc_ccu8.c ****    * compare value.
1138:../Libraries/XMCLib/src/xmc_ccu8.c ****    */
1139:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSC = (uint32_t) div_val;
 2708              	 .loc 2 1139 16
 2709 002e FB1C     	 adds r3,r7,#3
 2710 0030 1A78     	 ldrb r2,[r3]
 2711              	 .loc 2 1139 14
 2712 0032 7B68     	 ldr r3,[r7,#4]
 2713 0034 5A62     	 str r2,[r3,#36]
1140:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2714              	 .loc 2 1140 1
 2715 0036 C046     	 nop
 2716 0038 BD46     	 mov sp,r7
 2717 003a 04B0     	 add sp,sp,#16
 2718              	 
 2719 003c 80BD     	 pop {r7,pc}
 2720              	.L94:
 2721 003e C046     	 .align 2
 2722              	.L93:
 2723 0040 FFF0FFFF 	 .word -3841
 2724              	 .cfi_endproc
 2725              	.LFE147:
 2727              	 .section .text.XMC_CCU8_SLICE_SetTimerCompareMatch,"ax",%progbits
 2728              	 .align 1
 2729              	 .global XMC_CCU8_SLICE_SetTimerCompareMatch
 2730              	 .syntax unified
 2731              	 .code 16
 2732              	 .thumb_func
 2733              	 .fpu softvfp
 2735              	XMC_CCU8_SLICE_SetTimerCompareMatch:
 2736              	.LFB148:
1141:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1142:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Programs timer compare match value for channel 1 or 2 */
1143:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
1144:../Libraries/XMCLib/src/xmc_ccu8.c ****                                          const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
1145:../Libraries/XMCLib/src/xmc_ccu8.c ****                                          const uint16_t compare_val)
1146:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2737              	 .loc 2 1146 1
 2738              	 .cfi_startproc
 2739              	 
 2740              	 
 2741 0000 80B5     	 push {r7,lr}
 2742              	.LCFI108:
 2743              	 .cfi_def_cfa_offset 8
 2744              	 .cfi_offset 7,-8
 2745              	 .cfi_offset 14,-4
 2746 0002 82B0     	 sub sp,sp,#8
 2747              	.LCFI109:
 2748              	 .cfi_def_cfa_offset 16
 2749 0004 00AF     	 add r7,sp,#0
 2750              	.LCFI110:
 2751              	 .cfi_def_cfa_register 7
 2752 0006 7860     	 str r0,[r7,#4]
 2753 0008 0800     	 movs r0,r1
 2754 000a 1100     	 movs r1,r2
 2755 000c FB1C     	 adds r3,r7,#3
 2756 000e 021C     	 adds r2,r0,#0
 2757 0010 1A70     	 strb r2,[r3]
 2758 0012 3B00     	 movs r3,r7
 2759 0014 0A1C     	 adds r2,r1,#0
 2760 0016 1A80     	 strh r2,[r3]
1147:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
1148:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANN
1149:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1150:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 2761              	 .loc 2 1150 6
 2762 0018 FB1C     	 adds r3,r7,#3
 2763 001a 1B78     	 ldrb r3,[r3]
 2764 001c 002B     	 cmp r3,#0
 2765 001e 04D1     	 bne .L96
1151:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1152:../Libraries/XMCLib/src/xmc_ccu8.c ****     slice->CR1S = (uint32_t) compare_val;
 2766              	 .loc 2 1152 19
 2767 0020 3B00     	 movs r3,r7
 2768 0022 1A88     	 ldrh r2,[r3]
 2769              	 .loc 2 1152 17
 2770 0024 7B68     	 ldr r3,[r7,#4]
 2771 0026 DA63     	 str r2,[r3,#60]
1153:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1154:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1155:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1156:../Libraries/XMCLib/src/xmc_ccu8.c ****     slice->CR2S = (uint32_t) compare_val;
1157:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1158:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2772              	 .loc 2 1158 1
 2773 0028 03E0     	 b .L98
 2774              	.L96:
1156:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 2775              	 .loc 2 1156 19
 2776 002a 3B00     	 movs r3,r7
 2777 002c 1A88     	 ldrh r2,[r3]
1156:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 2778              	 .loc 2 1156 17
 2779 002e 7B68     	 ldr r3,[r7,#4]
 2780 0030 5A64     	 str r2,[r3,#68]
 2781              	.L98:
 2782              	 .loc 2 1158 1
 2783 0032 C046     	 nop
 2784 0034 BD46     	 mov sp,r7
 2785 0036 02B0     	 add sp,sp,#8
 2786              	 
 2787 0038 80BD     	 pop {r7,pc}
 2788              	 .cfi_endproc
 2789              	.LFE148:
 2791              	 .section .text.XMC_CCU8_SLICE_GetTimerCompareMatch,"ax",%progbits
 2792              	 .align 1
 2793              	 .global XMC_CCU8_SLICE_GetTimerCompareMatch
 2794              	 .syntax unified
 2795              	 .code 16
 2796              	 .thumb_func
 2797              	 .fpu softvfp
 2799              	XMC_CCU8_SLICE_GetTimerCompareMatch:
 2800              	.LFB149:
1159:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1160:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Returns the timer compare match value for channel 1 or 2 */
1161:../Libraries/XMCLib/src/xmc_ccu8.c **** uint16_t XMC_CCU8_SLICE_GetTimerCompareMatch(const XMC_CCU8_SLICE_t *const slice,
1162:../Libraries/XMCLib/src/xmc_ccu8.c ****                                              const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel)
1163:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2801              	 .loc 2 1163 1
 2802              	 .cfi_startproc
 2803              	 
 2804              	 
 2805 0000 80B5     	 push {r7,lr}
 2806              	.LCFI111:
 2807              	 .cfi_def_cfa_offset 8
 2808              	 .cfi_offset 7,-8
 2809              	 .cfi_offset 14,-4
 2810 0002 84B0     	 sub sp,sp,#16
 2811              	.LCFI112:
 2812              	 .cfi_def_cfa_offset 24
 2813 0004 00AF     	 add r7,sp,#0
 2814              	.LCFI113:
 2815              	 .cfi_def_cfa_register 7
 2816 0006 7860     	 str r0,[r7,#4]
 2817 0008 0A00     	 movs r2,r1
 2818 000a FB1C     	 adds r3,r7,#3
 2819 000c 1A70     	 strb r2,[r3]
1164:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint16_t compare_value;
1165:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1166:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1167:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_GetCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch
1168:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1169:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 2820              	 .loc 2 1169 6
 2821 000e FB1C     	 adds r3,r7,#3
 2822 0010 1B78     	 ldrb r3,[r3]
 2823 0012 002B     	 cmp r3,#0
 2824 0014 05D1     	 bne .L100
1170:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1171:../Libraries/XMCLib/src/xmc_ccu8.c ****     compare_value = (uint16_t) slice->CR1;
 2825              	 .loc 2 1171 37
 2826 0016 7B68     	 ldr r3,[r7,#4]
 2827 0018 9A6B     	 ldr r2,[r3,#56]
 2828              	 .loc 2 1171 19
 2829 001a 0E23     	 movs r3,#14
 2830 001c FB18     	 adds r3,r7,r3
 2831 001e 1A80     	 strh r2,[r3]
 2832 0020 04E0     	 b .L101
 2833              	.L100:
1172:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1173:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1174:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1175:../Libraries/XMCLib/src/xmc_ccu8.c ****     compare_value = (uint16_t) slice->CR2;
 2834              	 .loc 2 1175 37
 2835 0022 7B68     	 ldr r3,[r7,#4]
 2836 0024 1A6C     	 ldr r2,[r3,#64]
 2837              	 .loc 2 1175 19
 2838 0026 0E23     	 movs r3,#14
 2839 0028 FB18     	 adds r3,r7,r3
 2840 002a 1A80     	 strh r2,[r3]
 2841              	.L101:
1176:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1177:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1178:../Libraries/XMCLib/src/xmc_ccu8.c ****   return(compare_value);
 2842              	 .loc 2 1178 9
 2843 002c 0E23     	 movs r3,#14
 2844 002e FB18     	 adds r3,r7,r3
 2845 0030 1B88     	 ldrh r3,[r3]
1179:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2846              	 .loc 2 1179 1
 2847 0032 1800     	 movs r0,r3
 2848 0034 BD46     	 mov sp,r7
 2849 0036 04B0     	 add sp,sp,#16
 2850              	 
 2851 0038 80BD     	 pop {r7,pc}
 2852              	 .cfi_endproc
 2853              	.LFE149:
 2855              	 .section .text.XMC_CCU8_SLICE_SetInterruptNode,"ax",%progbits
 2856              	 .align 1
 2857              	 .global XMC_CCU8_SLICE_SetInterruptNode
 2858              	 .syntax unified
 2859              	 .code 16
 2860              	 .thumb_func
 2861              	 .fpu softvfp
 2863              	XMC_CCU8_SLICE_SetInterruptNode:
 2864              	.LFB150:
1180:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1181:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Binds a capcom event to an NVIC node  */
1182:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
1183:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_IRQ_ID_t event,
1184:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_SR_ID_t sr)
1185:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 2865              	 .loc 2 1185 1
 2866              	 .cfi_startproc
 2867              	 
 2868              	 
 2869 0000 80B5     	 push {r7,lr}
 2870              	.LCFI114:
 2871              	 .cfi_def_cfa_offset 8
 2872              	 .cfi_offset 7,-8
 2873              	 .cfi_offset 14,-4
 2874 0002 86B0     	 sub sp,sp,#24
 2875              	.LCFI115:
 2876              	 .cfi_def_cfa_offset 32
 2877 0004 00AF     	 add r7,sp,#0
 2878              	.LCFI116:
 2879              	 .cfi_def_cfa_register 7
 2880 0006 7860     	 str r0,[r7,#4]
 2881 0008 0800     	 movs r0,r1
 2882 000a 1100     	 movs r1,r2
 2883 000c FB1C     	 adds r3,r7,#3
 2884 000e 021C     	 adds r2,r0,#0
 2885 0010 1A70     	 strb r2,[r3]
 2886 0012 BB1C     	 adds r3,r7,#2
 2887 0014 0A1C     	 adds r2,r1,#0
 2888 0016 1A70     	 strb r2,[r3]
1186:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t srs;
1187:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t mask;
1188:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t pos;
1189:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1190:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
1191:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
1192:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event)
1193:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1194:../Libraries/XMCLib/src/xmc_ccu8.c ****   srs = slice->SRS;
 2889              	 .loc 2 1194 7
 2890 0018 7B68     	 ldr r3,[r7,#4]
 2891 001a A822     	 movs r2,#168
 2892 001c 9B58     	 ldr r3,[r3,r2]
 2893 001e FB60     	 str r3,[r7,#12]
1195:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1196:../Libraries/XMCLib/src/xmc_ccu8.c ****   switch(event)
 2894              	 .loc 2 1196 3
 2895 0020 FB1C     	 adds r3,r7,#3
 2896 0022 1B78     	 ldrb r3,[r3]
 2897 0024 092B     	 cmp r3,#9
 2898 0026 1FD8     	 bhi .L104
 2899 0028 9A00     	 lsls r2,r3,#2
 2900 002a 1D4B     	 ldr r3,.L112
 2901 002c D318     	 adds r3,r2,r3
 2902 002e 1B68     	 ldr r3,[r3]
 2903 0030 9F46     	 mov pc,r3
 2904              	 .section .rodata.XMC_CCU8_SLICE_SetInterruptNode,"a",%progbits
 2905              	 .align 2
 2906              	.L106:
 2907 0000 32000000 	 .word .L110
 2908 0004 32000000 	 .word .L110
 2909 0008 3C000000 	 .word .L109
 2910 000c 3C000000 	 .word .L109
 2911 0010 46000000 	 .word .L108
 2912 0014 46000000 	 .word .L108
 2913 0018 68000000 	 .word .L104
 2914 001c 68000000 	 .word .L104
 2915 0020 50000000 	 .word .L107
 2916 0024 5C000000 	 .word .L105
 2917              	 .section .text.XMC_CCU8_SLICE_SetInterruptNode
 2918              	.L110:
1197:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1198:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
1199:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
1200:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 2919              	 .loc 2 1200 12
 2920 0032 0323     	 movs r3,#3
 2921 0034 7B61     	 str r3,[r7,#20]
1201:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_POSR_Pos;
 2922              	 .loc 2 1201 12
 2923 0036 0023     	 movs r3,#0
 2924 0038 3B61     	 str r3,[r7,#16]
1202:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2925              	 .loc 2 1202 7
 2926 003a 1BE0     	 b .L111
 2927              	.L109:
1203:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1204:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
1205:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
1206:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 2928              	 .loc 2 1206 12
 2929 003c 0C23     	 movs r3,#12
 2930 003e 7B61     	 str r3,[r7,#20]
1207:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_CM1SR_Pos;
 2931              	 .loc 2 1207 12
 2932 0040 0223     	 movs r3,#2
 2933 0042 3B61     	 str r3,[r7,#16]
1208:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2934              	 .loc 2 1208 7
 2935 0044 16E0     	 b .L111
 2936              	.L108:
1209:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1210:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
1211:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
1212:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 2937              	 .loc 2 1212 12
 2938 0046 3023     	 movs r3,#48
 2939 0048 7B61     	 str r3,[r7,#20]
1213:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_CM2SR_Pos;
 2940              	 .loc 2 1213 12
 2941 004a 0423     	 movs r3,#4
 2942 004c 3B61     	 str r3,[r7,#16]
1214:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2943              	 .loc 2 1214 7
 2944 004e 11E0     	 b .L111
 2945              	.L107:
1215:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1216:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
1217:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 2946              	 .loc 2 1217 12
 2947 0050 C023     	 movs r3,#192
 2948 0052 9B00     	 lsls r3,r3,#2
 2949 0054 7B61     	 str r3,[r7,#20]
1218:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_E0SR_Pos;
 2950              	 .loc 2 1218 12
 2951 0056 0823     	 movs r3,#8
 2952 0058 3B61     	 str r3,[r7,#16]
1219:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2953              	 .loc 2 1219 7
 2954 005a 0BE0     	 b .L111
 2955              	.L105:
1220:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1221:../Libraries/XMCLib/src/xmc_ccu8.c ****     case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
1222:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 2956              	 .loc 2 1222 12
 2957 005c C023     	 movs r3,#192
 2958 005e 1B01     	 lsls r3,r3,#4
 2959 0060 7B61     	 str r3,[r7,#20]
1223:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_E1SR_Pos;
 2960              	 .loc 2 1223 12
 2961 0062 0A23     	 movs r3,#10
 2962 0064 3B61     	 str r3,[r7,#16]
1224:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2963              	 .loc 2 1224 7
 2964 0066 05E0     	 b .L111
 2965              	.L104:
1225:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1226:../Libraries/XMCLib/src/xmc_ccu8.c ****     default:
1227:../Libraries/XMCLib/src/xmc_ccu8.c ****       mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 2966              	 .loc 2 1227 12
 2967 0068 C023     	 movs r3,#192
 2968 006a 9B01     	 lsls r3,r3,#6
 2969 006c 7B61     	 str r3,[r7,#20]
1228:../Libraries/XMCLib/src/xmc_ccu8.c ****       pos  = CCU8_CC8_SRS_E2SR_Pos;
 2970              	 .loc 2 1228 12
 2971 006e 0C23     	 movs r3,#12
 2972 0070 3B61     	 str r3,[r7,#16]
1229:../Libraries/XMCLib/src/xmc_ccu8.c ****       break;
 2973              	 .loc 2 1229 7
 2974 0072 C046     	 nop
 2975              	.L111:
1230:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1231:../Libraries/XMCLib/src/xmc_ccu8.c ****   
1232:../Libraries/XMCLib/src/xmc_ccu8.c ****   srs &= ~mask;
 2976              	 .loc 2 1232 10
 2977 0074 7B69     	 ldr r3,[r7,#20]
 2978 0076 DA43     	 mvns r2,r3
 2979              	 .loc 2 1232 7
 2980 0078 FB68     	 ldr r3,[r7,#12]
 2981 007a 1340     	 ands r3,r2
 2982 007c FB60     	 str r3,[r7,#12]
1233:../Libraries/XMCLib/src/xmc_ccu8.c ****   srs |= (uint32_t)sr << pos;
 2983              	 .loc 2 1233 10
 2984 007e BB1C     	 adds r3,r7,#2
 2985 0080 1A78     	 ldrb r2,[r3]
 2986              	 .loc 2 1233 23
 2987 0082 3B69     	 ldr r3,[r7,#16]
 2988 0084 9A40     	 lsls r2,r2,r3
 2989 0086 1300     	 movs r3,r2
 2990              	 .loc 2 1233 7
 2991 0088 FA68     	 ldr r2,[r7,#12]
 2992 008a 1343     	 orrs r3,r2
 2993 008c FB60     	 str r3,[r7,#12]
1234:../Libraries/XMCLib/src/xmc_ccu8.c ****   
1235:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->SRS = srs;
 2994              	 .loc 2 1235 14
 2995 008e 7B68     	 ldr r3,[r7,#4]
 2996 0090 A821     	 movs r1,#168
 2997 0092 FA68     	 ldr r2,[r7,#12]
 2998 0094 5A50     	 str r2,[r3,r1]
1236:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 2999              	 .loc 2 1236 1
 3000 0096 C046     	 nop
 3001 0098 BD46     	 mov sp,r7
 3002 009a 06B0     	 add sp,sp,#24
 3003              	 
 3004 009c 80BD     	 pop {r7,pc}
 3005              	.L113:
 3006 009e C046     	 .align 2
 3007              	.L112:
 3008 00a0 00000000 	 .word .L106
 3009              	 .cfi_endproc
 3010              	.LFE150:
 3012              	 .section .text.XMC_CCU8_SLICE_SetPassiveLevel,"ax",%progbits
 3013              	 .align 1
 3014              	 .global XMC_CCU8_SLICE_SetPassiveLevel
 3015              	 .syntax unified
 3016              	 .code 16
 3017              	 .thumb_func
 3018              	 .fpu softvfp
 3020              	XMC_CCU8_SLICE_SetPassiveLevel:
 3021              	.LFB151:
1237:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1238:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Asserts passive level for the slice output */
1239:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetPassiveLevel(XMC_CCU8_SLICE_t *const slice,
1240:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const XMC_CCU8_SLICE_OUTPUT_t out,
1241:../Libraries/XMCLib/src/xmc_ccu8.c ****                                     const XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
1242:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 3022              	 .loc 2 1242 1
 3023              	 .cfi_startproc
 3024              	 
 3025              	 
 3026 0000 80B5     	 push {r7,lr}
 3027              	.LCFI117:
 3028              	 .cfi_def_cfa_offset 8
 3029              	 .cfi_offset 7,-8
 3030              	 .cfi_offset 14,-4
 3031 0002 84B0     	 sub sp,sp,#16
 3032              	.LCFI118:
 3033              	 .cfi_def_cfa_offset 24
 3034 0004 00AF     	 add r7,sp,#0
 3035              	.LCFI119:
 3036              	 .cfi_def_cfa_register 7
 3037 0006 7860     	 str r0,[r7,#4]
 3038 0008 0800     	 movs r0,r1
 3039 000a 1100     	 movs r1,r2
 3040 000c FB1C     	 adds r3,r7,#3
 3041 000e 021C     	 adds r2,r0,#0
 3042 0010 1A70     	 strb r2,[r3]
 3043 0012 BB1C     	 adds r3,r7,#2
 3044 0014 0A1C     	 adds r2,r1,#0
 3045 0016 1A70     	 strb r2,[r3]
1243:../Libraries/XMCLib/src/xmc_ccu8.c ****   uint32_t psl;
1244:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1245:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
1246:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Slice Output", XMC_CCU8_SLICE_CHECK_OUTPUT(out
1247:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Passive Level",
1248:../Libraries/XMCLib/src/xmc_ccu8.c ****              ((level == XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_LOW) ||\
1249:../Libraries/XMCLib/src/xmc_ccu8.c ****               (level == XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH)));
1250:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1251:../Libraries/XMCLib/src/xmc_ccu8.c ****   psl = slice->PSL;
 3046              	 .loc 2 1251 7
 3047 0018 7B68     	 ldr r3,[r7,#4]
 3048 001a 9B69     	 ldr r3,[r3,#24]
 3049 001c FB60     	 str r3,[r7,#12]
1252:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1253:../Libraries/XMCLib/src/xmc_ccu8.c ****   psl &= ~((uint32_t) out);
 3050              	 .loc 2 1253 12
 3051 001e FB1C     	 adds r3,r7,#3
 3052 0020 1B78     	 ldrb r3,[r3]
 3053              	 .loc 2 1253 10
 3054 0022 DA43     	 mvns r2,r3
 3055              	 .loc 2 1253 7
 3056 0024 FB68     	 ldr r3,[r7,#12]
 3057 0026 1340     	 ands r3,r2
 3058 0028 FB60     	 str r3,[r7,#12]
1254:../Libraries/XMCLib/src/xmc_ccu8.c ****   psl |= (uint32_t) level << ((uint32_t)out >> 1U);
 3059              	 .loc 2 1254 10
 3060 002a BB1C     	 adds r3,r7,#2
 3061 002c 1B78     	 ldrb r3,[r3]
 3062              	 .loc 2 1254 45
 3063 002e FA1C     	 adds r2,r7,#3
 3064 0030 1278     	 ldrb r2,[r2]
 3065 0032 5208     	 lsrs r2,r2,#1
 3066 0034 D2B2     	 uxtb r2,r2
 3067              	 .loc 2 1254 27
 3068 0036 9340     	 lsls r3,r3,r2
 3069              	 .loc 2 1254 7
 3070 0038 FA68     	 ldr r2,[r7,#12]
 3071 003a 1343     	 orrs r3,r2
 3072 003c FB60     	 str r3,[r7,#12]
1255:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1256:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program CC8 slice output passive level */
1257:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->PSL = psl;
 3073              	 .loc 2 1257 14
 3074 003e 7B68     	 ldr r3,[r7,#4]
 3075 0040 FA68     	 ldr r2,[r7,#12]
 3076 0042 9A61     	 str r2,[r3,#24]
1258:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3077              	 .loc 2 1258 1
 3078 0044 C046     	 nop
 3079 0046 BD46     	 mov sp,r7
 3080 0048 04B0     	 add sp,sp,#16
 3081              	 
 3082 004a 80BD     	 pop {r7,pc}
 3083              	 .cfi_endproc
 3084              	.LFE151:
 3086              	 .section .text.XMC_CCU8_SLICE_DeadTimeInit,"ax",%progbits
 3087              	 .align 1
 3088              	 .global XMC_CCU8_SLICE_DeadTimeInit
 3089              	 .syntax unified
 3090              	 .code 16
 3091              	 .thumb_func
 3092              	 .fpu softvfp
 3094              	XMC_CCU8_SLICE_DeadTimeInit:
 3095              	.LFB152:
1259:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1260:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Initializes Dead time configuration for the slice outputs */
1261:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
1262:../Libraries/XMCLib/src/xmc_ccu8.c ****                                  const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
1263:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 3096              	 .loc 2 1263 1
 3097              	 .cfi_startproc
 3098              	 
 3099              	 
 3100 0000 80B5     	 push {r7,lr}
 3101              	.LCFI120:
 3102              	 .cfi_def_cfa_offset 8
 3103              	 .cfi_offset 7,-8
 3104              	 .cfi_offset 14,-4
 3105 0002 82B0     	 sub sp,sp,#8
 3106              	.LCFI121:
 3107              	 .cfi_def_cfa_offset 16
 3108 0004 00AF     	 add r7,sp,#0
 3109              	.LCFI122:
 3110              	 .cfi_def_cfa_register 7
 3111 0006 7860     	 str r0,[r7,#4]
 3112 0008 3960     	 str r1,[r7]
1264:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice)
1265:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1266:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program dead time value for channel 1 */
1267:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DC1R = config->dc1r;
 3113              	 .loc 2 1267 23
 3114 000a 3B68     	 ldr r3,[r7]
 3115 000c 5A68     	 ldr r2,[r3,#4]
 3116              	 .loc 2 1267 15
 3117 000e 7B68     	 ldr r3,[r7,#4]
 3118 0010 1A65     	 str r2,[r3,#80]
1268:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program dead time value for channel 2 */
1269:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DC2R = config->dc2r;
 3119              	 .loc 2 1269 23
 3120 0012 3B68     	 ldr r3,[r7]
 3121 0014 9A68     	 ldr r2,[r3,#8]
 3122              	 .loc 2 1269 15
 3123 0016 7B68     	 ldr r3,[r7,#4]
 3124 0018 5A65     	 str r2,[r3,#84]
1270:../Libraries/XMCLib/src/xmc_ccu8.c ****   /* Program dead time control configuration */
1271:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC = config->dtc;
 3125              	 .loc 2 1271 22
 3126 001a 3B68     	 ldr r3,[r7]
 3127 001c 1A68     	 ldr r2,[r3]
 3128              	 .loc 2 1271 14
 3129 001e 7B68     	 ldr r3,[r7,#4]
 3130 0020 DA64     	 str r2,[r3,#76]
1272:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3131              	 .loc 2 1272 1
 3132 0022 C046     	 nop
 3133 0024 BD46     	 mov sp,r7
 3134 0026 02B0     	 add sp,sp,#8
 3135              	 
 3136 0028 80BD     	 pop {r7,pc}
 3137              	 .cfi_endproc
 3138              	.LFE152:
 3140              	 .section .text.XMC_CCU8_SLICE_ConfigureDeadTime,"ax",%progbits
 3141              	 .align 1
 3142              	 .global XMC_CCU8_SLICE_ConfigureDeadTime
 3143              	 .syntax unified
 3144              	 .code 16
 3145              	 .thumb_func
 3146              	 .fpu softvfp
 3148              	XMC_CCU8_SLICE_ConfigureDeadTime:
 3149              	.LFB153:
1273:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1274:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Activates or deactivates dead time for compare channel and ST path */
1275:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureDeadTime(XMC_CCU8_SLICE_t *const slice, const uint8_t mask)
1276:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 3150              	 .loc 2 1276 1
 3151              	 .cfi_startproc
 3152              	 
 3153              	 
 3154 0000 80B5     	 push {r7,lr}
 3155              	.LCFI123:
 3156              	 .cfi_def_cfa_offset 8
 3157              	 .cfi_offset 7,-8
 3158              	 .cfi_offset 14,-4
 3159 0002 82B0     	 sub sp,sp,#8
 3160              	.LCFI124:
 3161              	 .cfi_def_cfa_offset 16
 3162 0004 00AF     	 add r7,sp,#0
 3163              	.LCFI125:
 3164              	 .cfi_def_cfa_register 7
 3165 0006 7860     	 str r0,[r7,#4]
 3166 0008 0A00     	 movs r2,r1
 3167 000a FB1C     	 adds r3,r7,#3
 3168 000c 1A70     	 strb r2,[r3]
1277:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice)
1278:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Channel", (mask <= XMC_CCU8_SLICE_DEAD_TIME_
1279:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1280:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC &= ~((uint32_t) XMC_CCU8_SLICE_DEAD_TIME_CONFIG_MASK);
 3169              	 .loc 2 1280 14
 3170 000e 7B68     	 ldr r3,[r7,#4]
 3171 0010 DB6C     	 ldr r3,[r3,#76]
 3172 0012 3F22     	 movs r2,#63
 3173 0014 9343     	 bics r3,r2
 3174 0016 1A00     	 movs r2,r3
 3175 0018 7B68     	 ldr r3,[r7,#4]
 3176 001a DA64     	 str r2,[r3,#76]
1281:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC |= (uint32_t) mask;
 3177              	 .loc 2 1281 14
 3178 001c 7B68     	 ldr r3,[r7,#4]
 3179 001e DA6C     	 ldr r2,[r3,#76]
 3180              	 .loc 2 1281 17
 3181 0020 FB1C     	 adds r3,r7,#3
 3182 0022 1B78     	 ldrb r3,[r3]
 3183              	 .loc 2 1281 14
 3184 0024 1A43     	 orrs r2,r3
 3185 0026 7B68     	 ldr r3,[r7,#4]
 3186 0028 DA64     	 str r2,[r3,#76]
1282:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3187              	 .loc 2 1282 1
 3188 002a C046     	 nop
 3189 002c BD46     	 mov sp,r7
 3190 002e 02B0     	 add sp,sp,#8
 3191              	 
 3192 0030 80BD     	 pop {r7,pc}
 3193              	 .cfi_endproc
 3194              	.LFE153:
 3196              	 .section .text.XMC_CCU8_SLICE_SetDeadTimeValue,"ax",%progbits
 3197              	 .align 1
 3198              	 .global XMC_CCU8_SLICE_SetDeadTimeValue
 3199              	 .syntax unified
 3200              	 .code 16
 3201              	 .thumb_func
 3202              	 .fpu softvfp
 3204              	XMC_CCU8_SLICE_SetDeadTimeValue:
 3205              	.LFB154:
1283:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1284:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Configures rising edge delay and falling edge delay for dead time */
1285:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetDeadTimeValue(XMC_CCU8_SLICE_t *const slice,
1286:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
1287:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const uint8_t rise_value,
1288:../Libraries/XMCLib/src/xmc_ccu8.c ****                                      const uint8_t fall_value)
1289:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 3206              	 .loc 2 1289 1
 3207              	 .cfi_startproc
 3208              	 
 3209              	 
 3210 0000 90B5     	 push {r4,r7,lr}
 3211              	.LCFI126:
 3212              	 .cfi_def_cfa_offset 12
 3213              	 .cfi_offset 4,-12
 3214              	 .cfi_offset 7,-8
 3215              	 .cfi_offset 14,-4
 3216 0002 83B0     	 sub sp,sp,#12
 3217              	.LCFI127:
 3218              	 .cfi_def_cfa_offset 24
 3219 0004 00AF     	 add r7,sp,#0
 3220              	.LCFI128:
 3221              	 .cfi_def_cfa_register 7
 3222 0006 7860     	 str r0,[r7,#4]
 3223 0008 0C00     	 movs r4,r1
 3224 000a 1000     	 movs r0,r2
 3225 000c 1900     	 movs r1,r3
 3226 000e FB1C     	 adds r3,r7,#3
 3227 0010 221C     	 adds r2,r4,#0
 3228 0012 1A70     	 strb r2,[r3]
 3229 0014 BB1C     	 adds r3,r7,#2
 3230 0016 021C     	 adds r2,r0,#0
 3231 0018 1A70     	 strb r2,[r3]
 3232 001a 7B1C     	 adds r3,r7,#1
 3233 001c 0A1C     	 adds r2,r1,#0
 3234 001e 1A70     	 strb r2,[r3]
1290:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimeValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice))
1291:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimeValue:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(c
1292:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1293:../Libraries/XMCLib/src/xmc_ccu8.c ****   if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 3235              	 .loc 2 1293 6
 3236 0020 FB1C     	 adds r3,r7,#3
 3237 0022 1B78     	 ldrb r3,[r3]
 3238 0024 002B     	 cmp r3,#0
 3239 0026 08D1     	 bne .L118
1294:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1295:../Libraries/XMCLib/src/xmc_ccu8.c ****     slice->DC1R = (((uint32_t) fall_value) << CCU8_CC8_DC1R_DT1F_Pos) | ((uint32_t) rise_value);
 3240              	 .loc 2 1295 21
 3241 0028 7B1C     	 adds r3,r7,#1
 3242 002a 1B78     	 ldrb r3,[r3]
 3243              	 .loc 2 1295 44
 3244 002c 1A02     	 lsls r2,r3,#8
 3245              	 .loc 2 1295 74
 3246 002e BB1C     	 adds r3,r7,#2
 3247 0030 1B78     	 ldrb r3,[r3]
 3248              	 .loc 2 1295 71
 3249 0032 1A43     	 orrs r2,r3
 3250              	 .loc 2 1295 17
 3251 0034 7B68     	 ldr r3,[r7,#4]
 3252 0036 1A65     	 str r2,[r3,#80]
1296:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1297:../Libraries/XMCLib/src/xmc_ccu8.c ****   else
1298:../Libraries/XMCLib/src/xmc_ccu8.c ****   {
1299:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DC2R = (((uint32_t) fall_value) << CCU8_CC8_DC2R_DT2F_Pos) | ((uint32_t) rise_value);
1300:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
1301:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3253              	 .loc 2 1301 1
 3254 0038 07E0     	 b .L120
 3255              	.L118:
1299:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 3256              	 .loc 2 1299 19
 3257 003a 7B1C     	 adds r3,r7,#1
 3258 003c 1B78     	 ldrb r3,[r3]
1299:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 3259              	 .loc 2 1299 42
 3260 003e 1A02     	 lsls r2,r3,#8
1299:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 3261              	 .loc 2 1299 72
 3262 0040 BB1C     	 adds r3,r7,#2
 3263 0042 1B78     	 ldrb r3,[r3]
1299:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 3264              	 .loc 2 1299 69
 3265 0044 1A43     	 orrs r2,r3
1299:../Libraries/XMCLib/src/xmc_ccu8.c ****   }
 3266              	 .loc 2 1299 15
 3267 0046 7B68     	 ldr r3,[r7,#4]
 3268 0048 5A65     	 str r2,[r3,#84]
 3269              	.L120:
 3270              	 .loc 2 1301 1
 3271 004a C046     	 nop
 3272 004c BD46     	 mov sp,r7
 3273 004e 03B0     	 add sp,sp,#12
 3274              	 
 3275 0050 90BD     	 pop {r4,r7,pc}
 3276              	 .cfi_endproc
 3277              	.LFE154:
 3279              	 .section .text.XMC_CCU8_SLICE_SetDeadTimePrescaler,"ax",%progbits
 3280              	 .align 1
 3281              	 .global XMC_CCU8_SLICE_SetDeadTimePrescaler
 3282              	 .syntax unified
 3283              	 .code 16
 3284              	 .thumb_func
 3285              	 .fpu softvfp
 3287              	XMC_CCU8_SLICE_SetDeadTimePrescaler:
 3288              	.LFB155:
1302:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1303:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Configures clock division factor for dead time */
1304:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_SetDeadTimePrescaler(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_DTC_DI
1305:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 3289              	 .loc 2 1305 1
 3290              	 .cfi_startproc
 3291              	 
 3292              	 
 3293 0000 80B5     	 push {r7,lr}
 3294              	.LCFI129:
 3295              	 .cfi_def_cfa_offset 8
 3296              	 .cfi_offset 7,-8
 3297              	 .cfi_offset 14,-4
 3298 0002 82B0     	 sub sp,sp,#8
 3299              	.LCFI130:
 3300              	 .cfi_def_cfa_offset 16
 3301 0004 00AF     	 add r7,sp,#0
 3302              	.LCFI131:
 3303              	 .cfi_def_cfa_register 7
 3304 0006 7860     	 str r0,[r7,#4]
 3305 0008 0A00     	 movs r2,r1
 3306 000a FB1C     	 adds r3,r7,#3
 3307 000c 1A70     	 strb r2,[r3]
1306:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimePrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(sli
1307:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimePrescaler:Invalid divider value", XMC_CCU8_SLICE_CHECK_DTC_
1308:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1309:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC &= ~((uint32_t) CCU8_CC8_DTC_DTCC_Msk);
 3308              	 .loc 2 1309 14
 3309 000e 7B68     	 ldr r3,[r7,#4]
 3310 0010 DB6C     	 ldr r3,[r3,#76]
 3311 0012 C022     	 movs r2,#192
 3312 0014 9343     	 bics r3,r2
 3313 0016 1A00     	 movs r2,r3
 3314 0018 7B68     	 ldr r3,[r7,#4]
 3315 001a DA64     	 str r2,[r3,#76]
1310:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->DTC |= ((uint32_t) div_val) << CCU8_CC8_DTC_DTCC_Pos;
 3316              	 .loc 2 1310 14
 3317 001c 7B68     	 ldr r3,[r7,#4]
 3318 001e DA6C     	 ldr r2,[r3,#76]
 3319              	 .loc 2 1310 18
 3320 0020 FB1C     	 adds r3,r7,#3
 3321 0022 1B78     	 ldrb r3,[r3]
 3322              	 .loc 2 1310 38
 3323 0024 9B01     	 lsls r3,r3,#6
 3324              	 .loc 2 1310 14
 3325 0026 1A43     	 orrs r2,r3
 3326 0028 7B68     	 ldr r3,[r7,#4]
 3327 002a DA64     	 str r2,[r3,#76]
1311:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3328              	 .loc 2 1311 1
 3329 002c C046     	 nop
 3330 002e BD46     	 mov sp,r7
 3331 0030 02B0     	 add sp,sp,#8
 3332              	 
 3333 0032 80BD     	 pop {r7,pc}
 3334              	 .cfi_endproc
 3335              	.LFE155:
 3337              	 .section .text.XMC_CCU8_SLICE_ConfigureStatusBitOutput,"ax",%progbits
 3338              	 .align 1
 3339              	 .global XMC_CCU8_SLICE_ConfigureStatusBitOutput
 3340              	 .syntax unified
 3341              	 .code 16
 3342              	 .thumb_func
 3343              	 .fpu softvfp
 3345              	XMC_CCU8_SLICE_ConfigureStatusBitOutput:
 3346              	.LFB156:
1312:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1313:../Libraries/XMCLib/src/xmc_ccu8.c **** /* Configures status ST1, ST2 mapping to STy */
1314:../Libraries/XMCLib/src/xmc_ccu8.c **** void XMC_CCU8_SLICE_ConfigureStatusBitOutput(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_ST
1315:../Libraries/XMCLib/src/xmc_ccu8.c **** {
 3347              	 .loc 2 1315 1
 3348              	 .cfi_startproc
 3349              	 
 3350              	 
 3351 0000 80B5     	 push {r7,lr}
 3352              	.LCFI132:
 3353              	 .cfi_def_cfa_offset 8
 3354              	 .cfi_offset 7,-8
 3355              	 .cfi_offset 14,-4
 3356 0002 82B0     	 sub sp,sp,#8
 3357              	.LCFI133:
 3358              	 .cfi_def_cfa_offset 16
 3359 0004 00AF     	 add r7,sp,#0
 3360              	.LCFI134:
 3361              	 .cfi_def_cfa_register 7
 3362 0006 7860     	 str r0,[r7,#4]
 3363 0008 0A00     	 movs r2,r1
 3364 000a FB1C     	 adds r3,r7,#3
 3365 000c 1A70     	 strb r2,[r3]
1316:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice
1317:../Libraries/XMCLib/src/xmc_ccu8.c ****   XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Channel", XMC_CCU8_SLICE_CHECK_SLICE_
1318:../Libraries/XMCLib/src/xmc_ccu8.c **** 
1319:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC &= ~((uint32_t) CCU8_CC8_TC_STOS_Msk);
 3366              	 .loc 2 1319 13
 3367 000e 7B68     	 ldr r3,[r7,#4]
 3368 0010 5B69     	 ldr r3,[r3,#20]
 3369 0012 084A     	 ldr r2,.L123
 3370 0014 1A40     	 ands r2,r3
 3371 0016 7B68     	 ldr r3,[r7,#4]
 3372 0018 5A61     	 str r2,[r3,#20]
1320:../Libraries/XMCLib/src/xmc_ccu8.c ****   slice->TC |= ((uint32_t) channel) << CCU8_CC8_TC_STOS_Pos;
 3373              	 .loc 2 1320 13
 3374 001a 7B68     	 ldr r3,[r7,#4]
 3375 001c 5A69     	 ldr r2,[r3,#20]
 3376              	 .loc 2 1320 17
 3377 001e FB1C     	 adds r3,r7,#3
 3378 0020 1B78     	 ldrb r3,[r3]
 3379              	 .loc 2 1320 37
 3380 0022 5B07     	 lsls r3,r3,#29
 3381              	 .loc 2 1320 13
 3382 0024 1A43     	 orrs r2,r3
 3383 0026 7B68     	 ldr r3,[r7,#4]
 3384 0028 5A61     	 str r2,[r3,#20]
1321:../Libraries/XMCLib/src/xmc_ccu8.c **** }
 3385              	 .loc 2 1321 1
 3386 002a C046     	 nop
 3387 002c BD46     	 mov sp,r7
 3388 002e 02B0     	 add sp,sp,#8
 3389              	 
 3390 0030 80BD     	 pop {r7,pc}
 3391              	.L124:
 3392 0032 C046     	 .align 2
 3393              	.L123:
 3394 0034 FFFFFF9F 	 .word -1610612737
 3395              	 .cfi_endproc
 3396              	.LFE156:
 3398              	 .text
 3399              	.Letext0:
 3400              	 .file 3 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
 3401              	 .file 4 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 3402              	 .file 5 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/lock.h"
 3403              	 .file 6 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h"
 3404              	 .file 7 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 3405              	 .file 8 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h"
 3406              	 .file 9 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
 3407              	 .file 10 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 3408              	 .file 11 "..//Libraries/XMCLib/inc/xmc1_scu.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 xmc_ccu8.c
    {standard input}:16     .text.XMC_CCU8_StartPrescaler:0000000000000000 $t
    {standard input}:23     .text.XMC_CCU8_StartPrescaler:0000000000000000 XMC_CCU8_StartPrescaler
    {standard input}:60     .text.XMC_CCU8_SLICE_StopTimer:0000000000000000 $t
    {standard input}:66     .text.XMC_CCU8_SLICE_StopTimer:0000000000000000 XMC_CCU8_SLICE_StopTimer
    {standard input}:98     .text.XMC_CCU8_SLICE_SetDitherCompareValue:0000000000000000 $t
    {standard input}:104    .text.XMC_CCU8_SLICE_SetDitherCompareValue:0000000000000000 XMC_CCU8_SLICE_SetDitherCompareValue
    {standard input}:140    .text.XMC_CCU8_lGateClock:0000000000000000 $t
    {standard input}:146    .text.XMC_CCU8_lGateClock:0000000000000000 XMC_CCU8_lGateClock
    {standard input}:185    .text.XMC_CCU8_lUngateClock:0000000000000000 $t
    {standard input}:191    .text.XMC_CCU8_lUngateClock:0000000000000000 XMC_CCU8_lUngateClock
    {standard input}:229    .text.XMC_CCU8_EnableModule:0000000000000000 $t
    {standard input}:236    .text.XMC_CCU8_EnableModule:0000000000000000 XMC_CCU8_EnableModule
    {standard input}:268    .text.XMC_CCU8_DisableModule:0000000000000000 $t
    {standard input}:275    .text.XMC_CCU8_DisableModule:0000000000000000 XMC_CCU8_DisableModule
    {standard input}:307    .text.XMC_CCU8_Init:0000000000000000 $t
    {standard input}:314    .text.XMC_CCU8_Init:0000000000000000 XMC_CCU8_Init
    {standard input}:374    .text.XMC_CCU8_Init:0000000000000048 $d
    {standard input}:379    .text.XMC_CCU8_SetModuleClock:0000000000000000 $t
    {standard input}:386    .text.XMC_CCU8_SetModuleClock:0000000000000000 XMC_CCU8_SetModuleClock
    {standard input}:439    .text.XMC_CCU8_SLICE_CompareInit:0000000000000000 $t
    {standard input}:446    .text.XMC_CCU8_SLICE_CompareInit:0000000000000000 XMC_CCU8_SLICE_CompareInit
    {standard input}:544    .text.XMC_CCU8_SLICE_CaptureInit:0000000000000000 $t
    {standard input}:551    .text.XMC_CCU8_SLICE_CaptureInit:0000000000000000 XMC_CCU8_SLICE_CaptureInit
    {standard input}:623    .text.XMC_CCU8_SLICE_SetOutPath:0000000000000000 $t
    {standard input}:630    .text.XMC_CCU8_SLICE_SetOutPath:0000000000000000 XMC_CCU8_SLICE_SetOutPath
    {standard input}:684    .text.XMC_CCU8_SetMultiChannelShadowTransferMode:0000000000000000 $t
    {standard input}:691    .text.XMC_CCU8_SetMultiChannelShadowTransferMode:0000000000000000 XMC_CCU8_SetMultiChannelShadowTransferMode
    {standard input}:745    .text.XMC_CCU8_SLICE_StartConfig:0000000000000000 $t
    {standard input}:752    .text.XMC_CCU8_SLICE_StartConfig:0000000000000000 XMC_CCU8_SLICE_StartConfig
    {standard input}:834    .text.XMC_CCU8_SLICE_StartConfig:0000000000000068 $d
    {standard input}:839    .text.XMC_CCU8_SLICE_StopConfig:0000000000000000 $t
    {standard input}:846    .text.XMC_CCU8_SLICE_StopConfig:0000000000000000 XMC_CCU8_SLICE_StopConfig
    {standard input}:925    .text.XMC_CCU8_SLICE_StopConfig:0000000000000060 $d
    {standard input}:930    .text.XMC_CCU8_SLICE_LoadConfig:0000000000000000 $t
    {standard input}:937    .text.XMC_CCU8_SLICE_LoadConfig:0000000000000000 XMC_CCU8_SLICE_LoadConfig
    {standard input}:989    .text.XMC_CCU8_SLICE_LoadConfig:0000000000000038 $d
    {standard input}:994    .text.XMC_CCU8_SLICE_LoadSelector:0000000000000000 $t
    {standard input}:1001   .text.XMC_CCU8_SLICE_LoadSelector:0000000000000000 XMC_CCU8_SLICE_LoadSelector
    {standard input}:1054   .text.XMC_CCU8_SLICE_ModulationConfig:0000000000000000 $t
    {standard input}:1061   .text.XMC_CCU8_SLICE_ModulationConfig:0000000000000000 XMC_CCU8_SLICE_ModulationConfig
    {standard input}:1184   .text.XMC_CCU8_SLICE_ModulationConfig:00000000000000a4 $d
    {standard input}:1192   .text.XMC_CCU8_SLICE_CountConfig:0000000000000000 $t
    {standard input}:1199   .text.XMC_CCU8_SLICE_CountConfig:0000000000000000 XMC_CCU8_SLICE_CountConfig
    {standard input}:1251   .text.XMC_CCU8_SLICE_CountConfig:0000000000000038 $d
    {standard input}:1256   .text.XMC_CCU8_SLICE_GateConfig:0000000000000000 $t
    {standard input}:1263   .text.XMC_CCU8_SLICE_GateConfig:0000000000000000 XMC_CCU8_SLICE_GateConfig
    {standard input}:1315   .text.XMC_CCU8_SLICE_GateConfig:0000000000000038 $d
    {standard input}:1320   .text.XMC_CCU8_SLICE_Capture0Config:0000000000000000 $t
    {standard input}:1327   .text.XMC_CCU8_SLICE_Capture0Config:0000000000000000 XMC_CCU8_SLICE_Capture0Config
    {standard input}:1380   .text.XMC_CCU8_SLICE_Capture1Config:0000000000000000 $t
    {standard input}:1387   .text.XMC_CCU8_SLICE_Capture1Config:0000000000000000 XMC_CCU8_SLICE_Capture1Config
    {standard input}:1440   .text.XMC_CCU8_SLICE_DirectionConfig:0000000000000000 $t
    {standard input}:1447   .text.XMC_CCU8_SLICE_DirectionConfig:0000000000000000 XMC_CCU8_SLICE_DirectionConfig
    {standard input}:1499   .text.XMC_CCU8_SLICE_DirectionConfig:0000000000000038 $d
    {standard input}:1504   .text.XMC_CCU8_SLICE_StatusBitOverrideConfig:0000000000000000 $t
    {standard input}:1511   .text.XMC_CCU8_SLICE_StatusBitOverrideConfig:0000000000000000 XMC_CCU8_SLICE_StatusBitOverrideConfig
    {standard input}:1557   .text.XMC_CCU8_SLICE_StatusBitOverrideConfig:0000000000000030 $d
    {standard input}:1562   .text.XMC_CCU8_SLICE_TrapConfig:0000000000000000 $t
    {standard input}:1569   .text.XMC_CCU8_SLICE_TrapConfig:0000000000000000 XMC_CCU8_SLICE_TrapConfig
    {standard input}:1669   .text.XMC_CCU8_SLICE_TrapConfig:0000000000000084 $d
    {standard input}:1676   .text.XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:0000000000000000 $t
    {standard input}:1683   .text.XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:0000000000000000 XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent
    {standard input}:1832   .text.XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent:00000000000000c0 $d
    {standard input}:1843   .text.XMC_CCU8_SLICE_ConfigureEvent:0000000000000000 $t
    {standard input}:1850   .text.XMC_CCU8_SLICE_ConfigureEvent:0000000000000000 XMC_CCU8_SLICE_ConfigureEvent
    {standard input}:2034   .text.XMC_CCU8_SLICE_SetInput:0000000000000000 $t
    {standard input}:2041   .text.XMC_CCU8_SLICE_SetInput:0000000000000000 XMC_CCU8_SLICE_SetInput
    {standard input}:2123   .text.XMC_CCU8_SLICE_SetTimerRepeatMode:0000000000000000 $t
    {standard input}:2130   .text.XMC_CCU8_SLICE_SetTimerRepeatMode:0000000000000000 XMC_CCU8_SLICE_SetTimerRepeatMode
    {standard input}:2187   .text.XMC_CCU8_SLICE_SetTimerCountingMode:0000000000000000 $t
    {standard input}:2194   .text.XMC_CCU8_SLICE_SetTimerCountingMode:0000000000000000 XMC_CCU8_SLICE_SetTimerCountingMode
    {standard input}:2251   .text.XMC_CCU8_SLICE_SetTimerPeriodMatch:0000000000000000 $t
    {standard input}:2258   .text.XMC_CCU8_SLICE_SetTimerPeriodMatch:0000000000000000 XMC_CCU8_SLICE_SetTimerPeriodMatch
    {standard input}:2295   .text.XMC_CCU8_SLICE_GetCaptureRegisterValue:0000000000000000 $t
    {standard input}:2302   .text.XMC_CCU8_SLICE_GetCaptureRegisterValue:0000000000000000 XMC_CCU8_SLICE_GetCaptureRegisterValue
    {standard input}:2342   .text.XMC_CCU8_SLICE_GetLastCapturedTimerValue:0000000000000000 $t
    {standard input}:2349   .text.XMC_CCU8_SLICE_GetLastCapturedTimerValue:0000000000000000 XMC_CCU8_SLICE_GetLastCapturedTimerValue
    {standard input}:2504   .text.XMC_CCU8_SLICE_GetCapturedValueFromFifo:0000000000000000 $t
    {standard input}:2511   .text.XMC_CCU8_SLICE_GetCapturedValueFromFifo:0000000000000000 XMC_CCU8_SLICE_GetCapturedValueFromFifo
    {standard input}:2562   .text.XMC_CCU8_SLICE_EnableDithering:0000000000000000 $t
    {standard input}:2569   .text.XMC_CCU8_SLICE_EnableDithering:0000000000000000 XMC_CCU8_SLICE_EnableDithering
    {standard input}:2653   .text.XMC_CCU8_SLICE_EnableDithering:0000000000000070 $d
    {standard input}:2658   .text.XMC_CCU8_SLICE_SetPrescaler:0000000000000000 $t
    {standard input}:2665   .text.XMC_CCU8_SLICE_SetPrescaler:0000000000000000 XMC_CCU8_SLICE_SetPrescaler
    {standard input}:2723   .text.XMC_CCU8_SLICE_SetPrescaler:0000000000000040 $d
    {standard input}:2728   .text.XMC_CCU8_SLICE_SetTimerCompareMatch:0000000000000000 $t
    {standard input}:2735   .text.XMC_CCU8_SLICE_SetTimerCompareMatch:0000000000000000 XMC_CCU8_SLICE_SetTimerCompareMatch
    {standard input}:2792   .text.XMC_CCU8_SLICE_GetTimerCompareMatch:0000000000000000 $t
    {standard input}:2799   .text.XMC_CCU8_SLICE_GetTimerCompareMatch:0000000000000000 XMC_CCU8_SLICE_GetTimerCompareMatch
    {standard input}:2856   .text.XMC_CCU8_SLICE_SetInterruptNode:0000000000000000 $t
    {standard input}:2863   .text.XMC_CCU8_SLICE_SetInterruptNode:0000000000000000 XMC_CCU8_SLICE_SetInterruptNode
    {standard input}:2905   .rodata.XMC_CCU8_SLICE_SetInterruptNode:0000000000000000 $d
    {standard input}:3008   .text.XMC_CCU8_SLICE_SetInterruptNode:00000000000000a0 $d
    {standard input}:3013   .text.XMC_CCU8_SLICE_SetPassiveLevel:0000000000000000 $t
    {standard input}:3020   .text.XMC_CCU8_SLICE_SetPassiveLevel:0000000000000000 XMC_CCU8_SLICE_SetPassiveLevel
    {standard input}:3087   .text.XMC_CCU8_SLICE_DeadTimeInit:0000000000000000 $t
    {standard input}:3094   .text.XMC_CCU8_SLICE_DeadTimeInit:0000000000000000 XMC_CCU8_SLICE_DeadTimeInit
    {standard input}:3141   .text.XMC_CCU8_SLICE_ConfigureDeadTime:0000000000000000 $t
    {standard input}:3148   .text.XMC_CCU8_SLICE_ConfigureDeadTime:0000000000000000 XMC_CCU8_SLICE_ConfigureDeadTime
    {standard input}:3197   .text.XMC_CCU8_SLICE_SetDeadTimeValue:0000000000000000 $t
    {standard input}:3204   .text.XMC_CCU8_SLICE_SetDeadTimeValue:0000000000000000 XMC_CCU8_SLICE_SetDeadTimeValue
    {standard input}:3280   .text.XMC_CCU8_SLICE_SetDeadTimePrescaler:0000000000000000 $t
    {standard input}:3287   .text.XMC_CCU8_SLICE_SetDeadTimePrescaler:0000000000000000 XMC_CCU8_SLICE_SetDeadTimePrescaler
    {standard input}:3338   .text.XMC_CCU8_SLICE_ConfigureStatusBitOutput:0000000000000000 $t
    {standard input}:3345   .text.XMC_CCU8_SLICE_ConfigureStatusBitOutput:0000000000000000 XMC_CCU8_SLICE_ConfigureStatusBitOutput
    {standard input}:3394   .text.XMC_CCU8_SLICE_ConfigureStatusBitOutput:0000000000000034 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_UngatePeripheralClock

   1              	 .cpu cortex-m0
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,0
  10              	 .eabi_attribute 18,4
  11              	 .file "xmc_ccu4.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.XMC_CCU4_StartPrescaler,"ax",%progbits
  16              	 .align 1
  17              	 .arch armv6s-m
  18              	 .syntax unified
  19              	 .code 16
  20              	 .thumb_func
  21              	 .fpu softvfp
  23              	XMC_CCU4_StartPrescaler:
  24              	.LFB43:
  25              	 .file 1 "..//Libraries/XMCLib/inc/xmc_ccu4.h"
   1:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
   2:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @file xmc_ccu4.h
   3:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @date 2017-09-15
   4:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
   5:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @cond
   6:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  **************************************************************************************************
   7:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
   9:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * All rights reserved.                        
  11:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                                             
  12:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * following conditions are met:   
  14:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                                                                              
  15:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * disclaimer.                        
  17:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
  18:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
  21:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * products derived from this software without specific prior written permission.                  
  23:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                                                                              
  24:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                                                                              
  32:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  **************************************************************************************************
  35:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
  36:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Change History
  37:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * --------------
  38:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
  39:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 2015-02-20:
  40:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - Initial <br>
  41:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - Documentation updates <br>
  42:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
  43:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 2015-06-20:
  44:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
  46:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 2015-07-22:
  47:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  48:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
  49:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 2015-08-17:
  50:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  51:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t enum item names are updated according to the guideli
  52:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - XMC_CCU4_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  53:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
  54:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 2015-09-29:
  55:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - In XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  56:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *       settings.
  57:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
  58:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 2015-10-07:
  59:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  60:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU4_SLICE_EnableMultipleEvents(
  61:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *       XMC_CCU4_SLICE_DisableMultipleEvents() APIs.
  62:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - DOC updates for the newly added APIs.
  63:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
  64:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 2016-03-09:
  65:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - Optimization of write only registers 
  66:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
  67:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 2016-05-20:
  68:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - Added XMC_CCU4_SLICE_StopClearTimer()
  69:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - Changed implementation of XMC_CCU4_SLICE_StopTimer() and XMC_CCU4_SLICE_ClearTimer() to av
  70:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
  71:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 2017-04-27:
  72:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU4_SLICE_PRESCALER_t
  73:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
  74:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 2017-09-15:
  75:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *     - Fix XMC_CCU4_SLICE_SetShadowTransferMode()
  76:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
  77:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @endcond
  78:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
  79:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
  80:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #ifndef XMC_CCU4_H
  81:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #define XMC_CCU4_H
  82:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  
  83:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**************************************************************************************************
  84:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * HEADER FILES
  85:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  **************************************************************************************************
  86:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #include "xmc_common.h"
  87:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU40)
  88:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
  89:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if UC_FAMILY == XMC1
  90:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  #include "xmc1_ccu4_map.h"
  91:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
  92:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
  93:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if UC_FAMILY == XMC4
  94:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  #include "xmc4_ccu4_map.h"
  95:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
  96:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
  97:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
  98:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @addtogroup XMClib XMC Peripheral Library
  99:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @{
 100:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 101:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  
 102:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 103:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @addtogroup CCU4
 104:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @brief Capture Compare Unit 4 (CCU4) low level driver for XMC family of microcontrollers<br>
 105:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 106:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * The CCU4 peripheral is a major component for systems that need general purpose timers for signal
 107:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * monitoring/conditioning and Pulse Width Modulation (PWM) signal generation. Power electronic con
 108:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * switched mode power supplies or interruptible power supplies, can easily be implemented with the
 109:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * CCU4 peripheral.\n
 110:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Each CCU4 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC4y (where
 111:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * timer slice can work in compare mode or in capture mode.
 112:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 113:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * APIs provided in this file cover the following functional blocks of CCU4:\n
 114:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 115:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par Note:
 116:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU4_SLICE_)
 117:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU4_)
 118:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 119:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par Timer(Compare mode) configuration:
 120:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_COMPARE_CONFIG_t and
 121:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CompareInit().
 122:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 123:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * It can be used to:
 124:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * -# Start and Stop the timer. (XMC_CCU4_SLICE_StartTimer(), XMC_CCU4_SLICE_StopTimer())
 125:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU4_SLICE_SetTimerPe
 126:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetTimerCompareMatch(), XMC_CCU4_SLICE_SetPrescaler(), XMC_CCU4_SLICE_SetDithe
 127:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetPassiveLevel())
 128:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU4_SLICE_EnableMultiChannelMode())
 129:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
 130:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par Capture configuration:
 131:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_CAPTURE_CONFIG_t and
 132:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CaptureInit().
 133:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 134:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * It can be used to:
 135:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * -# Configure the capture functionality. (XMC_CCU4_SLICE_Capture0Config(), XMC_CCU4_SLICE_Capture
 136:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 137:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    (XMC_CCU4_SLICE_GetCaptureRegisterValue())
 138:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
 139:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par Function/Event configuration:
 140:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_EVENT_CONFIG_t.\n
 141:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
 142:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * It can be used to:
 143:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * -# Enable and Disable the events. (XMC_CCU4_SLICE_EnableEvent(), XMC_CCU4_SLICE_DisableEvent())
 144:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU4_SLICE_StartConfig(), XMC_C
 145:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU4_SLICE_ModulationConfig(), 
 146:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    XMC_CCU4_SLICE_LoadConfig(), XMC_CCU4_SLICE_GateConfig())
 147:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU4_SLICE_Directi
 148:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * -# Count the external events.(XMC_CCU4_SLICE_CountConfig())
 149:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU4_SLICE_EnableTrap(), XMC_CCU4
 150:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    XMC_CCU4_SLICE_TrapConfig())
 151:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 152:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par Interrupt configuration:
 153:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 154:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @{
 155:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 156:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  
 157:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**************************************************************************************************
 158:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * MACROS
 159:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  **************************************************************************************************
 160:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /* Macro to check if the interrupt enum passed is valid */
 161:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #define XMC_CCU4_SLICE_CHECK_INTERRUPT(interrupt) \
 162:..//Libraries/XMCLib/inc/xmc_ccu4.h ****     ((interrupt == XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 163:..//Libraries/XMCLib/inc/xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH)              || \
 164:..//Libraries/XMCLib/inc/xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP)  || \
 165:..//Libraries/XMCLib/inc/xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN)|| \
 166:..//Libraries/XMCLib/inc/xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT0)                 || \
 167:..//Libraries/XMCLib/inc/xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT1)                 || \
 168:..//Libraries/XMCLib/inc/xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT2)                 || \
 169:..//Libraries/XMCLib/inc/xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_TRAP))
 170:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 171:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**************************************************************************************************
 172:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * ENUMS
 173:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  **************************************************************************************************
 174:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 175:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 176:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Typedef for CCU4 Global data structure
 177:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 178:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef CCU4_GLOBAL_TypeDef XMC_CCU4_MODULE_t;
 179:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 180:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 181:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Typedef for CCU4 Slice data structure
 182:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 183:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef CCU4_CC4_TypeDef XMC_CCU4_SLICE_t;
 184:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 185:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 186:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Return Value of an API
 187:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 188:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_STATUS
 189:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 190:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_STATUS_OK      = 0U, /**< API fulfils request */
 191:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_STATUS_ERROR       , /**< API cannot fulfil the request */
 192:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_STATUS_RUNNING     , /**< The timer slice is currently running */
 193:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_STATUS_IDLE          /**< The timer slice is currently idle */
 194:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_STATUS_t;
 195:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 196:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 197:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  CCU4 module clock
 198:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 199:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_CLOCK
 200:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 201:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 202:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_A     , /**< External clock-A */
 203:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_B     , /**< External clock-B */
 204:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_C       /**< External clock-C */
 205:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_CLOCK_t;
 206:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 207:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 208:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * CCU4 set the shadow transfer type for multichannel mode
 209:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 210:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER
 211:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 212:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 213:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                      only for slice
 214:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 215:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                      and hardware f
 216:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 217:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                      only for slice
 218:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 219:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                      and hardware f
 220:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 221:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                       only for slic
 222:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 223:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                       and hardware 
 224:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 225:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                       only for slic
 226:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 227:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                       and hardware 
 228:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 229:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 230:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 231:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Operational modes of CCU4 slice
 232:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 233:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODE
 234:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 235:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_COMPARE  = 0U, /**< slice(CC4y) operates in Compare Mode */
 236:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_CAPTURE        /**< slice(CC4y) operates in Capture Mode */
 237:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_MODE_t;
 238:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 239:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 240:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Timer counting modes for the slice
 241:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 242:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_MODE
 243:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 244:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 245:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA        /**< Center Aligned Mode */
 246:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_MODE_t;
 247:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 248:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 249:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Timer repetition mode for the slice
 250:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 251:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_REPEAT_MODE
 252:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 253:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U,  /**< Repetitive mode: continuous mode of operation
 254:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE        /**< Single shot mode: Once a Period match/One mat
 255:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                       occurs timer goes to idle state */
 256:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t;
 257:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 258:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 259:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Timer counting direction for the CCU4 slice
 260:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 261:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_DIR
 262:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 263:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 264:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 265:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_DIR_t;
 266:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 267:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 268:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Capture mode register sets
 269:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 270:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_CAP_REG_SET
 271:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 272:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 273:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_HIGH       /**< Capture register-2, Capture register-3 used */
 274:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_CAP_REG_SET_t;
 275:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 276:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 277:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Prescaler mode
 278:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 279:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER_MODE
 280:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 281:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 282:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider. */
 283:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_MODE_t;
 284:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 285:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 286:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Timer output passive level
 287:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 288:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL
 289:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 290:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 291:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 292:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 293:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 294:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 295:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Timer clock Divider
 296:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 297:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER
 298:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 299:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu4 */
 300:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2      , /**< Slice Clock = fccu4/2 */
 301:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4      , /**< Slice Clock = fccu4/4 */
 302:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8      , /**< Slice Clock = fccu4/8 */
 303:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16     , /**< Slice Clock = fccu4/16 */
 304:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32     , /**< Slice Clock = fccu4/32 */
 305:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_64     , /**< Slice Clock = fccu4/64 */
 306:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_128    , /**< Slice Clock = fccu4/128 */
 307:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_256    , /**< Slice Clock = fccu4/256 */
 308:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_512    , /**< Slice Clock = fccu4/512 */
 309:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu4/1024 */
 310:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu4/2048 */
 311:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu4/4096 */
 312:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu4/8192 */
 313:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu4/16384 */
 314:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32768    /**< Slice Clock = fccu4/32768 */
 315:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_t;
 316:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 317:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 318:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  External Function list
 319:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 320:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_FUNCTION
 321:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 322:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_START           = 0U, /**< Start function */
 323:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_STOP                , /**< Stop function */
 324:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 325:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                      generation */
 326:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 327:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                      generation */
 328:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_GATING              , /**< Gating function */
 329:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 330:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_LOAD                , /**< Load function */
 331:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_COUNT               , /**< Counting function */
 332:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 333:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 334:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_TRAP                  /**< Trap function */
 335:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_FUNCTION_t;
 336:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 337:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 338:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  External Event list
 339:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 340:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT
 341:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 342:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_NONE  = 0U, /**< None */
 343:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_0         , /**< Event-0 */
 344:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_1         , /**< Event-1 */
 345:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_2           /**< Event-2 */
 346:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_t;
 347:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 348:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 349:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  External Event trigger criteria  - Edge sensitivity
 350:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 351:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY
 352:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 353:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE         = 0U, /**< None */
 354:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE      , /**< Rising Edge of the input signal gen
 355:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE     , /**< Falling Edge of the input signal ge
 356:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                 trigger */
 357:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE          /**< Both Rising and Falling edges cause
 358:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t;
 359:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 360:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 361:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  External Event trigger criteria  - Level sensitivity
 362:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 363:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY
 364:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 365:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 366:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 367:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   /* Below enum items can be utilised specific to the functionality */
 368:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 369:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 370:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 371:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 372:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 373:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 374:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 375:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_FILTER
 376:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 377:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filter */
 378:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES      , /**< 3 clock cycles */
 379:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES      , /**< 5 clock cycles */
 380:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES        /**< 7 clock cycles */
 381:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_FILTER_t;
 382:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 383:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 384:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU4 slice.
 385:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Interconnects are specific to each device.
 386:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 387:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef uint8_t XMC_CCU4_SLICE_INPUT_t;
 388:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 389:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 390:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 391:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 392:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_END_MODE
 393:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 394:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 395:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 396:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 397:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_END_MODE_t;
 398:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 399:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 400:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Actions that can be performed upon detection of an external Timer START event
 401:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 402:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_START_MODE
 403:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 404:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 405:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 406:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_START_MODE_t;
 407:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 408:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 409:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Modulation of timer output signals
 410:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 411:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODULATION_MODE
 412:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 413:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 414:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 415:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_MODULATION_MODE_t;
 416:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 417:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 418:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Trap exit mode
 419:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 420:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TRAP_EXIT_MODE
 421:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 422:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 423:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 424:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_TRAP_EXIT_MODE_t;
 425:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 426:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 427:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Timer clear on capture
 428:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 429:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_CLEAR_MODE
 430:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 431:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 432:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 433:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 434:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 435:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t;
 436:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 437:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 438:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Multi Channel Shadow transfer request configuration options
 439:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 440:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MCMS_ACTION
 441:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 442:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 443:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                 the actual registers upon MCS xfer 
 444:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 445:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                 register values to the actual regis
 446:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                 request */
 447:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 448:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                 Compare register values to the actu
 449:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                 MCS xfer request */
 450:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_MCMS_ACTION_t;
 451:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 452:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 453:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Available Interrupt Event Ids
 454:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 455:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_IRQ_ID
 456:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 457:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH       = 0U , /**< Period match counting up */
 458:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH          = 1U , /**< Period match -> One match counting down */
 459:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP   = 2U , /**< Compare match counting up */
 460:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN = 3U , /**< Compare match counting down */
 461:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT0             = 8U , /**< Event-0 occurrence */
 462:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT1             = 9U , /**< Event-1 occurrence */
 463:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT2             = 10U, /**< Event-2 occurrence */
 464:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_TRAP               = 11U  /**< Trap occurrence */
 465:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_IRQ_ID_t;
 466:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 467:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 468:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 469:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 470:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MULTI_IRQ_ID
 471:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 472:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_PERIOD_MATCH       = 0x1U,   /**< Period match counting up */
 473:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_ONE_MATCH          = 0x2U,   /**< Period match -> One match counting 
 474:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP   = 0x4U,   /**< Compare match counting up */
 475:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN = 0x8U,   /**< Compare match counting down */
 476:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT0             = 0x100U, /**< Event-0 occurrence */
 477:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT1             = 0x200U, /**< Event-1 occurrence */
 478:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT2             = 0x400U, /**< Event-2 occurrence */
 479:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_MULTI_IRQ_ID_t;
 480:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 481:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 482:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Service Request Lines for CCU4. Event are mapped to these SR lines and these are used to generat
 483:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 484:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SR_ID
 485:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 486:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 487:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 488:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 489:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 490:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_SR_ID_t;
 491:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 492:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 493:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Slice shadow transfer options.
 494:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 495:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SHADOW_TRANSFER
 496:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 497:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_0            = CCU4_GCSS_S0SE_Msk, /**< Transfer Period, Compare a
 498:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           shadow register values to
 499:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           SLICE-0 */
 500:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU4_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 501:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           to actual register for SL
 502:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU4_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 503:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           actual register for SLICE
 504:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_1            = CCU4_GCSS_S1SE_Msk, /**< Transfer Period, Compare a
 505:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           shadow register values to
 506:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           SLICE-1 */
 507:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU4_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 508:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           to actual registers for S
 509:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU4_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 510:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           actual register for SLICE
 511:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_2            = CCU4_GCSS_S2SE_Msk, /**< Transfer Period, Compare a
 512:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           shadow register values to
 513:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           SLICE-2 */
 514:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU4_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 515:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           to actual register for SL
 516:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU4_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 517:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           actual register for SLICE
 518:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_3            = CCU4_GCSS_S3SE_Msk, /**< Transfer Period, Compare a
 519:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           shadow register values to
 520:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           SLICE-3 */
 521:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU4_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 522:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           to actual register for SL
 523:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU4_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 524:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                           actual register for SLICE
 525:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SHADOW_TRANSFER_t;
 526:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 527:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU4V3) || defined(DOXYGEN)/* Defined for XMC1400 devices only */
 528:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 529:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Slice shadow transfer mode options.
 530:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @note Only available for XMC1400 series
 531:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 532:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE
 533:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 534:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U,  /**< Shadow transfer is 
 535:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                 One match. */
 536:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 537:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 538:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t; 
 539:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   
 540:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   
 541:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 542:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Immediate write into configuration register
 543:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 544:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 545:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_WRITE_INTO
 546:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 547:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU4_CC4_STC_IRPC_Msk,                  /**< Imm
 548:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                 Wri
 549:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                 Con
 550:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_COMPARE_CONFIGURATION = CCU4_CC4_STC_IRCC_Msk,                 /**< Imm
 551:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                 Wri
 552:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                 Con
 553:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU4_CC4_STC_IRLC_Msk,           /**< Imm
 554:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                 Wri
 555:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 	                                                                                            Config
 556:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRDC_Msk,            /**< Imm
 557:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                 Wri
 558:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 	                                                                                            Config
 559:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRFC_Msk /**< Imm
 560:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                 Wri
 561:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                 Val
 562:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_WRITE_INTO_t;
 563:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 564:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 565:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 566:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 567:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 568:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 569:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 570:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 571:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU4_CC4_STC_ASPC_Msk,        
 572:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 	                                                                                                  
 573:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                    
 574:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                    
 575:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE_SHADOW = CCU4_CC4_STC_ASCC_Msk,       
 576:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 	                                                                                                  
 577:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 	                                                                                                  
 578:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 	                                                                                                  
 579:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU4_CC4_STC_ASLC_Msk,        
 580:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 	                                                                                                  
 581:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                    
 582:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU4_CC4_STC_ASDC_Msk,        
 583:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                    
 584:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                    
 585:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU4_CC4_STC_ASFC_
 586:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 	                                                                                                  
 587:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                    
 588:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                                                                    
 589:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 590:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 591:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 592:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 593:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Used to create Mask needed for Multi-channel Shadow transfer enable/disable
 594:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 595:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MASK
 596:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 597:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 598:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 599:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 600:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 601:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_MASK_t;
 602:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 603:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 604:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**************************************************************************************************
 605:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * DATA STRUCTURES
 606:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  **************************************************************************************************
 607:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 608:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 609:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 610:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Needed to configure the various aspects of an External Event.
 611:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  This structure will not connect the external event with an external function.
 612:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 613:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_EVENT_CONFIG
 614:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 615:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event *
 616:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 617:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                               This is needed for an edge sensitive 
 618:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 619:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                               This is needed for an level sensitive
 620:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 621:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_CONFIG_t;
 622:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 623:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /*Anonymous structure/union guard start*/
 624:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(__CC_ARM)
 625:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   #pragma push
 626:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   #pragma anon_unions
 627:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #elif defined(__TASKING__)
 628:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   #pragma warning 586
 629:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 630:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 631:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 632:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to compare 
 633:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  This excludes event and function configuration.
 634:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 635:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_COMPARE_CONFIG
 636:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 637:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   union
 638:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   {
 639:..//Libraries/XMCLib/inc/xmc_ccu4.h ****     struct
 640:..//Libraries/XMCLib/inc/xmc_ccu4.h ****     {
 641:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 642:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                              Accepts enum ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t */
 643:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 644:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t*/
 645:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t shadow_xfer_clear : 1;  /**< Should PR and CR shadow xfer happen when timer is clear
 646:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t : 10;
 647:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 648:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 649:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t : 1;
 650:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 651:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_PRESCALER_MODE_t*/
 652:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t : 8;
 653:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t mcm_enable : 1;         /**< Multi-Channel mode enable? */
 654:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t : 6;
 655:..//Libraries/XMCLib/inc/xmc_ccu4.h ****     };
 656:..//Libraries/XMCLib/inc/xmc_ccu4.h ****     uint32_t tc;
 657:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   };
 658:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 659:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                             Accepts enum :: XMC_CCU4_SLICE_PRESCALER_t */
 660:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 661:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering */
 662:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   uint32_t passive_level : 1;          /**< Configuration of ST and OUT passive levels.
 663:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t*
 664:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true.*/
 665:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_COMPARE_CONFIG_t;
 666:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 667:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 668:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to capture 
 669:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  This excludes event and function configuration.
 670:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */ 
 671:..//Libraries/XMCLib/inc/xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_CAPTURE_CONFIG
 672:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 673:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   union
 674:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   {
 675:..//Libraries/XMCLib/inc/xmc_ccu4.h ****     struct
 676:..//Libraries/XMCLib/inc/xmc_ccu4.h ****     {
 677:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t : 4;
 678:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
 679:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
 680:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                           Accepts enum ::XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t*/
 681:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t : 4;
 682:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
 683:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
 684:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t : 3;
 685:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU4_SLI
 686:..//Libraries/XMCLib/inc/xmc_ccu4.h ****       uint32_t : 15;
 687:..//Libraries/XMCLib/inc/xmc_ccu4.h ****     };
 688:..//Libraries/XMCLib/inc/xmc_ccu4.h ****     uint32_t tc;
 689:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   };
 690:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
 691:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
 692:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   uint32_t timer_concatenation : 1;  /**< Enables the concatenation of the timer */
 693:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } XMC_CCU4_SLICE_CAPTURE_CONFIG_t;
 694:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /*Anonymous structure/union guard end*/
 695:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(__CC_ARM)
 696:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   #pragma pop
 697:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #elif defined(__TASKING__)
 698:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   #pragma warning restore
 699:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 700:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**************************************************************************************************
 701:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * API Prototypes
 702:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  **************************************************************************************************
 703:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 704:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #ifdef __cplusplus
 705:..//Libraries/XMCLib/inc/xmc_ccu4.h **** extern "C" {
 706:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 707:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 708:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidModule(const XMC_CCU4_MODULE_t *const module)
 709:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 710:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   bool tmp = false;
 711:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   
 712:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = (module == CCU40);
 713:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   
 714:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU41) 
 715:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (module == CCU41);
 716:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 717:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 718:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU42)
 719:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (module == CCU42);
 720:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 721:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 722:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU43)
 723:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (module == CCU43);
 724:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 725:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   
 726:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   return tmp;  
 727:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } 
 728:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 729:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidSlice(const XMC_CCU4_SLICE_t *const slice)
 730:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 731:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   bool tmp = false;
 732:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   
 733:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = (slice == CCU40_CC40);
 734:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU40_CC41)  
 735:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC41);
 736:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 737:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU40_CC42)  
 738:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC42);
 739:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 740:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU40_CC43)  
 741:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC43);
 742:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 743:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU41)  
 744:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC40);
 745:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU41_CC41)  
 746:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC41);
 747:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 748:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU41_CC42)  
 749:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC42);
 750:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 751:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU41_CC43)  
 752:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC43);
 753:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 754:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif 
 755:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU42)  
 756:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC40);
 757:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU42_CC41)  
 758:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC41);
 759:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 760:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU42_CC42)  
 761:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC42);
 762:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 763:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU42_CC43)  
 764:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC43);
 765:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 766:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 767:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU43)  
 768:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC40);
 769:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU43_CC41)  
 770:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC41);
 771:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 772:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU43_CC42)  
 773:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC42);
 774:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 775:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU43_CC43)  
 776:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC43);
 777:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
 778:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif 
 779:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   
 780:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   return tmp;  
 781:..//Libraries/XMCLib/inc/xmc_ccu4.h **** } 
 782:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 783:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 784:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 785:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param mcs_action multi-channel shadow transfer request configuration
 786:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
 787:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
 788:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 789:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
 790:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Initialization of global register GCTRL.<br>\n
 791:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  As part of module initialization, behaviour of the module upon detection
 792:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU4_EnableModule().
 793:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  The API call would bring up the required CCU4 module and also initialize the module for
 794:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  the required multi-channel shadow transfer.
 795:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 796:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 797:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
 798:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 799:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action);
 800:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 801:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 802:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 803:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param clock Choice of input clock to the module
 804:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
 805:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
 806:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 807:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
 808:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.<BR>\n
 809:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
 810:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Call to this API is valid after the XMC_CCU4_Init().
 811:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 812:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 813:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * None.<BR>
 814:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 815:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock);
 816:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 817:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 818:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 819:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
 820:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
 821:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 822:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
 823:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Enables the CCU4 module and brings it to active state.<BR>\n
 824:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
 825:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Invoke this API before any operations are done on the CCU4 module. Invoked from  XMC_CCU4_Init()
 826:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 827:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 828:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_SetModuleClock()<BR> XMC_CCU4_DisableModule()<BR> XMC_CCU4_StartPrescaler().
 829:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 830:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module);
 831:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 832:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 833:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 834:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
 835:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
 836:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 837:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
 838:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Brings the CCU4 module to reset state and enables gating of the clock signal(if applicable depen
 839:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * on the device being selected).<BR>\n
 840:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Invoke this API when a CCU4 module needs to be disabled completely.
 841:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Any operation on the CCU4 module will have no effect after this API is called.
 842:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 843:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 844:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_EnableModule()<BR> XMC_CCU4_DisableModule().
 845:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 846:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module);
 847:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 848:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 849:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 850:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
 851:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
 852:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 853:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
 854:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<BR>\n
 855:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
 856:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU4_Init()
 857:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  (Mandatory to fully initialize the module).Directly accessed register is GIDLC.
 858:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 859:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 860:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescal
 861:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_StopPrescaler().
 862:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 863:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
 864:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
  26              	 .loc 1 864 1
  27              	 .cfi_startproc
  28              	 
  29              	 
  30 0000 80B5     	 push {r7,lr}
  31              	.LCFI0:
  32              	 .cfi_def_cfa_offset 8
  33              	 .cfi_offset 7,-8
  34              	 .cfi_offset 14,-4
  35 0002 82B0     	 sub sp,sp,#8
  36              	.LCFI1:
  37              	 .cfi_def_cfa_offset 16
  38 0004 00AF     	 add r7,sp,#0
  39              	.LCFI2:
  40              	 .cfi_def_cfa_register 7
  41 0006 7860     	 str r0,[r7,#4]
 865:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 866:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
  42              	 .loc 1 866 17
  43 0008 7B68     	 ldr r3,[r7,#4]
  44 000a DB68     	 ldr r3,[r3,#12]
  45 000c 8022     	 movs r2,#128
  46 000e 5200     	 lsls r2,r2,#1
  47 0010 1A43     	 orrs r2,r3
  48 0012 7B68     	 ldr r3,[r7,#4]
  49 0014 DA60     	 str r2,[r3,#12]
 867:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
  50              	 .loc 1 867 1
  51 0016 C046     	 nop
  52 0018 BD46     	 mov sp,r7
  53 001a 02B0     	 add sp,sp,#8
  54              	 
  55 001c 80BD     	 pop {r7,pc}
  56              	 .cfi_endproc
  57              	.LFE43:
  59              	 .section .text.XMC_CCU4_SLICE_SetDitherCompareValue,"ax",%progbits
  60              	 .align 1
  61              	 .syntax unified
  62              	 .code 16
  63              	 .thumb_func
  64              	 .fpu softvfp
  66              	XMC_CCU4_SLICE_SetDitherCompareValue:
  67              	.LFB71:
 868:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 869:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 870:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 871:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
 872:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
 873:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 874:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
 875:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.<BR>\n
 876:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Opposite of the StartPrescaler routine.
 877:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
 878:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * the slices of the module.Registers directly accessed is GIDLS.
 879:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 880:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 881:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_St
 882:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 883:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StopPrescaler(XMC_CCU4_MODULE_t *const module)
 884:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 885:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StopPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 886:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   module->GIDLS |= (uint32_t) CCU4_GIDLS_CPRB_Msk;
 887:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
 888:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 889:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 890:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 891:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
 892:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
 893:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 894:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
 895:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.<BR>\n
 896:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This will return true if the prescaler is running. If clock is being supplied to the slices of t
 897:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * module then returns as true.
 898:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 899:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 900:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_D
 901:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 902:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsPrescalerRunning(XMC_CCU4_MODULE_t *const module)
 903:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 904:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 905:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   return((bool)((module->GSTAT & (uint32_t) CCU4_GSTAT_PRB_Msk) == (uint32_t)CCU4_GSTAT_PRB_Msk));
 906:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
 907:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 908:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 909:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 910:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
 911:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively.
 912:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                   Range: [0x1 to 0xF]
 913:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
 914:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
 915:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 916:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
 917:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 918:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * GIDLC.CS3I bits.\n\n
 919:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
 920:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * of the idle state simultaneously.
 921:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 922:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 923:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock().
 924:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 925:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableMultipleClocks(XMC_CCU4_MODULE_t *const module, const uint8_t c
 926:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 927:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU4_IsValidModule(module)
 928:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Wrong clock mask", (clock_mask < 16U));
 929:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   
 930:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   module->GIDLC |= (uint32_t) clock_mask;
 931:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
 932:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 933:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 934:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 935:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be Enabled.
 936:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 937:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
 938:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
 939:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 940:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
 941:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 942:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
 943:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
 944:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  slice whose clock needs to be enabled.
 945:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 946:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 947:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XM
 948:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 949:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_numb
 950:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 951:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 952:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));
 953:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 954:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   module->GIDLC |= ((uint32_t) 1) << slice_number;
 955:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
 956:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 957:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 958:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 959:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be disabled.
 960:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 961:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
 962:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
 963:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
 964:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
 965:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
 966:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
 967:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * It is possible to disable clock at slice level using the module pointer.
 968:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
 969:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Directly accessed Register is GIDLS.
 970:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 971:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 972:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC
 973:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 974:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_DisableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_num
 975:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
 976:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 977:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Slice Number", (slice_number < 4U));
 978:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 979:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   module->GIDLS |= ((uint32_t) 1) << slice_number;
 980:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
 981:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
 982:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
 983:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
 984:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param compare_init Pointer to slice configuration structure
 985:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
 986:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
 987:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 988:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
 989:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Initialization of a CC4 slice to compare mode, by configuring CC4yTC, CC4yCMC, CC4yPSC, CC4yDITH
 990:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * CC4yFPCS, CC4yCHC registers.\n\n 
 991:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * CC4 slice is configured with Timer configurations in this routine.
 992:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * After initialization user has to explicitly enable the shadow transfer for the required values b
 993:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask.
 994:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
 995:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 996:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * None.
 997:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
 998:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
 999:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init);
1000:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1001:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1002:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1003:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param capture_init Pointer to slice configuration structure
1004:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1005:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1006:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1007:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1008:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Initialization of a CC4 slice to capture mode, by configuring CC4yTC, CC4yCMC, CC4yPSC,CC4yFPCS 
1009:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * CC4 slice is configured with Capture configurations in  this routine.After initialization user h
1010:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * enable the shadow transfer for the required  values by calling XMC_CCU4_EnableShadowTransfer()
1011:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * with appropriate mask.
1012:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1013:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1014:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config().
1015:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1016:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
1017:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init);
1018:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1019:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1020:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1021:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1022:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param event Map an External event to the External Start Function
1023:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param start_mode Behavior of slice when the start function is activated
1024:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1025:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1026:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1027:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1028:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Configures the Start Function of the slice, by configuring CC4yCMC.ENDS and CC4yTC.ENDM bits.\n
1029:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC4 ti
1030:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1031:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1032:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1033:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1034:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1035:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
1036:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_EVENT_t event,
1037:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode);
1038:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1039:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1040:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1041:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param event Map an External event to the External Stop Function
1042:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param end_mode Behavior of slice when the stop function is activated
1043:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1044:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1045:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1046:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1047:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Configures the Stop function for the slice, by configuring CC4yCMC.STRTS and CC4yTC.STRM bits.\n
1048:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU4 tim
1049:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1050:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1051:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1052:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1053:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1054:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
1055:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                const XMC_CCU4_SLICE_EVENT_t event,
1056:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode);
1057:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1058:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1059:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1060:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param event Map an External event to the External load Function
1061:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1062:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1063:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1064:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1065:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Configures the Load Function for the slice, by configuring CC4yCMC.LDS bit.\n\n
1066:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1067:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 0,CC4yTIMER register is reloaded with the value from compare register\n
1068:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 1,CC4yTIMER register is reloaded with the value from period register\n
1069:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1070:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1071:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1072:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1073:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1074:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1075:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1076:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1077:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1078:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param event Map an External event to the External Modulation Function
1079:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param mod_mode Desired Modulation mode
1080:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1081:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1082:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1083:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1084:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
1085:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1086:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Configures the Output Modulation Function of the slice, by configuring CCeyCMC.MOS, CC4yTC.EMT a
1087:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * CC4yTC.EMS bits.\n\n
1088:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1089:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1090:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * of the modulation function is configured as well.
1091:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1092:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1093:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1094:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1095:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
1096:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_EVENT_t event,
1097:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
1098:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                      const bool synch_with_pwm);
1099:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1100:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1101:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1102:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param event Map an External event to the External Count Function
1103:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1104:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1105:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
1106:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1107:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Configures the Count Function of the slice, by configuring CC4yCMC.CNTS bit.\n\n
1108:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Count function is mapped with one of the 3 events. CCU4 slice can take an external
1109:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * signal to act as the counting event. The CCU4 slice would count the
1110:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * edges present on the \b event selected.
1111:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1112:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1113:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1114:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1115:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1116:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1117:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1118:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1119:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param event  Map an External event to the External Gating Function
1120:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1121:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1122:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
1123:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1124:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Configures the Gating Function of the slice, by configuring CC4yCMC.GATES bit.\n\n
1125:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Gating function is mapped with one of the 3 events.  A CCU4 slice can use an input signal that w
1126:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1127:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1128:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1129:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1130:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1131:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1132:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1133:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1134:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1135:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param event Map an External event to the Capture-0 Function
1136:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1137:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1138:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
1139:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1140:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Configures the Capture-0 Function of the slice, by configuring CC4yCMC.CAP0S bit.\n\n
1141:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events.  A CCU4 slice can be configured into captur
1142:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC0V and 
1143:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1144:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1145:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1146:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1147:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1148:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1149:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1150:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1151:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param event Map an External event to the Capture-1 Function
1152:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1153:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1154:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
1155:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1156:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Configures the Capture-1 Function of the slice, by configuring CC4yCMC.CAP1S bit.\n\n
1157:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events. A CCU4 slice can be configured into capture
1158:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * mode with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC2V
1159:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1160:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1161:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1162:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1163:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1164:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1165:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1166:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1167:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1168:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1169:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1170:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1171:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC4yTC.E
1172:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * In this mode the there is only one associated read address for all the capture registers.
1173:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Individual capture registers can still be accessed in this mode.
1174:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1175:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1176:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_GetCapturedValueFromFifo().
1177:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1178:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsExtendedCapReadEnabled(const XMC_CCU4_SLICE_t *const slice)
1179:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1180:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_IsExtendedCapReadEnabled:Invalid Module Pointer", XMC_CCU4_IsValidSlic
1181:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   return((bool)((slice->TC & (uint32_t) CCU4_CC4_TC_ECM_Msk) == (uint32_t)CCU4_CC4_TC_ECM_Msk));
1182:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1183:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1184:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #if defined(CCU4V1) /* Defined for XMC4500, XMC4400, XMC4200, XMC4100 devices only */
1185:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1186:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1187:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice_number to check whether read value belongs to required slice or not
1188:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1189:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1190:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1191:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                     Range: [0x0 to 0xFFFF]
1192:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1193:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1194:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Read captured value from FIFO(ECRD register).\n\n
1195:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1196:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1197:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1198:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * derived/inferred from the captured values.
1199:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1200:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1201:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1202:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  @note Only available for XMC4500, XMC4400, XMC4200 and XMC4100 series 
1203:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1204:..//Libraries/XMCLib/inc/xmc_ccu4.h **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
1205:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #else
1206:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1207:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1208:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param set The capture register set from which the captured value is to be retrieved
1209:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1210:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    uint32_t Returns the value captured in the \b slice_number
1211:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *             Range: [0x0 to 0xFFFF]
1212:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1213:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1214:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Read captured value from FIFO(CC4yECRD0 and CC4yECRD1).\n\n
1215:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1216:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1217:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1218:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * derived/inferred from the captured values.
1219:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1220:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1221:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1222:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1223:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1224:..//Libraries/XMCLib/inc/xmc_ccu4.h **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1225:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 		                                             const XMC_CCU4_SLICE_CAP_REG_SET_t set);
1226:..//Libraries/XMCLib/inc/xmc_ccu4.h **** #endif
1227:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1228:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1229:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1230:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param event Map an External event to the External Count Direction Function
1231:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1232:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1233:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
1234:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1235:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Configures the Count Direction of the slice, by configuring CC4yCMC.UDS bit.\n\n
1236:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1237:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * CC4yTIMER count direction depending on an external signal.
1238:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1239:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1240:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1241:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1242:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
1243:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1244:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1245:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1246:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1247:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1248:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1249:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1250:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Configures the status bit override Function of the slice, by configuring CC4yCMC.OFS bit.\n\n
1251:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1252:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * output of the timer's CC4yST signal depending on an external signal. 
1253:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1254:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1255:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent().
1256:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1257:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice);
1258:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1259:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1260:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1261:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param exit_mode How should a previously logged trap state be exited?
1262:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1263:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1264:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1265:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1266:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1267:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Configures the Trap Function of the slice, by configuring CC4yCMC.TS, CC4yTC.TRPSE, and CC4yTC.T
1268:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1269:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1270:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1271:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1272:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1273:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1274:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1275:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1276:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
1277:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
1278:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                bool synch_with_pwm);
1279:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1280:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1281:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1282:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1283:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param ev1_config Pointer to event 1 configuration data
1284:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param ev2_config Pointer to event 2 configuration data
1285:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1286:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1287:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1288:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1289:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1290:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC4yINS reg
1291:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1292:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1293:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Event-2 input would be the override value.
1294:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1295:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1296:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig().
1297:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1298:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
1299:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_
1300:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_
1301:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1302:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1303:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1304:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1305:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param config Pointer to event configuration data.
1306:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1307:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1308:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1309:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1310:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Configures an External Event of the slice, by updating CC4yINS register .\n\n
1311:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1312:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1313:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1314:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1315:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1316:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1317:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1318:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1319:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1320:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1321:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
1322:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_t event,
1323:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config);
1324:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1325:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1326:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1327:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1328:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1329:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1330:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1331:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1332:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
1333:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1334:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Selects an input for an external event, by configuring CC4yINS register.\n\n
1335:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1336:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This configures the CC4yINS.EVxIS for the selected event.
1337:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1338:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1339:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1340:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1341:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1342:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1343:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1344:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
1345:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                              const XMC_CCU4_SLICE_EVENT_t event,
1346:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                              const XMC_CCU4_SLICE_INPUT_t input);
1347:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1348:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1349:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1350:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1351:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1352:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1353:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1354:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Enables the trap feature, by setting CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TRAP
1355:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \a out_mask.\n\n
1356:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1357:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1358:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1359:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1360:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent(
1361:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInput().
1362:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1363:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
1364:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1365:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1366:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
1367:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1368:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1369:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1370:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1371:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1372:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1373:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1374:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1375:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Disables the trap feature, by clearing CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TR
1376:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \a out_mask.\n\n.\n\n
1377:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This API will revert the changes done by XMC_CCU4_SLICE_EnableTrap().
1378:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU4 slice.
1379:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1380:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1381:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableTrap().
1382:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1383:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableTrap(XMC_CCU4_SLICE_t *const slice)
1384:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1385:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1386:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_TRAPE_Msk);
1387:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1388:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1389:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1390:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1391:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1392:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1393:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1394:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1395:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC4yTCST.TRB bit.
1396:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1397:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1398:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
1399:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1400:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
1401:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1402:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1403:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
1404:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1405:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1406:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1407:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1408:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1409:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *   ::XMC_CCU4_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1410:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1411:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1412:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Returns the timer counting direction, by reading CC4yTCST.CDIR bit.\n\n
1413:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This API will return the direction in which the timer is currently
1414:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * incrementing(XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU4_SLICE_TIMER_COUNT_DIR_
1415:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1416:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1417:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  None.
1418:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1419:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_DIR_t XMC_CCU4_SLICE_GetCountingDir(const XMC_CCU4_SLICE
1420:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1421:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1422:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU4_CC4_TCST_CDIR_Msk) >> CCU4_CC4_TC
1423:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1424:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1425:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1426:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1427:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1428:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1429:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1430:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1431:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Starts the timer counting operation, by setting CC4yTCSET.TRBS bit.\n\n
1432:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * It is necessary to have configured the CC4 slice before starting its timer.
1433:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1434:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1435:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1436:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StopTimer().
1437:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1438:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
1439:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1440:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1441:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
1442:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1443:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1444:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1445:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1446:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1447:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1448:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1449:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1450:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Stops the Timer.<BR>\n
1451:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC4yTCCLR.TRBC bit.
1452:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1453:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1454:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1455:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1456:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
1457:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1458:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1459:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
1460:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1461:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1462:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1463:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1464:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1465:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1466:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1467:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1468:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Resets the timer count to zero, by setting CC4yTCCLR.TCC bit.\n\n
1469:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * A timer which has been stopped can still retain the last counted value.
1470:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * After invoking this API the timer value will be cleared.
1471:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1472:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1473:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1474:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1475:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
1476:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1477:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1478:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
1479:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1480:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1481:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1482:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1483:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1484:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1485:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1486:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1487:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Stops and resets the timer count to zero, by setting CC4yTCCLR.TCC and CC4yTCCLR.TRBC bit.\n\n
1488:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1489:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1490:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1491:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1492:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopClearTimer(XMC_CCU4_SLICE_t *const slice)
1493:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1494:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1495:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   slice->TCCLR = CCU4_CC4_TCCLR_TRBC_Msk | CCU4_CC4_TCCLR_TCC_Msk;
1496:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1497:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1498:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1499:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1500:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1501:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    ::XMC_CCU4_SLICE_MODE_t returns XMC_CCU4_SLICE_MODE_COMPARE if the slice is operating in comp
1502:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                          returns XMC_CCU4_SLICE_MODE_CAPTURE if the slice is operating in captur
1503:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1504:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1505:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
1506:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * CC4yTC.CMOD bit.\n\n
1507:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Ensure that before invoking this API the CCU4 slice should be configured otherwise the output of
1508:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * invalid.
1509:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1510:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1511:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  None.
1512:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1513:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_MODE_t XMC_CCU4_SLICE_GetSliceMode(const XMC_CCU4_SLICE_t *const sli
1514:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1515:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1516:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   return((XMC_CCU4_SLICE_MODE_t)(((slice->TC) & CCU4_CC4_TC_CMOD_Msk) >> CCU4_CC4_TC_CMOD_Pos));
1517:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1518:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1519:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1520:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
1521:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1522:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1523:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1524:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1525:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC4yTC.TSSM b
1526:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1527:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
1528:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * reaching the terminal count.
1529:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1530:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1531:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerRepeatMode().
1532:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1533:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
1534:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1535:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1536:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1537:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <br>
1538:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
1539:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
1540:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1541:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1542:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC4yTC.T
1543:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1544:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
1545:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * all over again after reaching the terminal count.
1546:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1547:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1548:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerRepeatMode().
1549:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1550:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t XMC_CCU4_SLICE_GetTimerRepeatMode(
1551:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 		                                                                            const XMC_CCU4_SLICE_
1552:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1553:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
1554:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TSSM_Msk) >> CCU4_CC4_TC_T
1555:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1556:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1557:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1558:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
1559:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1560:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1561:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1562:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1563:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC4yTC.
1564:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
1565:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
1566:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
1567:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
1568:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * greater than the compare value.
1569:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1570:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1571:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerCountingMode().
1572:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1573:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
1574:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1575:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1576:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1577:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <br>
1578:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
1579:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA if center aligned
1580:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1581:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1582:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC4yTC.TCM bit.\
1583:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1584:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1585:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCountingMode().
1586:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1587:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_MODE_t XMC_CCU4_SLICE_GetTimerCountingMode(
1588:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 		                                                                           const XMC_CCU4_SLICE_t
1589:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1590:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1591:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TCM_Msk) >> CCU4_CC4_TC_TCM
1592:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1593:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1594:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1595:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param period_val Timer period value
1596:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *        Range: [0x0 to 0xFFFF]
1597:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1598:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1599:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1600:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1601:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Programs the timer period, by writing CC4yPRS register.\n\n
1602:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
1603:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
1604:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
1605:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual period register.
1606:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1607:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1608:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1609:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1610:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16
1611:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1612:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1613:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   slice->PRS = (uint32_t) period_val;
1614:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1615:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1616:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1617:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1618:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1619:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *   uint16_t returns the current timer period value
1620:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1621:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1622:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1623:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Retrieves the timer period value currently effective, by reading CC4yPR register.\n\n
1624:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
1625:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1626:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Note:</b><br>
1627:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
1628:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
1629:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerPeri
1630:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1631:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1632:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1633:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
1634:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1635:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
1636:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1637:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1638:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   return((uint16_t)slice->PR);
1639:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1640:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1641:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1642:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1643:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param compare_val Timer compare value
1644:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1645:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1646:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1647:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1648:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Programs the timer compare value, by writing CC4yCRS register.<BR>\n
1649:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  The PWM duty cycle is determined by this value.
1650:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1651:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * the the period/compare value by calling XMC_CCU4_EnableShadowTransfer() with
1652:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
1653:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual compare register.
1654:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1655:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1656:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1657:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1658:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint1
1659:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1660:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1661:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   slice->CRS = (uint32_t) compare_val;
1662:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1663:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1664:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1665:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1666:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1667:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *   uint16_t returns the current timer compare value
1668:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1669:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1670:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1671:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Retrieves the timer compare value currently effective, by reading CC4yCRS register.\n\n
1672:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
1673:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1674:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Note:</b><br>
1675:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
1676:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
1677:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerComp
1678:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1679:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Directly accessed Register is CC4yCR.
1680:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1681:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1682:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCompareMatch().
1683:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1684:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerCompareMatch(const XMC_CCU4_SLICE_t *const slice)
1685:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1686:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1687:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   return((uint16_t)slice->CR);
1688:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1689:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1690:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1691:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1692:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
1693:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                             Use ::XMC_CCU4_SHADOW_TRANSFER_t enum items to create a mask of choi
1694:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                              using a bit wise OR operation.
1695:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1696:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1697:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1698:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1699:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
1700:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * the GCSS register.\n\n
1701:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
1702:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * shadow transfer trigger after the API is called.
1703:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1704:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Any call to XMC_CCU4_SLICE_SetTimerPeriodMatch()<BR> XMC_CCU4_SLICE_SetTimerCompareMatch()<BR>
1705:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetPrescaler()<BR> XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
1706:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * must be succeeded by this API.
1707:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Directly accessed Register is GCSS.
1708:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1709:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1710:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  None.
1711:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1712:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t 
1713:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1714:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module))
1715:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;  
1716:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1717:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1718:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1719:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1720:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1721:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *   uint16_t returns the current timer value
1722:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1723:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1724:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1725:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Retrieves the latest timer value, from CC4yTIMER register.\n\n
1726:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1727:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1728:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerValue().
1729:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1730:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerValue(const XMC_CCU4_SLICE_t *const slice)
1731:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1732:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1733:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   return((uint16_t)slice->TIMER);
1734:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1735:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1736:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1737:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
1738:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                  Range: [0x0 to 0xFFFF]
1739:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1740:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1741:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1742:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1743:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Loads a new timer value, by setting CC4yTIMER register.\n\n
1744:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * 
1745:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Note:</b><br>
1746:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  Request to load is ignored if the timer is running.
1747:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1748:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1749:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerValue().
1750:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1751:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerValue(XMC_CCU4_SLICE_t *const slice, const uint16_t tim
1752:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1753:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1754:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   slice->TIMER = (uint32_t) timer_val;
1755:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1756:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1757:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1758:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param period_dither Boolean instruction on dithering of period match
1759:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param duty_dither Boolean instruction on dithering of compare match
1760:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param spread Dither compare value
1761:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1762:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1763:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1764:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1765:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC4yTC.DITHE and CC4yDITS bits
1766:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
1767:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
1768:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
1769:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
1770:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
1771:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetDitherCompareValue().
1772:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1773:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Note:</b><br>
1774:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * After this API call, XMC_CCU4_EnableShadowTransfer() has to be called with appropriate mask
1775:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * to transfer the dither value.
1776:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1777:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1778:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableDithering().
1779:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1780:..//Libraries/XMCLib/inc/xmc_ccu4.h **** void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
1781:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                     const bool period_dither,
1782:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                     const bool duty_dither,
1783:..//Libraries/XMCLib/inc/xmc_ccu4.h ****                                     const uint8_t spread);
1784:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1785:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1786:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1787:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1788:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1789:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1790:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1791:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC4yTC.DITHE bits.\n\n
1792:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This disables the Dither mode that was set in XMC_CCU4_SLICE_EnableDithering().
1793:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This API will not clear the dither compare value.
1794:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1795:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1796:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1797:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1798:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableDithering(XMC_CCU4_SLICE_t *const slice)
1799:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1800:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
1801:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
1802:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1803:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1804:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1805:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1806:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1807:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1808:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1809:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1810:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Enables the floating prescaler, by setting CC4yTC.FPE bit.\n\n
1811:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
1812:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
1813:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
1814:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1815:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1816:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue()<BR> XMC_CCU4_SLICE_DisableFloatingPrescaler()
1817:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetPrescaler().
1818:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1819:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1820:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1821:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
1822:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_FPE_Msk;
1823:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1824:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1825:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1826:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1827:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1828:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1829:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1830:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1831:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Disables the floating prescaler, by clearing CC4yTC.FPE bit.\n\n
1832:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This would return the prescaler to the normal mode.
1833:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * The prescaler that would be applied is the value present in CC4yPSC.
1834:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1835:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   * \par<b>Related APIs:</b><br>
1836:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableFloatingPrescaler().
1837:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1838:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1839:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
1840:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice
1841:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_FPE_Msk);
1842:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
1843:..//Libraries/XMCLib/inc/xmc_ccu4.h **** 
1844:..//Libraries/XMCLib/inc/xmc_ccu4.h **** /**
1845:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1846:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @param comp_val Dither compare value
1847:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *                 Range: [0x0 to 0xF]
1848:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * @return <BR>
1849:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *    None<BR>
1850:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1851:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * \par<b>Description:</b><br>
1852:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * Sets the dither spread/compare value, by setting CC4yDITS.DCVS bits.\n\n
1853:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
1854:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
1855:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU4_EnableShadowTransfer()
1856:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  * called with appropriate mask.
1857:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *
1858:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   * \par<b>Related APIs:</b><br>
1859:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1860:..//Libraries/XMCLib/inc/xmc_ccu4.h ****  */
1861:..//Libraries/XMCLib/inc/xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetDitherCompareValue(XMC_CCU4_SLICE_t *const slice, const uint
1862:..//Libraries/XMCLib/inc/xmc_ccu4.h **** {
  68              	 .loc 1 1862 1
  69              	 .cfi_startproc
  70              	 
  71              	 
  72 0000 80B5     	 push {r7,lr}
  73              	.LCFI3:
  74              	 .cfi_def_cfa_offset 8
  75              	 .cfi_offset 7,-8
  76              	 .cfi_offset 14,-4
  77 0002 82B0     	 sub sp,sp,#8
  78              	.LCFI4:
  79              	 .cfi_def_cfa_offset 16
  80 0004 00AF     	 add r7,sp,#0
  81              	.LCFI5:
  82              	 .cfi_def_cfa_register 7
  83 0006 7860     	 str r0,[r7,#4]
  84 0008 0A00     	 movs r2,r1
  85 000a FB1C     	 adds r3,r7,#3
  86 000c 1A70     	 strb r2,[r3]
1863:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sl
1864:..//Libraries/XMCLib/inc/xmc_ccu4.h ****   slice->DITS = comp_val;
  87              	 .loc 1 1864 15
  88 000e FB1C     	 adds r3,r7,#3
  89 0010 1A78     	 ldrb r2,[r3]
  90 0012 7B68     	 ldr r3,[r7,#4]
  91 0014 1A62     	 str r2,[r3,#32]
1865:..//Libraries/XMCLib/inc/xmc_ccu4.h **** }
  92              	 .loc 1 1865 1
  93 0016 C046     	 nop
  94 0018 BD46     	 mov sp,r7
  95 001a 02B0     	 add sp,sp,#8
  96              	 
  97 001c 80BD     	 pop {r7,pc}
  98              	 .cfi_endproc
  99              	.LFE71:
 101              	 .section .text.XMC_CCU4_lGateClock,"ax",%progbits
 102              	 .align 1
 103              	 .syntax unified
 104              	 .code 16
 105              	 .thumb_func
 106              	 .fpu softvfp
 108              	XMC_CCU4_lGateClock:
 109              	.LFB100:
 110              	 .file 2 "../Libraries/XMCLib/src/xmc_ccu4.c"
   1:../Libraries/XMCLib/src/xmc_ccu4.c **** /**
   2:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @file xmc_ccu4.c
   3:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @date 2017-04-27
   4:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
   5:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_ccu4.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
   9:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_ccu4.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_ccu4.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_ccu4.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 
  18:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_ccu4.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 
  21:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_ccu4.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_ccu4.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_ccu4.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_ccu4.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_ccu4.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_ccu4.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_ccu4.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_ccu4.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_ccu4.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  36:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_ccu4.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  39:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  42:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  45:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-07-01:
  46:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - In XMC_CCU4_SLICE_StartConfig(), Options in XMC_ASSERT check for start mode is corrected. 
  47:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  48:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-07-24:
  49:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  50:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  51:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-08-17:
  52:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Start of prescaler XMC_CCU4_StartPrescaler() is invoked in XMC_CCU4_Init() API. <br>
  53:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Bug fix XMC_CCU4_SLICE_ConfigureEvent() during the level setting for XMC14 devices. <br>
  54:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_EnableShadowTransfer() definition is removed, since the API is made as inline. <b
  55:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  56:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-10-07:
  57:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  58:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - DOC updates for the newly added APIs.
  59:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  60:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2017-02-25:
  61:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_lAssertReset(), XMC_CCU4_lDeassertReset(), XMC_CCU4_lGateClock() and XMC_CCU4_lUn
  62:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  63:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2017-04-27:
  64:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU4_SLICE_PRESCALER_t
  65:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  66:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @endcond
  67:../Libraries/XMCLib/src/xmc_ccu4.c ****  */
  68:../Libraries/XMCLib/src/xmc_ccu4.c ****  
  69:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
  70:../Libraries/XMCLib/src/xmc_ccu4.c ****  * HEADER FILES
  71:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
  72:../Libraries/XMCLib/src/xmc_ccu4.c **** #include "xmc_ccu4.h"
  73:../Libraries/XMCLib/src/xmc_ccu4.c **** 
  74:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU40)
  75:../Libraries/XMCLib/src/xmc_ccu4.c **** #include "xmc_scu.h"
  76:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
  77:../Libraries/XMCLib/src/xmc_ccu4.c ****  * MACROS
  78:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
  79:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_NUM_SLICES_PER_MODULE          (4U)
  80:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_DITHER_PERIOD_MASK       (1U)
  81:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK    (2U)
  82:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK   (3U)
  83:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK  (1U)
  84:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK (3U)
  85:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
  86:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK  CCU4_CC4_INS1_EV0IS_Msk
  87:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
  88:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK  CCU4_CC4_INS_EV0IS_Msk
  89:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
  90:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GIDLC_CLOCK_MASK               (15U)
  91:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE0_MASK               (1U)
  92:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE1_MASK               (16U)
  93:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE2_MASK               (256U)
  94:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE3_MASK               (4096U)
  95:../Libraries/XMCLib/src/xmc_ccu4.c **** 
  96:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro to check if the clock selected enum passed is valid */
  97:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_CLOCK(clock) \
  98:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((clock == XMC_CCU4_CLOCK_SCU)        || \
  99:../Libraries/XMCLib/src/xmc_ccu4.c ****      (clock == XMC_CCU4_CLOCK_EXTERNAL_A) || \
 100:../Libraries/XMCLib/src/xmc_ccu4.c ****      (clock == XMC_CCU4_CLOCK_EXTERNAL_B) || \
 101:../Libraries/XMCLib/src/xmc_ccu4.c ****      (clock == XMC_CCU4_CLOCK_EXTERNAL_C))
 102:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 103:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the event ID is valid*/
 104:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_EVENT_ID(event_id) \
 105:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((event_id == XMC_CCU4_SLICE_EVENT_NONE)|| \
 106:../Libraries/XMCLib/src/xmc_ccu4.c ****      (event_id == XMC_CCU4_SLICE_EVENT_0)   || \
 107:../Libraries/XMCLib/src/xmc_ccu4.c ****      (event_id == XMC_CCU4_SLICE_EVENT_1)   || \
 108:../Libraries/XMCLib/src/xmc_ccu4.c ****      (event_id == XMC_CCU4_SLICE_EVENT_2))
 109:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 110:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the edge sensitivity is valid*/
 111:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(edge) \
 112:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE)        || \
 113:../Libraries/XMCLib/src/xmc_ccu4.c ****      (edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE) || \
 114:../Libraries/XMCLib/src/xmc_ccu4.c ****      (edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE)|| \
 115:../Libraries/XMCLib/src/xmc_ccu4.c ****      (edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE))
 116:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 117:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the filter clock cycles are valid */
 118:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_EVENT_FILTER(cycles) \
 119:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((cycles == XMC_CCU4_SLICE_EVENT_FILTER_DISABLED) || \
 120:../Libraries/XMCLib/src/xmc_ccu4.c ****      (cycles == XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES) || \
 121:../Libraries/XMCLib/src/xmc_ccu4.c ****      (cycles == XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES) || \
 122:../Libraries/XMCLib/src/xmc_ccu4.c ****      (cycles == XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES))
 123:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 124:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the Multi-channel input related action is valid*/
 125:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action) \
 126:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((mcs_action == XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR)      || \
 127:../Libraries/XMCLib/src/xmc_ccu4.c ****      (mcs_action == XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP) || \
 128:../Libraries/XMCLib/src/xmc_ccu4.c ****      (mcs_action == XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT))
 129:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 130:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the SR line is valid*/
 131:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_SR_ID(id) \
 132:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((id == XMC_CCU4_SLICE_SR_ID_0) || \
 133:../Libraries/XMCLib/src/xmc_ccu4.c ****      (id == XMC_CCU4_SLICE_SR_ID_1) || \
 134:../Libraries/XMCLib/src/xmc_ccu4.c ****      (id == XMC_CCU4_SLICE_SR_ID_2) || \
 135:../Libraries/XMCLib/src/xmc_ccu4.c ****      (id == XMC_CCU4_SLICE_SR_ID_3))
 136:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 137:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro to check if the end mode enum passed is valid */
 138:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_CHECK_END_MODE(end_mode) \
 139:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((end_mode == XMC_CCU4_SLICE_END_MODE_TIMER_STOP) || \
 140:../Libraries/XMCLib/src/xmc_ccu4.c ****      (end_mode == XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR) || \
 141:../Libraries/XMCLib/src/xmc_ccu4.c ****      (end_mode == XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR))
 142:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 143:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
 144:../Libraries/XMCLib/src/xmc_ccu4.c ****  * LOCAL ROUTINES
 145:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
 146:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 147:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lAssertReset(const XMC_CCU4_MODULE_t *const module)
 148:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 149:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (module == CCU40)
 150:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 151:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 152:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 153:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 154:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU41)
 155:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 156:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 157:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 158:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 159:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 160:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU42)
 161:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 162:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 163:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 164:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 165:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 166:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU43)
 167:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 168:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 169:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 170:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 171:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 172:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 173:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
 174:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 175:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 176:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 177:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
 178:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 179:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (module == CCU40)
 180:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 181:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 182:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 183:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 184:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU41)
 185:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 186:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 187:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 188:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 189:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 190:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU42)
 191:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 192:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 193:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 194:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 195:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 196:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU43)
 197:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 198:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 199:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 200:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 201:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 202:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 203:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
 204:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 205:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 206:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 207:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 208:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CLOCK_GATING_SUPPORTED)
 209:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lGateClock(const XMC_CCU4_MODULE_t *const module)
 210:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 111              	 .loc 2 210 1
 112              	 .cfi_startproc
 113              	 
 114              	 
 115 0000 80B5     	 push {r7,lr}
 116              	.LCFI6:
 117              	 .cfi_def_cfa_offset 8
 118              	 .cfi_offset 7,-8
 119              	 .cfi_offset 14,-4
 120 0002 82B0     	 sub sp,sp,#8
 121              	.LCFI7:
 122              	 .cfi_def_cfa_offset 16
 123 0004 00AF     	 add r7,sp,#0
 124              	.LCFI8:
 125              	 .cfi_def_cfa_register 7
 126 0006 7860     	 str r0,[r7,#4]
 211:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 212:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (module == CCU40)
 127              	 .loc 2 212 6
 128 0008 7B68     	 ldr r3,[r7,#4]
 129 000a 054A     	 ldr r2,.L6
 130 000c 9342     	 cmp r3,r2
 131 000e 02D1     	 bne .L5
 213:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 214:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 132              	 .loc 2 214 5
 133 0010 0420     	 movs r0,#4
 134 0012 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 135              	.L5:
 215:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 216:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 217:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU41)
 218:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 219:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 220:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 221:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 222:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 223:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU42)
 224:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 225:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 226:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 227:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 228:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 229:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU43)
 230:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 231:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 232:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 233:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 234:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 235:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 236:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
 237:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 238:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 136              	 .loc 2 238 1
 137 0016 C046     	 nop
 138 0018 BD46     	 mov sp,r7
 139 001a 02B0     	 add sp,sp,#8
 140              	 
 141 001c 80BD     	 pop {r7,pc}
 142              	.L7:
 143 001e C046     	 .align 2
 144              	.L6:
 145 0020 00000448 	 .word 1208221696
 146              	 .cfi_endproc
 147              	.LFE100:
 149              	 .section .text.XMC_CCU4_lUngateClock,"ax",%progbits
 150              	 .align 1
 151              	 .syntax unified
 152              	 .code 16
 153              	 .thumb_func
 154              	 .fpu softvfp
 156              	XMC_CCU4_lUngateClock:
 157              	.LFB101:
 239:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 240:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
 241:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 158              	 .loc 2 241 1
 159              	 .cfi_startproc
 160              	 
 161              	 
 162 0000 80B5     	 push {r7,lr}
 163              	.LCFI9:
 164              	 .cfi_def_cfa_offset 8
 165              	 .cfi_offset 7,-8
 166              	 .cfi_offset 14,-4
 167 0002 82B0     	 sub sp,sp,#8
 168              	.LCFI10:
 169              	 .cfi_def_cfa_offset 16
 170 0004 00AF     	 add r7,sp,#0
 171              	.LCFI11:
 172              	 .cfi_def_cfa_register 7
 173 0006 7860     	 str r0,[r7,#4]
 242:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (module == CCU40)
 174              	 .loc 2 242 6
 175 0008 7B68     	 ldr r3,[r7,#4]
 176 000a 054A     	 ldr r2,.L11
 177 000c 9342     	 cmp r3,r2
 178 000e 02D1     	 bne .L10
 243:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 244:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 179              	 .loc 2 244 5
 180 0010 0420     	 movs r0,#4
 181 0012 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 182              	.L10:
 245:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 246:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 247:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU41)
 248:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 249:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 250:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 251:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 252:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 253:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU42)
 254:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 255:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 256:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 257:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 258:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 259:../Libraries/XMCLib/src/xmc_ccu4.c ****   else if (module == CCU43)
 260:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 261:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 262:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 263:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 264:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 265:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 266:../Libraries/XMCLib/src/xmc_ccu4.c ****     XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
 267:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 268:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 183              	 .loc 2 268 1
 184 0016 C046     	 nop
 185 0018 BD46     	 mov sp,r7
 186 001a 02B0     	 add sp,sp,#8
 187              	 
 188 001c 80BD     	 pop {r7,pc}
 189              	.L12:
 190 001e C046     	 .align 2
 191              	.L11:
 192 0020 00000448 	 .word 1208221696
 193              	 .cfi_endproc
 194              	.LFE101:
 196              	 .section .text.XMC_CCU4_EnableModule,"ax",%progbits
 197              	 .align 1
 198              	 .global XMC_CCU4_EnableModule
 199              	 .syntax unified
 200              	 .code 16
 201              	 .thumb_func
 202              	 .fpu softvfp
 204              	XMC_CCU4_EnableModule:
 205              	.LFB102:
 269:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 270:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 271:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined (XMC_ASSERT_ENABLE)
 272:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsInputvalid(XMC_CCU4_SLICE_INPUT_t input)
 273:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 274:../Libraries/XMCLib/src/xmc_ccu4.c **** #if (UC_SERIES == XMC14)
 275:../Libraries/XMCLib/src/xmc_ccu4.c ****   return (input < 48U);
 276:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 277:../Libraries/XMCLib/src/xmc_ccu4.c ****   return (input < 16U);
 278:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 279:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 280:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 281:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
 282:../Libraries/XMCLib/src/xmc_ccu4.c ****  * API IMPLEMENTATION
 283:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
 284:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 285:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
 286:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 206              	 .loc 2 286 1
 207              	 .cfi_startproc
 208              	 
 209              	 
 210 0000 80B5     	 push {r7,lr}
 211              	.LCFI12:
 212              	 .cfi_def_cfa_offset 8
 213              	 .cfi_offset 7,-8
 214              	 .cfi_offset 14,-4
 215 0002 82B0     	 sub sp,sp,#8
 216              	.LCFI13:
 217              	 .cfi_def_cfa_offset 16
 218 0004 00AF     	 add r7,sp,#0
 219              	.LCFI14:
 220              	 .cfi_def_cfa_register 7
 221 0006 7860     	 str r0,[r7,#4]
 287:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 288:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 289:../Libraries/XMCLib/src/xmc_ccu4.c **** #if UC_FAMILY == XMC4
 290:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable CCU4 module clock */
 291:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 292:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 293:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 294:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CLOCK_GATING_SUPPORTED)
 295:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lUngateClock(module);
 222              	 .loc 2 295 3
 223 0008 7B68     	 ldr r3,[r7,#4]
 224 000a 1800     	 movs r0,r3
 225 000c FFF7FEFF 	 bl XMC_CCU4_lUngateClock
 296:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 297:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 298:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 299:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lDeassertReset(module);
 300:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 301:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 226              	 .loc 2 301 1
 227 0010 C046     	 nop
 228 0012 BD46     	 mov sp,r7
 229 0014 02B0     	 add sp,sp,#8
 230              	 
 231 0016 80BD     	 pop {r7,pc}
 232              	 .cfi_endproc
 233              	.LFE102:
 235              	 .section .text.XMC_CCU4_DisableModule,"ax",%progbits
 236              	 .align 1
 237              	 .global XMC_CCU4_DisableModule
 238              	 .syntax unified
 239              	 .code 16
 240              	 .thumb_func
 241              	 .fpu softvfp
 243              	XMC_CCU4_DisableModule:
 244              	.LFB103:
 302:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 303:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module)
 304:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 245              	 .loc 2 304 1
 246              	 .cfi_startproc
 247              	 
 248              	 
 249 0000 80B5     	 push {r7,lr}
 250              	.LCFI15:
 251              	 .cfi_def_cfa_offset 8
 252              	 .cfi_offset 7,-8
 253              	 .cfi_offset 14,-4
 254 0002 82B0     	 sub sp,sp,#8
 255              	.LCFI16:
 256              	 .cfi_def_cfa_offset 16
 257 0004 00AF     	 add r7,sp,#0
 258              	.LCFI17:
 259              	 .cfi_def_cfa_register 7
 260 0006 7860     	 str r0,[r7,#4]
 305:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_DisableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 306:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 307:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 308:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lAssertReset(module);
 309:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 310:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 311:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CLOCK_GATING_SUPPORTED)
 312:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lGateClock(module);
 261              	 .loc 2 312 3
 262 0008 7B68     	 ldr r3,[r7,#4]
 263 000a 1800     	 movs r0,r3
 264 000c FFF7FEFF 	 bl XMC_CCU4_lGateClock
 313:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 314:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 265              	 .loc 2 314 1
 266 0010 C046     	 nop
 267 0012 BD46     	 mov sp,r7
 268 0014 02B0     	 add sp,sp,#8
 269              	 
 270 0016 80BD     	 pop {r7,pc}
 271              	 .cfi_endproc
 272              	.LFE103:
 274              	 .section .text.XMC_CCU4_Init,"ax",%progbits
 275              	 .align 1
 276              	 .global XMC_CCU4_Init
 277              	 .syntax unified
 278              	 .code 16
 279              	 .thumb_func
 280              	 .fpu softvfp
 282              	XMC_CCU4_Init:
 283              	.LFB104:
 315:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 316:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to initialize CCU4 global resources  */
 317:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
 318:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 284              	 .loc 2 318 1
 285              	 .cfi_startproc
 286              	 
 287              	 
 288 0000 80B5     	 push {r7,lr}
 289              	.LCFI18:
 290              	 .cfi_def_cfa_offset 8
 291              	 .cfi_offset 7,-8
 292              	 .cfi_offset 14,-4
 293 0002 84B0     	 sub sp,sp,#16
 294              	.LCFI19:
 295              	 .cfi_def_cfa_offset 24
 296 0004 00AF     	 add r7,sp,#0
 297              	.LCFI20:
 298              	 .cfi_def_cfa_register 7
 299 0006 7860     	 str r0,[r7,#4]
 300 0008 0A00     	 movs r2,r1
 301 000a FB1C     	 adds r3,r7,#3
 302 000c 1A70     	 strb r2,[r3]
 319:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t gctrl;
 320:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 321:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
 322:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));
 323:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 324:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable CCU4 module */
 325:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_EnableModule(module);
 303              	 .loc 2 325 3
 304 000e 7B68     	 ldr r3,[r7,#4]
 305 0010 1800     	 movs r0,r3
 306 0012 FFF7FEFF 	 bl XMC_CCU4_EnableModule
 326:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Start the prescaler */
 327:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_StartPrescaler(module);
 307              	 .loc 2 327 3
 308 0016 7B68     	 ldr r3,[r7,#4]
 309 0018 1800     	 movs r0,r3
 310 001a FFF7FEFF 	 bl XMC_CCU4_StartPrescaler
 328:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 329:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl = module->GCTRL;
 311              	 .loc 2 329 9
 312 001e 7B68     	 ldr r3,[r7,#4]
 313 0020 1B68     	 ldr r3,[r3]
 314 0022 FB60     	 str r3,[r7,#12]
 330:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 315              	 .loc 2 330 9
 316 0024 FB68     	 ldr r3,[r7,#12]
 317 0026 084A     	 ldr r2,.L16
 318 0028 1340     	 ands r3,r2
 319 002a FB60     	 str r3,[r7,#12]
 331:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 320              	 .loc 2 331 13
 321 002c FB1C     	 adds r3,r7,#3
 322 002e 1B78     	 ldrb r3,[r3]
 323              	 .loc 2 331 36
 324 0030 9B03     	 lsls r3,r3,#14
 325              	 .loc 2 331 9
 326 0032 FA68     	 ldr r2,[r7,#12]
 327 0034 1343     	 orrs r3,r2
 328 0036 FB60     	 str r3,[r7,#12]
 332:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 333:../Libraries/XMCLib/src/xmc_ccu4.c ****   module->GCTRL = gctrl;
 329              	 .loc 2 333 17
 330 0038 7B68     	 ldr r3,[r7,#4]
 331 003a FA68     	 ldr r2,[r7,#12]
 332 003c 1A60     	 str r2,[r3]
 334:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 333              	 .loc 2 334 1
 334 003e C046     	 nop
 335 0040 BD46     	 mov sp,r7
 336 0042 04B0     	 add sp,sp,#16
 337              	 
 338 0044 80BD     	 pop {r7,pc}
 339              	.L17:
 340 0046 C046     	 .align 2
 341              	.L16:
 342 0048 FF3FFFFF 	 .word -49153
 343              	 .cfi_endproc
 344              	.LFE104:
 346              	 .section .text.XMC_CCU4_SetModuleClock,"ax",%progbits
 347              	 .align 1
 348              	 .global XMC_CCU4_SetModuleClock
 349              	 .syntax unified
 350              	 .code 16
 351              	 .thumb_func
 352              	 .fpu softvfp
 354              	XMC_CCU4_SetModuleClock:
 355              	.LFB105:
 335:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 336:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to select CCU4 module clock */
 337:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
 338:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 356              	 .loc 2 338 1
 357              	 .cfi_startproc
 358              	 
 359              	 
 360 0000 80B5     	 push {r7,lr}
 361              	.LCFI21:
 362              	 .cfi_def_cfa_offset 8
 363              	 .cfi_offset 7,-8
 364              	 .cfi_offset 14,-4
 365 0002 84B0     	 sub sp,sp,#16
 366              	.LCFI22:
 367              	 .cfi_def_cfa_offset 24
 368 0004 00AF     	 add r7,sp,#0
 369              	.LCFI23:
 370              	 .cfi_def_cfa_register 7
 371 0006 7860     	 str r0,[r7,#4]
 372 0008 0A00     	 movs r2,r1
 373 000a FB1C     	 adds r3,r7,#3
 374 000c 1A70     	 strb r2,[r3]
 339:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t gctrl;
 340:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 341:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 342:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));
 343:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 344:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl = module->GCTRL;
 375              	 .loc 2 344 9
 376 000e 7B68     	 ldr r3,[r7,#4]
 377 0010 1B68     	 ldr r3,[r3]
 378 0012 FB60     	 str r3,[r7,#12]
 345:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 379              	 .loc 2 345 9
 380 0014 FB68     	 ldr r3,[r7,#12]
 381 0016 3022     	 movs r2,#48
 382 0018 9343     	 bics r3,r2
 383 001a FB60     	 str r3,[r7,#12]
 346:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 384              	 .loc 2 346 13
 385 001c FB1C     	 adds r3,r7,#3
 386 001e 1B78     	 ldrb r3,[r3]
 387              	 .loc 2 346 31
 388 0020 1B01     	 lsls r3,r3,#4
 389              	 .loc 2 346 9
 390 0022 FA68     	 ldr r2,[r7,#12]
 391 0024 1343     	 orrs r3,r2
 392 0026 FB60     	 str r3,[r7,#12]
 347:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 348:../Libraries/XMCLib/src/xmc_ccu4.c ****   module->GCTRL = gctrl;
 393              	 .loc 2 348 17
 394 0028 7B68     	 ldr r3,[r7,#4]
 395 002a FA68     	 ldr r2,[r7,#12]
 396 002c 1A60     	 str r2,[r3]
 349:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 397              	 .loc 2 349 1
 398 002e C046     	 nop
 399 0030 BD46     	 mov sp,r7
 400 0032 04B0     	 add sp,sp,#16
 401              	 
 402 0034 80BD     	 pop {r7,pc}
 403              	 .cfi_endproc
 404              	.LFE105:
 406              	 .section .text.XMC_CCU4_SetMultiChannelShadowTransferMode,"ax",%progbits
 407              	 .align 1
 408              	 .global XMC_CCU4_SetMultiChannelShadowTransferMode
 409              	 .syntax unified
 410              	 .code 16
 411              	 .thumb_func
 412              	 .fpu softvfp
 414              	XMC_CCU4_SetMultiChannelShadowTransferMode:
 415              	.LFB106:
 350:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 351:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. *
 352:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t sli
 353:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 416              	 .loc 2 353 1
 417              	 .cfi_startproc
 418              	 
 419              	 
 420 0000 80B5     	 push {r7,lr}
 421              	.LCFI24:
 422              	 .cfi_def_cfa_offset 8
 423              	 .cfi_offset 7,-8
 424              	 .cfi_offset 14,-4
 425 0002 84B0     	 sub sp,sp,#16
 426              	.LCFI25:
 427              	 .cfi_def_cfa_offset 24
 428 0004 00AF     	 add r7,sp,#0
 429              	.LCFI26:
 430              	 .cfi_def_cfa_register 7
 431 0006 7860     	 str r0,[r7,#4]
 432 0008 3960     	 str r1,[r7]
 354:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t gctrl;
 355:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 356:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidM
 357:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 358:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl = module->GCTRL;
 433              	 .loc 2 358 9
 434 000a 7B68     	 ldr r3,[r7,#4]
 435 000c 1B68     	 ldr r3,[r3]
 436 000e FB60     	 str r3,[r7,#12]
 359:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 437              	 .loc 2 359 39
 438 0010 3B68     	 ldr r3,[r7]
 439 0012 1B0C     	 lsrs r3,r3,#16
 440              	 .loc 2 359 12
 441 0014 DA43     	 mvns r2,r3
 442              	 .loc 2 359 9
 443 0016 FB68     	 ldr r3,[r7,#12]
 444 0018 1340     	 ands r3,r2
 445 001a FB60     	 str r3,[r7,#12]
 360:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 446              	 .loc 2 360 38
 447 001c 3B68     	 ldr r3,[r7]
 448 001e 1B04     	 lsls r3,r3,#16
 449 0020 1B0C     	 lsrs r3,r3,#16
 450              	 .loc 2 360 9
 451 0022 FA68     	 ldr r2,[r7,#12]
 452 0024 1343     	 orrs r3,r2
 453 0026 FB60     	 str r3,[r7,#12]
 361:../Libraries/XMCLib/src/xmc_ccu4.c ****   module->GCTRL = gctrl;
 454              	 .loc 2 361 17
 455 0028 7B68     	 ldr r3,[r7,#4]
 456 002a FA68     	 ldr r2,[r7,#12]
 457 002c 1A60     	 str r2,[r3]
 362:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 458              	 .loc 2 362 1
 459 002e C046     	 nop
 460 0030 BD46     	 mov sp,r7
 461 0032 04B0     	 add sp,sp,#16
 462              	 
 463 0034 80BD     	 pop {r7,pc}
 464              	 .cfi_endproc
 465              	.LFE106:
 467              	 .section .text.XMC_CCU4_SLICE_CompareInit,"ax",%progbits
 468              	 .align 1
 469              	 .global XMC_CCU4_SLICE_CompareInit
 470              	 .syntax unified
 471              	 .code 16
 472              	 .thumb_func
 473              	 .fpu softvfp
 475              	XMC_CCU4_SLICE_CompareInit:
 476              	.LFB107:
 363:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 364:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure CC4 Slice as Timer */
 365:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
 366:../Libraries/XMCLib/src/xmc_ccu4.c ****                                 const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
 367:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 477              	 .loc 2 367 1
 478              	 .cfi_startproc
 479              	 
 480              	 
 481 0000 80B5     	 push {r7,lr}
 482              	.LCFI27:
 483              	 .cfi_def_cfa_offset 8
 484              	 .cfi_offset 7,-8
 485              	 .cfi_offset 14,-4
 486 0002 82B0     	 sub sp,sp,#8
 487              	.LCFI28:
 488              	 .cfi_def_cfa_offset 16
 489 0004 00AF     	 add r7,sp,#0
 490              	.LCFI29:
 491              	 .cfi_def_cfa_register 7
 492 0006 7860     	 str r0,[r7,#4]
 493 0008 3960     	 str r1,[r7]
 368:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 369:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
 370:../Libraries/XMCLib/src/xmc_ccu4.c ****              (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
 371:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 372:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program the timer mode */
 373:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = compare_init->tc;
 494              	 .loc 2 373 27
 495 000a 3B68     	 ldr r3,[r7]
 496 000c 1A68     	 ldr r2,[r3]
 497              	 .loc 2 373 13
 498 000e 7B68     	 ldr r3,[r7,#4]
 499 0010 5A61     	 str r2,[r3,#20]
 374:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable the timer concatenation */
 375:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 500              	 .loc 2 375 40
 501 0012 3B68     	 ldr r3,[r7]
 502 0014 5B79     	 ldrb r3,[r3,#5]
 503 0016 9B06     	 lsls r3,r3,#26
 504 0018 DB0F     	 lsrs r3,r3,#31
 505 001a DBB2     	 uxtb r3,r3
 506              	 .loc 2 375 62
 507 001c 1A05     	 lsls r2,r3,#20
 508              	 .loc 2 375 14
 509 001e 7B68     	 ldr r3,[r7,#4]
 510 0020 5A60     	 str r2,[r3,#4]
 376:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program initial prescaler divider value */
 377:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSC = (uint32_t) compare_init->prescaler_initval;
 511              	 .loc 2 377 39
 512 0022 3B68     	 ldr r3,[r7]
 513 0024 1B79     	 ldrb r3,[r3,#4]
 514 0026 1B07     	 lsls r3,r3,#28
 515 0028 1B0F     	 lsrs r3,r3,#28
 516 002a DBB2     	 uxtb r3,r3
 517              	 .loc 2 377 16
 518 002c 1A00     	 movs r2,r3
 519              	 .loc 2 377 14
 520 002e 7B68     	 ldr r3,[r7,#4]
 521 0030 5A62     	 str r2,[r3,#36]
 378:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program the dither compare value */
 379:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->DITS = (uint32_t) compare_init->dither_limit;
 522              	 .loc 2 379 40
 523 0032 3B68     	 ldr r3,[r7]
 524 0034 5B79     	 ldrb r3,[r3,#5]
 525 0036 1B07     	 lsls r3,r3,#28
 526 0038 1B0F     	 lsrs r3,r3,#28
 527 003a DBB2     	 uxtb r3,r3
 528              	 .loc 2 379 17
 529 003c 1A00     	 movs r2,r3
 530              	 .loc 2 379 15
 531 003e 7B68     	 ldr r3,[r7,#4]
 532 0040 1A62     	 str r2,[r3,#32]
 380:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program timer output passive level */
 381:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSL = (uint32_t) compare_init->passive_level;
 533              	 .loc 2 381 39
 534 0042 3B68     	 ldr r3,[r7]
 535 0044 5B79     	 ldrb r3,[r3,#5]
 536 0046 DB06     	 lsls r3,r3,#27
 537 0048 DB0F     	 lsrs r3,r3,#31
 538 004a DBB2     	 uxtb r3,r3
 539              	 .loc 2 381 16
 540 004c 1A00     	 movs r2,r3
 541              	 .loc 2 381 14
 542 004e 7B68     	 ldr r3,[r7,#4]
 543 0050 9A61     	 str r2,[r3,#24]
 382:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program floating prescaler compare value */
 383:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->FPCS = (uint32_t) compare_init->float_limit;
 544              	 .loc 2 383 40
 545 0052 3B68     	 ldr r3,[r7]
 546 0054 1B79     	 ldrb r3,[r3,#4]
 547 0056 1B06     	 lsls r3,r3,#24
 548 0058 1B0F     	 lsrs r3,r3,#28
 549 005a DBB2     	 uxtb r3,r3
 550              	 .loc 2 383 17
 551 005c 1A00     	 movs r2,r3
 552              	 .loc 2 383 15
 553 005e 7B68     	 ldr r3,[r7,#4]
 554 0060 DA62     	 str r2,[r3,#44]
 384:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 555              	 .loc 2 384 1
 556 0062 C046     	 nop
 557 0064 BD46     	 mov sp,r7
 558 0066 02B0     	 add sp,sp,#8
 559              	 
 560 0068 80BD     	 pop {r7,pc}
 561              	 .cfi_endproc
 562              	.LFE107:
 564              	 .section .text.XMC_CCU4_SLICE_CaptureInit,"ax",%progbits
 565              	 .align 1
 566              	 .global XMC_CCU4_SLICE_CaptureInit
 567              	 .syntax unified
 568              	 .code 16
 569              	 .thumb_func
 570              	 .fpu softvfp
 572              	XMC_CCU4_SLICE_CaptureInit:
 573              	.LFB108:
 385:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 386:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure CC4 Slice for Capture */
 387:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
 388:../Libraries/XMCLib/src/xmc_ccu4.c ****                             const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
 389:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 574              	 .loc 2 389 1
 575              	 .cfi_startproc
 576              	 
 577              	 
 578 0000 80B5     	 push {r7,lr}
 579              	.LCFI30:
 580              	 .cfi_def_cfa_offset 8
 581              	 .cfi_offset 7,-8
 582              	 .cfi_offset 14,-4
 583 0002 82B0     	 sub sp,sp,#8
 584              	.LCFI31:
 585              	 .cfi_def_cfa_offset 16
 586 0004 00AF     	 add r7,sp,#0
 587              	.LCFI32:
 588              	 .cfi_def_cfa_register 7
 589 0006 7860     	 str r0,[r7,#4]
 590 0008 3960     	 str r1,[r7]
 390:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 391:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
 392:../Libraries/XMCLib/src/xmc_ccu4.c ****              (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);
 393:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 394:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program the capture mode */
 395:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = capture_init->tc;
 591              	 .loc 2 395 27
 592 000a 3B68     	 ldr r3,[r7]
 593 000c 1A68     	 ldr r2,[r3]
 594              	 .loc 2 395 13
 595 000e 7B68     	 ldr r3,[r7,#4]
 596 0010 5A61     	 str r2,[r3,#20]
 396:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable the timer concatenation */
 397:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 597              	 .loc 2 397 39
 598 0012 3B68     	 ldr r3,[r7]
 599 0014 5B79     	 ldrb r3,[r3,#5]
 600 0016 DB07     	 lsls r3,r3,#31
 601 0018 DB0F     	 lsrs r3,r3,#31
 602 001a DBB2     	 uxtb r3,r3
 603              	 .loc 2 397 61
 604 001c 1A05     	 lsls r2,r3,#20
 605              	 .loc 2 397 14
 606 001e 7B68     	 ldr r3,[r7,#4]
 607 0020 5A60     	 str r2,[r3,#4]
 398:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program initial prescaler divider value */
 399:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSC = (uint32_t) capture_init->prescaler_initval;
 608              	 .loc 2 399 39
 609 0022 3B68     	 ldr r3,[r7]
 610 0024 1B79     	 ldrb r3,[r3,#4]
 611 0026 1B07     	 lsls r3,r3,#28
 612 0028 1B0F     	 lsrs r3,r3,#28
 613 002a DBB2     	 uxtb r3,r3
 614              	 .loc 2 399 16
 615 002c 1A00     	 movs r2,r3
 616              	 .loc 2 399 14
 617 002e 7B68     	 ldr r3,[r7,#4]
 618 0030 5A62     	 str r2,[r3,#36]
 400:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program initial floating prescaler compare value */
 401:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->FPCS = (uint32_t) capture_init->float_limit;
 619              	 .loc 2 401 40
 620 0032 3B68     	 ldr r3,[r7]
 621 0034 1B79     	 ldrb r3,[r3,#4]
 622 0036 1B06     	 lsls r3,r3,#24
 623 0038 1B0F     	 lsrs r3,r3,#28
 624 003a DBB2     	 uxtb r3,r3
 625              	 .loc 2 401 17
 626 003c 1A00     	 movs r2,r3
 627              	 .loc 2 401 15
 628 003e 7B68     	 ldr r3,[r7,#4]
 629 0040 DA62     	 str r2,[r3,#44]
 402:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 630              	 .loc 2 402 1
 631 0042 C046     	 nop
 632 0044 BD46     	 mov sp,r7
 633 0046 02B0     	 add sp,sp,#8
 634              	 
 635 0048 80BD     	 pop {r7,pc}
 636              	 .cfi_endproc
 637              	.LFE108:
 639              	 .section .text.XMC_CCU4_SLICE_StartConfig,"ax",%progbits
 640              	 .align 1
 641              	 .global XMC_CCU4_SLICE_StartConfig
 642              	 .syntax unified
 643              	 .code 16
 644              	 .thumb_func
 645              	 .fpu softvfp
 647              	XMC_CCU4_SLICE_StartConfig:
 648              	.LFB109:
 403:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 404:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 405:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the Start trigger function of a slice */
 406:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
 407:../Libraries/XMCLib/src/xmc_ccu4.c ****                             const XMC_CCU4_SLICE_EVENT_t event,
 408:../Libraries/XMCLib/src/xmc_ccu4.c ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode)
 409:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 649              	 .loc 2 409 1
 650              	 .cfi_startproc
 651              	 
 652              	 
 653 0000 80B5     	 push {r7,lr}
 654              	.LCFI33:
 655              	 .cfi_def_cfa_offset 8
 656              	 .cfi_offset 7,-8
 657              	 .cfi_offset 14,-4
 658 0002 84B0     	 sub sp,sp,#16
 659              	.LCFI34:
 660              	 .cfi_def_cfa_offset 24
 661 0004 00AF     	 add r7,sp,#0
 662              	.LCFI35:
 663              	 .cfi_def_cfa_register 7
 664 0006 7860     	 str r0,[r7,#4]
 665 0008 0800     	 movs r0,r1
 666 000a 1100     	 movs r1,r2
 667 000c FB1C     	 adds r3,r7,#3
 668 000e 021C     	 adds r2,r0,#0
 669 0010 1A70     	 strb r2,[r3]
 670 0012 BB1C     	 adds r3,r7,#2
 671 0014 0A1C     	 adds r2,r1,#0
 672 0016 1A70     	 strb r2,[r3]
 410:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 411:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 412:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 413:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 414:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 415:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
 416:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
 417:../Libraries/XMCLib/src/xmc_ccu4.c ****               (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
 418:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Bind the event with the stop function */
 419:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 673              	 .loc 2 419 7
 674 0018 7B68     	 ldr r3,[r7,#4]
 675 001a 5B68     	 ldr r3,[r3,#4]
 676 001c BB60     	 str r3,[r7,#8]
 420:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 677              	 .loc 2 420 7
 678 001e BB68     	 ldr r3,[r7,#8]
 679 0020 0322     	 movs r2,#3
 680 0022 9343     	 bics r3,r2
 681 0024 BB60     	 str r3,[r7,#8]
 421:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 682              	 .loc 2 421 29
 683 0026 FB1C     	 adds r3,r7,#3
 684 0028 1B78     	 ldrb r3,[r3]
 685              	 .loc 2 421 7
 686 002a BA68     	 ldr r2,[r7,#8]
 687 002c 1343     	 orrs r3,r2
 688 002e BB60     	 str r3,[r7,#8]
 422:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 423:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 689              	 .loc 2 423 14
 690 0030 7B68     	 ldr r3,[r7,#4]
 691 0032 BA68     	 ldr r2,[r7,#8]
 692 0034 5A60     	 str r2,[r3,#4]
 424:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 425:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc  = slice->TC;
 693              	 .loc 2 425 7
 694 0036 7B68     	 ldr r3,[r7,#4]
 695 0038 5B69     	 ldr r3,[r3,#20]
 696 003a FB60     	 str r3,[r7,#12]
 426:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Configure the start mode */
 427:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 697              	 .loc 2 427 6
 698 003c BB1C     	 adds r3,r7,#2
 699 003e 1B78     	 ldrb r3,[r3]
 700 0040 012B     	 cmp r3,#1
 701 0042 05D1     	 bne .L23
 428:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 429:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 702              	 .loc 2 429 8
 703 0044 FB68     	 ldr r3,[r7,#12]
 704 0046 8022     	 movs r2,#128
 705 0048 D200     	 lsls r2,r2,#3
 706 004a 1343     	 orrs r3,r2
 707 004c FB60     	 str r3,[r7,#12]
 708 004e 03E0     	 b .L24
 709              	.L23:
 430:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 431:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 432:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 433:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 710              	 .loc 2 433 8
 711 0050 FB68     	 ldr r3,[r7,#12]
 712 0052 054A     	 ldr r2,.L25
 713 0054 1340     	 ands r3,r2
 714 0056 FB60     	 str r3,[r7,#12]
 715              	.L24:
 434:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 435:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 436:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 716              	 .loc 2 436 13
 717 0058 7B68     	 ldr r3,[r7,#4]
 718 005a FA68     	 ldr r2,[r7,#12]
 719 005c 5A61     	 str r2,[r3,#20]
 437:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 720              	 .loc 2 437 1
 721 005e C046     	 nop
 722 0060 BD46     	 mov sp,r7
 723 0062 04B0     	 add sp,sp,#16
 724              	 
 725 0064 80BD     	 pop {r7,pc}
 726              	.L26:
 727 0066 C046     	 .align 2
 728              	.L25:
 729 0068 FFFBFFFF 	 .word -1025
 730              	 .cfi_endproc
 731              	.LFE109:
 733              	 .section .text.XMC_CCU4_SLICE_StopConfig,"ax",%progbits
 734              	 .align 1
 735              	 .global XMC_CCU4_SLICE_StopConfig
 736              	 .syntax unified
 737              	 .code 16
 738              	 .thumb_func
 739              	 .fpu softvfp
 741              	XMC_CCU4_SLICE_StopConfig:
 742              	.LFB110:
 438:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 439:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the Stop trigger function of a slice */
 440:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
 441:../Libraries/XMCLib/src/xmc_ccu4.c ****                            const XMC_CCU4_SLICE_EVENT_t event,
 442:../Libraries/XMCLib/src/xmc_ccu4.c ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode)
 443:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 743              	 .loc 2 443 1
 744              	 .cfi_startproc
 745              	 
 746              	 
 747 0000 80B5     	 push {r7,lr}
 748              	.LCFI36:
 749              	 .cfi_def_cfa_offset 8
 750              	 .cfi_offset 7,-8
 751              	 .cfi_offset 14,-4
 752 0002 84B0     	 sub sp,sp,#16
 753              	.LCFI37:
 754              	 .cfi_def_cfa_offset 24
 755 0004 00AF     	 add r7,sp,#0
 756              	.LCFI38:
 757              	 .cfi_def_cfa_register 7
 758 0006 7860     	 str r0,[r7,#4]
 759 0008 0800     	 movs r0,r1
 760 000a 1100     	 movs r1,r2
 761 000c FB1C     	 adds r3,r7,#3
 762 000e 021C     	 adds r2,r0,#0
 763 0010 1A70     	 strb r2,[r3]
 764 0012 BB1C     	 adds r3,r7,#2
 765 0014 0A1C     	 adds r2,r1,#0
 766 0016 1A70     	 strb r2,[r3]
 444:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 445:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 446:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 447:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 448:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 449:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
 450:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 451:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Bind the event with the stop function */
 452:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 767              	 .loc 2 452 7
 768 0018 7B68     	 ldr r3,[r7,#4]
 769 001a 5B68     	 ldr r3,[r3,#4]
 770 001c FB60     	 str r3,[r7,#12]
 453:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 771              	 .loc 2 453 7
 772 001e FB68     	 ldr r3,[r7,#12]
 773 0020 0C22     	 movs r2,#12
 774 0022 9343     	 bics r3,r2
 775 0024 FB60     	 str r3,[r7,#12]
 454:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 776              	 .loc 2 454 11
 777 0026 FB1C     	 adds r3,r7,#3
 778 0028 1B78     	 ldrb r3,[r3]
 779              	 .loc 2 454 29
 780 002a 9B00     	 lsls r3,r3,#2
 781              	 .loc 2 454 7
 782 002c FA68     	 ldr r2,[r7,#12]
 783 002e 1343     	 orrs r3,r2
 784 0030 FB60     	 str r3,[r7,#12]
 455:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 456:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 785              	 .loc 2 456 14
 786 0032 7B68     	 ldr r3,[r7,#4]
 787 0034 FA68     	 ldr r2,[r7,#12]
 788 0036 5A60     	 str r2,[r3,#4]
 457:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 458:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Configure the stop mode */
 459:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc = slice->TC;
 789              	 .loc 2 459 6
 790 0038 7B68     	 ldr r3,[r7,#4]
 791 003a 5B69     	 ldr r3,[r3,#20]
 792 003c BB60     	 str r3,[r7,#8]
 460:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 793              	 .loc 2 460 6
 794 003e BB68     	 ldr r3,[r7,#8]
 795 0040 074A     	 ldr r2,.L28
 796 0042 1340     	 ands r3,r2
 797 0044 BB60     	 str r3,[r7,#8]
 461:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 798              	 .loc 2 461 10
 799 0046 BB1C     	 adds r3,r7,#2
 800 0048 1B78     	 ldrb r3,[r3]
 801              	 .loc 2 461 31
 802 004a 1B02     	 lsls r3,r3,#8
 803              	 .loc 2 461 6
 804 004c BA68     	 ldr r2,[r7,#8]
 805 004e 1343     	 orrs r3,r2
 806 0050 BB60     	 str r3,[r7,#8]
 462:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 463:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 807              	 .loc 2 463 13
 808 0052 7B68     	 ldr r3,[r7,#4]
 809 0054 BA68     	 ldr r2,[r7,#8]
 810 0056 5A61     	 str r2,[r3,#20]
 464:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 811              	 .loc 2 464 1
 812 0058 C046     	 nop
 813 005a BD46     	 mov sp,r7
 814 005c 04B0     	 add sp,sp,#16
 815              	 
 816 005e 80BD     	 pop {r7,pc}
 817              	.L29:
 818              	 .align 2
 819              	.L28:
 820 0060 FFFCFFFF 	 .word -769
 821              	 .cfi_endproc
 822              	.LFE110:
 824              	 .section .text.XMC_CCU4_SLICE_LoadConfig,"ax",%progbits
 825              	 .align 1
 826              	 .global XMC_CCU4_SLICE_LoadConfig
 827              	 .syntax unified
 828              	 .code 16
 829              	 .thumb_func
 830              	 .fpu softvfp
 832              	XMC_CCU4_SLICE_LoadConfig:
 833              	.LFB111:
 465:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 466:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the Load trigger function of a slice */
 467:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
 468:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 834              	 .loc 2 468 1
 835              	 .cfi_startproc
 836              	 
 837              	 
 838 0000 80B5     	 push {r7,lr}
 839              	.LCFI39:
 840              	 .cfi_def_cfa_offset 8
 841              	 .cfi_offset 7,-8
 842              	 .cfi_offset 14,-4
 843 0002 84B0     	 sub sp,sp,#16
 844              	.LCFI40:
 845              	 .cfi_def_cfa_offset 24
 846 0004 00AF     	 add r7,sp,#0
 847              	.LCFI41:
 848              	 .cfi_def_cfa_register 7
 849 0006 7860     	 str r0,[r7,#4]
 850 0008 0A00     	 movs r2,r1
 851 000a FB1C     	 adds r3,r7,#3
 852 000c 1A70     	 strb r2,[r3]
 469:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 470:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 471:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 472:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 473:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 474:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the load function */
 475:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 853              	 .loc 2 475 7
 854 000e 7B68     	 ldr r3,[r7,#4]
 855 0010 5B68     	 ldr r3,[r3,#4]
 856 0012 FB60     	 str r3,[r7,#12]
 476:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 857              	 .loc 2 476 7
 858 0014 FB68     	 ldr r3,[r7,#12]
 859 0016 084A     	 ldr r2,.L31
 860 0018 1340     	 ands r3,r2
 861 001a FB60     	 str r3,[r7,#12]
 477:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 862              	 .loc 2 477 11
 863 001c FB1C     	 adds r3,r7,#3
 864 001e 1B78     	 ldrb r3,[r3]
 865              	 .loc 2 477 29
 866 0020 1B03     	 lsls r3,r3,#12
 867              	 .loc 2 477 7
 868 0022 FA68     	 ldr r2,[r7,#12]
 869 0024 1343     	 orrs r3,r2
 870 0026 FB60     	 str r3,[r7,#12]
 478:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 479:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 871              	 .loc 2 479 14
 872 0028 7B68     	 ldr r3,[r7,#4]
 873 002a FA68     	 ldr r2,[r7,#12]
 874 002c 5A60     	 str r2,[r3,#4]
 480:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 875              	 .loc 2 480 1
 876 002e C046     	 nop
 877 0030 BD46     	 mov sp,r7
 878 0032 04B0     	 add sp,sp,#16
 879              	 
 880 0034 80BD     	 pop {r7,pc}
 881              	.L32:
 882 0036 C046     	 .align 2
 883              	.L31:
 884 0038 FFCFFFFF 	 .word -12289
 885              	 .cfi_endproc
 886              	.LFE111:
 888              	 .section .text.XMC_CCU4_SLICE_ModulationConfig,"ax",%progbits
 889              	 .align 1
 890              	 .global XMC_CCU4_SLICE_ModulationConfig
 891              	 .syntax unified
 892              	 .code 16
 893              	 .thumb_func
 894              	 .fpu softvfp
 896              	XMC_CCU4_SLICE_ModulationConfig:
 897              	.LFB112:
 481:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 482:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the slice modulation function */
 483:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
 484:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_EVENT_t event,
 485:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
 486:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const bool synch_with_pwm)
 487:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 898              	 .loc 2 487 1
 899              	 .cfi_startproc
 900              	 
 901              	 
 902 0000 90B5     	 push {r4,r7,lr}
 903              	.LCFI42:
 904              	 .cfi_def_cfa_offset 12
 905              	 .cfi_offset 4,-12
 906              	 .cfi_offset 7,-8
 907              	 .cfi_offset 14,-4
 908 0002 85B0     	 sub sp,sp,#20
 909              	.LCFI43:
 910              	 .cfi_def_cfa_offset 32
 911 0004 00AF     	 add r7,sp,#0
 912              	.LCFI44:
 913              	 .cfi_def_cfa_register 7
 914 0006 7860     	 str r0,[r7,#4]
 915 0008 0C00     	 movs r4,r1
 916 000a 1000     	 movs r0,r2
 917 000c 1900     	 movs r1,r3
 918 000e FB1C     	 adds r3,r7,#3
 919 0010 221C     	 adds r2,r4,#0
 920 0012 1A70     	 strb r2,[r3]
 921 0014 BB1C     	 adds r3,r7,#2
 922 0016 021C     	 adds r2,r0,#0
 923 0018 1A70     	 strb r2,[r3]
 924 001a 7B1C     	 adds r3,r7,#1
 925 001c 0A1C     	 adds r2,r1,#0
 926 001e 1A70     	 strb r2,[r3]
 488:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 489:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 490:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 491:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
 492:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(even
 493:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
 494:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
 495:../Libraries/XMCLib/src/xmc_ccu4.c ****               (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
 496:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 497:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc  = slice->TC;
 927              	 .loc 2 497 7
 928 0020 7B68     	 ldr r3,[r7,#4]
 929 0022 5B69     	 ldr r3,[r3,#20]
 930 0024 FB60     	 str r3,[r7,#12]
 498:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 931              	 .loc 2 498 7
 932 0026 7B68     	 ldr r3,[r7,#4]
 933 0028 5B68     	 ldr r3,[r3,#4]
 934 002a BB60     	 str r3,[r7,#8]
 499:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 500:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Bind the event with the modulation function */
 501:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 935              	 .loc 2 501 7
 936 002c BB68     	 ldr r3,[r7,#8]
 937 002e 174A     	 ldr r2,.L38
 938 0030 1340     	 ands r3,r2
 939 0032 BB60     	 str r3,[r7,#8]
 502:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 940              	 .loc 2 502 11
 941 0034 FB1C     	 adds r3,r7,#3
 942 0036 1B78     	 ldrb r3,[r3]
 943              	 .loc 2 502 29
 944 0038 9B04     	 lsls r3,r3,#18
 945              	 .loc 2 502 7
 946 003a BA68     	 ldr r2,[r7,#8]
 947 003c 1343     	 orrs r3,r2
 948 003e BB60     	 str r3,[r7,#8]
 503:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 949              	 .loc 2 503 14
 950 0040 7B68     	 ldr r3,[r7,#4]
 951 0042 BA68     	 ldr r2,[r7,#8]
 952 0044 5A60     	 str r2,[r3,#4]
 504:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 505:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Modulation mode */
 506:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 953              	 .loc 2 506 6
 954 0046 BB1C     	 adds r3,r7,#2
 955 0048 1B78     	 ldrb r3,[r3]
 956 004a 012B     	 cmp r3,#1
 957 004c 05D1     	 bne .L34
 507:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 508:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 958              	 .loc 2 508 8
 959 004e FB68     	 ldr r3,[r7,#12]
 960 0050 8022     	 movs r2,#128
 961 0052 5204     	 lsls r2,r2,#17
 962 0054 1343     	 orrs r3,r2
 963 0056 FB60     	 str r3,[r7,#12]
 964 0058 03E0     	 b .L35
 965              	.L34:
 509:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 510:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 511:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 512:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 966              	 .loc 2 512 8
 967 005a FB68     	 ldr r3,[r7,#12]
 968 005c 0C4A     	 ldr r2,.L38+4
 969 005e 1340     	 ands r3,r2
 970 0060 FB60     	 str r3,[r7,#12]
 971              	.L35:
 513:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 514:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 515:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Synchronization of modulation effect with PWM cycle */
 516:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (synch_with_pwm == (bool) true)
 972              	 .loc 2 516 6
 973 0062 7B1C     	 adds r3,r7,#1
 974 0064 1B78     	 ldrb r3,[r3]
 975 0066 002B     	 cmp r3,#0
 976 0068 05D0     	 beq .L36
 517:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 518:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 977              	 .loc 2 518 8
 978 006a FB68     	 ldr r3,[r7,#12]
 979 006c 8022     	 movs r2,#128
 980 006e 1204     	 lsls r2,r2,#16
 981 0070 1343     	 orrs r3,r2
 982 0072 FB60     	 str r3,[r7,#12]
 983 0074 03E0     	 b .L37
 984              	.L36:
 519:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 520:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 521:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 522:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 985              	 .loc 2 522 8
 986 0076 FB68     	 ldr r3,[r7,#12]
 987 0078 064A     	 ldr r2,.L38+8
 988 007a 1340     	 ands r3,r2
 989 007c FB60     	 str r3,[r7,#12]
 990              	.L37:
 523:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 524:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 525:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 991              	 .loc 2 525 13
 992 007e 7B68     	 ldr r3,[r7,#4]
 993 0080 FA68     	 ldr r2,[r7,#12]
 994 0082 5A61     	 str r2,[r3,#20]
 526:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 995              	 .loc 2 526 1
 996 0084 C046     	 nop
 997 0086 BD46     	 mov sp,r7
 998 0088 05B0     	 add sp,sp,#20
 999              	 
 1000 008a 90BD     	 pop {r4,r7,pc}
 1001              	.L39:
 1002              	 .align 2
 1003              	.L38:
 1004 008c FFFFF3FF 	 .word -786433
 1005 0090 FFFFFFFE 	 .word -16777217
 1006 0094 FFFF7FFF 	 .word -8388609
 1007              	 .cfi_endproc
 1008              	.LFE112:
 1010              	 .section .text.XMC_CCU4_SLICE_CountConfig,"ax",%progbits
 1011              	 .align 1
 1012              	 .global XMC_CCU4_SLICE_CountConfig
 1013              	 .syntax unified
 1014              	 .code 16
 1015              	 .thumb_func
 1016              	 .fpu softvfp
 1018              	XMC_CCU4_SLICE_CountConfig:
 1019              	.LFB113:
 527:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 528:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the slice count function */
 529:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
 530:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1020              	 .loc 2 530 1
 1021              	 .cfi_startproc
 1022              	 
 1023              	 
 1024 0000 80B5     	 push {r7,lr}
 1025              	.LCFI45:
 1026              	 .cfi_def_cfa_offset 8
 1027              	 .cfi_offset 7,-8
 1028              	 .cfi_offset 14,-4
 1029 0002 84B0     	 sub sp,sp,#16
 1030              	.LCFI46:
 1031              	 .cfi_def_cfa_offset 24
 1032 0004 00AF     	 add r7,sp,#0
 1033              	.LCFI47:
 1034              	 .cfi_def_cfa_register 7
 1035 0006 7860     	 str r0,[r7,#4]
 1036 0008 0A00     	 movs r2,r1
 1037 000a FB1C     	 adds r3,r7,#3
 1038 000c 1A70     	 strb r2,[r3]
 531:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 532:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 533:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 534:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 535:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 536:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the count function */
 537:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1039              	 .loc 2 537 7
 1040 000e 7B68     	 ldr r3,[r7,#4]
 1041 0010 5B68     	 ldr r3,[r3,#4]
 1042 0012 FB60     	 str r3,[r7,#12]
 538:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 1043              	 .loc 2 538 7
 1044 0014 FB68     	 ldr r3,[r7,#12]
 1045 0016 084A     	 ldr r2,.L41
 1046 0018 1340     	 ands r3,r2
 1047 001a FB60     	 str r3,[r7,#12]
 539:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 1048              	 .loc 2 539 11
 1049 001c FB1C     	 adds r3,r7,#3
 1050 001e 1B78     	 ldrb r3,[r3]
 1051              	 .loc 2 539 29
 1052 0020 9B03     	 lsls r3,r3,#14
 1053              	 .loc 2 539 7
 1054 0022 FA68     	 ldr r2,[r7,#12]
 1055 0024 1343     	 orrs r3,r2
 1056 0026 FB60     	 str r3,[r7,#12]
 540:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 541:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1057              	 .loc 2 541 14
 1058 0028 7B68     	 ldr r3,[r7,#4]
 1059 002a FA68     	 ldr r2,[r7,#12]
 1060 002c 5A60     	 str r2,[r3,#4]
 542:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1061              	 .loc 2 542 1
 1062 002e C046     	 nop
 1063 0030 BD46     	 mov sp,r7
 1064 0032 04B0     	 add sp,sp,#16
 1065              	 
 1066 0034 80BD     	 pop {r7,pc}
 1067              	.L42:
 1068 0036 C046     	 .align 2
 1069              	.L41:
 1070 0038 FF3FFFFF 	 .word -49153
 1071              	 .cfi_endproc
 1072              	.LFE113:
 1074              	 .section .text.XMC_CCU4_SLICE_GateConfig,"ax",%progbits
 1075              	 .align 1
 1076              	 .global XMC_CCU4_SLICE_GateConfig
 1077              	 .syntax unified
 1078              	 .code 16
 1079              	 .thumb_func
 1080              	 .fpu softvfp
 1082              	XMC_CCU4_SLICE_GateConfig:
 1083              	.LFB114:
 543:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 544:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure slice gate function */
 545:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
 546:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1084              	 .loc 2 546 1
 1085              	 .cfi_startproc
 1086              	 
 1087              	 
 1088 0000 80B5     	 push {r7,lr}
 1089              	.LCFI48:
 1090              	 .cfi_def_cfa_offset 8
 1091              	 .cfi_offset 7,-8
 1092              	 .cfi_offset 14,-4
 1093 0002 84B0     	 sub sp,sp,#16
 1094              	.LCFI49:
 1095              	 .cfi_def_cfa_offset 24
 1096 0004 00AF     	 add r7,sp,#0
 1097              	.LCFI50:
 1098              	 .cfi_def_cfa_register 7
 1099 0006 7860     	 str r0,[r7,#4]
 1100 0008 0A00     	 movs r2,r1
 1101 000a FB1C     	 adds r3,r7,#3
 1102 000c 1A70     	 strb r2,[r3]
 547:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 548:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 549:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 550:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 551:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 552:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the gate function */
 553:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1103              	 .loc 2 553 7
 1104 000e 7B68     	 ldr r3,[r7,#4]
 1105 0010 5B68     	 ldr r3,[r3,#4]
 1106 0012 FB60     	 str r3,[r7,#12]
 554:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 1107              	 .loc 2 554 7
 1108 0014 FB68     	 ldr r3,[r7,#12]
 1109 0016 084A     	 ldr r2,.L44
 1110 0018 1340     	 ands r3,r2
 1111 001a FB60     	 str r3,[r7,#12]
 555:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 1112              	 .loc 2 555 11
 1113 001c FB1C     	 adds r3,r7,#3
 1114 001e 1B78     	 ldrb r3,[r3]
 1115              	 .loc 2 555 29
 1116 0020 1B02     	 lsls r3,r3,#8
 1117              	 .loc 2 555 7
 1118 0022 FA68     	 ldr r2,[r7,#12]
 1119 0024 1343     	 orrs r3,r2
 1120 0026 FB60     	 str r3,[r7,#12]
 556:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 557:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1121              	 .loc 2 557 14
 1122 0028 7B68     	 ldr r3,[r7,#4]
 1123 002a FA68     	 ldr r2,[r7,#12]
 1124 002c 5A60     	 str r2,[r3,#4]
 558:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1125              	 .loc 2 558 1
 1126 002e C046     	 nop
 1127 0030 BD46     	 mov sp,r7
 1128 0032 04B0     	 add sp,sp,#16
 1129              	 
 1130 0034 80BD     	 pop {r7,pc}
 1131              	.L45:
 1132 0036 C046     	 .align 2
 1133              	.L44:
 1134 0038 FFFCFFFF 	 .word -769
 1135              	 .cfi_endproc
 1136              	.LFE114:
 1138              	 .section .text.XMC_CCU4_SLICE_Capture0Config,"ax",%progbits
 1139              	 .align 1
 1140              	 .global XMC_CCU4_SLICE_Capture0Config
 1141              	 .syntax unified
 1142              	 .code 16
 1143              	 .thumb_func
 1144              	 .fpu softvfp
 1146              	XMC_CCU4_SLICE_Capture0Config:
 1147              	.LFB115:
 559:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 560:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure Capture-0 function */
 561:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
 562:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1148              	 .loc 2 562 1
 1149              	 .cfi_startproc
 1150              	 
 1151              	 
 1152 0000 80B5     	 push {r7,lr}
 1153              	.LCFI51:
 1154              	 .cfi_def_cfa_offset 8
 1155              	 .cfi_offset 7,-8
 1156              	 .cfi_offset 14,-4
 1157 0002 84B0     	 sub sp,sp,#16
 1158              	.LCFI52:
 1159              	 .cfi_def_cfa_offset 24
 1160 0004 00AF     	 add r7,sp,#0
 1161              	.LCFI53:
 1162              	 .cfi_def_cfa_register 7
 1163 0006 7860     	 str r0,[r7,#4]
 1164 0008 0A00     	 movs r2,r1
 1165 000a FB1C     	 adds r3,r7,#3
 1166 000c 1A70     	 strb r2,[r3]
 563:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 564:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 565:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 566:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event)
 567:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 568:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the gate function */
 569:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1167              	 .loc 2 569 7
 1168 000e 7B68     	 ldr r3,[r7,#4]
 1169 0010 5B68     	 ldr r3,[r3,#4]
 1170 0012 FB60     	 str r3,[r7,#12]
 570:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 1171              	 .loc 2 570 7
 1172 0014 FB68     	 ldr r3,[r7,#12]
 1173 0016 3022     	 movs r2,#48
 1174 0018 9343     	 bics r3,r2
 1175 001a FB60     	 str r3,[r7,#12]
 571:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 1176              	 .loc 2 571 11
 1177 001c FB1C     	 adds r3,r7,#3
 1178 001e 1B78     	 ldrb r3,[r3]
 1179              	 .loc 2 571 29
 1180 0020 1B01     	 lsls r3,r3,#4
 1181              	 .loc 2 571 7
 1182 0022 FA68     	 ldr r2,[r7,#12]
 1183 0024 1343     	 orrs r3,r2
 1184 0026 FB60     	 str r3,[r7,#12]
 572:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 573:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1185              	 .loc 2 573 14
 1186 0028 7B68     	 ldr r3,[r7,#4]
 1187 002a FA68     	 ldr r2,[r7,#12]
 1188 002c 5A60     	 str r2,[r3,#4]
 574:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1189              	 .loc 2 574 1
 1190 002e C046     	 nop
 1191 0030 BD46     	 mov sp,r7
 1192 0032 04B0     	 add sp,sp,#16
 1193              	 
 1194 0034 80BD     	 pop {r7,pc}
 1195              	 .cfi_endproc
 1196              	.LFE115:
 1198              	 .section .text.XMC_CCU4_SLICE_Capture1Config,"ax",%progbits
 1199              	 .align 1
 1200              	 .global XMC_CCU4_SLICE_Capture1Config
 1201              	 .syntax unified
 1202              	 .code 16
 1203              	 .thumb_func
 1204              	 .fpu softvfp
 1206              	XMC_CCU4_SLICE_Capture1Config:
 1207              	.LFB116:
 575:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 576:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure Capture-1 function */
 577:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
 578:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1208              	 .loc 2 578 1
 1209              	 .cfi_startproc
 1210              	 
 1211              	 
 1212 0000 80B5     	 push {r7,lr}
 1213              	.LCFI54:
 1214              	 .cfi_def_cfa_offset 8
 1215              	 .cfi_offset 7,-8
 1216              	 .cfi_offset 14,-4
 1217 0002 84B0     	 sub sp,sp,#16
 1218              	.LCFI55:
 1219              	 .cfi_def_cfa_offset 24
 1220 0004 00AF     	 add r7,sp,#0
 1221              	.LCFI56:
 1222              	 .cfi_def_cfa_register 7
 1223 0006 7860     	 str r0,[r7,#4]
 1224 0008 0A00     	 movs r2,r1
 1225 000a FB1C     	 adds r3,r7,#3
 1226 000c 1A70     	 strb r2,[r3]
 579:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 580:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 581:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 582:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event)
 583:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 584:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the gate function */
 585:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1227              	 .loc 2 585 7
 1228 000e 7B68     	 ldr r3,[r7,#4]
 1229 0010 5B68     	 ldr r3,[r3,#4]
 1230 0012 FB60     	 str r3,[r7,#12]
 586:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
 1231              	 .loc 2 586 7
 1232 0014 FB68     	 ldr r3,[r7,#12]
 1233 0016 C022     	 movs r2,#192
 1234 0018 9343     	 bics r3,r2
 1235 001a FB60     	 str r3,[r7,#12]
 587:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
 1236              	 .loc 2 587 11
 1237 001c FB1C     	 adds r3,r7,#3
 1238 001e 1B78     	 ldrb r3,[r3]
 1239              	 .loc 2 587 29
 1240 0020 9B01     	 lsls r3,r3,#6
 1241              	 .loc 2 587 7
 1242 0022 FA68     	 ldr r2,[r7,#12]
 1243 0024 1343     	 orrs r3,r2
 1244 0026 FB60     	 str r3,[r7,#12]
 588:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 589:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1245              	 .loc 2 589 14
 1246 0028 7B68     	 ldr r3,[r7,#4]
 1247 002a FA68     	 ldr r2,[r7,#12]
 1248 002c 5A60     	 str r2,[r3,#4]
 590:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1249              	 .loc 2 590 1
 1250 002e C046     	 nop
 1251 0030 BD46     	 mov sp,r7
 1252 0032 04B0     	 add sp,sp,#16
 1253              	 
 1254 0034 80BD     	 pop {r7,pc}
 1255              	 .cfi_endproc
 1256              	.LFE116:
 1258              	 .section .text.XMC_CCU4_SLICE_DirectionConfig,"ax",%progbits
 1259              	 .align 1
 1260              	 .global XMC_CCU4_SLICE_DirectionConfig
 1261              	 .syntax unified
 1262              	 .code 16
 1263              	 .thumb_func
 1264              	 .fpu softvfp
 1266              	XMC_CCU4_SLICE_DirectionConfig:
 1267              	.LFB117:
 591:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 592:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure direction function */
 593:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
 594:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1268              	 .loc 2 594 1
 1269              	 .cfi_startproc
 1270              	 
 1271              	 
 1272 0000 80B5     	 push {r7,lr}
 1273              	.LCFI57:
 1274              	 .cfi_def_cfa_offset 8
 1275              	 .cfi_offset 7,-8
 1276              	 .cfi_offset 14,-4
 1277 0002 84B0     	 sub sp,sp,#16
 1278              	.LCFI58:
 1279              	 .cfi_def_cfa_offset 24
 1280 0004 00AF     	 add r7,sp,#0
 1281              	.LCFI59:
 1282              	 .cfi_def_cfa_register 7
 1283 0006 7860     	 str r0,[r7,#4]
 1284 0008 0A00     	 movs r2,r1
 1285 000a FB1C     	 adds r3,r7,#3
 1286 000c 1A70     	 strb r2,[r3]
 595:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 596:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 597:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 598:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event
 599:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 600:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the direction function */
 601:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1287              	 .loc 2 601 7
 1288 000e 7B68     	 ldr r3,[r7,#4]
 1289 0010 5B68     	 ldr r3,[r3,#4]
 1290 0012 FB60     	 str r3,[r7,#12]
 602:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 1291              	 .loc 2 602 7
 1292 0014 FB68     	 ldr r3,[r7,#12]
 1293 0016 084A     	 ldr r2,.L49
 1294 0018 1340     	 ands r3,r2
 1295 001a FB60     	 str r3,[r7,#12]
 603:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 1296              	 .loc 2 603 11
 1297 001c FB1C     	 adds r3,r7,#3
 1298 001e 1B78     	 ldrb r3,[r3]
 1299              	 .loc 2 603 29
 1300 0020 9B02     	 lsls r3,r3,#10
 1301              	 .loc 2 603 7
 1302 0022 FA68     	 ldr r2,[r7,#12]
 1303 0024 1343     	 orrs r3,r2
 1304 0026 FB60     	 str r3,[r7,#12]
 604:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 605:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1305              	 .loc 2 605 14
 1306 0028 7B68     	 ldr r3,[r7,#4]
 1307 002a FA68     	 ldr r2,[r7,#12]
 1308 002c 5A60     	 str r2,[r3,#4]
 606:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1309              	 .loc 2 606 1
 1310 002e C046     	 nop
 1311 0030 BD46     	 mov sp,r7
 1312 0032 04B0     	 add sp,sp,#16
 1313              	 
 1314 0034 80BD     	 pop {r7,pc}
 1315              	.L50:
 1316 0036 C046     	 .align 2
 1317              	.L49:
 1318 0038 FFF3FFFF 	 .word -3073
 1319              	 .cfi_endproc
 1320              	.LFE117:
 1322              	 .section .text.XMC_CCU4_SLICE_StatusBitOverrideConfig,"ax",%progbits
 1323              	 .align 1
 1324              	 .global XMC_CCU4_SLICE_StatusBitOverrideConfig
 1325              	 .syntax unified
 1326              	 .code 16
 1327              	 .thumb_func
 1328              	 .fpu softvfp
 1330              	XMC_CCU4_SLICE_StatusBitOverrideConfig:
 1331              	.LFB118:
 607:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 608:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure slice status bit override function */
 609:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
 610:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1332              	 .loc 2 610 1
 1333              	 .cfi_startproc
 1334              	 
 1335              	 
 1336 0000 80B5     	 push {r7,lr}
 1337              	.LCFI60:
 1338              	 .cfi_def_cfa_offset 8
 1339              	 .cfi_offset 7,-8
 1340              	 .cfi_offset 14,-4
 1341 0002 84B0     	 sub sp,sp,#16
 1342              	.LCFI61:
 1343              	 .cfi_def_cfa_offset 24
 1344 0004 00AF     	 add r7,sp,#0
 1345              	.LCFI62:
 1346              	 .cfi_def_cfa_register 7
 1347 0006 7860     	 str r0,[r7,#4]
 611:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 612:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 613:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
 614:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 615:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the override function */
 616:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1348              	 .loc 2 616 7
 1349 0008 7B68     	 ldr r3,[r7,#4]
 1350 000a 5B68     	 ldr r3,[r3,#4]
 1351 000c FB60     	 str r3,[r7,#12]
 617:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Map status bit trigger override to Event 1 & 
 618:../Libraries/XMCLib/src/xmc_ccu4.c ****          status bit value override to Event 2 */
 619:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 1352              	 .loc 2 619 7
 1353 000e FB68     	 ldr r3,[r7,#12]
 1354 0010 074A     	 ldr r2,.L52
 1355 0012 1340     	 ands r3,r2
 1356 0014 FB60     	 str r3,[r7,#12]
 620:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 1357              	 .loc 2 620 7
 1358 0016 FB68     	 ldr r3,[r7,#12]
 1359 0018 8022     	 movs r2,#128
 1360 001a 5202     	 lsls r2,r2,#9
 1361 001c 1343     	 orrs r3,r2
 1362 001e FB60     	 str r3,[r7,#12]
 621:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 622:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1363              	 .loc 2 622 14
 1364 0020 7B68     	 ldr r3,[r7,#4]
 1365 0022 FA68     	 ldr r2,[r7,#12]
 1366 0024 5A60     	 str r2,[r3,#4]
 623:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1367              	 .loc 2 623 1
 1368 0026 C046     	 nop
 1369 0028 BD46     	 mov sp,r7
 1370 002a 04B0     	 add sp,sp,#16
 1371              	 
 1372 002c 80BD     	 pop {r7,pc}
 1373              	.L53:
 1374 002e C046     	 .align 2
 1375              	.L52:
 1376 0030 FFFFFEFF 	 .word -65537
 1377              	 .cfi_endproc
 1378              	.LFE118:
 1380              	 .section .text.XMC_CCU4_SLICE_TrapConfig,"ax",%progbits
 1381              	 .align 1
 1382              	 .global XMC_CCU4_SLICE_TrapConfig
 1383              	 .syntax unified
 1384              	 .code 16
 1385              	 .thumb_func
 1386              	 .fpu softvfp
 1388              	XMC_CCU4_SLICE_TrapConfig:
 1389              	.LFB119:
 624:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 625:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure trap function */
 626:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
 627:../Libraries/XMCLib/src/xmc_ccu4.c ****                                const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
 628:../Libraries/XMCLib/src/xmc_ccu4.c ****                                const bool synch_with_pwm)
 629:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1390              	 .loc 2 629 1
 1391              	 .cfi_startproc
 1392              	 
 1393              	 
 1394 0000 80B5     	 push {r7,lr}
 1395              	.LCFI63:
 1396              	 .cfi_def_cfa_offset 8
 1397              	 .cfi_offset 7,-8
 1398              	 .cfi_offset 14,-4
 1399 0002 84B0     	 sub sp,sp,#16
 1400              	.LCFI64:
 1401              	 .cfi_def_cfa_offset 24
 1402 0004 00AF     	 add r7,sp,#0
 1403              	.LCFI65:
 1404              	 .cfi_def_cfa_register 7
 1405 0006 7860     	 str r0,[r7,#4]
 1406 0008 0800     	 movs r0,r1
 1407 000a 1100     	 movs r1,r2
 1408 000c FB1C     	 adds r3,r7,#3
 1409 000e 021C     	 adds r2,r0,#0
 1410 0010 1A70     	 strb r2,[r3]
 1411 0012 BB1C     	 adds r3,r7,#2
 1412 0014 0A1C     	 adds r2,r1,#0
 1413 0016 1A70     	 strb r2,[r3]
 630:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 631:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 632:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 633:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 634:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT
 635:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                              (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT
 636:../Libraries/XMCLib/src/xmc_ccu4.c ****     
 637:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Map trap function to Event 2 */
 638:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1414              	 .loc 2 638 7
 1415 0018 7B68     	 ldr r3,[r7,#4]
 1416 001a 5B68     	 ldr r3,[r3,#4]
 1417 001c BB60     	 str r3,[r7,#8]
 639:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 1418              	 .loc 2 639 7
 1419 001e BB68     	 ldr r3,[r7,#8]
 1420 0020 184A     	 ldr r2,.L59
 1421 0022 1340     	 ands r3,r2
 1422 0024 BB60     	 str r3,[r7,#8]
 640:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 1423              	 .loc 2 640 7
 1424 0026 BB68     	 ldr r3,[r7,#8]
 1425 0028 8022     	 movs r2,#128
 1426 002a 9202     	 lsls r2,r2,#10
 1427 002c 1343     	 orrs r3,r2
 1428 002e BB60     	 str r3,[r7,#8]
 641:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1429              	 .loc 2 641 14
 1430 0030 7B68     	 ldr r3,[r7,#4]
 1431 0032 BA68     	 ldr r2,[r7,#8]
 1432 0034 5A60     	 str r2,[r3,#4]
 642:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 643:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Configure synchronization option */
 644:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc = slice->TC;
 1433              	 .loc 2 644 6
 1434 0036 7B68     	 ldr r3,[r7,#4]
 1435 0038 5B69     	 ldr r3,[r3,#20]
 1436 003a FB60     	 str r3,[r7,#12]
 645:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 646:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (synch_with_pwm == (bool) true)
 1437              	 .loc 2 646 6
 1438 003c BB1C     	 adds r3,r7,#2
 1439 003e 1B78     	 ldrb r3,[r3]
 1440 0040 002B     	 cmp r3,#0
 1441 0042 05D0     	 beq .L55
 647:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 648:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 1442              	 .loc 2 648 8
 1443 0044 FB68     	 ldr r3,[r7,#12]
 1444 0046 8022     	 movs r2,#128
 1445 0048 9203     	 lsls r2,r2,#14
 1446 004a 1343     	 orrs r3,r2
 1447 004c FB60     	 str r3,[r7,#12]
 1448 004e 03E0     	 b .L56
 1449              	.L55:
 649:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 650:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 651:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 652:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 1450              	 .loc 2 652 8
 1451 0050 FB68     	 ldr r3,[r7,#12]
 1452 0052 0D4A     	 ldr r2,.L59+4
 1453 0054 1340     	 ands r3,r2
 1454 0056 FB60     	 str r3,[r7,#12]
 1455              	.L56:
 653:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 654:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 655:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure exit mode */
 656:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 1456              	 .loc 2 656 6
 1457 0058 FB1C     	 adds r3,r7,#3
 1458 005a 1B78     	 ldrb r3,[r3]
 1459 005c 012B     	 cmp r3,#1
 1460 005e 05D1     	 bne .L57
 657:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 658:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 1461              	 .loc 2 658 8
 1462 0060 FB68     	 ldr r3,[r7,#12]
 1463 0062 8022     	 movs r2,#128
 1464 0064 D203     	 lsls r2,r2,#15
 1465 0066 1343     	 orrs r3,r2
 1466 0068 FB60     	 str r3,[r7,#12]
 1467 006a 03E0     	 b .L58
 1468              	.L57:
 659:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 660:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 661:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 662:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 1469              	 .loc 2 662 8
 1470 006c FB68     	 ldr r3,[r7,#12]
 1471 006e 074A     	 ldr r2,.L59+8
 1472 0070 1340     	 ands r3,r2
 1473 0072 FB60     	 str r3,[r7,#12]
 1474              	.L58:
 663:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 664:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 665:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 1475              	 .loc 2 665 13
 1476 0074 7B68     	 ldr r3,[r7,#4]
 1477 0076 FA68     	 ldr r2,[r7,#12]
 1478 0078 5A61     	 str r2,[r3,#20]
 666:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1479              	 .loc 2 666 1
 1480 007a C046     	 nop
 1481 007c BD46     	 mov sp,r7
 1482 007e 04B0     	 add sp,sp,#16
 1483              	 
 1484 0080 80BD     	 pop {r7,pc}
 1485              	.L60:
 1486 0082 C046     	 .align 2
 1487              	.L59:
 1488 0084 FFFFFDFF 	 .word -131073
 1489 0088 FFFFDFFF 	 .word -2097153
 1490 008c FFFFBFFF 	 .word -4194305
 1491              	 .cfi_endproc
 1492              	.LFE119:
 1494              	 .section .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent,"ax",%progbits
 1495              	 .align 1
 1496              	 .global XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent
 1497              	 .syntax unified
 1498              	 .code 16
 1499              	 .thumb_func
 1500              	 .fpu softvfp
 1502              	XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:
 1503              	.LFB120:
 667:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 668:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure a slice Status Bit Override event */
 669:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
 670:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_
 671:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_
 672:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1504              	 .loc 2 672 1
 1505              	 .cfi_startproc
 1506              	 
 1507              	 
 1508 0000 80B5     	 push {r7,lr}
 1509              	.LCFI66:
 1510              	 .cfi_def_cfa_offset 8
 1511              	 .cfi_offset 7,-8
 1512              	 .cfi_offset 14,-4
 1513 0002 86B0     	 sub sp,sp,#24
 1514              	.LCFI67:
 1515              	 .cfi_def_cfa_offset 32
 1516 0004 00AF     	 add r7,sp,#0
 1517              	.LCFI68:
 1518              	 .cfi_def_cfa_register 7
 1519 0006 F860     	 str r0,[r7,#12]
 1520 0008 B960     	 str r1,[r7,#8]
 1521 000a 7A60     	 str r2,[r7,#4]
 673:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 674:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 675:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Slice Pointer", XMC_CCU4_IsVal
 676:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 677:../Libraries/XMCLib/src/xmc_ccu4.c ****          XMC_CCU4_SLICE_IsInputvalid(ev1_config->mapped_input));
 678:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity",
 679:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(ev1_config->edge));
 680:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity",
 681:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((ev1_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 682:../Libraries/XMCLib/src/xmc_ccu4.c ****               (ev1_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 683:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
 684:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EVENT_FILTER(ev1_config->duration));
 685:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 686:../Libraries/XMCLib/src/xmc_ccu4.c ****          XMC_CCU4_SLICE_IsInputvalid(ev2_config->mapped_input));
 687:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity",
 688:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(ev2_config->edge));
 689:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity",
 690:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((ev2_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 691:../Libraries/XMCLib/src/xmc_ccu4.c ****               (ev2_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 692:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period", 
 693:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EVENT_FILTER(ev2_config->duration));
 694:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
 695:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS2;
 696:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 697:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 1 */
 698:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS2_EV1EM_Pos);
 699:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS2_EV1EM_Pos;
 700:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 701:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 2 */
 702:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS2_EV2EM_Pos);
 703:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS2_EV2EM_Pos;
 704:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 705:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 1 */
 706:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS2_EV1LM_Pos);
 707:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS2_EV1LM_Pos;
 708:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 709:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 2 */
 710:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS2_EV2LM_Pos);
 711:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS2_EV2LM_Pos;
 712:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 713:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 1 */
 714:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS2_LPF1M_Pos);
 715:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS2_LPF1M_Pos;
 716:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 717:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 2 */
 718:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS2_LPF2M_Pos);
 719:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS2_LPF2M_Pos;
 720:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 721:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS2 = ins;
 722:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 723:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS1;
 724:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 725:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the input for Event1 */
 726:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV1IS_Pos);
 727:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS1_EV1IS_Pos;
 728:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 729:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally, the input for Event2 */
 730:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
 731:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
 732:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 733:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS1 = ins;
 734:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 735:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS;
 1522              	 .loc 2 735 7
 1523 000c FB68     	 ldr r3,[r7,#12]
 1524 000e 1B68     	 ldr r3,[r3]
 1525 0010 7B61     	 str r3,[r7,#20]
 736:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 737:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 1 */
 738:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 1526              	 .loc 2 738 7
 1527 0012 7B69     	 ldr r3,[r7,#20]
 1528 0014 2A4A     	 ldr r2,.L62
 1529 0016 1340     	 ands r3,r2
 1530 0018 7B61     	 str r3,[r7,#20]
 739:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 1531              	 .loc 2 739 32
 1532 001a BB68     	 ldr r3,[r7,#8]
 1533 001c 5B78     	 ldrb r3,[r3,#1]
 1534              	 .loc 2 739 40
 1535 001e 9B04     	 lsls r3,r3,#18
 1536              	 .loc 2 739 7
 1537 0020 7A69     	 ldr r2,[r7,#20]
 1538 0022 1343     	 orrs r3,r2
 1539 0024 7B61     	 str r3,[r7,#20]
 740:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 741:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 2 */
 742:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 1540              	 .loc 2 742 7
 1541 0026 7B69     	 ldr r3,[r7,#20]
 1542 0028 264A     	 ldr r2,.L62+4
 1543 002a 1340     	 ands r3,r2
 1544 002c 7B61     	 str r3,[r7,#20]
 743:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 1545              	 .loc 2 743 32
 1546 002e 7B68     	 ldr r3,[r7,#4]
 1547 0030 5B78     	 ldrb r3,[r3,#1]
 1548              	 .loc 2 743 40
 1549 0032 1B05     	 lsls r3,r3,#20
 1550              	 .loc 2 743 7
 1551 0034 7A69     	 ldr r2,[r7,#20]
 1552 0036 1343     	 orrs r3,r2
 1553 0038 7B61     	 str r3,[r7,#20]
 744:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 745:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 1 */
 746:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 1554              	 .loc 2 746 7
 1555 003a 7B69     	 ldr r3,[r7,#20]
 1556 003c 224A     	 ldr r2,.L62+8
 1557 003e 1340     	 ands r3,r2
 1558 0040 7B61     	 str r3,[r7,#20]
 747:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 1559              	 .loc 2 747 32
 1560 0042 BB68     	 ldr r3,[r7,#8]
 1561 0044 9B78     	 ldrb r3,[r3,#2]
 1562              	 .loc 2 747 41
 1563 0046 DB05     	 lsls r3,r3,#23
 1564              	 .loc 2 747 7
 1565 0048 7A69     	 ldr r2,[r7,#20]
 1566 004a 1343     	 orrs r3,r2
 1567 004c 7B61     	 str r3,[r7,#20]
 748:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 749:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 2 */
 750:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 1568              	 .loc 2 750 7
 1569 004e 7B69     	 ldr r3,[r7,#20]
 1570 0050 1E4A     	 ldr r2,.L62+12
 1571 0052 1340     	 ands r3,r2
 1572 0054 7B61     	 str r3,[r7,#20]
 751:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 1573              	 .loc 2 751 32
 1574 0056 7B68     	 ldr r3,[r7,#4]
 1575 0058 9B78     	 ldrb r3,[r3,#2]
 1576              	 .loc 2 751 41
 1577 005a 1B06     	 lsls r3,r3,#24
 1578              	 .loc 2 751 7
 1579 005c 7A69     	 ldr r2,[r7,#20]
 1580 005e 1343     	 orrs r3,r2
 1581 0060 7B61     	 str r3,[r7,#20]
 752:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 753:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 1 */
 754:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 1582              	 .loc 2 754 7
 1583 0062 7B69     	 ldr r3,[r7,#20]
 1584 0064 1A4A     	 ldr r2,.L62+16
 1585 0066 1340     	 ands r3,r2
 1586 0068 7B61     	 str r3,[r7,#20]
 755:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 1587              	 .loc 2 755 32
 1588 006a BB68     	 ldr r3,[r7,#8]
 1589 006c DB78     	 ldrb r3,[r3,#3]
 1590              	 .loc 2 755 44
 1591 006e DB06     	 lsls r3,r3,#27
 1592              	 .loc 2 755 7
 1593 0070 7A69     	 ldr r2,[r7,#20]
 1594 0072 1343     	 orrs r3,r2
 1595 0074 7B61     	 str r3,[r7,#20]
 756:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 757:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 2 */
 758:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 1596              	 .loc 2 758 7
 1597 0076 7B69     	 ldr r3,[r7,#20]
 1598 0078 164A     	 ldr r2,.L62+20
 1599 007a 1340     	 ands r3,r2
 1600 007c 7B61     	 str r3,[r7,#20]
 759:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 1601              	 .loc 2 759 32
 1602 007e 7B68     	 ldr r3,[r7,#4]
 1603 0080 DB78     	 ldrb r3,[r3,#3]
 1604              	 .loc 2 759 44
 1605 0082 5B07     	 lsls r3,r3,#29
 1606              	 .loc 2 759 7
 1607 0084 7A69     	 ldr r2,[r7,#20]
 1608 0086 1343     	 orrs r3,r2
 1609 0088 7B61     	 str r3,[r7,#20]
 760:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 761:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the input for Event1 */
 762:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 1610              	 .loc 2 762 7
 1611 008a 7B69     	 ldr r3,[r7,#20]
 1612 008c F022     	 movs r2,#240
 1613 008e 9343     	 bics r3,r2
 1614 0090 7B61     	 str r3,[r7,#20]
 763:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 1615              	 .loc 2 763 32
 1616 0092 BB68     	 ldr r3,[r7,#8]
 1617 0094 1B78     	 ldrb r3,[r3]
 1618              	 .loc 2 763 48
 1619 0096 1B01     	 lsls r3,r3,#4
 1620              	 .loc 2 763 7
 1621 0098 7A69     	 ldr r2,[r7,#20]
 1622 009a 1343     	 orrs r3,r2
 1623 009c 7B61     	 str r3,[r7,#20]
 764:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 765:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally, the input for Event2 */
 766:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 1624              	 .loc 2 766 7
 1625 009e 7B69     	 ldr r3,[r7,#20]
 1626 00a0 0D4A     	 ldr r2,.L62+24
 1627 00a2 1340     	 ands r3,r2
 1628 00a4 7B61     	 str r3,[r7,#20]
 767:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 1629              	 .loc 2 767 32
 1630 00a6 7B68     	 ldr r3,[r7,#4]
 1631 00a8 1B78     	 ldrb r3,[r3]
 1632              	 .loc 2 767 48
 1633 00aa 1B02     	 lsls r3,r3,#8
 1634              	 .loc 2 767 7
 1635 00ac 7A69     	 ldr r2,[r7,#20]
 1636 00ae 1343     	 orrs r3,r2
 1637 00b0 7B61     	 str r3,[r7,#20]
 768:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 769:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS = ins;
 1638              	 .loc 2 769 14
 1639 00b2 FB68     	 ldr r3,[r7,#12]
 1640 00b4 7A69     	 ldr r2,[r7,#20]
 1641 00b6 1A60     	 str r2,[r3]
 770:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 771:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1642              	 .loc 2 771 1
 1643 00b8 C046     	 nop
 1644 00ba BD46     	 mov sp,r7
 1645 00bc 06B0     	 add sp,sp,#24
 1646              	 
 1647 00be 80BD     	 pop {r7,pc}
 1648              	.L63:
 1649              	 .align 2
 1650              	.L62:
 1651 00c0 FFFFF3FF 	 .word -786433
 1652 00c4 FFFFCFFF 	 .word -3145729
 1653 00c8 FFFF7FFF 	 .word -8388609
 1654 00cc FFFFFFFE 	 .word -16777217
 1655 00d0 FFFFFFE7 	 .word -402653185
 1656 00d4 FFFFFF9F 	 .word -1610612737
 1657 00d8 FFF0FFFF 	 .word -3841
 1658              	 .cfi_endproc
 1659              	.LFE120:
 1661              	 .section .text.XMC_CCU4_SLICE_ConfigureEvent,"ax",%progbits
 1662              	 .align 1
 1663              	 .global XMC_CCU4_SLICE_ConfigureEvent
 1664              	 .syntax unified
 1665              	 .code 16
 1666              	 .thumb_func
 1667              	 .fpu softvfp
 1669              	XMC_CCU4_SLICE_ConfigureEvent:
 1670              	.LFB121:
 772:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 773:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure a slice trigger event */
 774:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
 775:../Libraries/XMCLib/src/xmc_ccu4.c ****                                    const XMC_CCU4_SLICE_EVENT_t event,
 776:../Libraries/XMCLib/src/xmc_ccu4.c ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
 777:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1671              	 .loc 2 777 1
 1672              	 .cfi_startproc
 1673              	 
 1674              	 
 1675 0000 90B5     	 push {r4,r7,lr}
 1676              	.LCFI69:
 1677              	 .cfi_def_cfa_offset 12
 1678              	 .cfi_offset 4,-12
 1679              	 .cfi_offset 7,-8
 1680              	 .cfi_offset 14,-4
 1681 0002 89B0     	 sub sp,sp,#36
 1682              	.LCFI70:
 1683              	 .cfi_def_cfa_offset 48
 1684 0004 00AF     	 add r7,sp,#0
 1685              	.LCFI71:
 1686              	 .cfi_def_cfa_register 7
 1687 0006 F860     	 str r0,[r7,#12]
 1688 0008 7A60     	 str r2,[r7,#4]
 1689 000a 0B24     	 movs r4,#11
 1690 000c 3B19     	 adds r3,r7,r4
 1691 000e 0A1C     	 adds r2,r1,#0
 1692 0010 1A70     	 strb r2,[r3]
 778:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 779:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  pos;
 780:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  offset;
 781:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 782:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 783:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event)
 784:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(config->map
 785:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Edge Sensitivity",
 786:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(config->edge));
 787:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Level Sensitivity",
 788:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 789:../Libraries/XMCLib/src/xmc_ccu4.c ****               (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 790:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
 791:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
 792:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Calculate offset with reference to event */
 793:../Libraries/XMCLib/src/xmc_ccu4.c ****   offset = ((uint8_t) event) - 1U;
 1693              	 .loc 2 793 10
 1694 0012 1F20     	 movs r0,#31
 1695 0014 3B18     	 adds r3,r7,r0
 1696 0016 3A19     	 adds r2,r7,r4
 1697 0018 1278     	 ldrb r2,[r2]
 1698 001a 013A     	 subs r2,r2,#1
 1699 001c 1A70     	 strb r2,[r3]
 794:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 795:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
 796:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS2;
 797:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 798:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, configure the edge sensitivity */
 799:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS2_EV0EM_Pos) + (uint8_t)(offset << 2U);
 800:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 801:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->edge) << pos;
 802:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 803:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the level */
 804:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS2_EV0LM_Pos) + (uint8_t)(offset << 2U);
 805:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 806:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->level) << pos;
 807:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 808:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the debounce filter */
 809:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS2_LPF0M_Pos) + (uint8_t)(offset << 2U);
 810:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 811:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->duration) << pos;
 812:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 813:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS2 = ins;
 814:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 815:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS1;
 816:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 817:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally the input */
 818:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS1_EV0IS_Pos) + (uint8_t)(offset << 3U);
 819:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 820:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 821:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 822:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS1 = ins;
 823:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 824:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 825:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS;
 1700              	 .loc 2 825 7
 1701 001e FB68     	 ldr r3,[r7,#12]
 1702 0020 1B68     	 ldr r3,[r3]
 1703 0022 BB61     	 str r3,[r7,#24]
 826:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 827:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, configure the edge sensitivity */
 828:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 1704              	 .loc 2 828 46
 1705 0024 3B18     	 adds r3,r7,r0
 1706 0026 1B78     	 ldrb r3,[r3]
 1707 0028 DB18     	 adds r3,r3,r3
 1708 002a DAB2     	 uxtb r2,r3
 1709              	 .loc 2 828 7
 1710 002c 1721     	 movs r1,#23
 1711 002e 7B18     	 adds r3,r7,r1
 1712 0030 1032     	 adds r2,r2,#16
 1713 0032 1A70     	 strb r2,[r3]
 829:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 1714              	 .loc 2 829 63
 1715 0034 7B18     	 adds r3,r7,r1
 1716 0036 1B78     	 ldrb r3,[r3]
 1717 0038 0322     	 movs r2,#3
 1718 003a 9A40     	 lsls r2,r2,r3
 1719 003c 1300     	 movs r3,r2
 1720              	 .loc 2 829 10
 1721 003e DA43     	 mvns r2,r3
 1722              	 .loc 2 829 7
 1723 0040 BB69     	 ldr r3,[r7,#24]
 1724 0042 1340     	 ands r3,r2
 1725 0044 BB61     	 str r3,[r7,#24]
 830:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->edge) << pos;
 1726              	 .loc 2 830 28
 1727 0046 7B68     	 ldr r3,[r7,#4]
 1728 0048 5B78     	 ldrb r3,[r3,#1]
 1729              	 .loc 2 830 11
 1730 004a 1A00     	 movs r2,r3
 1731              	 .loc 2 830 36
 1732 004c 7B18     	 adds r3,r7,r1
 1733 004e 1B78     	 ldrb r3,[r3]
 1734 0050 9A40     	 lsls r2,r2,r3
 1735 0052 1300     	 movs r3,r2
 1736              	 .loc 2 830 7
 1737 0054 BA69     	 ldr r2,[r7,#24]
 1738 0056 1343     	 orrs r3,r2
 1739 0058 BB61     	 str r3,[r7,#24]
 831:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 832:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the level */
 833:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 1740              	 .loc 2 833 7
 1741 005a 7B18     	 adds r3,r7,r1
 1742 005c 3A18     	 adds r2,r7,r0
 1743 005e 1278     	 ldrb r2,[r2]
 1744 0060 1632     	 adds r2,r2,#22
 1745 0062 1A70     	 strb r2,[r3]
 834:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 1746              	 .loc 2 834 64
 1747 0064 7B18     	 adds r3,r7,r1
 1748 0066 1B78     	 ldrb r3,[r3]
 1749 0068 0122     	 movs r2,#1
 1750 006a 9A40     	 lsls r2,r2,r3
 1751 006c 1300     	 movs r3,r2
 1752              	 .loc 2 834 10
 1753 006e DA43     	 mvns r2,r3
 1754              	 .loc 2 834 7
 1755 0070 BB69     	 ldr r3,[r7,#24]
 1756 0072 1340     	 ands r3,r2
 1757 0074 BB61     	 str r3,[r7,#24]
 835:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->level) << pos;
 1758              	 .loc 2 835 28
 1759 0076 7B68     	 ldr r3,[r7,#4]
 1760 0078 9B78     	 ldrb r3,[r3,#2]
 1761              	 .loc 2 835 11
 1762 007a 1A00     	 movs r2,r3
 1763              	 .loc 2 835 37
 1764 007c 7B18     	 adds r3,r7,r1
 1765 007e 1B78     	 ldrb r3,[r3]
 1766 0080 9A40     	 lsls r2,r2,r3
 1767 0082 1300     	 movs r3,r2
 1768              	 .loc 2 835 7
 1769 0084 BA69     	 ldr r2,[r7,#24]
 1770 0086 1343     	 orrs r3,r2
 1771 0088 BB61     	 str r3,[r7,#24]
 836:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 837:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the debounce filter */
 838:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 1772              	 .loc 2 838 46
 1773 008a 3B18     	 adds r3,r7,r0
 1774 008c 1B78     	 ldrb r3,[r3]
 1775 008e DB18     	 adds r3,r3,r3
 1776 0090 DAB2     	 uxtb r2,r3
 1777              	 .loc 2 838 7
 1778 0092 7B18     	 adds r3,r7,r1
 1779 0094 1932     	 adds r2,r2,#25
 1780 0096 1A70     	 strb r2,[r3]
 839:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 1781              	 .loc 2 839 65
 1782 0098 7B18     	 adds r3,r7,r1
 1783 009a 1B78     	 ldrb r3,[r3]
 1784 009c 0322     	 movs r2,#3
 1785 009e 9A40     	 lsls r2,r2,r3
 1786 00a0 1300     	 movs r3,r2
 1787              	 .loc 2 839 10
 1788 00a2 DA43     	 mvns r2,r3
 1789              	 .loc 2 839 7
 1790 00a4 BB69     	 ldr r3,[r7,#24]
 1791 00a6 1340     	 ands r3,r2
 1792 00a8 BB61     	 str r3,[r7,#24]
 840:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->duration) << pos;
 1793              	 .loc 2 840 28
 1794 00aa 7B68     	 ldr r3,[r7,#4]
 1795 00ac DB78     	 ldrb r3,[r3,#3]
 1796              	 .loc 2 840 11
 1797 00ae 1A00     	 movs r2,r3
 1798              	 .loc 2 840 40
 1799 00b0 7B18     	 adds r3,r7,r1
 1800 00b2 1B78     	 ldrb r3,[r3]
 1801 00b4 9A40     	 lsls r2,r2,r3
 1802 00b6 1300     	 movs r3,r2
 1803              	 .loc 2 840 7
 1804 00b8 BA69     	 ldr r2,[r7,#24]
 1805 00ba 1343     	 orrs r3,r2
 1806 00bc BB61     	 str r3,[r7,#24]
 841:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 842:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally the input */
 843:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 1807              	 .loc 2 843 7
 1808 00be 7B18     	 adds r3,r7,r1
 1809 00c0 3A18     	 adds r2,r7,r0
 1810 00c2 1278     	 ldrb r2,[r2]
 1811 00c4 9200     	 lsls r2,r2,#2
 1812 00c6 1A70     	 strb r2,[r3]
 844:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 1813              	 .loc 2 844 64
 1814 00c8 7B18     	 adds r3,r7,r1
 1815 00ca 1B78     	 ldrb r3,[r3]
 1816 00cc 0F22     	 movs r2,#15
 1817 00ce 9A40     	 lsls r2,r2,r3
 1818 00d0 1300     	 movs r3,r2
 1819              	 .loc 2 844 10
 1820 00d2 DA43     	 mvns r2,r3
 1821              	 .loc 2 844 7
 1822 00d4 BB69     	 ldr r3,[r7,#24]
 1823 00d6 1340     	 ands r3,r2
 1824 00d8 BB61     	 str r3,[r7,#24]
 845:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 1825              	 .loc 2 845 28
 1826 00da 7B68     	 ldr r3,[r7,#4]
 1827 00dc 1B78     	 ldrb r3,[r3]
 1828              	 .loc 2 845 11
 1829 00de 1A00     	 movs r2,r3
 1830              	 .loc 2 845 44
 1831 00e0 7B18     	 adds r3,r7,r1
 1832 00e2 1B78     	 ldrb r3,[r3]
 1833 00e4 9A40     	 lsls r2,r2,r3
 1834 00e6 1300     	 movs r3,r2
 1835              	 .loc 2 845 7
 1836 00e8 BA69     	 ldr r2,[r7,#24]
 1837 00ea 1343     	 orrs r3,r2
 1838 00ec BB61     	 str r3,[r7,#24]
 846:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 847:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS = ins;
 1839              	 .loc 2 847 14
 1840 00ee FB68     	 ldr r3,[r7,#12]
 1841 00f0 BA69     	 ldr r2,[r7,#24]
 1842 00f2 1A60     	 str r2,[r3]
 848:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 849:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1843              	 .loc 2 849 1
 1844 00f4 C046     	 nop
 1845 00f6 BD46     	 mov sp,r7
 1846 00f8 09B0     	 add sp,sp,#36
 1847              	 
 1848 00fa 90BD     	 pop {r4,r7,pc}
 1849              	 .cfi_endproc
 1850              	.LFE121:
 1852              	 .section .text.XMC_CCU4_SLICE_SetInput,"ax",%progbits
 1853              	 .align 1
 1854              	 .global XMC_CCU4_SLICE_SetInput
 1855              	 .syntax unified
 1856              	 .code 16
 1857              	 .thumb_func
 1858              	 .fpu softvfp
 1860              	XMC_CCU4_SLICE_SetInput:
 1861              	.LFB122:
 850:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 851:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to bind an input to a slice trigger event */
 852:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
 853:../Libraries/XMCLib/src/xmc_ccu4.c ****                          const XMC_CCU4_SLICE_EVENT_t event,
 854:../Libraries/XMCLib/src/xmc_ccu4.c ****                              const XMC_CCU4_SLICE_INPUT_t input)
 855:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1862              	 .loc 2 855 1
 1863              	 .cfi_startproc
 1864              	 
 1865              	 
 1866 0000 80B5     	 push {r7,lr}
 1867              	.LCFI72:
 1868              	 .cfi_def_cfa_offset 8
 1869              	 .cfi_offset 7,-8
 1870              	 .cfi_offset 14,-4
 1871 0002 84B0     	 sub sp,sp,#16
 1872              	.LCFI73:
 1873              	 .cfi_def_cfa_offset 24
 1874 0004 00AF     	 add r7,sp,#0
 1875              	.LCFI74:
 1876              	 .cfi_def_cfa_register 7
 1877 0006 7860     	 str r0,[r7,#4]
 1878 0008 0800     	 movs r0,r1
 1879 000a 1100     	 movs r1,r2
 1880 000c FB1C     	 adds r3,r7,#3
 1881 000e 021C     	 adds r2,r0,#0
 1882 0010 1A70     	 strb r2,[r3]
 1883 0012 BB1C     	 adds r3,r7,#2
 1884 0014 0A1C     	 adds r2,r1,#0
 1885 0016 1A70     	 strb r2,[r3]
 856:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 857:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  pos;
 858:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  offset;
 859:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 860:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 861:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 862:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(input));
 863:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 864:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Calculate offset with reference to event */
 865:../Libraries/XMCLib/src/xmc_ccu4.c ****   offset = ((uint8_t) event) - 1U;
 1886              	 .loc 2 865 10
 1887 0018 0F20     	 movs r0,#15
 1888 001a 3B18     	 adds r3,r7,r0
 1889 001c FA1C     	 adds r2,r7,#3
 1890 001e 1278     	 ldrb r2,[r2]
 1891 0020 013A     	 subs r2,r2,#1
 1892 0022 1A70     	 strb r2,[r3]
 866:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 867:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
 868:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS1_EV0IS_Pos) + (uint8_t) (offset << 3U);
 869:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 870:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS1;
 871:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 872:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) input) << pos;
 873:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 874:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS1 = ins;
 875:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 876:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 1893              	 .loc 2 876 7
 1894 0024 0E21     	 movs r1,#14
 1895 0026 7B18     	 adds r3,r7,r1
 1896 0028 3A18     	 adds r2,r7,r0
 1897 002a 1278     	 ldrb r2,[r2]
 1898 002c 9200     	 lsls r2,r2,#2
 1899 002e 1A70     	 strb r2,[r3]
 877:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 878:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS;
 1900              	 .loc 2 878 7
 1901 0030 7B68     	 ldr r3,[r7,#4]
 1902 0032 1B68     	 ldr r3,[r3]
 1903 0034 BB60     	 str r3,[r7,#8]
 879:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 1904              	 .loc 2 879 64
 1905 0036 7B18     	 adds r3,r7,r1
 1906 0038 1B78     	 ldrb r3,[r3]
 1907 003a 0F22     	 movs r2,#15
 1908 003c 9A40     	 lsls r2,r2,r3
 1909 003e 1300     	 movs r3,r2
 1910              	 .loc 2 879 10
 1911 0040 DA43     	 mvns r2,r3
 1912              	 .loc 2 879 7
 1913 0042 BB68     	 ldr r3,[r7,#8]
 1914 0044 1340     	 ands r3,r2
 1915 0046 BB60     	 str r3,[r7,#8]
 880:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) input) << pos;
 1916              	 .loc 2 880 11
 1917 0048 BB1C     	 adds r3,r7,#2
 1918 004a 1A78     	 ldrb r2,[r3]
 1919              	 .loc 2 880 29
 1920 004c 7B18     	 adds r3,r7,r1
 1921 004e 1B78     	 ldrb r3,[r3]
 1922 0050 9A40     	 lsls r2,r2,r3
 1923 0052 1300     	 movs r3,r2
 1924              	 .loc 2 880 7
 1925 0054 BA68     	 ldr r2,[r7,#8]
 1926 0056 1343     	 orrs r3,r2
 1927 0058 BB60     	 str r3,[r7,#8]
 881:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 882:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS = ins;
 1928              	 .loc 2 882 14
 1929 005a 7B68     	 ldr r3,[r7,#4]
 1930 005c BA68     	 ldr r2,[r7,#8]
 1931 005e 1A60     	 str r2,[r3]
 883:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 884:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1932              	 .loc 2 884 1
 1933 0060 C046     	 nop
 1934 0062 BD46     	 mov sp,r7
 1935 0064 04B0     	 add sp,sp,#16
 1936              	 
 1937 0066 80BD     	 pop {r7,pc}
 1938              	 .cfi_endproc
 1939              	.LFE122:
 1941              	 .section .text.XMC_CCU4_SLICE_SetTimerRepeatMode,"ax",%progbits
 1942              	 .align 1
 1943              	 .global XMC_CCU4_SLICE_SetTimerRepeatMode
 1944              	 .syntax unified
 1945              	 .code 16
 1946              	 .thumb_func
 1947              	 .fpu softvfp
 1949              	XMC_CCU4_SLICE_SetTimerRepeatMode:
 1950              	.LFB123:
 885:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 886:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to program timer repeat mode - Single shot vs repeat */
 887:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
 888:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1951              	 .loc 2 888 1
 1952              	 .cfi_startproc
 1953              	 
 1954              	 
 1955 0000 80B5     	 push {r7,lr}
 1956              	.LCFI75:
 1957              	 .cfi_def_cfa_offset 8
 1958              	 .cfi_offset 7,-8
 1959              	 .cfi_offset 14,-4
 1960 0002 82B0     	 sub sp,sp,#8
 1961              	.LCFI76:
 1962              	 .cfi_def_cfa_offset 16
 1963 0004 00AF     	 add r7,sp,#0
 1964              	.LCFI77:
 1965              	 .cfi_def_cfa_register 7
 1966 0006 7860     	 str r0,[r7,#4]
 1967 0008 0A00     	 movs r2,r1
 1968 000a FB1C     	 adds r3,r7,#3
 1969 000c 1A70     	 strb r2,[r3]
 889:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
 890:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode",
 891:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
 892:../Libraries/XMCLib/src/xmc_ccu4.c ****           (mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE)));
 893:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 894:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 1970              	 .loc 2 894 6
 1971 000e FB1C     	 adds r3,r7,#3
 1972 0010 1B78     	 ldrb r3,[r3]
 1973 0012 002B     	 cmp r3,#0
 1974 0014 07D1     	 bne .L67
 895:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 896:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
 1975              	 .loc 2 896 15
 1976 0016 7B68     	 ldr r3,[r7,#4]
 1977 0018 5B69     	 ldr r3,[r3,#20]
 1978 001a 0222     	 movs r2,#2
 1979 001c 9343     	 bics r3,r2
 1980 001e 1A00     	 movs r2,r3
 1981 0020 7B68     	 ldr r3,[r7,#4]
 1982 0022 5A61     	 str r2,[r3,#20]
 897:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 898:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 899:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 900:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
 901:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 902:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1983              	 .loc 2 902 1
 1984 0024 05E0     	 b .L69
 1985              	.L67:
 900:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 1986              	 .loc 2 900 15
 1987 0026 7B68     	 ldr r3,[r7,#4]
 1988 0028 5B69     	 ldr r3,[r3,#20]
 1989 002a 0222     	 movs r2,#2
 1990 002c 1A43     	 orrs r2,r3
 1991 002e 7B68     	 ldr r3,[r7,#4]
 1992 0030 5A61     	 str r2,[r3,#20]
 1993              	.L69:
 1994              	 .loc 2 902 1
 1995 0032 C046     	 nop
 1996 0034 BD46     	 mov sp,r7
 1997 0036 02B0     	 add sp,sp,#8
 1998              	 
 1999 0038 80BD     	 pop {r7,pc}
 2000              	 .cfi_endproc
 2001              	.LFE123:
 2003              	 .section .text.XMC_CCU4_SLICE_SetTimerCountingMode,"ax",%progbits
 2004              	 .align 1
 2005              	 .global XMC_CCU4_SLICE_SetTimerCountingMode
 2006              	 .syntax unified
 2007              	 .code 16
 2008              	 .thumb_func
 2009              	 .fpu softvfp
 2011              	XMC_CCU4_SLICE_SetTimerCountingMode:
 2012              	.LFB124:
 903:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 904:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Programs timer counting mode */
 905:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
 906:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2013              	 .loc 2 906 1
 2014              	 .cfi_startproc
 2015              	 
 2016              	 
 2017 0000 80B5     	 push {r7,lr}
 2018              	.LCFI78:
 2019              	 .cfi_def_cfa_offset 8
 2020              	 .cfi_offset 7,-8
 2021              	 .cfi_offset 14,-4
 2022 0002 82B0     	 sub sp,sp,#8
 2023              	.LCFI79:
 2024              	 .cfi_def_cfa_offset 16
 2025 0004 00AF     	 add r7,sp,#0
 2026              	.LCFI80:
 2027              	 .cfi_def_cfa_register 7
 2028 0006 7860     	 str r0,[r7,#4]
 2029 0008 0A00     	 movs r2,r1
 2030 000a FB1C     	 adds r3,r7,#3
 2031 000c 1A70     	 strb r2,[r3]
 907:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
 908:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLI
 909:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                                               (mode == XMC_CCU4_SLI
 910:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 911:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 2032              	 .loc 2 911 6
 2033 000e FB1C     	 adds r3,r7,#3
 2034 0010 1B78     	 ldrb r3,[r3]
 2035 0012 002B     	 cmp r3,#0
 2036 0014 07D1     	 bne .L71
 912:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 913:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 2037              	 .loc 2 913 15
 2038 0016 7B68     	 ldr r3,[r7,#4]
 2039 0018 5B69     	 ldr r3,[r3,#20]
 2040 001a 0122     	 movs r2,#1
 2041 001c 9343     	 bics r3,r2
 2042 001e 1A00     	 movs r2,r3
 2043 0020 7B68     	 ldr r3,[r7,#4]
 2044 0022 5A61     	 str r2,[r3,#20]
 914:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 915:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 916:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 917:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 918:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 919:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2045              	 .loc 2 919 1
 2046 0024 05E0     	 b .L73
 2047              	.L71:
 917:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 2048              	 .loc 2 917 15
 2049 0026 7B68     	 ldr r3,[r7,#4]
 2050 0028 5B69     	 ldr r3,[r3,#20]
 2051 002a 0122     	 movs r2,#1
 2052 002c 1A43     	 orrs r2,r3
 2053 002e 7B68     	 ldr r3,[r7,#4]
 2054 0030 5A61     	 str r2,[r3,#20]
 2055              	.L73:
 2056              	 .loc 2 919 1
 2057 0032 C046     	 nop
 2058 0034 BD46     	 mov sp,r7
 2059 0036 02B0     	 add sp,sp,#8
 2060              	 
 2061 0038 80BD     	 pop {r7,pc}
 2062              	 .cfi_endproc
 2063              	.LFE124:
 2065              	 .section .text.XMC_CCU4_SLICE_GetCaptureRegisterValue,"ax",%progbits
 2066              	 .align 1
 2067              	 .global XMC_CCU4_SLICE_GetCaptureRegisterValue
 2068              	 .syntax unified
 2069              	 .code 16
 2070              	 .thumb_func
 2071              	 .fpu softvfp
 2073              	XMC_CCU4_SLICE_GetCaptureRegisterValue:
 2074              	.LFB125:
 920:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 921:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Retrieves desired capture register value */
 922:../Libraries/XMCLib/src/xmc_ccu4.c **** uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t 
 923:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2075              	 .loc 2 923 1
 2076              	 .cfi_startproc
 2077              	 
 2078              	 
 2079 0000 80B5     	 push {r7,lr}
 2080              	.LCFI81:
 2081              	 .cfi_def_cfa_offset 8
 2082              	 .cfi_offset 7,-8
 2083              	 .cfi_offset 14,-4
 2084 0002 82B0     	 sub sp,sp,#8
 2085              	.LCFI82:
 2086              	 .cfi_def_cfa_offset 16
 2087 0004 00AF     	 add r7,sp,#0
 2088              	.LCFI83:
 2089              	 .cfi_def_cfa_register 7
 2090 0006 7860     	 str r0,[r7,#4]
 2091 0008 0A00     	 movs r2,r1
 2092 000a FB1C     	 adds r3,r7,#3
 2093 000c 1A70     	 strb r2,[r3]
 924:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
 925:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
 926:../Libraries/XMCLib/src/xmc_ccu4.c ****   return(slice->CV[reg_num]);
 2094              	 .loc 2 926 19
 2095 000e FB1C     	 adds r3,r7,#3
 2096 0010 1B78     	 ldrb r3,[r3]
 2097 0012 7A68     	 ldr r2,[r7,#4]
 2098 0014 1C33     	 adds r3,r3,#28
 2099 0016 9B00     	 lsls r3,r3,#2
 2100 0018 D318     	 adds r3,r2,r3
 2101 001a 0433     	 adds r3,r3,#4
 2102 001c 1B68     	 ldr r3,[r3]
 927:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2103              	 .loc 2 927 1
 2104 001e 1800     	 movs r0,r3
 2105 0020 BD46     	 mov sp,r7
 2106 0022 02B0     	 add sp,sp,#8
 2107              	 
 2108 0024 80BD     	 pop {r7,pc}
 2109              	 .cfi_endproc
 2110              	.LFE125:
 2112              	 .section .text.XMC_CCU4_SLICE_GetLastCapturedTimerValue,"ax",%progbits
 2113              	 .align 1
 2114              	 .global XMC_CCU4_SLICE_GetLastCapturedTimerValue
 2115              	 .syntax unified
 2116              	 .code 16
 2117              	 .thumb_func
 2118              	 .fpu softvfp
 2120              	XMC_CCU4_SLICE_GetLastCapturedTimerValue:
 2121              	.LFB126:
 928:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 929:../Libraries/XMCLib/src/xmc_ccu4.c **** /* @brief Retrieves the latest captured timer value */
 930:../Libraries/XMCLib/src/xmc_ccu4.c **** XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
 931:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                            const XMC_CCU4_SLICE_CAP_REG_SET_t set,
 932:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                            uint32_t *val_ptr)
 933:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2122              	 .loc 2 933 1
 2123              	 .cfi_startproc
 2124              	 
 2125              	 
 2126 0000 80B5     	 push {r7,lr}
 2127              	.LCFI84:
 2128              	 .cfi_def_cfa_offset 8
 2129              	 .cfi_offset 7,-8
 2130              	 .cfi_offset 14,-4
 2131 0002 86B0     	 sub sp,sp,#24
 2132              	.LCFI85:
 2133              	 .cfi_def_cfa_offset 32
 2134 0004 00AF     	 add r7,sp,#0
 2135              	.LCFI86:
 2136              	 .cfi_def_cfa_register 7
 2137 0006 F860     	 str r0,[r7,#12]
 2138 0008 7A60     	 str r2,[r7,#4]
 2139 000a 0B23     	 movs r3,#11
 2140 000c FB18     	 adds r3,r7,r3
 2141 000e 0A1C     	 adds r2,r1,#0
 2142 0010 1A70     	 strb r2,[r3]
 934:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_STATUS_t retval;
 935:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t i;
 936:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t start;
 937:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t end;
 938:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 939:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlic
 940:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Register Set", ((set == XMC_CCU4_SLI
 941:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                                                (set == XMC_CCU4_SLI
 942:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 943:../Libraries/XMCLib/src/xmc_ccu4.c ****   retval = XMC_CCU4_STATUS_ERROR;
 2143              	 .loc 2 943 10
 2144 0012 1723     	 movs r3,#23
 2145 0014 FB18     	 adds r3,r7,r3
 2146 0016 0122     	 movs r2,#1
 2147 0018 1A70     	 strb r2,[r3]
 944:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 945:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First check if extended capture mode is enabled */
 946:../Libraries/XMCLib/src/xmc_ccu4.c ****   if ((slice->TC) & CCU4_CC4_TC_ECM_Msk)
 2148              	 .loc 2 946 13
 2149 001a FB68     	 ldr r3,[r7,#12]
 2150 001c 5B69     	 ldr r3,[r3,#20]
 2151              	 .loc 2 946 19
 2152 001e 1022     	 movs r2,#16
 2153 0020 1340     	 ands r3,r2
 2154              	 .loc 2 946 6
 2155 0022 08D0     	 beq .L77
 947:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 948:../Libraries/XMCLib/src/xmc_ccu4.c ****     /* Extended capture mode has been enabled. So start with the lowest capture register and work y
 949:../Libraries/XMCLib/src/xmc_ccu4.c ****     start = 0U;
 2156              	 .loc 2 949 11
 2157 0024 1523     	 movs r3,#21
 2158 0026 FB18     	 adds r3,r7,r3
 2159 0028 0022     	 movs r2,#0
 2160 002a 1A70     	 strb r2,[r3]
 950:../Libraries/XMCLib/src/xmc_ccu4.c ****     end = XMC_CCU4_NUM_SLICES_PER_MODULE;
 2161              	 .loc 2 950 9
 2162 002c 1423     	 movs r3,#20
 2163 002e FB18     	 adds r3,r7,r3
 2164 0030 0422     	 movs r2,#4
 2165 0032 1A70     	 strb r2,[r3]
 2166 0034 15E0     	 b .L78
 2167              	.L77:
 951:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 952:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 953:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 954:../Libraries/XMCLib/src/xmc_ccu4.c ****     /* Extended capture mode is not enabled */
 955:../Libraries/XMCLib/src/xmc_ccu4.c ****     if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
 2168              	 .loc 2 955 8
 2169 0036 0B23     	 movs r3,#11
 2170 0038 FB18     	 adds r3,r7,r3
 2171 003a 1B78     	 ldrb r3,[r3]
 2172 003c 012B     	 cmp r3,#1
 2173 003e 08D1     	 bne .L79
 956:../Libraries/XMCLib/src/xmc_ccu4.c ****     {
 957:../Libraries/XMCLib/src/xmc_ccu4.c ****       start = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 2174              	 .loc 2 957 13
 2175 0040 1523     	 movs r3,#21
 2176 0042 FB18     	 adds r3,r7,r3
 2177 0044 0222     	 movs r2,#2
 2178 0046 1A70     	 strb r2,[r3]
 958:../Libraries/XMCLib/src/xmc_ccu4.c ****       end   = (uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE;
 2179              	 .loc 2 958 13
 2180 0048 1423     	 movs r3,#20
 2181 004a FB18     	 adds r3,r7,r3
 2182 004c 0422     	 movs r2,#4
 2183 004e 1A70     	 strb r2,[r3]
 2184 0050 07E0     	 b .L78
 2185              	.L79:
 959:../Libraries/XMCLib/src/xmc_ccu4.c ****     }
 960:../Libraries/XMCLib/src/xmc_ccu4.c ****     else
 961:../Libraries/XMCLib/src/xmc_ccu4.c ****     {
 962:../Libraries/XMCLib/src/xmc_ccu4.c ****       start = 0U;
 2186              	 .loc 2 962 13
 2187 0052 1523     	 movs r3,#21
 2188 0054 FB18     	 adds r3,r7,r3
 2189 0056 0022     	 movs r2,#0
 2190 0058 1A70     	 strb r2,[r3]
 963:../Libraries/XMCLib/src/xmc_ccu4.c ****       end = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 2191              	 .loc 2 963 11
 2192 005a 1423     	 movs r3,#20
 2193 005c FB18     	 adds r3,r7,r3
 2194 005e 0222     	 movs r2,#2
 2195 0060 1A70     	 strb r2,[r3]
 2196              	.L78:
 964:../Libraries/XMCLib/src/xmc_ccu4.c ****     }
 965:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 966:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 967:../Libraries/XMCLib/src/xmc_ccu4.c ****   for(i=start; i < end; i++)
 2197              	 .loc 2 967 8
 2198 0062 1623     	 movs r3,#22
 2199 0064 FB18     	 adds r3,r7,r3
 2200 0066 1522     	 movs r2,#21
 2201 0068 BA18     	 adds r2,r7,r2
 2202 006a 1278     	 ldrb r2,[r2]
 2203 006c 1A70     	 strb r2,[r3]
 2204              	 .loc 2 967 3
 2205 006e 21E0     	 b .L80
 2206              	.L83:
 968:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 969:../Libraries/XMCLib/src/xmc_ccu4.c ****     if ( (slice->CV[i]) & CCU4_CC4_CV_FFL_Msk )
 2207              	 .loc 2 969 20
 2208 0070 1621     	 movs r1,#22
 2209 0072 7B18     	 adds r3,r7,r1
 2210 0074 1B78     	 ldrb r3,[r3]
 2211 0076 FA68     	 ldr r2,[r7,#12]
 2212 0078 1C33     	 adds r3,r3,#28
 2213 007a 9B00     	 lsls r3,r3,#2
 2214 007c D318     	 adds r3,r2,r3
 2215 007e 0433     	 adds r3,r3,#4
 2216 0080 1A68     	 ldr r2,[r3]
 2217              	 .loc 2 969 25
 2218 0082 8023     	 movs r3,#128
 2219 0084 5B03     	 lsls r3,r3,#13
 2220 0086 1340     	 ands r3,r2
 2221              	 .loc 2 969 8
 2222 0088 0ED0     	 beq .L81
 970:../Libraries/XMCLib/src/xmc_ccu4.c ****     {
 971:../Libraries/XMCLib/src/xmc_ccu4.c ****       *val_ptr = slice->CV[i];
 2223              	 .loc 2 971 27
 2224 008a 7B18     	 adds r3,r7,r1
 2225 008c 1B78     	 ldrb r3,[r3]
 2226 008e FA68     	 ldr r2,[r7,#12]
 2227 0090 1C33     	 adds r3,r3,#28
 2228 0092 9B00     	 lsls r3,r3,#2
 2229 0094 D318     	 adds r3,r2,r3
 2230 0096 0433     	 adds r3,r3,#4
 2231 0098 1A68     	 ldr r2,[r3]
 2232              	 .loc 2 971 16
 2233 009a 7B68     	 ldr r3,[r7,#4]
 2234 009c 1A60     	 str r2,[r3]
 972:../Libraries/XMCLib/src/xmc_ccu4.c ****       retval = XMC_CCU4_STATUS_OK;
 2235              	 .loc 2 972 14
 2236 009e 1723     	 movs r3,#23
 2237 00a0 FB18     	 adds r3,r7,r3
 2238 00a2 0022     	 movs r2,#0
 2239 00a4 1A70     	 strb r2,[r3]
 973:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2240              	 .loc 2 973 7
 2241 00a6 0DE0     	 b .L82
 2242              	.L81:
 967:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 2243              	 .loc 2 967 26 discriminator 2
 2244 00a8 1621     	 movs r1,#22
 2245 00aa 7B18     	 adds r3,r7,r1
 2246 00ac 1A78     	 ldrb r2,[r3]
 2247 00ae 7B18     	 adds r3,r7,r1
 2248 00b0 0132     	 adds r2,r2,#1
 2249 00b2 1A70     	 strb r2,[r3]
 2250              	.L80:
 967:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 2251              	 .loc 2 967 3 discriminator 1
 2252 00b4 1623     	 movs r3,#22
 2253 00b6 FA18     	 adds r2,r7,r3
 2254 00b8 1423     	 movs r3,#20
 2255 00ba FB18     	 adds r3,r7,r3
 2256 00bc 1278     	 ldrb r2,[r2]
 2257 00be 1B78     	 ldrb r3,[r3]
 2258 00c0 9A42     	 cmp r2,r3
 2259 00c2 D5D3     	 bcc .L83
 2260              	.L82:
 974:../Libraries/XMCLib/src/xmc_ccu4.c ****     }
 975:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 976:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 977:../Libraries/XMCLib/src/xmc_ccu4.c ****   return retval;
 2261              	 .loc 2 977 10
 2262 00c4 1723     	 movs r3,#23
 2263 00c6 FB18     	 adds r3,r7,r3
 2264 00c8 1B78     	 ldrb r3,[r3]
 978:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2265              	 .loc 2 978 1
 2266 00ca 1800     	 movs r0,r3
 2267 00cc BD46     	 mov sp,r7
 2268 00ce 06B0     	 add sp,sp,#24
 2269              	 
 2270 00d0 80BD     	 pop {r7,pc}
 2271              	 .cfi_endproc
 2272              	.LFE126:
 2274              	 .section .text.XMC_CCU4_SLICE_GetCapturedValueFromFifo,"ax",%progbits
 2275              	 .align 1
 2276              	 .global XMC_CCU4_SLICE_GetCapturedValueFromFifo
 2277              	 .syntax unified
 2278              	 .code 16
 2279              	 .thumb_func
 2280              	 .fpu softvfp
 2282              	XMC_CCU4_SLICE_GetCapturedValueFromFifo:
 2283              	.LFB127:
 979:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 980:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Retrieves timer capture value from a FIFO made of capture registers */
 981:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V1) /* Defined for XMC4500, XMC400, XMC4200, XMC4100 devices only */
 982:../Libraries/XMCLib/src/xmc_ccu4.c **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
 983:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 984:../Libraries/XMCLib/src/xmc_ccu4.c ****   int32_t   cap;
 985:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t  extracted_slice;
 986:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 987:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidModule(modu
 988:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 989:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First read the global fifo register */
 990:../Libraries/XMCLib/src/xmc_ccu4.c ****   cap = (int32_t) module->ECRD;
 991:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 992:../Libraries/XMCLib/src/xmc_ccu4.c ****   extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU4_ECRD_SPTR_Msk)) >> CCU4_ECRD_SPTR_Pos;
 993:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 994:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Return captured result only if it were applicable to this slice */
 995:../Libraries/XMCLib/src/xmc_ccu4.c ****   if(extracted_slice != ((uint32_t)slice_number))
 996:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 997:../Libraries/XMCLib/src/xmc_ccu4.c ****     cap = -1;
 998:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 999:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1000:../Libraries/XMCLib/src/xmc_ccu4.c ****   return (cap);
1001:../Libraries/XMCLib/src/xmc_ccu4.c **** }
1002:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
1003:../Libraries/XMCLib/src/xmc_ccu4.c **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1004:../Libraries/XMCLib/src/xmc_ccu4.c ****                                              const XMC_CCU4_SLICE_CAP_REG_SET_t set)
1005:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2284              	 .loc 2 1005 1
 2285              	 .cfi_startproc
 2286              	 
 2287              	 
 2288 0000 80B5     	 push {r7,lr}
 2289              	.LCFI87:
 2290              	 .cfi_def_cfa_offset 8
 2291              	 .cfi_offset 7,-8
 2292              	 .cfi_offset 14,-4
 2293 0002 84B0     	 sub sp,sp,#16
 2294              	.LCFI88:
 2295              	 .cfi_def_cfa_offset 24
 2296 0004 00AF     	 add r7,sp,#0
 2297              	.LCFI89:
 2298              	 .cfi_def_cfa_register 7
 2299 0006 7860     	 str r0,[r7,#4]
 2300 0008 0A00     	 movs r2,r1
 2301 000a FB1C     	 adds r3,r7,#3
 2302 000c 1A70     	 strb r2,[r3]
1006:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cap;
1007:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1008:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidSlice
1009:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCapturedValueFromFifo:Invalid Register Set", 
1010:../Libraries/XMCLib/src/xmc_ccu4.c ****       ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) ||\
1011:../Libraries/XMCLib/src/xmc_ccu4.c ****        (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));
1012:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1013:../Libraries/XMCLib/src/xmc_ccu4.c ****   if(XMC_CCU4_SLICE_CAP_REG_SET_LOW == set)
 2303              	 .loc 2 1013 5
 2304 000e FB1C     	 adds r3,r7,#3
 2305 0010 1B78     	 ldrb r3,[r3]
 2306 0012 002B     	 cmp r3,#0
 2307 0014 04D1     	 bne .L86
1014:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1015:../Libraries/XMCLib/src/xmc_ccu4.c ****     cap = slice->ECRD0;
 2308              	 .loc 2 1015 9
 2309 0016 7B68     	 ldr r3,[r7,#4]
 2310 0018 B822     	 movs r2,#184
 2311 001a 9B58     	 ldr r3,[r3,r2]
 2312 001c FB60     	 str r3,[r7,#12]
 2313 001e 03E0     	 b .L87
 2314              	.L86:
1016:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1017:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
1018:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1019:../Libraries/XMCLib/src/xmc_ccu4.c ****     cap = slice->ECRD1;
 2315              	 .loc 2 1019 9
 2316 0020 7B68     	 ldr r3,[r7,#4]
 2317 0022 BC22     	 movs r2,#188
 2318 0024 9B58     	 ldr r3,[r3,r2]
 2319 0026 FB60     	 str r3,[r7,#12]
 2320              	.L87:
1020:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1021:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1022:../Libraries/XMCLib/src/xmc_ccu4.c ****   return cap;
 2321              	 .loc 2 1022 10
 2322 0028 FB68     	 ldr r3,[r7,#12]
1023:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2323              	 .loc 2 1023 1
 2324 002a 1800     	 movs r0,r3
 2325 002c BD46     	 mov sp,r7
 2326 002e 04B0     	 add sp,sp,#16
 2327              	 
 2328 0030 80BD     	 pop {r7,pc}
 2329              	 .cfi_endproc
 2330              	.LFE127:
 2332              	 .section .text.XMC_CCU4_SLICE_EnableDithering,"ax",%progbits
 2333              	 .align 1
 2334              	 .global XMC_CCU4_SLICE_EnableDithering
 2335              	 .syntax unified
 2336              	 .code 16
 2337              	 .thumb_func
 2338              	 .fpu softvfp
 2340              	XMC_CCU4_SLICE_EnableDithering:
 2341              	.LFB128:
1024:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
1025:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1026:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Enables PWM dithering feature */
1027:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
1028:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const bool period_dither,
1029:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const bool duty_dither,
1030:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const uint8_t spread)
1031:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2342              	 .loc 2 1031 1
 2343              	 .cfi_startproc
 2344              	 
 2345              	 
 2346 0000 90B5     	 push {r4,r7,lr}
 2347              	.LCFI90:
 2348              	 .cfi_def_cfa_offset 12
 2349              	 .cfi_offset 4,-12
 2350              	 .cfi_offset 7,-8
 2351              	 .cfi_offset 14,-4
 2352 0002 85B0     	 sub sp,sp,#20
 2353              	.LCFI91:
 2354              	 .cfi_def_cfa_offset 32
 2355 0004 00AF     	 add r7,sp,#0
 2356              	.LCFI92:
 2357              	 .cfi_def_cfa_register 7
 2358 0006 7860     	 str r0,[r7,#4]
 2359 0008 0C00     	 movs r4,r1
 2360 000a 1000     	 movs r0,r2
 2361 000c 1900     	 movs r1,r3
 2362 000e FB1C     	 adds r3,r7,#3
 2363 0010 221C     	 adds r2,r4,#0
 2364 0012 1A70     	 strb r2,[r3]
 2365 0014 BB1C     	 adds r3,r7,#2
 2366 0016 021C     	 adds r2,r0,#0
 2367 0018 1A70     	 strb r2,[r3]
 2368 001a 7B1C     	 adds r3,r7,#1
 2369 001c 0A1C     	 adds r2,r1,#0
 2370 001e 1A70     	 strb r2,[r3]
1032:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
1033:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1034:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1035:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1036:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc = slice->TC;
 2371              	 .loc 2 1036 6
 2372 0020 7B68     	 ldr r3,[r7,#4]
 2373 0022 5B69     	 ldr r3,[r3,#20]
 2374 0024 FB60     	 str r3,[r7,#12]
1037:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
 2375              	 .loc 2 1037 6
 2376 0026 FB68     	 ldr r3,[r7,#12]
 2377 0028 114A     	 ldr r2,.L92
 2378 002a 1340     	 ands r3,r2
 2379 002c FB60     	 str r3,[r7,#12]
1038:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1039:../Libraries/XMCLib/src/xmc_ccu4.c ****   if ((bool) true == period_dither)
 2380              	 .loc 2 1039 6
 2381 002e FB1C     	 adds r3,r7,#3
 2382 0030 1B78     	 ldrb r3,[r3]
 2383 0032 002B     	 cmp r3,#0
 2384 0034 04D0     	 beq .L90
1040:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1041:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_PERIOD_MASK) << CCU4_CC4_TC_DITHE_Pos);
 2385              	 .loc 2 1041 8
 2386 0036 FB68     	 ldr r3,[r7,#12]
 2387 0038 8022     	 movs r2,#128
 2388 003a 9201     	 lsls r2,r2,#6
 2389 003c 1343     	 orrs r3,r2
 2390 003e FB60     	 str r3,[r7,#12]
 2391              	.L90:
1042:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1043:../Libraries/XMCLib/src/xmc_ccu4.c ****   if ((bool) true == duty_dither)
 2392              	 .loc 2 1043 6
 2393 0040 BB1C     	 adds r3,r7,#2
 2394 0042 1B78     	 ldrb r3,[r3]
 2395 0044 002B     	 cmp r3,#0
 2396 0046 04D0     	 beq .L91
1044:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1045:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK) << CCU4_CC4_TC_DITHE_Pos);
 2397              	 .loc 2 1045 8
 2398 0048 FB68     	 ldr r3,[r7,#12]
 2399 004a 8022     	 movs r2,#128
 2400 004c D201     	 lsls r2,r2,#7
 2401 004e 1343     	 orrs r3,r2
 2402 0050 FB60     	 str r3,[r7,#12]
 2403              	.L91:
1046:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1047:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1048:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 2404              	 .loc 2 1048 13
 2405 0052 7B68     	 ldr r3,[r7,#4]
 2406 0054 FA68     	 ldr r2,[r7,#12]
 2407 0056 5A61     	 str r2,[r3,#20]
1049:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1050:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
 2408              	 .loc 2 1050 3
 2409 0058 7B1C     	 adds r3,r7,#1
 2410 005a 1A78     	 ldrb r2,[r3]
 2411 005c 7B68     	 ldr r3,[r7,#4]
 2412 005e 1100     	 movs r1,r2
 2413 0060 1800     	 movs r0,r3
 2414 0062 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetDitherCompareValue
1051:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2415              	 .loc 2 1051 1
 2416 0066 C046     	 nop
 2417 0068 BD46     	 mov sp,r7
 2418 006a 05B0     	 add sp,sp,#20
 2419              	 
 2420 006c 90BD     	 pop {r4,r7,pc}
 2421              	.L93:
 2422 006e C046     	 .align 2
 2423              	.L92:
 2424 0070 FF9FFFFF 	 .word -24577
 2425              	 .cfi_endproc
 2426              	.LFE128:
 2428              	 .section .text.XMC_CCU4_SLICE_SetPrescaler,"ax",%progbits
 2429              	 .align 1
 2430              	 .global XMC_CCU4_SLICE_SetPrescaler
 2431              	 .syntax unified
 2432              	 .code 16
 2433              	 .thumb_func
 2434              	 .fpu softvfp
 2436              	XMC_CCU4_SLICE_SetPrescaler:
 2437              	.LFB129:
1052:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1053:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Programs Pre-scalar divider  */
1054:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t di
1055:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2438              	 .loc 2 1055 1
 2439              	 .cfi_startproc
 2440              	 
 2441              	 
 2442 0000 80B5     	 push {r7,lr}
 2443              	.LCFI93:
 2444              	 .cfi_def_cfa_offset 8
 2445              	 .cfi_offset 7,-8
 2446              	 .cfi_offset 14,-4
 2447 0002 84B0     	 sub sp,sp,#16
 2448              	.LCFI94:
 2449              	 .cfi_def_cfa_offset 24
 2450 0004 00AF     	 add r7,sp,#0
 2451              	.LCFI95:
 2452              	 .cfi_def_cfa_register 7
 2453 0006 7860     	 str r0,[r7,#4]
 2454 0008 0A00     	 movs r2,r1
 2455 000a FB1C     	 adds r3,r7,#3
 2456 000c 1A70     	 strb r2,[r3]
1056:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t fpc;
1057:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1058:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1059:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1060:../Libraries/XMCLib/src/xmc_ccu4.c ****   fpc = slice->FPC;
 2457              	 .loc 2 1060 7
 2458 000e 7B68     	 ldr r3,[r7,#4]
 2459 0010 9B6A     	 ldr r3,[r3,#40]
 2460 0012 FB60     	 str r3,[r7,#12]
1061:../Libraries/XMCLib/src/xmc_ccu4.c ****   fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 2461              	 .loc 2 1061 7
 2462 0014 FB68     	 ldr r3,[r7,#12]
 2463 0016 0A4A     	 ldr r2,.L95
 2464 0018 1340     	 ands r3,r2
 2465 001a FB60     	 str r3,[r7,#12]
1062:../Libraries/XMCLib/src/xmc_ccu4.c ****   fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 2466              	 .loc 2 1062 11
 2467 001c FB1C     	 adds r3,r7,#3
 2468 001e 1B78     	 ldrb r3,[r3]
 2469              	 .loc 2 1062 31
 2470 0020 1B02     	 lsls r3,r3,#8
 2471              	 .loc 2 1062 7
 2472 0022 FA68     	 ldr r2,[r7,#12]
 2473 0024 1343     	 orrs r3,r2
 2474 0026 FB60     	 str r3,[r7,#12]
1063:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->FPC = fpc;
 2475              	 .loc 2 1063 14
 2476 0028 7B68     	 ldr r3,[r7,#4]
 2477 002a FA68     	 ldr r2,[r7,#12]
 2478 002c 9A62     	 str r2,[r3,#40]
1064:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* 
1065:../Libraries/XMCLib/src/xmc_ccu4.c ****    * In any case, update the initial value of the divider which is to be loaded once the prescaler 
1066:../Libraries/XMCLib/src/xmc_ccu4.c ****    * compare value.
1067:../Libraries/XMCLib/src/xmc_ccu4.c ****    */
1068:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSC = (uint32_t) div_val;
 2479              	 .loc 2 1068 16
 2480 002e FB1C     	 adds r3,r7,#3
 2481 0030 1A78     	 ldrb r2,[r3]
 2482              	 .loc 2 1068 14
 2483 0032 7B68     	 ldr r3,[r7,#4]
 2484 0034 5A62     	 str r2,[r3,#36]
1069:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2485              	 .loc 2 1069 1
 2486 0036 C046     	 nop
 2487 0038 BD46     	 mov sp,r7
 2488 003a 04B0     	 add sp,sp,#16
 2489              	 
 2490 003c 80BD     	 pop {r7,pc}
 2491              	.L96:
 2492 003e C046     	 .align 2
 2493              	.L95:
 2494 0040 FFF0FFFF 	 .word -3841
 2495              	 .cfi_endproc
 2496              	.LFE129:
 2498              	 .section .text.XMC_CCU4_SLICE_SetInterruptNode,"ax",%progbits
 2499              	 .align 1
 2500              	 .global XMC_CCU4_SLICE_SetInterruptNode
 2501              	 .syntax unified
 2502              	 .code 16
 2503              	 .thumb_func
 2504              	 .fpu softvfp
 2506              	XMC_CCU4_SLICE_SetInterruptNode:
 2507              	.LFB130:
1070:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1071:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Binds a capcom event to an NVIC node  */
1072:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
1073:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_IRQ_ID_t event,
1074:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_SR_ID_t sr)
1075:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2508              	 .loc 2 1075 1
 2509              	 .cfi_startproc
 2510              	 
 2511              	 
 2512 0000 80B5     	 push {r7,lr}
 2513              	.LCFI96:
 2514              	 .cfi_def_cfa_offset 8
 2515              	 .cfi_offset 7,-8
 2516              	 .cfi_offset 14,-4
 2517 0002 86B0     	 sub sp,sp,#24
 2518              	.LCFI97:
 2519              	 .cfi_def_cfa_offset 32
 2520 0004 00AF     	 add r7,sp,#0
 2521              	.LCFI98:
 2522              	 .cfi_def_cfa_register 7
 2523 0006 7860     	 str r0,[r7,#4]
 2524 0008 0800     	 movs r0,r1
 2525 000a 1100     	 movs r1,r2
 2526 000c FB1C     	 adds r3,r7,#3
 2527 000e 021C     	 adds r2,r0,#0
 2528 0010 1A70     	 strb r2,[r3]
 2529 0012 BB1C     	 adds r3,r7,#2
 2530 0014 0A1C     	 adds r2,r1,#0
 2531 0016 1A70     	 strb r2,[r3]
1076:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t srs;
1077:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t pos;
1078:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t mask;
1079:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1080:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
1081:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
1082:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event)
1083:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1084:../Libraries/XMCLib/src/xmc_ccu4.c ****   srs = slice->SRS;
 2532              	 .loc 2 1084 7
 2533 0018 7B68     	 ldr r3,[r7,#4]
 2534 001a A822     	 movs r2,#168
 2535 001c 9B58     	 ldr r3,[r3,r2]
 2536 001e FB60     	 str r3,[r7,#12]
1085:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1086:../Libraries/XMCLib/src/xmc_ccu4.c ****   switch(event)
 2537              	 .loc 2 1086 3
 2538 0020 FB1C     	 adds r3,r7,#3
 2539 0022 1B78     	 ldrb r3,[r3]
 2540 0024 092B     	 cmp r3,#9
 2541 0026 1CD0     	 beq .L98
 2542 0028 21DC     	 bgt .L99
 2543 002a 082B     	 cmp r3,#8
 2544 002c 13D0     	 beq .L100
 2545 002e 1EDC     	 bgt .L99
 2546 0030 012B     	 cmp r3,#1
 2547 0032 02DC     	 bgt .L101
 2548 0034 002B     	 cmp r3,#0
 2549 0036 04DA     	 bge .L102
 2550 0038 19E0     	 b .L99
 2551              	.L101:
 2552 003a 023B     	 subs r3,r3,#2
 2553 003c 012B     	 cmp r3,#1
 2554 003e 16D8     	 bhi .L99
 2555 0040 04E0     	 b .L105
 2556              	.L102:
1087:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1088:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
1089:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
1090:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 2557              	 .loc 2 1090 12
 2558 0042 0323     	 movs r3,#3
 2559 0044 3B61     	 str r3,[r7,#16]
1091:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_POSR_Pos;
 2560              	 .loc 2 1091 12
 2561 0046 0023     	 movs r3,#0
 2562 0048 7B61     	 str r3,[r7,#20]
1092:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2563              	 .loc 2 1092 7
 2564 004a 16E0     	 b .L104
 2565              	.L105:
1093:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1094:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
1095:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
1096:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 2566              	 .loc 2 1096 12
 2567 004c 0C23     	 movs r3,#12
 2568 004e 3B61     	 str r3,[r7,#16]
1097:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_CMSR_Pos;
 2569              	 .loc 2 1097 12
 2570 0050 0223     	 movs r3,#2
 2571 0052 7B61     	 str r3,[r7,#20]
1098:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2572              	 .loc 2 1098 7
 2573 0054 11E0     	 b .L104
 2574              	.L100:
1099:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1100:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
1101:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 2575              	 .loc 2 1101 12
 2576 0056 C023     	 movs r3,#192
 2577 0058 9B00     	 lsls r3,r3,#2
 2578 005a 3B61     	 str r3,[r7,#16]
1102:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_E0SR_Pos;
 2579              	 .loc 2 1102 12
 2580 005c 0823     	 movs r3,#8
 2581 005e 7B61     	 str r3,[r7,#20]
1103:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2582              	 .loc 2 1103 7
 2583 0060 0BE0     	 b .L104
 2584              	.L98:
1104:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1105:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
1106:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 2585              	 .loc 2 1106 12
 2586 0062 C023     	 movs r3,#192
 2587 0064 1B01     	 lsls r3,r3,#4
 2588 0066 3B61     	 str r3,[r7,#16]
1107:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_E1SR_Pos;
 2589              	 .loc 2 1107 12
 2590 0068 0A23     	 movs r3,#10
 2591 006a 7B61     	 str r3,[r7,#20]
1108:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2592              	 .loc 2 1108 7
 2593 006c 05E0     	 b .L104
 2594              	.L99:
1109:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1110:../Libraries/XMCLib/src/xmc_ccu4.c ****     default:
1111:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 2595              	 .loc 2 1111 12
 2596 006e C023     	 movs r3,#192
 2597 0070 9B01     	 lsls r3,r3,#6
 2598 0072 3B61     	 str r3,[r7,#16]
1112:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_E2SR_Pos;
 2599              	 .loc 2 1112 12
 2600 0074 0C23     	 movs r3,#12
 2601 0076 7B61     	 str r3,[r7,#20]
1113:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2602              	 .loc 2 1113 7
 2603 0078 C046     	 nop
 2604              	.L104:
1114:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1115:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1116:../Libraries/XMCLib/src/xmc_ccu4.c ****   srs &= ~mask; 
 2605              	 .loc 2 1116 10
 2606 007a 3B69     	 ldr r3,[r7,#16]
 2607 007c DA43     	 mvns r2,r3
 2608              	 .loc 2 1116 7
 2609 007e FB68     	 ldr r3,[r7,#12]
 2610 0080 1340     	 ands r3,r2
 2611 0082 FB60     	 str r3,[r7,#12]
1117:../Libraries/XMCLib/src/xmc_ccu4.c ****   srs |= (uint32_t)sr << pos;
 2612              	 .loc 2 1117 10
 2613 0084 BB1C     	 adds r3,r7,#2
 2614 0086 1A78     	 ldrb r2,[r3]
 2615              	 .loc 2 1117 23
 2616 0088 7B69     	 ldr r3,[r7,#20]
 2617 008a 9A40     	 lsls r2,r2,r3
 2618 008c 1300     	 movs r3,r2
 2619              	 .loc 2 1117 7
 2620 008e FA68     	 ldr r2,[r7,#12]
 2621 0090 1343     	 orrs r3,r2
 2622 0092 FB60     	 str r3,[r7,#12]
1118:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->SRS = srs;
 2623              	 .loc 2 1118 14
 2624 0094 7B68     	 ldr r3,[r7,#4]
 2625 0096 A821     	 movs r1,#168
 2626 0098 FA68     	 ldr r2,[r7,#12]
 2627 009a 5A50     	 str r2,[r3,r1]
1119:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2628              	 .loc 2 1119 1
 2629 009c C046     	 nop
 2630 009e BD46     	 mov sp,r7
 2631 00a0 06B0     	 add sp,sp,#24
 2632              	 
 2633 00a2 80BD     	 pop {r7,pc}
 2634              	 .cfi_endproc
 2635              	.LFE130:
 2637              	 .section .text.XMC_CCU4_SLICE_SetPassiveLevel,"ax",%progbits
 2638              	 .align 1
 2639              	 .global XMC_CCU4_SLICE_SetPassiveLevel
 2640              	 .syntax unified
 2641              	 .code 16
 2642              	 .thumb_func
 2643              	 .fpu softvfp
 2645              	XMC_CCU4_SLICE_SetPassiveLevel:
 2646              	.LFB131:
1120:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1121:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Asserts passive level for the slice output */
1122:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetPassiveLevel(XMC_CCU4_SLICE_t *const slice,
1123:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
1124:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2647              	 .loc 2 1124 1
 2648              	 .cfi_startproc
 2649              	 
 2650              	 
 2651 0000 80B5     	 push {r7,lr}
 2652              	.LCFI99:
 2653              	 .cfi_def_cfa_offset 8
 2654              	 .cfi_offset 7,-8
 2655              	 .cfi_offset 14,-4
 2656 0002 84B0     	 sub sp,sp,#16
 2657              	.LCFI100:
 2658              	 .cfi_def_cfa_offset 24
 2659 0004 00AF     	 add r7,sp,#0
 2660              	.LCFI101:
 2661              	 .cfi_def_cfa_register 7
 2662 0006 7860     	 str r0,[r7,#4]
 2663 0008 0A00     	 movs r2,r1
 2664 000a FB1C     	 adds r3,r7,#3
 2665 000c 1A70     	 strb r2,[r3]
1125:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t psl; 
1126:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1127:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1128:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Passive level", ((level == XMC_CCU4_SLICE_OUTP
1129:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                                       (level == XMC_CCU4_SLICE_OUTP
1130:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1131:../Libraries/XMCLib/src/xmc_ccu4.c ****   psl = slice->PSL;
 2666              	 .loc 2 1131 7
 2667 000e 7B68     	 ldr r3,[r7,#4]
 2668 0010 9B69     	 ldr r3,[r3,#24]
 2669 0012 FB60     	 str r3,[r7,#12]
1132:../Libraries/XMCLib/src/xmc_ccu4.c ****   psl &= ~((uint32_t) CCU4_CC4_PSL_PSL_Msk);
 2670              	 .loc 2 1132 7
 2671 0014 FB68     	 ldr r3,[r7,#12]
 2672 0016 0122     	 movs r2,#1
 2673 0018 9343     	 bics r3,r2
 2674 001a FB60     	 str r3,[r7,#12]
1133:../Libraries/XMCLib/src/xmc_ccu4.c ****   psl |= (uint32_t) level;
 2675              	 .loc 2 1133 10
 2676 001c FB1C     	 adds r3,r7,#3
 2677 001e 1B78     	 ldrb r3,[r3]
 2678              	 .loc 2 1133 7
 2679 0020 FA68     	 ldr r2,[r7,#12]
 2680 0022 1343     	 orrs r3,r2
 2681 0024 FB60     	 str r3,[r7,#12]
1134:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1135:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program CC4 slice output passive level */
1136:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSL = psl;
 2682              	 .loc 2 1136 14
 2683 0026 7B68     	 ldr r3,[r7,#4]
 2684 0028 FA68     	 ldr r2,[r7,#12]
 2685 002a 9A61     	 str r2,[r3,#24]
1137:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2686              	 .loc 2 1137 1
 2687 002c C046     	 nop
 2688 002e BD46     	 mov sp,r7
 2689 0030 04B0     	 add sp,sp,#16
 2690              	 
 2691 0032 80BD     	 pop {r7,pc}
 2692              	 .cfi_endproc
 2693              	.LFE131:
 2695              	 .text
 2696              	.Letext0:
 2697              	 .file 3 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
 2698              	 .file 4 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2699              	 .file 5 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/lock.h"
 2700              	 .file 6 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h"
 2701              	 .file 7 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 2702              	 .file 8 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h"
 2703              	 .file 9 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
 2704              	 .file 10 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 2705              	 .file 11 "..//Libraries/XMCLib/inc/xmc1_scu.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 xmc_ccu4.c
    {standard input}:16     .text.XMC_CCU4_StartPrescaler:0000000000000000 $t
    {standard input}:23     .text.XMC_CCU4_StartPrescaler:0000000000000000 XMC_CCU4_StartPrescaler
    {standard input}:60     .text.XMC_CCU4_SLICE_SetDitherCompareValue:0000000000000000 $t
    {standard input}:66     .text.XMC_CCU4_SLICE_SetDitherCompareValue:0000000000000000 XMC_CCU4_SLICE_SetDitherCompareValue
    {standard input}:102    .text.XMC_CCU4_lGateClock:0000000000000000 $t
    {standard input}:108    .text.XMC_CCU4_lGateClock:0000000000000000 XMC_CCU4_lGateClock
    {standard input}:145    .text.XMC_CCU4_lGateClock:0000000000000020 $d
    {standard input}:150    .text.XMC_CCU4_lUngateClock:0000000000000000 $t
    {standard input}:156    .text.XMC_CCU4_lUngateClock:0000000000000000 XMC_CCU4_lUngateClock
    {standard input}:192    .text.XMC_CCU4_lUngateClock:0000000000000020 $d
    {standard input}:197    .text.XMC_CCU4_EnableModule:0000000000000000 $t
    {standard input}:204    .text.XMC_CCU4_EnableModule:0000000000000000 XMC_CCU4_EnableModule
    {standard input}:236    .text.XMC_CCU4_DisableModule:0000000000000000 $t
    {standard input}:243    .text.XMC_CCU4_DisableModule:0000000000000000 XMC_CCU4_DisableModule
    {standard input}:275    .text.XMC_CCU4_Init:0000000000000000 $t
    {standard input}:282    .text.XMC_CCU4_Init:0000000000000000 XMC_CCU4_Init
    {standard input}:342    .text.XMC_CCU4_Init:0000000000000048 $d
    {standard input}:347    .text.XMC_CCU4_SetModuleClock:0000000000000000 $t
    {standard input}:354    .text.XMC_CCU4_SetModuleClock:0000000000000000 XMC_CCU4_SetModuleClock
    {standard input}:407    .text.XMC_CCU4_SetMultiChannelShadowTransferMode:0000000000000000 $t
    {standard input}:414    .text.XMC_CCU4_SetMultiChannelShadowTransferMode:0000000000000000 XMC_CCU4_SetMultiChannelShadowTransferMode
    {standard input}:468    .text.XMC_CCU4_SLICE_CompareInit:0000000000000000 $t
    {standard input}:475    .text.XMC_CCU4_SLICE_CompareInit:0000000000000000 XMC_CCU4_SLICE_CompareInit
    {standard input}:565    .text.XMC_CCU4_SLICE_CaptureInit:0000000000000000 $t
    {standard input}:572    .text.XMC_CCU4_SLICE_CaptureInit:0000000000000000 XMC_CCU4_SLICE_CaptureInit
    {standard input}:640    .text.XMC_CCU4_SLICE_StartConfig:0000000000000000 $t
    {standard input}:647    .text.XMC_CCU4_SLICE_StartConfig:0000000000000000 XMC_CCU4_SLICE_StartConfig
    {standard input}:729    .text.XMC_CCU4_SLICE_StartConfig:0000000000000068 $d
    {standard input}:734    .text.XMC_CCU4_SLICE_StopConfig:0000000000000000 $t
    {standard input}:741    .text.XMC_CCU4_SLICE_StopConfig:0000000000000000 XMC_CCU4_SLICE_StopConfig
    {standard input}:820    .text.XMC_CCU4_SLICE_StopConfig:0000000000000060 $d
    {standard input}:825    .text.XMC_CCU4_SLICE_LoadConfig:0000000000000000 $t
    {standard input}:832    .text.XMC_CCU4_SLICE_LoadConfig:0000000000000000 XMC_CCU4_SLICE_LoadConfig
    {standard input}:884    .text.XMC_CCU4_SLICE_LoadConfig:0000000000000038 $d
    {standard input}:889    .text.XMC_CCU4_SLICE_ModulationConfig:0000000000000000 $t
    {standard input}:896    .text.XMC_CCU4_SLICE_ModulationConfig:0000000000000000 XMC_CCU4_SLICE_ModulationConfig
    {standard input}:1004   .text.XMC_CCU4_SLICE_ModulationConfig:000000000000008c $d
    {standard input}:1011   .text.XMC_CCU4_SLICE_CountConfig:0000000000000000 $t
    {standard input}:1018   .text.XMC_CCU4_SLICE_CountConfig:0000000000000000 XMC_CCU4_SLICE_CountConfig
    {standard input}:1070   .text.XMC_CCU4_SLICE_CountConfig:0000000000000038 $d
    {standard input}:1075   .text.XMC_CCU4_SLICE_GateConfig:0000000000000000 $t
    {standard input}:1082   .text.XMC_CCU4_SLICE_GateConfig:0000000000000000 XMC_CCU4_SLICE_GateConfig
    {standard input}:1134   .text.XMC_CCU4_SLICE_GateConfig:0000000000000038 $d
    {standard input}:1139   .text.XMC_CCU4_SLICE_Capture0Config:0000000000000000 $t
    {standard input}:1146   .text.XMC_CCU4_SLICE_Capture0Config:0000000000000000 XMC_CCU4_SLICE_Capture0Config
    {standard input}:1199   .text.XMC_CCU4_SLICE_Capture1Config:0000000000000000 $t
    {standard input}:1206   .text.XMC_CCU4_SLICE_Capture1Config:0000000000000000 XMC_CCU4_SLICE_Capture1Config
    {standard input}:1259   .text.XMC_CCU4_SLICE_DirectionConfig:0000000000000000 $t
    {standard input}:1266   .text.XMC_CCU4_SLICE_DirectionConfig:0000000000000000 XMC_CCU4_SLICE_DirectionConfig
    {standard input}:1318   .text.XMC_CCU4_SLICE_DirectionConfig:0000000000000038 $d
    {standard input}:1323   .text.XMC_CCU4_SLICE_StatusBitOverrideConfig:0000000000000000 $t
    {standard input}:1330   .text.XMC_CCU4_SLICE_StatusBitOverrideConfig:0000000000000000 XMC_CCU4_SLICE_StatusBitOverrideConfig
    {standard input}:1376   .text.XMC_CCU4_SLICE_StatusBitOverrideConfig:0000000000000030 $d
    {standard input}:1381   .text.XMC_CCU4_SLICE_TrapConfig:0000000000000000 $t
    {standard input}:1388   .text.XMC_CCU4_SLICE_TrapConfig:0000000000000000 XMC_CCU4_SLICE_TrapConfig
    {standard input}:1488   .text.XMC_CCU4_SLICE_TrapConfig:0000000000000084 $d
    {standard input}:1495   .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:0000000000000000 $t
    {standard input}:1502   .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:0000000000000000 XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent
    {standard input}:1651   .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:00000000000000c0 $d
    {standard input}:1662   .text.XMC_CCU4_SLICE_ConfigureEvent:0000000000000000 $t
    {standard input}:1669   .text.XMC_CCU4_SLICE_ConfigureEvent:0000000000000000 XMC_CCU4_SLICE_ConfigureEvent
    {standard input}:1853   .text.XMC_CCU4_SLICE_SetInput:0000000000000000 $t
    {standard input}:1860   .text.XMC_CCU4_SLICE_SetInput:0000000000000000 XMC_CCU4_SLICE_SetInput
    {standard input}:1942   .text.XMC_CCU4_SLICE_SetTimerRepeatMode:0000000000000000 $t
    {standard input}:1949   .text.XMC_CCU4_SLICE_SetTimerRepeatMode:0000000000000000 XMC_CCU4_SLICE_SetTimerRepeatMode
    {standard input}:2004   .text.XMC_CCU4_SLICE_SetTimerCountingMode:0000000000000000 $t
    {standard input}:2011   .text.XMC_CCU4_SLICE_SetTimerCountingMode:0000000000000000 XMC_CCU4_SLICE_SetTimerCountingMode
    {standard input}:2066   .text.XMC_CCU4_SLICE_GetCaptureRegisterValue:0000000000000000 $t
    {standard input}:2073   .text.XMC_CCU4_SLICE_GetCaptureRegisterValue:0000000000000000 XMC_CCU4_SLICE_GetCaptureRegisterValue
    {standard input}:2113   .text.XMC_CCU4_SLICE_GetLastCapturedTimerValue:0000000000000000 $t
    {standard input}:2120   .text.XMC_CCU4_SLICE_GetLastCapturedTimerValue:0000000000000000 XMC_CCU4_SLICE_GetLastCapturedTimerValue
    {standard input}:2275   .text.XMC_CCU4_SLICE_GetCapturedValueFromFifo:0000000000000000 $t
    {standard input}:2282   .text.XMC_CCU4_SLICE_GetCapturedValueFromFifo:0000000000000000 XMC_CCU4_SLICE_GetCapturedValueFromFifo
    {standard input}:2333   .text.XMC_CCU4_SLICE_EnableDithering:0000000000000000 $t
    {standard input}:2340   .text.XMC_CCU4_SLICE_EnableDithering:0000000000000000 XMC_CCU4_SLICE_EnableDithering
    {standard input}:2424   .text.XMC_CCU4_SLICE_EnableDithering:0000000000000070 $d
    {standard input}:2429   .text.XMC_CCU4_SLICE_SetPrescaler:0000000000000000 $t
    {standard input}:2436   .text.XMC_CCU4_SLICE_SetPrescaler:0000000000000000 XMC_CCU4_SLICE_SetPrescaler
    {standard input}:2494   .text.XMC_CCU4_SLICE_SetPrescaler:0000000000000040 $d
    {standard input}:2499   .text.XMC_CCU4_SLICE_SetInterruptNode:0000000000000000 $t
    {standard input}:2506   .text.XMC_CCU4_SLICE_SetInterruptNode:0000000000000000 XMC_CCU4_SLICE_SetInterruptNode
    {standard input}:2638   .text.XMC_CCU4_SLICE_SetPassiveLevel:0000000000000000 $t
    {standard input}:2645   .text.XMC_CCU4_SLICE_SetPassiveLevel:0000000000000000 XMC_CCU4_SLICE_SetPassiveLevel

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_UngatePeripheralClock

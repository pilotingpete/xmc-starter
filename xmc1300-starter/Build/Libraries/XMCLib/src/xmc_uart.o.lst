   1              	 .cpu cortex-m0
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,0
  10              	 .eabi_attribute 18,4
  11              	 .file "xmc_uart.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.XMC_USIC_CH_GetTransmitBufferStatus,"ax",%progbits
  16              	 .align 1
  17              	 .arch armv6s-m
  18              	 .syntax unified
  19              	 .code 16
  20              	 .thumb_func
  21              	 .fpu softvfp
  23              	XMC_USIC_CH_GetTransmitBufferStatus:
  24              	.LFB84:
  25              	 .file 1 "..//Libraries/XMCLib/inc/xmc_usic.h"
   1:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
   2:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @file xmc_usic.h
   3:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @date 2017-09-08
   4:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
   5:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @cond
   6:..//Libraries/XMCLib/inc/xmc_usic.h ****  **************************************************************************************************
   7:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
   9:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:..//Libraries/XMCLib/inc/xmc_usic.h ****  * All rights reserved.                        
  11:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                                             
  12:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:..//Libraries/XMCLib/inc/xmc_usic.h ****  * following conditions are met:   
  14:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                                                                              
  15:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:..//Libraries/XMCLib/inc/xmc_usic.h ****  * disclaimer.                        
  17:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
  18:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:..//Libraries/XMCLib/inc/xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
  21:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:..//Libraries/XMCLib/inc/xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                                                                              
  24:..//Libraries/XMCLib/inc/xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:..//Libraries/XMCLib/inc/xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:..//Libraries/XMCLib/inc/xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:..//Libraries/XMCLib/inc/xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:..//Libraries/XMCLib/inc/xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:..//Libraries/XMCLib/inc/xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:..//Libraries/XMCLib/inc/xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                                                                              
  32:..//Libraries/XMCLib/inc/xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:..//Libraries/XMCLib/inc/xmc_usic.h ****  **************************************************************************************************
  35:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  36:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Change History
  37:..//Libraries/XMCLib/inc/xmc_usic.h ****  * --------------
  38:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  39:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-02-20:
  40:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Initial draft<br>
  41:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Documentation improved <br>
  42:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  43:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-05-08:
  44:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:..//Libraries/XMCLib/inc/xmc_usic.h ****  *      
  46:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-06-20:
  47:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
  49:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-17:
  50:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  52:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-24:
  53:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:..//Libraries/XMCLib/inc/xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  56:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-25:
  57:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:..//Libraries/XMCLib/inc/xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:..//Libraries/XMCLib/inc/xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  61:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-27:
  62:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  66:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-28:
  67:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:..//Libraries/XMCLib/inc/xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  70:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2016-03-09:
  71:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Optimization of write only registers
  72:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  73:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2016-04-10:
  74:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  76:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2017-02-10:
  77:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  78:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  79:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  80:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2017-09-08:
  81:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  82:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  83:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @endcond
  84:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  85:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
  86:..//Libraries/XMCLib/inc/xmc_usic.h **** 
  87:..//Libraries/XMCLib/inc/xmc_usic.h **** #ifndef XMC_USIC_H
  88:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC_H
  89:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
  90:..//Libraries/XMCLib/inc/xmc_usic.h ****  * HEADER FILES
  91:..//Libraries/XMCLib/inc/xmc_usic.h ****  *******************************************************************************/
  92:..//Libraries/XMCLib/inc/xmc_usic.h **** 
  93:..//Libraries/XMCLib/inc/xmc_usic.h **** #include "xmc_common.h"
  94:..//Libraries/XMCLib/inc/xmc_usic.h **** 
  95:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
  96:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  97:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @{
  98:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
  99:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 100:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 101:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @addtogroup USIC
 102:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 103:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 104:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 105:..//Libraries/XMCLib/inc/xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 106:..//Libraries/XMCLib/inc/xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 107:..//Libraries/XMCLib/inc/xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 108:..//Libraries/XMCLib/inc/xmc_usic.h ****  * by each communication channel and which pins are used.
 109:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 110:..//Libraries/XMCLib/inc/xmc_usic.h ****  * communication protocols.
 111:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
 112:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC driver features:
 113:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 114:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 115:..//Libraries/XMCLib/inc/xmc_usic.h ****  friendly format.
 116:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 117:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 118:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 119:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 120:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 121:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @{
 122:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 123:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 124:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
 125:..//Libraries/XMCLib/inc/xmc_usic.h ****  * MACROS
 126:..//Libraries/XMCLib/inc/xmc_usic.h ****  *******************************************************************************/
 127:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 128:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 129:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 130:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 131:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 132:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(USIC1)
 133:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 134:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 135:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 136:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 137:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 138:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(USIC2)
 139:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 140:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 141:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 142:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 143:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 144:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 145:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 146:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 147:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 148:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 149:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 150:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 151:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 152:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 153:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 154:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 155:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 156:..//Libraries/XMCLib/inc/xmc_usic.h **** #if UC_FAMILY == XMC1
 157:..//Libraries/XMCLib/inc/xmc_usic.h ****  #include "xmc1_usic_map.h"
 158:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 159:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 160:..//Libraries/XMCLib/inc/xmc_usic.h **** #if UC_FAMILY == XMC4
 161:..//Libraries/XMCLib/inc/xmc_usic.h ****  #include "xmc4_usic_map.h"
 162:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 163:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 164:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
 165:..//Libraries/XMCLib/inc/xmc_usic.h ****  * ENUMS
 166:..//Libraries/XMCLib/inc/xmc_usic.h ****  *******************************************************************************/
 167:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 168:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 169:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel driver status
 170:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 171:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 172:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 173:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 174:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 175:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 176:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 177:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 178:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 179:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel kernel mode
 180:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 181:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 182:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 183:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 184:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 185:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 186:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 187:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 188:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 189:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 190:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel operating mode
 191:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 192:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 193:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 194:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 195:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 196:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 197:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 198:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 199:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 200:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 201:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 202:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel inputs
 203:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 204:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 205:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 206:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 207:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 208:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 209:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 210:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 211:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 212:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 213:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 214:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 215:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel input source sampling frequency
 216:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 217:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 218:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 219:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 220:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 221:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 222:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 223:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 224:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel input combination mode
 225:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 226:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 227:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 228:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 229:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 230:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 231:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 232:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 233:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 234:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 235:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel data transmission start modes.
 236:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 237:..//Libraries/XMCLib/inc/xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 238:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the TCSR->TDEN bitfield.
 239:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 240:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 241:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 242:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 243:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 244:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 245:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 246:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 247:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 248:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 249:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel interrupt node pointers
 250:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 251:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 252:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 253:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 254:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 255:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 256:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 257:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 258:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 259:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 260:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 261:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel events
 262:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 263:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 264:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 265:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 266:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 267:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 268:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 269:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 270:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 271:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 272:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 273:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 274:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 275:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel parity mode
 276:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 277:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 278:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 279:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 280:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 281:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 282:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 283:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 284:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 285:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel data output mode
 286:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 287:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 288:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 289:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 290:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 291:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 292:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 293:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 294:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel data transmit buffer status
 295:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 296:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 297:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 298:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 299:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 300:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 301:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 302:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 303:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 304:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 305:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel data transmit buffer status modification
 306:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 307:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 308:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 309:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 310:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 311:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 312:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 313:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 314:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive buffer status
 315:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 316:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 317:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 318:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 319:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 320:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 321:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 322:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 323:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel output signal passive data level
 324:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 325:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 326:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 327:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 328:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 329:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 330:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 331:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 332:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive FIFO size
 333:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 334:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 335:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 336:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 337:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 338:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 339:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 340:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 341:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 342:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 343:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 344:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 345:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 346:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 347:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 348:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 349:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 350:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 351:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 352:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 353:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 354:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 355:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel transmit FIFO event configuration
 356:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 357:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 358:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 359:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 360:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 361:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 362:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 363:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 364:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel transmit FIFO status
 365:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 366:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 367:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 368:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 369:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 370:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 371:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 372:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 373:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 374:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 375:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 376:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 377:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 378:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 379:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 380:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 381:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 382:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive FIFO event configuration
 383:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 384:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 385:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 386:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 387:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 388:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 389:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 390:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 391:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 392:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive FIFO status
 393:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 394:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 395:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 396:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 397:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 398:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 399:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 400:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 401:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 402:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator clock source
 403:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 404:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 405:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 406:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 407:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 408:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 409:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 410:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 411:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator divider mode
 412:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 413:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 414:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 415:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 416:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 417:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 418:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 419:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 420:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 421:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 422:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 423:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 424:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 425:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 426:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 427:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 428:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 429:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 430:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 431:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 432:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 433:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 434:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 435:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 436:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 437:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 438:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 439:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 440:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 441:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator shift clock output
 442:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 443:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 444:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 445:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 446:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 447:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 448:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 449:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 450:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel shift direction.
 451:..//Libraries/XMCLib/inc/xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 452:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 453:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 454:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 455:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 456:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 457:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 458:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 459:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 460:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
 461:..//Libraries/XMCLib/inc/xmc_usic.h ****  * DATA STRUCTURES
 462:..//Libraries/XMCLib/inc/xmc_usic.h ****  *******************************************************************************/
 463:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 464:..//Libraries/XMCLib/inc/xmc_usic.h **** /*Anonymous structure/union guard start*/
 465:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(__CC_ARM)
 466:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma push
 467:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma anon_unions
 468:..//Libraries/XMCLib/inc/xmc_usic.h **** #elif defined(__TASKING__)
 469:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma warning 586
 470:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 471:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 472:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 473:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC module structure
 474:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 475:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 476:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 477:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 478:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 479:..//Libraries/XMCLib/inc/xmc_usic.h ****  * except for some registers.
 480:..//Libraries/XMCLib/inc/xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 481:..//Libraries/XMCLib/inc/xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 482:..//Libraries/XMCLib/inc/xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 483:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 484:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef struct XMC_USIC_CH
 485:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 486:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RESERVED0;
 487:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 488:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RESERVED1;
 489:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 490:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 491:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 492:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 493:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 494:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 495:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  TCSR;
 496:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 497:..//Libraries/XMCLib/inc/xmc_usic.h ****   union {
 498:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 499:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 500:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 501:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 502:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 503:..//Libraries/XMCLib/inc/xmc_usic.h ****   };
 504:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 505:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 506:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 507:..//Libraries/XMCLib/inc/xmc_usic.h ****   union {
 508:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 509:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 510:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 511:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 512:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 513:..//Libraries/XMCLib/inc/xmc_usic.h ****   };
 514:..//Libraries/XMCLib/inc/xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 515:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 516:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 517:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 518:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 519:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 520:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 521:..//Libraries/XMCLib/inc/xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 522:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 523:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 524:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 525:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 526:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 527:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 528:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 529:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 530:..//Libraries/XMCLib/inc/xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 531:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 532:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 533:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 534:..//Libraries/XMCLib/inc/xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 535:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_t;
 536:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 537:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 538:..//Libraries/XMCLib/inc/xmc_usic.h **** /*Anonymous structure/union guard end*/
 539:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(__CC_ARM)
 540:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma pop
 541:..//Libraries/XMCLib/inc/xmc_usic.h **** #elif defined(__TASKING__)
 542:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma warning restore
 543:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 544:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 545:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
 546:..//Libraries/XMCLib/inc/xmc_usic.h ****  * API PROTOTYPES
 547:..//Libraries/XMCLib/inc/xmc_usic.h ****  ******************************************************************************/
 548:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 549:..//Libraries/XMCLib/inc/xmc_usic.h **** #ifdef __cplusplus
 550:..//Libraries/XMCLib/inc/xmc_usic.h **** extern "C" {
 551:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 552:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 553:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 554:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 555:..//Libraries/XMCLib/inc/xmc_usic.h ****   bool tmp;
 556:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 557:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = (module == XMC_USIC0);
 558:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(XMC_USIC1)  
 559:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 560:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 561:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(XMC_USIC2)  
 562:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 563:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 564:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 565:..//Libraries/XMCLib/inc/xmc_usic.h ****   return tmp;
 566:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 567:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 568:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 569:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 570:..//Libraries/XMCLib/inc/xmc_usic.h ****   bool tmp;
 571:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 572:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 573:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(XMC_USIC1)  
 574:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 575:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 576:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(XMC_USIC2)  
 577:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 578:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 579:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 580:..//Libraries/XMCLib/inc/xmc_usic.h ****   return tmp;
 581:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 582:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 583:..//Libraries/XMCLib/inc/xmc_usic.h **** /* Common APIs */
 584:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 585:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 586:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 587:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 588:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 589:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
 590:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 591:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the USIC module.\n\n
 592:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the clock for the USIC module by following the
 593:..//Libraries/XMCLib/inc/xmc_usic.h ****  * clock enabling sequence for the selected device.
 594:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 595:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 596:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 597:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 598:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 599:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 600:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 601:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 602:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 603:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 604:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 605:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the USIC module.\n\n
 606:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 607:..//Libraries/XMCLib/inc/xmc_usic.h ****  * disabling sequence for the selected device.
 608:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 609:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 610:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 611:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 612:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 613:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 614:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 615:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 616:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 617:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 618:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 619:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the USIC channel. \n\n
 620:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 621:..//Libraries/XMCLib/inc/xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 622:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 623:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 624:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 625:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 626:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 627:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 628:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 629:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 630:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 631:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 632:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 633:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the USIC channel.\n\n
 634:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 635:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 636:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 637:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 638:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 639:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 640:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 641:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 642:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 643:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 644:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 645:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 646:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 647:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 648:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 649:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 650:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 651:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 652:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 653:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 654:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 655:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 656:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 657:..//Libraries/XMCLib/inc/xmc_usic.h ****  * baudrate.
 658:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 659:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 660:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 661:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 662:..//Libraries/XMCLib/inc/xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 663:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 664:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 665:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 666:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 667:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 668:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 669:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 670:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 671:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 672:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                          output DXnT of the input stage.
 673:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 674:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 675:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 676:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 677:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 678:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 679:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 680:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 681:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 682:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 683:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 684:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                         const uint16_t pdiv,
 685:..//Libraries/XMCLib/inc/xmc_usic.h **** 												 const uint32_t oversampling,
 686:..//Libraries/XMCLib/inc/xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 687:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 688:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 689:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 690:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 691:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 692:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 693:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 694:..//Libraries/XMCLib/inc/xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 695:..//Libraries/XMCLib/inc/xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 696:..//Libraries/XMCLib/inc/xmc_usic.h ****  * </tr></table>
 697:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 698:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 699:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 700:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 701:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 702:..//Libraries/XMCLib/inc/xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 703:..//Libraries/XMCLib/inc/xmc_usic.h ****  *  
 704:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 705:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 706:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 707:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 708:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 709:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 710:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 711:..//Libraries/XMCLib/inc/xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 712:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 713:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 714:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 715:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 716:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 717:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 718:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 719:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 720:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 721:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The input of the data shift unit is controlled by the
 722:..//Libraries/XMCLib/inc/xmc_usic.h ****  * protocol pre-processor. \n\n
 723:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 724:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 725:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 726:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 727:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 728:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 729:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 730:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 731:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 732:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 733:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 734:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 735:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 736:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 737:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 738:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 739:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 740:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The input of the data shift unit is connected to
 741:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the selected data input line. \n\n
 742:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 743:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This setting is used
 744:..//Libraries/XMCLib/inc/xmc_usic.h ****  * if the signals are directly derived from an input
 745:..//Libraries/XMCLib/inc/xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 746:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 747:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 748:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 749:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 750:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 751:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 752:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 753:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 754:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 755:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 756:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 757:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 758:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 759:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 760:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 761:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 762:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 763:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 764:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 765:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 766:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 767:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 768:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 769:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 770:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 771:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 772:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 773:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 774:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 775:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 776:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 777:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 778:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 779:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 780:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 781:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 782:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 783:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 784:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 785:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 786:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 787:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 788:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 789:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 790:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 791:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 792:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 793:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 794:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 795:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 796:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 797:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 798:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables delay compensation. \n\n
 799:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 800:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 801:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 802:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 803:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 804:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 805:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 806:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 807:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 808:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 809:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 810:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 811:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 812:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 813:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 814:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 815:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables delay compensation.. \n\n
 816:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 817:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 818:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 819:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 820:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 821:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 822:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 823:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 824:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 825:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 826:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 827:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 828:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 829:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 830:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 831:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 832:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 833:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 834:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 835:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 836:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 837:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 838:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 839:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 840:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 841:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 842:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 843:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 844:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 845:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 846:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 847:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 848:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 849:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 850:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 851:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 852:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 853:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 854:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 855:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 856:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 857:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 858:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 859:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 860:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 861:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 862:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 863:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 864:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 865:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 866:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 867:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 868:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 869:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 870:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 871:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 872:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 873:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 874:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 875:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 876:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 877:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 878:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 879:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 880:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 881:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 882:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 883:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 884:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 885:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 886:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 887:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 888:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 889:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 890:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 891:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 893:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 894:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 895:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 896:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 897:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 898:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 899:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 900:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 901:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 902:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 903:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 904:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 905:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 906:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 907:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 908:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 909:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 910:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 911:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 912:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 913:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 914:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 915:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 916:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 917:..//Libraries/XMCLib/inc/xmc_usic.h ****                          ((uint32_t)sampling_freq);
 918:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 919:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 920:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 921:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 922:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 923:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 924:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 925:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 926:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 927:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 928:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 929:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 930:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 931:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 932:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 933:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 934:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 935:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 936:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 937:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 938:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 939:..//Libraries/XMCLib/inc/xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 940:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 941:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 942:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 943:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 944:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 945:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 946:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 947:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 948:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 949:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 950:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 951:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 952:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 953:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 954:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 955:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 956:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 957:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 958:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 959:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 960:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 961:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 962:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted. \n
 963:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
 964:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 965:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 966:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 967:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
 968:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The data provided is placed in TBUF[0U].
 969:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 970:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 971:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 972:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
 973:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 974:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
 975:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 976:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TBUF[0U] = data;
 977:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 978:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 979:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 980:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 981:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 982:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted.
 983:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
 984:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
 985:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 986:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 987:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 988:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
 989:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
 990:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 991:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 992:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 993:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
 994:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 995:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
 996:..//Libraries/XMCLib/inc/xmc_usic.h ****                                              const uint16_t data,
 997:..//Libraries/XMCLib/inc/xmc_usic.h ****                                              const uint32_t transmit_control_information)
 998:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 999:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1000:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1001:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1002:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1003:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1004:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1005:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1006:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1007:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1008:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1009:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1010:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1011:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1012:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1013:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1014:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1015:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1016:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1017:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1018:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1019:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1020:..//Libraries/XMCLib/inc/xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1021:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1022:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1023:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1024:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1025:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1026:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1027:..//Libraries/XMCLib/inc/xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1028:..//Libraries/XMCLib/inc/xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1029:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1030:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1031:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1032:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1033:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1034:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1035:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1036:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1037:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1038:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1039:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1040:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1041:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1042:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1043:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1044:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1045:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1046:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1047:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Captured counter value 
1048:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1049:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1050:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1051:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1052:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1053:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1054:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1055:..//Libraries/XMCLib/inc/xmc_usic.h ****   return channel->CMTR;
1056:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1057:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1058:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1059:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1060:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1061:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1062:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  step divider \n
1063:..//Libraries/XMCLib/inc/xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1064:..//Libraries/XMCLib/inc/xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1065:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1066:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1067:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1068:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1069:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1070:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1071:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1072:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1073:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1074:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->FDR = mode | step;
1075:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1076:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1077:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1078:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1079:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1080:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1081:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1082:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1083:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1084:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1085:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1086:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Define the data frame length.\n\n
1087:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1088:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1089:..//Libraries/XMCLib/inc/xmc_usic.h ****  * has to be controlled explicitly. 
1090:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1091:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1092:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1093:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1094:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1095:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1096:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1097:..//Libraries/XMCLib/inc/xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1098:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1099:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1100:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1101:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1102:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1103:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1104:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1105:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				can be combined using \a OR operation.
1106:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1107:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1108:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1109:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1110:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1111:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1112:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1113:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1114:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1115:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1116:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1117:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1118:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1119:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->CCR |= event;
1120:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1121:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1122:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1123:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1124:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1125:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1126:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1127:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				can be combined using \a OR operation.
1128:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1129:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1130:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1131:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1132:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1133:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1134:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1135:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1136:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1137:..//Libraries/XMCLib/inc/xmc_usic.h **** */
1138:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1139:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1140:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1141:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1142:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1143:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1144:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1145:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1146:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1147:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1148:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1149:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param service_request Service request number.\n
1150:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  \b Range: 0 to 5.
1151:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1152:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1153:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1154:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1155:..//Libraries/XMCLib/inc/xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1156:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1157:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1158:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1159:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1160:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1161:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1162:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1163:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1164:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          const uint32_t service_request);
1165:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1166:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1167:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1168:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1169:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1170:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1171:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1172:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1173:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets transmit buffer status. \n\n
1174:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1175:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1176:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1177:..//Libraries/XMCLib/inc/xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1178:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1179:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1180:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1181:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1182:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1183:..//Libraries/XMCLib/inc/xmc_usic.h **** {
  26              	 .loc 1 1183 1
  27              	 .cfi_startproc
  28              	 
  29              	 
  30 0000 80B5     	 push {r7,lr}
  31              	.LCFI0:
  32              	 .cfi_def_cfa_offset 8
  33              	 .cfi_offset 7,-8
  34              	 .cfi_offset 14,-4
  35 0002 82B0     	 sub sp,sp,#8
  36              	.LCFI1:
  37              	 .cfi_def_cfa_offset 16
  38 0004 00AF     	 add r7,sp,#0
  39              	.LCFI2:
  40              	 .cfi_def_cfa_register 7
  41 0006 7860     	 str r0,[r7,#4]
1184:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
  42              	 .loc 1 1184 45
  43 0008 7B68     	 ldr r3,[r7,#4]
  44 000a 9B6B     	 ldr r3,[r3,#56]
  45              	 .loc 1 1184 10
  46 000c DBB2     	 uxtb r3,r3
  47 000e 7F22     	 movs r2,#127
  48 0010 9343     	 bics r3,r2
  49 0012 DBB2     	 uxtb r3,r3
1185:..//Libraries/XMCLib/inc/xmc_usic.h **** }
  50              	 .loc 1 1185 1
  51 0014 1800     	 movs r0,r3
  52 0016 BD46     	 mov sp,r7
  53 0018 02B0     	 add sp,sp,#8
  54              	 
  55 001a 80BD     	 pop {r7,pc}
  56              	 .cfi_endproc
  57              	.LFE84:
  59              	 .section .text.XMC_USIC_CH_SetMode,"ax",%progbits
  60              	 .align 1
  61              	 .syntax unified
  62              	 .code 16
  63              	 .thumb_func
  64              	 .fpu softvfp
  66              	XMC_USIC_CH_SetMode:
  67              	.LFB119:
1186:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1187:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1188:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @brief API to get receive buffer status
1189:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1190:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1191:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1192:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1193:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1194:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1195:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1196:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1197:..//Libraries/XMCLib/inc/xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1198:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1199:..//Libraries/XMCLib/inc/xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1200:..//Libraries/XMCLib/inc/xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1201:..//Libraries/XMCLib/inc/xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1202:..//Libraries/XMCLib/inc/xmc_usic.h ****  * can be read from RBUF.
1203:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1204:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1205:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1206:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1207:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1208:..//Libraries/XMCLib/inc/xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1209:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1210:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1211:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1212:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1213:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1214:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1215:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1216:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1217:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1218:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1219:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                              
1220:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1221:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1222:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1223:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Configures data transmission. \n\n
1224:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1225:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1226:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1227:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1228:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1229:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1230:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1231:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1232:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1233:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1234:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1235:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1236:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1237:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1238:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1239:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1240:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1241:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1242:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1243:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1244:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Configures the mode for data output. \n\n
1245:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1246:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1247:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1248:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1249:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1250:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1251:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1252:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1253:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1254:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1255:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1256:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1257:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1258:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1259:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1260:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1261:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1262:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1263:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1264:..//Libraries/XMCLib/inc/xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1265:..//Libraries/XMCLib/inc/xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1266:..//Libraries/XMCLib/inc/xmc_usic.h ****  * IN[x] register.
1267:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1268:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1269:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1270:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1271:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1272:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1273:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1274:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1275:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1276:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1277:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1278:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1279:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1280:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1281:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1282:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1283:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1284:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1285:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1286:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1287:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1288:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1289:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1290:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1291:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1292:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1293:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1294:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1295:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1296:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1297:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1298:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1299:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1300:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1301:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1302:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1303:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1304:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1305:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1306:..//Libraries/XMCLib/inc/xmc_usic.h ****  * for event driven transfer starts.
1307:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1308:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1309:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1310:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1311:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1312:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1313:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1314:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1315:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1316:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1317:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1318:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1319:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1320:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1321:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1322:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1323:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1324:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1325:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1326:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1327:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1328:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1329:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1330:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1331:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1332:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1333:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1334:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1335:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1336:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1337:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: 0 to 5.
1338:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1339:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1340:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1341:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1342:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1343:..//Libraries/XMCLib/inc/xmc_usic.h ****  * generated if enabled. 
1344:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1345:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1346:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1347:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1348:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1349:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1350:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1351:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1352:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1353:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1354:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1355:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1356:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1357:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1358:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1359:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1360:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1361:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1362:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1363:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1364:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1365:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1366:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1367:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1368:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1369:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1370:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1371:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1372:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1373:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1376:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1377:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1378:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1379:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1380:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1381:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1382:..//Libraries/XMCLib/inc/xmc_usic.h ****  * configured passive level.
1383:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1384:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1385:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1386:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1387:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1388:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1389:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1390:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1391:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1392:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1393:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1394:..//Libraries/XMCLib/inc/xmc_usic.h **** /* TX FIFO APIs */
1395:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1396:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1397:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1398:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1399:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to 63.
1400:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1401:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1402:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1403:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1404:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1405:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1406:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1407:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1408:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1409:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1410:..//Libraries/XMCLib/inc/xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1411:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1412:..//Libraries/XMCLib/inc/xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1413:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1414:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1415:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1416:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1417:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1418:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const uint32_t data_pointer,
1419:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1420:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const uint32_t limit);
1421:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1422:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1423:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1424:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1425:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1426:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1427:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1428:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1429:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1430:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1431:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1432:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1433:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1434:..//Libraries/XMCLib/inc/xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1435:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1436:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1437:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1438:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1439:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1440:..//Libraries/XMCLib/inc/xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1441:..//Libraries/XMCLib/inc/xmc_usic.h ****                                             const uint32_t limit);
1442:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1443:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1444:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1445:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1446:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1447:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1448:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1449:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1450:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1451:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1452:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1453:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1454:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1455:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1456:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1457:..//Libraries/XMCLib/inc/xmc_usic.h ****  * must be enabled.
1458:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1459:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1460:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1461:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1462:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1463:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1464:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TBCTR |= event;
1465:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1466:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1467:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1468:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1469:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1470:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1471:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1472:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1473:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1474:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1475:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1476:..//Libraries/XMCLib/inc/xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1477:..//Libraries/XMCLib/inc/xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1478:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1479:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1480:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1481:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1482:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1483:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1484:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1485:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1486:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1487:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1488:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1489:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1490:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1491:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1492:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1493:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1494:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1495:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1496:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  \b Range: 0 to 5.
1497:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1498:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1499:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1500:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1501:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1502:..//Libraries/XMCLib/inc/xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1503:..//Libraries/XMCLib/inc/xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1504:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1505:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1506:..//Libraries/XMCLib/inc/xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1507:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1508:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1509:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1510:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1511:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1512:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1513:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1514:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1515:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                 const uint32_t service_request);
1516:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1517:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1518:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1519:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1520:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted. \n
1521:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1522:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1523:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1524:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1525:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1526:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1527:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1528:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1529:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1530:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1531:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1532:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1533:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1534:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->IN[0] = data;
1535:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1536:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1537:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1538:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1539:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1540:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted.
1541:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1542:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1543:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1544:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1545:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1546:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1547:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1548:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1549:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1550:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1551:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1552:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1553:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1554:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1555:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                        const uint16_t data,
1556:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                        const uint32_t frame_length)
1557:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1558:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->IN[frame_length] = data;
1559:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1560:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1561:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1562:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1563:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1564:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted.
1565:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1566:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1567:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1568:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1569:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1570:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1571:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1572:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1573:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1574:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1575:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1576:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1577:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1578:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1579:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                        const uint16_t data,
1580:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                        const uint32_t frame_length)
1581:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1582:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->IN[frame_length] = data;
1583:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1584:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1585:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1586:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1587:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1588:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1589:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1590:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1591:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1592:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1593:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1594:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1595:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1596:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1597:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1598:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1599:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1600:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1601:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1602:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1603:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1604:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1605:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1606:..//Libraries/XMCLib/inc/xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1607:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1608:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1609:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1610:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1611:..//Libraries/XMCLib/inc/xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1612:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1613:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1614:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1615:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1616:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1617:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1618:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1619:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1620:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1621:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1622:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1623:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1624:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1625:..//Libraries/XMCLib/inc/xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1626:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1627:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1628:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1629:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1630:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1631:..//Libraries/XMCLib/inc/xmc_usic.h ****  * FIFO empty flag is set.
1632:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1633:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1634:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1635:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1636:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1637:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1638:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1639:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1640:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1641:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1642:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1643:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1644:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1645:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1646:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1647:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1648:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1649:..//Libraries/XMCLib/inc/xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1650:..//Libraries/XMCLib/inc/xmc_usic.h ****  * of this filling level.
1651:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1652:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1653:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1654:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1655:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1656:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1657:..//Libraries/XMCLib/inc/xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1658:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1659:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1660:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1661:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1662:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1663:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1664:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1665:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1666:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1667:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1668:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1669:..//Libraries/XMCLib/inc/xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1670:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1671:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1672:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1673:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1674:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1675:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1676:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1677:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1678:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1679:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1680:..//Libraries/XMCLib/inc/xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1681:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1682:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1683:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1684:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1685:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1686:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1687:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1688:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1689:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1690:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1691:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1692:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1693:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1694:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1695:..//Libraries/XMCLib/inc/xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1696:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple event enumerations.
1697:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1698:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1699:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1700:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1701:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1702:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                    const uint32_t event)
1703:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1704:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TRBSCR = event;
1705:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1706:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1707:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1708:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1710:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1711:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to 63.
1712:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1713:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1714:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1715:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1716:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1717:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1718:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1719:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Configures the receive FIFO. \n\n
1720:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1721:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1722:..//Libraries/XMCLib/inc/xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1723:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1724:..//Libraries/XMCLib/inc/xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1725:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1726:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1727:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1728:..//Libraries/XMCLib/inc/xmc_usic.h **** */
1729:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1730:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const uint32_t data_pointer,
1731:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1732:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const uint32_t limit);
1733:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1734:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1735:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1736:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1737:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1738:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1739:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1740:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1741:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1742:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1743:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1744:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1745:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1746:..//Libraries/XMCLib/inc/xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1747:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1748:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1749:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1750:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1751:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1752:..//Libraries/XMCLib/inc/xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1753:..//Libraries/XMCLib/inc/xmc_usic.h ****                                             const uint32_t limit);
1754:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1755:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1756:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1757:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1758:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1759:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1760:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1761:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1762:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1763:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1764:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1765:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1766:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1767:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1768:..//Libraries/XMCLib/inc/xmc_usic.h ****  * must be enabled.
1769:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1770:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1771:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1772:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1773:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1774:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1775:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->RBCTR |= event;
1776:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1777:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1778:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1779:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1780:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1781:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1782:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Events to be disabled. \n
1783:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1784:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1785:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1786:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1787:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1788:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1789:..//Libraries/XMCLib/inc/xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1790:..//Libraries/XMCLib/inc/xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1791:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1792:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1793:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1794:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1795:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1796:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1797:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1798:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1799:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1800:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1801:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1802:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1803:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1804:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1805:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1806:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1807:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1808:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1809:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: 0 to 5.
1810:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1811:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1812:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1813:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1814:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1815:..//Libraries/XMCLib/inc/xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1816:..//Libraries/XMCLib/inc/xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1817:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1818:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1819:..//Libraries/XMCLib/inc/xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1820:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1821:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1822:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1823:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1824:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1825:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1826:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1827:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1828:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                 const uint32_t service_request);
1829:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1830:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1831:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1832:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1833:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1834:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1835:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1836:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1837:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1838:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1839:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1840:..//Libraries/XMCLib/inc/xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1841:..//Libraries/XMCLib/inc/xmc_usic.h ****  * until receive FIFO is empty.
1842:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1843:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1844:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1845:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1846:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1847:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1848:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1849:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1850:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1851:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1852:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1853:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1854:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1855:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1856:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1857:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1858:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1859:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1860:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1861:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1862:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1863:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1864:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1865:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1866:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1867:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1868:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1869:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1870:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1871:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1872:..//Libraries/XMCLib/inc/xmc_usic.h ****  *              \a false if receive FIFO is not full.
1873:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1874:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1875:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1876:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1877:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1878:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1879:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1880:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1881:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1882:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1883:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1884:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1885:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1886:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1887:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1888:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1889:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1890:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1891:..//Libraries/XMCLib/inc/xmc_usic.h ****  *              \a false if receive FIFO has some data.
1892:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1893:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1894:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1895:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1896:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1897:..//Libraries/XMCLib/inc/xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1898:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1899:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1900:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1901:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1902:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1903:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1904:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1905:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1906:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1907:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1908:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1909:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1910:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1911:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1912:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1913:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1914:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1915:..//Libraries/XMCLib/inc/xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1916:..//Libraries/XMCLib/inc/xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1917:..//Libraries/XMCLib/inc/xmc_usic.h ****  * receive FIFO.
1918:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1919:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1920:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1921:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1922:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1923:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1924:..//Libraries/XMCLib/inc/xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1925:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1926:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1927:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1928:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1929:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1930:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
1931:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1932:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1933:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1934:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1935:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
1936:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
1937:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
1938:..//Libraries/XMCLib/inc/xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
1939:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1940:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1941:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1942:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1943:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1944:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
1945:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1946:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1947:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1948:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
1949:..//Libraries/XMCLib/inc/xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
1950:..//Libraries/XMCLib/inc/xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
1951:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1952:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1953:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1954:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1955:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1956:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
1957:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1958:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1959:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1960:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1961:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1962:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
1963:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1964:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1965:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
1966:..//Libraries/XMCLib/inc/xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1967:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple event enumerations.
1968:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1969:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1970:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
1971:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1972:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1973:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                    const uint32_t event)
1974:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1975:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TRBSCR = event;
1976:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1977:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1978:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1979:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1980:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1981:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1982:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1983:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1984:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
1985:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
1986:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1987:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1988:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
1989:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1990:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
1991:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1992:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
1993:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1994:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1995:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1996:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1997:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1998:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1999:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2000:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
2001:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
2002:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
2003:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2004:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2005:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
2006:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
2007:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
2008:..//Libraries/XMCLib/inc/xmc_usic.h **** {
2009:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
2010:..//Libraries/XMCLib/inc/xmc_usic.h **** }
2011:..//Libraries/XMCLib/inc/xmc_usic.h **** 
2012:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
2013:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2014:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2015:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
2016:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
2017:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
2018:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2019:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
2020:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
2021:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
2022:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
2023:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
2024:..//Libraries/XMCLib/inc/xmc_usic.h **** {
2025:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
2026:..//Libraries/XMCLib/inc/xmc_usic.h **** }
2027:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
2028:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2029:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2030:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
2031:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
2032:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
2033:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
2034:..//Libraries/XMCLib/inc/xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
2035:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
2036:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
2037:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
2038:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
2039:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2040:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
2041:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
2042:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
2043:..//Libraries/XMCLib/inc/xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
2044:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
2045:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This value should be configured based on the slave device requirement.
2046:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
2047:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
2048:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
2049:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
2050:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
2051:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
2052:..//Libraries/XMCLib/inc/xmc_usic.h **** {
2053:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
2054:..//Libraries/XMCLib/inc/xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
2055:..//Libraries/XMCLib/inc/xmc_usic.h ****                  (uint32_t)passive_level |
2056:..//Libraries/XMCLib/inc/xmc_usic.h ****                  (uint32_t)clock_output;
2057:..//Libraries/XMCLib/inc/xmc_usic.h **** }
2058:..//Libraries/XMCLib/inc/xmc_usic.h **** 
2059:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
2060:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2061:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2062:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param mode USIC channel operation mode. \n
2063:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
2064:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
2065:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
2066:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
2067:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2068:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
2069:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
2070:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
2071:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
2072:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2073:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2074:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
2075:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
2076:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
2077:..//Libraries/XMCLib/inc/xmc_usic.h **** {
  68              	 .loc 1 2077 1
  69              	 .cfi_startproc
  70              	 
  71              	 
  72 0000 80B5     	 push {r7,lr}
  73              	.LCFI3:
  74              	 .cfi_def_cfa_offset 8
  75              	 .cfi_offset 7,-8
  76              	 .cfi_offset 14,-4
  77 0002 82B0     	 sub sp,sp,#8
  78              	.LCFI4:
  79              	 .cfi_def_cfa_offset 16
  80 0004 00AF     	 add r7,sp,#0
  81              	.LCFI5:
  82              	 .cfi_def_cfa_register 7
  83 0006 7860     	 str r0,[r7,#4]
  84 0008 0A00     	 movs r2,r1
  85 000a FB1C     	 adds r3,r7,#3
  86 000c 1A70     	 strb r2,[r3]
2078:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
  87              	 .loc 1 2078 36
  88 000e 7B68     	 ldr r3,[r7,#4]
  89 0010 1B6C     	 ldr r3,[r3,#64]
  90              	 .loc 1 2078 18
  91 0012 0F22     	 movs r2,#15
  92 0014 9343     	 bics r3,r2
  93 0016 1A00     	 movs r2,r3
  94              	 .loc 1 2078 73
  95 0018 FB1C     	 adds r3,r7,#3
  96 001a 1B78     	 ldrb r3,[r3]
  97              	 .loc 1 2078 71
  98 001c 1A43     	 orrs r2,r3
  99              	 .loc 1 2078 16
 100 001e 7B68     	 ldr r3,[r7,#4]
 101 0020 1A64     	 str r2,[r3,#64]
2079:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 102              	 .loc 1 2079 1
 103 0022 C046     	 nop
 104 0024 BD46     	 mov sp,r7
 105 0026 02B0     	 add sp,sp,#8
 106              	 
 107 0028 80BD     	 pop {r7,pc}
 108              	 .cfi_endproc
 109              	.LFE119:
 111              	 .section .text.XMC_UART_CH_GetStatusFlag,"ax",%progbits
 112              	 .align 1
 113              	 .syntax unified
 114              	 .code 16
 115              	 .thumb_func
 116              	 .fpu softvfp
 118              	XMC_UART_CH_GetStatusFlag:
 119              	.LFB126:
 120              	 .file 2 "..//Libraries/XMCLib/inc/xmc_uart.h"
   1:..//Libraries/XMCLib/inc/xmc_uart.h ****  /**
   2:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @file xmc_uart.h
   3:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @date 2017-10-25
   4:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
   5:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @cond
   6:..//Libraries/XMCLib/inc/xmc_uart.h ****  **************************************************************************************************
   7:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
   9:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:..//Libraries/XMCLib/inc/xmc_uart.h ****  * All rights reserved.                        
  11:..//Libraries/XMCLib/inc/xmc_uart.h ****  *                                             
  12:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:..//Libraries/XMCLib/inc/xmc_uart.h ****  * following conditions are met:   
  14:..//Libraries/XMCLib/inc/xmc_uart.h ****  *                                                                              
  15:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:..//Libraries/XMCLib/inc/xmc_uart.h ****  * disclaimer.                        
  17:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 
  18:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:..//Libraries/XMCLib/inc/xmc_uart.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 
  21:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:..//Libraries/XMCLib/inc/xmc_uart.h ****  * products derived from this software without specific prior written permission.                  
  23:..//Libraries/XMCLib/inc/xmc_uart.h ****  *                                                                              
  24:..//Libraries/XMCLib/inc/xmc_uart.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:..//Libraries/XMCLib/inc/xmc_uart.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:..//Libraries/XMCLib/inc/xmc_uart.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:..//Libraries/XMCLib/inc/xmc_uart.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:..//Libraries/XMCLib/inc/xmc_uart.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:..//Libraries/XMCLib/inc/xmc_uart.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:..//Libraries/XMCLib/inc/xmc_uart.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:..//Libraries/XMCLib/inc/xmc_uart.h ****  *                                                                              
  32:..//Libraries/XMCLib/inc/xmc_uart.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:..//Libraries/XMCLib/inc/xmc_uart.h ****  **************************************************************************************************
  35:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
  36:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Change History
  37:..//Libraries/XMCLib/inc/xmc_uart.h ****  * --------------
  38:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
  39:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 2015-02-20:
  40:..//Libraries/XMCLib/inc/xmc_uart.h ****  *     - Initial
  41:..//Libraries/XMCLib/inc/xmc_uart.h ****  *      
  42:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 2015-05-20:
  43:..//Libraries/XMCLib/inc/xmc_uart.h ****  *     - Description updated <br>
  44:..//Libraries/XMCLib/inc/xmc_uart.h ****  *     - Added XMC_UART_CH_TriggerServiceRequest() and XMC_UART_CH_SelectInterruptNodePointer <br>
  45:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
  46:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 2015-06-20:
  47:..//Libraries/XMCLib/inc/xmc_uart.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  48:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
  49:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 2015-09-01:
  50:..//Libraries/XMCLib/inc/xmc_uart.h ****  *     - Modified XMC_UART_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br
  51:..//Libraries/XMCLib/inc/xmc_uart.h ****  *     - Modified XMC_UART_CH_EVENT_t enum for supporting XMC_UART_CH_EnableEvent() and XMC_UART_CH
  52:..//Libraries/XMCLib/inc/xmc_uart.h ****  *       for supporting multiple events configuration <br>
  53:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 
  54:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 2016-05-20:
  55:..//Libraries/XMCLib/inc/xmc_uart.h ****  *     - Added XMC_UART_CH_EnableDataTransmission() and XMC_UART_CH_DisableDataTransmission()
  56:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
  57:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 2017-10-25:
  58:..//Libraries/XMCLib/inc/xmc_uart.h ****  *     - Added XMC_UART_CH_EnableMasterClock() and XMC_UART_CH_DisableMasterClock()
  59:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
  60:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @endcond 
  61:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
  62:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
  63:..//Libraries/XMCLib/inc/xmc_uart.h **** 
  64:..//Libraries/XMCLib/inc/xmc_uart.h **** #ifndef XMC_UART_H
  65:..//Libraries/XMCLib/inc/xmc_uart.h **** #define XMC_UART_H
  66:..//Libraries/XMCLib/inc/xmc_uart.h **** 
  67:..//Libraries/XMCLib/inc/xmc_uart.h **** /**************************************************************************************************
  68:..//Libraries/XMCLib/inc/xmc_uart.h ****  * HEADER FILES
  69:..//Libraries/XMCLib/inc/xmc_uart.h ****  **************************************************************************************************
  70:..//Libraries/XMCLib/inc/xmc_uart.h **** 
  71:..//Libraries/XMCLib/inc/xmc_uart.h **** #include "xmc_usic.h"
  72:..//Libraries/XMCLib/inc/xmc_uart.h **** 
  73:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
  74:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @addtogroup XMClib XMC Peripheral Library
  75:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @{
  76:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
  77:..//Libraries/XMCLib/inc/xmc_uart.h **** 
  78:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
  79:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @addtogroup UART
  80:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @brief Universal Asynchronous Receiver/Transmitter (UART) driver for XMC microcontroller family.
  81:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
  82:..//Libraries/XMCLib/inc/xmc_uart.h ****  * The UART driver uses Universal Serial Interface Channel(USIC) module to implement UART protocol.
  83:..//Libraries/XMCLib/inc/xmc_uart.h ****  * It provides APIs to configure USIC channel for UART communication. The driver enables the user
  84:..//Libraries/XMCLib/inc/xmc_uart.h ****  * in getting the status of UART protocol events, configuring interrupt service requests, protocol
  85:..//Libraries/XMCLib/inc/xmc_uart.h ****  * related parameter configuration etc.
  86:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 
  87:..//Libraries/XMCLib/inc/xmc_uart.h ****  * UART driver features:
  88:..//Libraries/XMCLib/inc/xmc_uart.h ****  * -# Configuration structure XMC_UART_CH_CONFIG_t and initialization function XMC_UART_CH_Init()
  89:..//Libraries/XMCLib/inc/xmc_uart.h ****  * -# Enumeration of events with their bit masks @ref XMC_UART_CH_EVENT_t, @ref XMC_UART_CH_STATUS_
  90:..//Libraries/XMCLib/inc/xmc_uart.h ****  * -# Allows the selection of input source for the DX0 input stage using the API XMC_UART_CH_SetInp
  91:..//Libraries/XMCLib/inc/xmc_uart.h ****  * -# Allows configuration of baudrate using XMC_UART_CH_SetBaudrate() and configuration of data le
  92:..//Libraries/XMCLib/inc/xmc_uart.h ****  XMC_UART_CH_SetWordLength() and XMC_UART_CH_SetFrameLength()
  93:..//Libraries/XMCLib/inc/xmc_uart.h ****  * -# Provides the status of UART protocol events, XMC_UART_CH_GetStatusFlag()
  94:..//Libraries/XMCLib/inc/xmc_uart.h ****  * -# Allows transmission of data using XMC_UART_CH_Transmit() and gets received data using XMC_UAR
  95:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 
  96:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @{
  97:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
  98:..//Libraries/XMCLib/inc/xmc_uart.h **** 
  99:..//Libraries/XMCLib/inc/xmc_uart.h **** /**************************************************************************************************
 100:..//Libraries/XMCLib/inc/xmc_uart.h ****  * MACROS
 101:..//Libraries/XMCLib/inc/xmc_uart.h ****  **************************************************************************************************
 102:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 103:..//Libraries/XMCLib/inc/xmc_uart.h **** #if defined(USIC0)
 104:..//Libraries/XMCLib/inc/xmc_uart.h **** #define XMC_UART0_CH0 XMC_USIC0_CH0 /**< USIC0 channel 0 base address */
 105:..//Libraries/XMCLib/inc/xmc_uart.h **** #define XMC_UART0_CH1 XMC_USIC0_CH1 /**< USIC0 channel 1 base address */
 106:..//Libraries/XMCLib/inc/xmc_uart.h **** #endif
 107:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 108:..//Libraries/XMCLib/inc/xmc_uart.h **** #if defined(USIC1)
 109:..//Libraries/XMCLib/inc/xmc_uart.h **** #define XMC_UART1_CH0 XMC_USIC1_CH0 /**< USIC1 channel 0 base address */
 110:..//Libraries/XMCLib/inc/xmc_uart.h **** #define XMC_UART1_CH1 XMC_USIC1_CH1 /**< USIC1 channel 1 base address */
 111:..//Libraries/XMCLib/inc/xmc_uart.h **** #endif
 112:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 113:..//Libraries/XMCLib/inc/xmc_uart.h **** #if defined(USIC2)
 114:..//Libraries/XMCLib/inc/xmc_uart.h **** #define XMC_UART2_CH0 XMC_USIC2_CH0 /**< USIC2 channel 0 base address */
 115:..//Libraries/XMCLib/inc/xmc_uart.h **** #define XMC_UART2_CH1 XMC_USIC2_CH1 /**< USIC2 channel 1 base address */
 116:..//Libraries/XMCLib/inc/xmc_uart.h **** #endif
 117:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 118:..//Libraries/XMCLib/inc/xmc_uart.h **** /**************************************************************************************************
 119:..//Libraries/XMCLib/inc/xmc_uart.h ****  * ENUMS
 120:..//Libraries/XMCLib/inc/xmc_uart.h ****  **************************************************************************************************
 121:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 122:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 123:..//Libraries/XMCLib/inc/xmc_uart.h ****  * UART driver status
 124:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 125:..//Libraries/XMCLib/inc/xmc_uart.h **** typedef enum XMC_UART_CH_STATUS
 126:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 127:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_OK,     /**< UART driver status : OK*/
 128:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_ERROR,  /**< UART driver status : ERROR */
 129:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_BUSY    /**< UART driver status : BUSY */
 130:..//Libraries/XMCLib/inc/xmc_uart.h **** } XMC_UART_CH_STATUS_t;
 131:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 132:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 133:..//Libraries/XMCLib/inc/xmc_uart.h **** * UART portocol status. The enum values can be used for getting the status of UART channel.
 134:..//Libraries/XMCLib/inc/xmc_uart.h **** *
 135:..//Libraries/XMCLib/inc/xmc_uart.h **** */
 136:..//Libraries/XMCLib/inc/xmc_uart.h **** typedef enum XMC_UART_CH_STATUS_FLAG
 137:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 138:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE = USIC_CH_PSR_ASCMode_TXIDLE_Msk,                 /**< 
 139:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEPTION_IDLE = USIC_CH_PSR_ASCMode_RXIDLE_Msk,                    /**< 
 140:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED = USIC_CH_PSR_ASCMode_SBD_Msk,       /**< 
 141:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_COLLISION_DETECTED = USIC_CH_PSR_ASCMode_COL_Msk,                   /**< 
 142:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVER_NOISE_DETECTED = USIC_CH_PSR_ASCMode_RNS_Msk,              /**< 
 143:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_FORMAT_ERROR_IN_STOP_BIT_0 = USIC_CH_PSR_ASCMode_FER0_Msk,          /**< 
 144:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_FORMAT_ERROR_IN_STOP_BIT_1 = USIC_CH_PSR_ASCMode_FER1_Msk,          /**< 
 145:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVE_FRAME_FINISHED = USIC_CH_PSR_ASCMode_RFF_Msk,               /**< 
 146:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMITTER_FRAME_FINISHED = USIC_CH_PSR_ASCMode_TFF_Msk,           /**< 
 147:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSFER_STATUS_BUSY = USIC_CH_PSR_ASCMode_BUSY_Msk,                /**< 
 148:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_ASCMode_RSIF_Msk,           /**< 
 149:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_ASCMode_DLIF_Msk,                /**< 
 150:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_ASCMode_TSIF_Msk,           /**< 
 151:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_ASCMode_TBIF_Msk,          /**< 
 152:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_ASCMode_RIF_Msk,                   /**< 
 153:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_ASCMode_AIF_Msk,       /**< 
 154:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_ASCMode_BRGIF_Msk      /**< 
 155:..//Libraries/XMCLib/inc/xmc_uart.h **** } XMC_UART_CH_STATUS_FLAG_t;
 156:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 157:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 158:..//Libraries/XMCLib/inc/xmc_uart.h **** * UART configuration events. The enums can be used for configuring events using the CCR register.
 159:..//Libraries/XMCLib/inc/xmc_uart.h **** */
 160:..//Libraries/XMCLib/inc/xmc_uart.h **** typedef enum XMC_CH_UART_EVENT
 161:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 162:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 163:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 164:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 165:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 166:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 167:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 168:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 169:..//Libraries/XMCLib/inc/xmc_uart.h ****   
 170:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_EVENT_SYNCHRONIZATION_BREAK = USIC_CH_PCR_ASCMode_SBIEN_Msk, /**< Event synchronizati
 171:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_EVENT_COLLISION = USIC_CH_PCR_ASCMode_CDEN_Msk,              /**< Event collision */
 172:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_EVENT_RECEIVER_NOISE = USIC_CH_PCR_ASCMode_RNIEN_Msk,        /**< Event receiver nois
 173:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_EVENT_FORMAT_ERROR = USIC_CH_PCR_ASCMode_FEIEN_Msk,          /**< Event format error 
 174:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_EVENT_FRAME_FINISHED = USIC_CH_PCR_ASCMode_FFIEN_Msk         /**< Event frame finishe
 175:..//Libraries/XMCLib/inc/xmc_uart.h **** } XMC_UART_CH_EVENT_t;
 176:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 177:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 178:..//Libraries/XMCLib/inc/xmc_uart.h ****  * UART Input sampling frequency options
 179:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 180:..//Libraries/XMCLib/inc/xmc_uart.h **** typedef enum XMC_UART_CH_INPUT_SAMPLING_FREQ
 181:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 182:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_INPUT_SAMPLING_FREQ_FPERIPH            = XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH,    
 183:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_D
 184:..//Libraries/XMCLib/inc/xmc_uart.h **** } XMC_UART_CH_INPUT_SAMPLING_FREQ_t;
 185:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 186:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 187:..//Libraries/XMCLib/inc/xmc_uart.h ****  * UART input stages
 188:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 189:..//Libraries/XMCLib/inc/xmc_uart.h **** typedef enum XMC_UART_CH_INPUT
 190:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 191:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_INPUT_RXD = 0UL   /**< UART input stage DX0*/
 192:..//Libraries/XMCLib/inc/xmc_uart.h **** #if UC_FAMILY == XMC1
 193:..//Libraries/XMCLib/inc/xmc_uart.h ****   ,
 194:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_INPUT_RXD1 = 3UL, /**< UART input stage DX3*/
 195:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_INPUT_RXD2 = 5UL  /**< UART input stage DX5*/
 196:..//Libraries/XMCLib/inc/xmc_uart.h **** #endif
 197:..//Libraries/XMCLib/inc/xmc_uart.h **** } XMC_UART_CH_INPUT_t;
 198:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 199:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 200:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 201:..//Libraries/XMCLib/inc/xmc_uart.h ****  * UART channel interrupt node pointers
 202:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 203:..//Libraries/XMCLib/inc/xmc_uart.h **** typedef enum XMC_UART_CH_INTERRUPT_NODE_POINTER
 204:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 205:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANS
 206:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANS
 207:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEI
 208:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTER
 209:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTO
 210:..//Libraries/XMCLib/inc/xmc_uart.h **** } XMC_UART_CH_INTERRUPT_NODE_POINTER_t;
 211:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 212:..//Libraries/XMCLib/inc/xmc_uart.h **** /**************************************************************************************************
 213:..//Libraries/XMCLib/inc/xmc_uart.h ****  * DATA STRUCTURES
 214:..//Libraries/XMCLib/inc/xmc_uart.h ****  **************************************************************************************************
 215:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 216:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 217:..//Libraries/XMCLib/inc/xmc_uart.h ****  * UART initialization structure
 218:..//Libraries/XMCLib/inc/xmc_uart.h **** */
 219:..//Libraries/XMCLib/inc/xmc_uart.h **** typedef struct XMC_UART_CH_CONFIG
 220:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 221:..//Libraries/XMCLib/inc/xmc_uart.h ****   uint32_t baudrate;                         /**< Desired baudrate. \b Range: minimum= 100, maximum
 222:..//Libraries/XMCLib/inc/xmc_uart.h ****   uint8_t data_bits;                         /**< Number of bits for the data field. Value configur
 223:..//Libraries/XMCLib/inc/xmc_uart.h ****                                                   \b Range: minimum= 1, maximum= 16*/
 224:..//Libraries/XMCLib/inc/xmc_uart.h ****   uint8_t frame_length;                      /**< Indicates nmber of bits in a frame. Configured as
 225:..//Libraries/XMCLib/inc/xmc_uart.h ****                                                   \b Range: minimum= 1, maximum= 63*/
 226:..//Libraries/XMCLib/inc/xmc_uart.h ****   uint8_t stop_bits;                         /**< Number of stop bits. \b Range: minimum= 1, maximu
 227:..//Libraries/XMCLib/inc/xmc_uart.h ****   uint8_t oversampling;						           /**< Number of samples for a symbol(DCTQ).\b Range: minimum
 228:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_USIC_CH_PARITY_MODE_t parity_mode;     /**< Parity mode. \b Range: @ref XMC_USIC_CH_PARITY_MO
 229:..//Libraries/XMCLib/inc/xmc_uart.h ****                                                   @ref XMC_USIC_CH_PARITY_MODE_ODD*/
 230:..//Libraries/XMCLib/inc/xmc_uart.h **** } XMC_UART_CH_CONFIG_t;
 231:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 232:..//Libraries/XMCLib/inc/xmc_uart.h **** /**************************************************************************************************
 233:..//Libraries/XMCLib/inc/xmc_uart.h ****  * API PROTOTYPES
 234:..//Libraries/XMCLib/inc/xmc_uart.h ****  **************************************************************************************************
 235:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 236:..//Libraries/XMCLib/inc/xmc_uart.h **** #ifdef __cplusplus
 237:..//Libraries/XMCLib/inc/xmc_uart.h **** extern "C" {
 238:..//Libraries/XMCLib/inc/xmc_uart.h **** #endif
 239:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 240:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 241:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 242:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, XMC_UART0_CH1,XMC_UART1_CH0, XMC_UART1_CH1,XMC_UART2_CH0, XM
 243:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param config Constant pointer to UART configuration structure of type @ref XMC_UART_CH_CONFIG_t
 244:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status of initializing the USIC channel for UART protocol.\n
 245:..//Libraries/XMCLib/inc/xmc_uart.h ****  *          \b Range: @ref XMC_UART_CH_STATUS_OK if initialization is successful.\n
 246:..//Libraries/XMCLib/inc/xmc_uart.h ****  *                    @ref XMC_UART_CH_STATUS_ERROR if configuration of baudrate failed.
 247:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 248:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 249:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Initializes the USIC channel for UART protocol.\n\n
 250:..//Libraries/XMCLib/inc/xmc_uart.h ****  * During the initialization, USIC channel is enabled, baudrate is configured with the defined over
 251:..//Libraries/XMCLib/inc/xmc_uart.h ****  * in the intialization structure. If the oversampling value is set to 0 in the structure, the defa
 252:..//Libraries/XMCLib/inc/xmc_uart.h ****  * is considered. Sampling point for each symbol is configured at the half of sampling period. Symb
 253:..//Libraries/XMCLib/inc/xmc_uart.h ****  * majority decision among 3 samples. 
 254:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Word length is configured with the number of data bits. If the value of \a frame_length is 0, th
 255:..//Libraries/XMCLib/inc/xmc_uart.h ****  * is set to the same value as word length. If \a frame_length is greater than 0, it is set as the 
 256:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Parity mode is set to the value configured for \a parity_mode.
 257:..//Libraries/XMCLib/inc/xmc_uart.h ****  * The USIC channel should be set to UART mode by calling the XMC_UART_CH_Start() API after the ini
 258:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 259:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 260:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 261:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 262:..//Libraries/XMCLib/inc/xmc_uart.h **** void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config);
 263:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 264:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 265:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 266:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 267:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return None
 268:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 269:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 270:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Sets the USIC channel operation mode to UART mode.\n\n
 271:..//Libraries/XMCLib/inc/xmc_uart.h ****  * CCR register bitfield \a Mode is set to 2(UART mode). This API should be called after configurin
 272:..//Libraries/XMCLib/inc/xmc_uart.h ****  * the USIC channel. Transmission and reception can happen only when the UART mode is set. 
 273:..//Libraries/XMCLib/inc/xmc_uart.h ****  * This is an inline function.
 274:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 275:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 276:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 277:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 278:..//Libraries/XMCLib/inc/xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
 279:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 280:..//Libraries/XMCLib/inc/xmc_uart.h ****   channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPER
 281:..//Libraries/XMCLib/inc/xmc_uart.h **** }
 282:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 283:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 284:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 285:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 286:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status to indicate if the communication channel is stopped successf
 287:..//Libraries/XMCLib/inc/xmc_uart.h ****  *                              @ref XMC_UART_CH_STATUS_OK if the communication channel is stopped.
 288:..//Libraries/XMCLib/inc/xmc_uart.h ****  *                              @ref XMC_UART_CH_STATUS_BUSY if the communication channel is busy.
 289:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 290:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 291:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Stops the UART communication.\n\n
 292:..//Libraries/XMCLib/inc/xmc_uart.h ****  * CCR register bitfield \a Mode is reset. This disables the communication.
 293:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Before starting the communication again, the channel has to be reconfigured.
 294:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 295:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 296:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_Init() \n\n\n
 297:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 298:..//Libraries/XMCLib/inc/xmc_uart.h **** XMC_UART_CH_STATUS_t XMC_UART_CH_Stop(XMC_USIC_CH_t *const channel);
 299:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 300:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 301:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 302:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				   \b Range: @ref XMC_UART0_CH0, XMC_UART0_CH1 ,XMC_UART1_CH0, XMC_UART1_CH1, XMC_UART2_CH0,
 303:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param rate Desired baudrate. \n
 304:..//Libraries/XMCLib/inc/xmc_uart.h ****  *           \b Range: minimum value = 100, maximum value depends on the peripheral clock frequency
 305:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				   and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/
 306:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 307:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 					 This can be related to the number of samples for each logic state of the data signal.\n
 308:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 					 \b Range: 4 to 32. Value should be chosen based on the protocol used.
 309:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status indicating the baudrate configuration.\n
 310:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 			     \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 311:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 					 @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 312:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 313:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description:</b><br>
 314:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Sets the bus speed in bits per second.\n\n
 315:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Derives the values of \a STEP and PDIV to arrive at the optimum realistic speed possible.
 316:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \a oversampling is the number of samples to be taken for each symbol of UART protocol.
 317:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Default \a oversampling of 16 is considered if the input \a oversampling is less than 4. It is r
 318:..//Libraries/XMCLib/inc/xmc_uart.h ****  * a minimum oversampling of 4 for UART.
 319:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 320:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 321:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_Init(), XMC_UART_CH_Stop()
 322:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 323:..//Libraries/XMCLib/inc/xmc_uart.h **** XMC_UART_CH_STATUS_t XMC_UART_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 324:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 325:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 326:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 327:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 328:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param  data Data to be transmitted. \n 
 329:..//Libraries/XMCLib/inc/xmc_uart.h ****  *          \b Range: 16 bit unsigned data within the range 0 to 65535. Actual size of
 330:..//Libraries/XMCLib/inc/xmc_uart.h ****  *          data transmitted depends on the configured number of bits for the UART protocol in the 
 331:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return None
 332:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 333:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 334:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Transmits data over serial communication channel using UART protocol.\n\n
 335:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Based on the channel configuration, data is either put to the transmit FIFO or to TBUF register.
 336:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Before putting data to TBUF, the API waits for TBUF to finish shifting its contents to shift reg
 337:..//Libraries/XMCLib/inc/xmc_uart.h ****  * So user can continuously execute the API without checking for TBUF busy status. Based on the num
 338:..//Libraries/XMCLib/inc/xmc_uart.h ****  * data bits configured, the lower significant bits will be extracted for transmission.
 339:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 340:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Note: When FIFO is not configured, the API waits for the TBUF to be available. 
 341:..//Libraries/XMCLib/inc/xmc_uart.h ****  * This makes the execution a blocking call.
 342:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 343:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 344:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_GetReceivedData() \n\n\n
 345:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 346:..//Libraries/XMCLib/inc/xmc_uart.h **** void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data);
 347:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 348:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 349:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 350:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 351:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return uint16_t Received data over UART communication channel.
 352:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 353:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Provides one word of data received over UART communication channel.\n\n
 354:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Based on the channel configuration, data is either read from the receive FIFO or RBUF register.
 355:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Before returning the value, there is no check for data validity. User should check the appropria
 356:..//Libraries/XMCLib/inc/xmc_uart.h ****  * data receive flags(standard receive/alternative receive/FIFO standard receive/FIFO alternative r
 357:..//Libraries/XMCLib/inc/xmc_uart.h ****  * before executing the API. Reading from an empty receive FIFO can generate a receive error event.
 358:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 359:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 360:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_GetStatusFlag(), XMC_UART_CH_Transmit() \n\n\n
 361:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 362:..//Libraries/XMCLib/inc/xmc_uart.h **** uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 363:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 364:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 365:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param  channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 366:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 367:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param  word_length Data word length. \n
 368:..//Libraries/XMCLib/inc/xmc_uart.h ****  *          \b Range: minimum= 1, maximum= 16.
 369:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return None
 370:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 371:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 372:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Sets the data word length in number of bits.\n\n
 373:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Word length can range from 1 to 16. It indicates the number of data bits in a data word.
 374:..//Libraries/XMCLib/inc/xmc_uart.h ****  * The value of \a word_length will be decremented by 1 before setting the value to \a SCTR registe
 375:..//Libraries/XMCLib/inc/xmc_uart.h ****  * If the UART data bits is more than 16, then the frame length should be set to the actual number 
 376:..//Libraries/XMCLib/inc/xmc_uart.h ****  * word length should be configured with the number of bits expected in each transaction. For examp
 377:..//Libraries/XMCLib/inc/xmc_uart.h ****  * for UART communication is 20 bits, then the frame length should be set as 20. Word length can be
 378:..//Libraries/XMCLib/inc/xmc_uart.h ****  * transmit and receive handling. If data is stored as 8bit array, then the word length can be set 
 379:..//Libraries/XMCLib/inc/xmc_uart.h ****  * a full message of UART data should be transmitted/ received as 3 data words.
 380:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 381:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 382:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_SetFrameLength() \n\n\n
 383:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 384:..//Libraries/XMCLib/inc/xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
 385:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 386:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_USIC_CH_SetWordLength(channel, word_length);
 387:..//Libraries/XMCLib/inc/xmc_uart.h **** }
 388:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 389:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 390:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param  channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 391:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 392:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param  frame_length Number of data bits in each UART frame. \n
 393:..//Libraries/XMCLib/inc/xmc_uart.h ****  *          \b Range: minimum= 1, maximum= 64.
 394:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return None
 395:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 396:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 397:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Sets the number of data bits for UART communication.\n\n
 398:..//Libraries/XMCLib/inc/xmc_uart.h ****  * The frame length is configured by setting the input value to \a SCTR register.
 399:..//Libraries/XMCLib/inc/xmc_uart.h ****  * The value of \a frame_length will be decremented by 1, before setting it to the register.
 400:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Frame length should not be set to 64 for UART communication.
 401:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 402:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 403:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_SetWordLength() \n\n\n
 404:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 405:..//Libraries/XMCLib/inc/xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
 406:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 407:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_USIC_CH_SetFrameLength(channel, frame_length);
 408:..//Libraries/XMCLib/inc/xmc_uart.h **** }
 409:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 410:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 411:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 412:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 413:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param  event Event bitmasks to enable. Use the type @ref XMC_UART_CH_EVENT_t for naming events.
 414:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART_CH_EVENT_RECEIVE_START, @ref XMC_UART_CH_EVENT_DATA_LOST,
 415:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  @ref XMC_UART_CH_EVENT_TRANSMIT_SHIFT, @ref XMC_UART_CH_EVENT_TRANSMIT_BUFFER,
 416:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  etc.
 417:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return None
 418:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 419:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 420:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Enables interrupt events for UART communication.\n\n
 421:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 422:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @ref XMC_UART_CH_EVENT_t enumerates multiple event bitmasks. These enumerations can be used as i
 423:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Events are configured by setting bits in the CCR register.
 424:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 425:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_DisableEvent(), XMC_UART_CH_SetInterruptNodePointer(), XMC_UART_CH_GetStatusFlag() \
 426:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 427:..//Libraries/XMCLib/inc/xmc_uart.h **** void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 428:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 429:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 430:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 431:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 432:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param  event Bitmask of events to disable. Use the type @ref XMC_UART_CH_EVENT_t for naming eve
 433:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART_CH_EVENT_RECEIVE_START, @ref XMC_UART_CH_EVENT_DATA_LOST,
 434:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  @ref XMC_UART_CH_EVENT_TRANSMIT_SHIFT, @ref XMC_UART_CH_EVENT_TRANSMIT_BUFFER,
 435:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  etc.
 436:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return None
 437:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 438:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 439:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Disables the interrupt events by clearing the bits in CCR register.\n\n
 440:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 441:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_EVENT_FLAG_t enumerates multiple event bitmasks. These enumerations can be used as i
 442:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 443:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 444:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_ClearStatusFlag(), XMC_UART_CH_EnableEvent() \n\n\n
 445:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 446:..//Libraries/XMCLib/inc/xmc_uart.h **** void XMC_UART_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 447:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 448:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 449:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 450:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 451:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param service_request Service request number for generating protocol interrupts.\n
 452:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: 0 to 5.
 453:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return None
 454:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 455:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 456:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Sets the interrupt node for UART channel protocol events.\n\n
 457:..//Libraries/XMCLib/inc/xmc_uart.h ****  * For all the protocol events enlisted in the enumeration XMC_UART_CH_EVENT_t, one common
 458:..//Libraries/XMCLib/inc/xmc_uart.h ****  * interrupt gets generated. The service request connects the interrupt node to the UART 
 459:..//Libraries/XMCLib/inc/xmc_uart.h ****  * protocol events.
 460:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 461:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 462:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 463:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_EnableEvent() \n\n\n
 464:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 465:..//Libraries/XMCLib/inc/xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 466:..//Libraries/XMCLib/inc/xmc_uart.h ****                                                          const uint8_t service_request)
 467:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 468:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, 
 469:..//Libraries/XMCLib/inc/xmc_uart.h ****                                               (uint32_t)service_request);
 470:..//Libraries/XMCLib/inc/xmc_uart.h **** }
 471:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 472:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 473:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 474:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 475:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 476:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 						  \b Range: @ref XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 477:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 						  			@ref XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 478:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param service_request Service request number.\n
 479:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 						  \b Range: 0 to 5.
 480:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return None
 481:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 482:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 483:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Sets the interrupt node for USIC channel events. \n\n
 484:..//Libraries/XMCLib/inc/xmc_uart.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 485:..//Libraries/XMCLib/inc/xmc_uart.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 486:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 487:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 488:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 489:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_EnableEvent() \n\n\n
 490:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 491:..//Libraries/XMCLib/inc/xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 492:..//Libraries/XMCLib/inc/xmc_uart.h ****                                                             const XMC_UART_CH_INTERRUPT_NODE_POINTE
 493:..//Libraries/XMCLib/inc/xmc_uart.h ****                                                             const uint32_t service_request)
 494:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 495:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 496:..//Libraries/XMCLib/inc/xmc_uart.h **** 		                                       (uint32_t)service_request);
 497:..//Libraries/XMCLib/inc/xmc_uart.h **** }
 498:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 499:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 500:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 501:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				   \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@r
 502:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 503:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 			\b Range: 0 to 5.
 504:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return None
 505:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 506:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 507:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Trigger a UART interrupt service request.\n\n
 508:..//Libraries/XMCLib/inc/xmc_uart.h ****  * When the UART service request is triggered, the NVIC interrupt associated with it will be
 509:..//Libraries/XMCLib/inc/xmc_uart.h ****  * generated if enabled.
 510:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 511:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 512:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_SelectInterruptNodePointer() \n\n\n
 513:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 514:..//Libraries/XMCLib/inc/xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
 515:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 516:..//Libraries/XMCLib/inc/xmc_uart.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 517:..//Libraries/XMCLib/inc/xmc_uart.h **** }
 518:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 519:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 520:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 521:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 522:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return Status of UART channel events. \n 
 523:..//Libraries/XMCLib/inc/xmc_uart.h ****  *          \b Range: Use @ref XMC_UART_CH_STATUS_FLAG_t enumerations for
 524:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 					event bitmasks. @ref XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE, @ref XMC_UART_CH_STATUS_FLA
 525:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 					@ref XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED etc.
 526:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 527:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 528:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Provides the status of UART channel events.\n\n
 529:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Status provided by the API represents the status of multiple events at their bit positions. The 
 530:..//Libraries/XMCLib/inc/xmc_uart.h ****  * obtained using the enumeration XMC_UART_CH_STATUS_FLAG_t. Event status is obtained by reading
 531:..//Libraries/XMCLib/inc/xmc_uart.h ****  * the register PSR_ASCMode.
 532:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 533:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 534:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_EnableEvent(),  XMC_UART_CH_ClearStatusFlag()\n\n\n
 535:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 536:..//Libraries/XMCLib/inc/xmc_uart.h **** __STATIC_INLINE uint32_t XMC_UART_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 537:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 121              	 .loc 2 537 1
 122              	 .cfi_startproc
 123              	 
 124              	 
 125 0000 80B5     	 push {r7,lr}
 126              	.LCFI6:
 127              	 .cfi_def_cfa_offset 8
 128              	 .cfi_offset 7,-8
 129              	 .cfi_offset 14,-4
 130 0002 82B0     	 sub sp,sp,#8
 131              	.LCFI7:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI8:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 538:..//Libraries/XMCLib/inc/xmc_uart.h ****   return channel->PSR_ASCMode;
 137              	 .loc 2 538 17
 138 0008 7B68     	 ldr r3,[r7,#4]
 139 000a 9B6C     	 ldr r3,[r3,#72]
 539:..//Libraries/XMCLib/inc/xmc_uart.h **** }
 140              	 .loc 2 539 1
 141 000c 1800     	 movs r0,r3
 142 000e BD46     	 mov sp,r7
 143 0010 02B0     	 add sp,sp,#8
 144              	 
 145 0012 80BD     	 pop {r7,pc}
 146              	 .cfi_endproc
 147              	.LFE126:
 149              	 .section .text.XMC_UART_CH_ClearStatusFlag,"ax",%progbits
 150              	 .align 1
 151              	 .syntax unified
 152              	 .code 16
 153              	 .thumb_func
 154              	 .fpu softvfp
 156              	XMC_UART_CH_ClearStatusFlag:
 157              	.LFB127:
 540:..//Libraries/XMCLib/inc/xmc_uart.h **** 
 541:..//Libraries/XMCLib/inc/xmc_uart.h **** /**
 542:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 543:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 544:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @param flag UART events to be cleared. \n
 545:..//Libraries/XMCLib/inc/xmc_uart.h ****  *          \b Range: Use @ref XMC_UART_CH_STATUS_FLAG_t enumerations for
 546:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 					event bitmasks. @ref XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE, @ref XMC_UART_CH_STATUS_FLA
 547:..//Libraries/XMCLib/inc/xmc_uart.h ****  * 					@ref XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED etc.
 548:..//Libraries/XMCLib/inc/xmc_uart.h ****  * @return None
 549:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 550:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Description</b><br>
 551:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Clears the status of UART channel events.\n\n
 552:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 553:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_STATUS_FLAG_t enumerates multiple event bitmasks. These enumerations can be used as 
 554:..//Libraries/XMCLib/inc/xmc_uart.h ****  * Events are cleared by setting the bitmask to the PSCR register.
 555:..//Libraries/XMCLib/inc/xmc_uart.h ****  *
 556:..//Libraries/XMCLib/inc/xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 557:..//Libraries/XMCLib/inc/xmc_uart.h ****  * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 558:..//Libraries/XMCLib/inc/xmc_uart.h ****  */
 559:..//Libraries/XMCLib/inc/xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 560:..//Libraries/XMCLib/inc/xmc_uart.h **** {
 158              	 .loc 2 560 1
 159              	 .cfi_startproc
 160              	 
 161              	 
 162 0000 80B5     	 push {r7,lr}
 163              	.LCFI9:
 164              	 .cfi_def_cfa_offset 8
 165              	 .cfi_offset 7,-8
 166              	 .cfi_offset 14,-4
 167 0002 82B0     	 sub sp,sp,#8
 168              	.LCFI10:
 169              	 .cfi_def_cfa_offset 16
 170 0004 00AF     	 add r7,sp,#0
 171              	.LCFI11:
 172              	 .cfi_def_cfa_register 7
 173 0006 7860     	 str r0,[r7,#4]
 174 0008 3960     	 str r1,[r7]
 561:..//Libraries/XMCLib/inc/xmc_uart.h ****   channel->PSCR = flag;
 175              	 .loc 2 561 17
 176 000a 7B68     	 ldr r3,[r7,#4]
 177 000c 3A68     	 ldr r2,[r7]
 178 000e DA64     	 str r2,[r3,#76]
 562:..//Libraries/XMCLib/inc/xmc_uart.h **** }
 179              	 .loc 2 562 1
 180 0010 C046     	 nop
 181 0012 BD46     	 mov sp,r7
 182 0014 02B0     	 add sp,sp,#8
 183              	 
 184 0016 80BD     	 pop {r7,pc}
 185              	 .cfi_endproc
 186              	.LFE127:
 188              	 .section .text.XMC_UART_CH_Init,"ax",%progbits
 189              	 .align 1
 190              	 .global XMC_UART_CH_Init
 191              	 .syntax unified
 192              	 .code 16
 193              	 .thumb_func
 194              	 .fpu softvfp
 196              	XMC_UART_CH_Init:
 197              	.LFB142:
 198              	 .file 3 "../Libraries/XMCLib/src/xmc_uart.c"
   1:../Libraries/XMCLib/src/xmc_uart.c **** /**
   2:../Libraries/XMCLib/src/xmc_uart.c ****  * @file xmc_uart.c
   3:../Libraries/XMCLib/src/xmc_uart.c ****  * @date 2016-07-22
   4:../Libraries/XMCLib/src/xmc_uart.c ****  *
   5:../Libraries/XMCLib/src/xmc_uart.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_uart.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_uart.c ****  *
   9:../Libraries/XMCLib/src/xmc_uart.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_uart.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_uart.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_uart.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_uart.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_uart.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_uart.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_uart.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_uart.c ****  * 
  18:../Libraries/XMCLib/src/xmc_uart.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_uart.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_uart.c ****  * 
  21:../Libraries/XMCLib/src/xmc_uart.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_uart.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_uart.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_uart.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_uart.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_uart.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_uart.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_uart.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_uart.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_uart.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_uart.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_uart.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_uart.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_uart.c ****  *
  36:../Libraries/XMCLib/src/xmc_uart.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_uart.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_uart.c ****  *
  39:../Libraries/XMCLib/src/xmc_uart.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_uart.c ****  *      
  42:../Libraries/XMCLib/src/xmc_uart.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_uart.c ****  *     - xmc_uart_ch_stop API implementation corrected.
  44:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Modified XMC_UART_CH_Stop() API for not setting to IDLE the channel if it is busy <br>
  45:../Libraries/XMCLib/src/xmc_uart.c ****  *
  46:../Libraries/XMCLib/src/xmc_uart.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Removed GetDriverVersion API <br>
  48:../Libraries/XMCLib/src/xmc_uart.c ****  *
  49:../Libraries/XMCLib/src/xmc_uart.c ****  * 2015-09-01:
  50:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Modified XMC_UART_CH_EnableEvent() and XMC_UART_CH_DisableEvent() for supporting multiple 
  51:../Libraries/XMCLib/src/xmc_uart.c ****  * 
  52:../Libraries/XMCLib/src/xmc_uart.c ****  * 2016-07-22:
  53:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Modified XMC_UART_CH_Init() to enable transfer status BUSY
  54:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Modified XMC_UART_CH_Stop() to check for transfer status
  55:../Libraries/XMCLib/src/xmc_uart.c ****  *
  56:../Libraries/XMCLib/src/xmc_uart.c ****  * @endcond 
  57:../Libraries/XMCLib/src/xmc_uart.c ****  *
  58:../Libraries/XMCLib/src/xmc_uart.c ****  */
  59:../Libraries/XMCLib/src/xmc_uart.c **** 
  60:../Libraries/XMCLib/src/xmc_uart.c **** /**************************************************************************************************
  61:../Libraries/XMCLib/src/xmc_uart.c ****  * HEADER FILES
  62:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
  63:../Libraries/XMCLib/src/xmc_uart.c **** 
  64:../Libraries/XMCLib/src/xmc_uart.c **** #include <xmc_scu.h>
  65:../Libraries/XMCLib/src/xmc_uart.c **** #include <xmc_uart.h>
  66:../Libraries/XMCLib/src/xmc_uart.c **** 
  67:../Libraries/XMCLib/src/xmc_uart.c **** /**************************************************************************************************
  68:../Libraries/XMCLib/src/xmc_uart.c ****  * MACROS
  69:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
  70:../Libraries/XMCLib/src/xmc_uart.c ****  
  71:../Libraries/XMCLib/src/xmc_uart.c **** #define XMC_UART_CH_OVERSAMPLING (16UL)
  72:../Libraries/XMCLib/src/xmc_uart.c **** #define XMC_UART_CH_OVERSAMPLING_MIN_VAL (4UL)
  73:../Libraries/XMCLib/src/xmc_uart.c **** 
  74:../Libraries/XMCLib/src/xmc_uart.c **** /**************************************************************************************************
  75:../Libraries/XMCLib/src/xmc_uart.c ****  * API IMPLEMENTATION
  76:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
  77:../Libraries/XMCLib/src/xmc_uart.c **** 
  78:../Libraries/XMCLib/src/xmc_uart.c **** void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
  79:../Libraries/XMCLib/src/xmc_uart.c **** {
 199              	 .loc 3 79 1
 200              	 .cfi_startproc
 201              	 
 202              	 
 203 0000 80B5     	 push {r7,lr}
 204              	.LCFI12:
 205              	 .cfi_def_cfa_offset 8
 206              	 .cfi_offset 7,-8
 207              	 .cfi_offset 14,-4
 208 0002 84B0     	 sub sp,sp,#16
 209              	.LCFI13:
 210              	 .cfi_def_cfa_offset 24
 211 0004 00AF     	 add r7,sp,#0
 212              	.LCFI14:
 213              	 .cfi_def_cfa_register 7
 214 0006 7860     	 str r0,[r7,#4]
 215 0008 3960     	 str r1,[r7]
  80:../Libraries/XMCLib/src/xmc_uart.c ****   uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 216              	 .loc 3 80 12
 217 000a 1023     	 movs r3,#16
 218 000c FB60     	 str r3,[r7,#12]
  81:../Libraries/XMCLib/src/xmc_uart.c **** 
  82:../Libraries/XMCLib/src/xmc_uart.c ****   /* USIC channel switched on*/
  83:../Libraries/XMCLib/src/xmc_uart.c ****   XMC_USIC_CH_Enable(channel);
 219              	 .loc 3 83 3
 220 000e 7B68     	 ldr r3,[r7,#4]
 221 0010 1800     	 movs r0,r3
 222 0012 FFF7FEFF 	 bl XMC_USIC_CH_Enable
  84:../Libraries/XMCLib/src/xmc_uart.c ****   
  85:../Libraries/XMCLib/src/xmc_uart.c ****   if(config->oversampling != 0U)
 223              	 .loc 3 85 12
 224 0016 3B68     	 ldr r3,[r7]
 225 0018 DB79     	 ldrb r3,[r3,#7]
 226              	 .loc 3 85 5
 227 001a 002B     	 cmp r3,#0
 228 001c 02D0     	 beq .L8
  86:../Libraries/XMCLib/src/xmc_uart.c ****   {
  87:../Libraries/XMCLib/src/xmc_uart.c ****     oversampling = (uint32_t)config->oversampling;
 229              	 .loc 3 87 36
 230 001e 3B68     	 ldr r3,[r7]
 231 0020 DB79     	 ldrb r3,[r3,#7]
 232              	 .loc 3 87 18
 233 0022 FB60     	 str r3,[r7,#12]
 234              	.L8:
  88:../Libraries/XMCLib/src/xmc_uart.c ****   }
  89:../Libraries/XMCLib/src/xmc_uart.c ****   
  90:../Libraries/XMCLib/src/xmc_uart.c ****   /* Configure baud rate */
  91:../Libraries/XMCLib/src/xmc_uart.c ****   (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 235              	 .loc 3 91 9
 236 0024 3B68     	 ldr r3,[r7]
 237 0026 1968     	 ldr r1,[r3]
 238 0028 FA68     	 ldr r2,[r7,#12]
 239 002a 7B68     	 ldr r3,[r7,#4]
 240 002c 1800     	 movs r0,r3
 241 002e FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
  92:../Libraries/XMCLib/src/xmc_uart.c ****   
  93:../Libraries/XMCLib/src/xmc_uart.c ****   /* Configure frame format
  94:../Libraries/XMCLib/src/xmc_uart.c ****    * Configure the number of stop bits
  95:../Libraries/XMCLib/src/xmc_uart.c ****    * Pulse length is set to 0 to have standard UART signaling, 
  96:../Libraries/XMCLib/src/xmc_uart.c ****    * i.e. the 0 level is signaled during the complete bit time
  97:../Libraries/XMCLib/src/xmc_uart.c ****    * Sampling point set equal to the half of the oversampling period
  98:../Libraries/XMCLib/src/xmc_uart.c ****    * Enable Sample Majority Decision 
  99:../Libraries/XMCLib/src/xmc_uart.c ****    * Enable Transfer Status BUSY
 100:../Libraries/XMCLib/src/xmc_uart.c ****    */
 101:../Libraries/XMCLib/src/xmc_uart.c ****   channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 242              	 .loc 3 101 45
 243 0032 3B68     	 ldr r3,[r7]
 244 0034 9B79     	 ldrb r3,[r3,#6]
 245              	 .loc 3 101 57
 246 0036 013B     	 subs r3,r3,#1
 247              	 .loc 3 101 64
 248 0038 5A00     	 lsls r2,r3,#1
 102:../Libraries/XMCLib/src/xmc_uart.c ****                                     (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 249              	 .loc 3 102 53
 250 003a FB68     	 ldr r3,[r7,#12]
 251 003c 5B08     	 lsrs r3,r3,#1
 252              	 .loc 3 102 61
 253 003e 0133     	 adds r3,r3,#1
 254              	 .loc 3 102 68
 255 0040 1B02     	 lsls r3,r3,#8
 101:../Libraries/XMCLib/src/xmc_uart.c ****                                     (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 256              	 .loc 3 101 97
 257 0042 1343     	 orrs r3,r2
 101:../Libraries/XMCLib/src/xmc_uart.c ****                                     (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 258              	 .loc 3 101 26
 259 0044 1A4A     	 ldr r2,.L11
 260 0046 1A43     	 orrs r2,r3
 101:../Libraries/XMCLib/src/xmc_uart.c ****                                     (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 261              	 .loc 3 101 24
 262 0048 7B68     	 ldr r3,[r7,#4]
 263 004a DA63     	 str r2,[r3,#60]
 103:../Libraries/XMCLib/src/xmc_uart.c ****                                     USIC_CH_PCR_ASCMode_SMD_Msk |
 104:../Libraries/XMCLib/src/xmc_uart.c ****                                     USIC_CH_PCR_ASCMode_RSTEN_Msk | USIC_CH_PCR_ASCMode_TSTEN_Msk);
 105:../Libraries/XMCLib/src/xmc_uart.c **** 
 106:../Libraries/XMCLib/src/xmc_uart.c ****   /* Set passive data level, high
 107:../Libraries/XMCLib/src/xmc_uart.c ****      Set word length. Data bits - 1
 108:../Libraries/XMCLib/src/xmc_uart.c ****      If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
 109:../Libraries/XMCLib/src/xmc_uart.c ****      Transmission Mode: The shift control signal is considered active if it
 110:../Libraries/XMCLib/src/xmc_uart.c ****      is at 1-level. This is the setting to be programmed to allow data transfers */
 111:../Libraries/XMCLib/src/xmc_uart.c ****   channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 264              	 .loc 3 111 48
 265 004c 3B68     	 ldr r3,[r7]
 266 004e 1B79     	 ldrb r3,[r3,#4]
 267              	 .loc 3 111 60
 268 0050 013B     	 subs r3,r3,#1
 269              	 .loc 3 111 67
 270 0052 1B06     	 lsls r3,r3,#24
 271              	 .loc 3 111 19
 272 0054 8122     	 movs r2,#129
 273 0056 5200     	 lsls r2,r2,#1
 274 0058 1A43     	 orrs r2,r3
 275              	 .loc 3 111 17
 276 005a 7B68     	 ldr r3,[r7,#4]
 277 005c 5A63     	 str r2,[r3,#52]
 112:../Libraries/XMCLib/src/xmc_uart.c ****                              ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));
 113:../Libraries/XMCLib/src/xmc_uart.c **** 
 114:../Libraries/XMCLib/src/xmc_uart.c ****   if (config->frame_length != 0U)
 278              	 .loc 3 114 13
 279 005e 3B68     	 ldr r3,[r7]
 280 0060 5B79     	 ldrb r3,[r3,#5]
 281              	 .loc 3 114 6
 282 0062 002B     	 cmp r3,#0
 283 0064 09D0     	 beq .L9
 115:../Libraries/XMCLib/src/xmc_uart.c ****   {
 116:../Libraries/XMCLib/src/xmc_uart.c ****     channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 284              	 .loc 3 116 19
 285 0066 7B68     	 ldr r3,[r7,#4]
 286 0068 5A6B     	 ldr r2,[r3,#52]
 287              	 .loc 3 116 50
 288 006a 3B68     	 ldr r3,[r7]
 289 006c 5B79     	 ldrb r3,[r3,#5]
 290              	 .loc 3 116 65
 291 006e 013B     	 subs r3,r3,#1
 292              	 .loc 3 116 22
 293 0070 1B04     	 lsls r3,r3,#16
 294              	 .loc 3 116 19
 295 0072 1A43     	 orrs r2,r3
 296 0074 7B68     	 ldr r3,[r7,#4]
 297 0076 5A63     	 str r2,[r3,#52]
 298 0078 08E0     	 b .L10
 299              	.L9:
 117:../Libraries/XMCLib/src/xmc_uart.c ****   }
 118:../Libraries/XMCLib/src/xmc_uart.c ****   else
 119:../Libraries/XMCLib/src/xmc_uart.c ****   {
 120:../Libraries/XMCLib/src/xmc_uart.c ****     channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 300              	 .loc 3 120 19
 301 007a 7B68     	 ldr r3,[r7,#4]
 302 007c 5A6B     	 ldr r2,[r3,#52]
 303              	 .loc 3 120 50
 304 007e 3B68     	 ldr r3,[r7]
 305 0080 1B79     	 ldrb r3,[r3,#4]
 306              	 .loc 3 120 62
 307 0082 013B     	 subs r3,r3,#1
 308              	 .loc 3 120 22
 309 0084 1B04     	 lsls r3,r3,#16
 310              	 .loc 3 120 19
 311 0086 1A43     	 orrs r2,r3
 312 0088 7B68     	 ldr r3,[r7,#4]
 313 008a 5A63     	 str r2,[r3,#52]
 314              	.L10:
 121:../Libraries/XMCLib/src/xmc_uart.c ****   }
 122:../Libraries/XMCLib/src/xmc_uart.c **** 
 123:../Libraries/XMCLib/src/xmc_uart.c ****   /* Enable transfer buffer */
 124:../Libraries/XMCLib/src/xmc_uart.c ****   channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 315              	 .loc 3 124 17
 316 008c 7B68     	 ldr r3,[r7,#4]
 317 008e A022     	 movs r2,#160
 318 0090 D200     	 lsls r2,r2,#3
 319 0092 9A63     	 str r2,[r3,#56]
 125:../Libraries/XMCLib/src/xmc_uart.c ****                   USIC_CH_TCSR_TDSSM_Msk;
 126:../Libraries/XMCLib/src/xmc_uart.c **** 
 127:../Libraries/XMCLib/src/xmc_uart.c ****   /* Clear protocol status */
 128:../Libraries/XMCLib/src/xmc_uart.c ****   channel->PSCR = 0xFFFFFFFFUL;
 320              	 .loc 3 128 17
 321 0094 7B68     	 ldr r3,[r7,#4]
 322 0096 0122     	 movs r2,#1
 323 0098 5242     	 rsbs r2,r2,#0
 324 009a DA64     	 str r2,[r3,#76]
 129:../Libraries/XMCLib/src/xmc_uart.c **** 
 130:../Libraries/XMCLib/src/xmc_uart.c ****   /* Set parity settings */
 131:../Libraries/XMCLib/src/xmc_uart.c ****   channel->CCR = (uint32_t)config->parity_mode;
 325              	 .loc 3 131 34
 326 009c 3B68     	 ldr r3,[r7]
 327 009e 1B89     	 ldrh r3,[r3,#8]
 328              	 .loc 3 131 18
 329 00a0 1A00     	 movs r2,r3
 330              	 .loc 3 131 16
 331 00a2 7B68     	 ldr r3,[r7,#4]
 332 00a4 1A64     	 str r2,[r3,#64]
 132:../Libraries/XMCLib/src/xmc_uart.c **** }
 333              	 .loc 3 132 1
 334 00a6 C046     	 nop
 335 00a8 BD46     	 mov sp,r7
 336 00aa 04B0     	 add sp,sp,#16
 337              	 
 338 00ac 80BD     	 pop {r7,pc}
 339              	.L12:
 340 00ae C046     	 .align 2
 341              	.L11:
 342 00b0 01000300 	 .word 196609
 343              	 .cfi_endproc
 344              	.LFE142:
 346              	 .section .text.XMC_UART_CH_SetBaudrate,"ax",%progbits
 347              	 .align 1
 348              	 .global XMC_UART_CH_SetBaudrate
 349              	 .syntax unified
 350              	 .code 16
 351              	 .thumb_func
 352              	 .fpu softvfp
 354              	XMC_UART_CH_SetBaudrate:
 355              	.LFB143:
 133:../Libraries/XMCLib/src/xmc_uart.c **** 
 134:../Libraries/XMCLib/src/xmc_uart.c **** XMC_UART_CH_STATUS_t XMC_UART_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 135:../Libraries/XMCLib/src/xmc_uart.c **** {
 356              	 .loc 3 135 1
 357              	 .cfi_startproc
 358              	 
 359              	 
 360 0000 90B5     	 push {r4,r7,lr}
 361              	.LCFI15:
 362              	 .cfi_def_cfa_offset 12
 363              	 .cfi_offset 4,-12
 364              	 .cfi_offset 7,-8
 365              	 .cfi_offset 14,-4
 366 0002 87B0     	 sub sp,sp,#28
 367              	.LCFI16:
 368              	 .cfi_def_cfa_offset 40
 369 0004 00AF     	 add r7,sp,#0
 370              	.LCFI17:
 371              	 .cfi_def_cfa_register 7
 372 0006 F860     	 str r0,[r7,#12]
 373 0008 B960     	 str r1,[r7,#8]
 374 000a 7A60     	 str r2,[r7,#4]
 136:../Libraries/XMCLib/src/xmc_uart.c ****   XMC_UART_CH_STATUS_t status;
 137:../Libraries/XMCLib/src/xmc_uart.c ****   
 138:../Libraries/XMCLib/src/xmc_uart.c ****   status = XMC_UART_CH_STATUS_ERROR;
 375              	 .loc 3 138 10
 376 000c 1724     	 movs r4,#23
 377 000e 3B19     	 adds r3,r7,r4
 378 0010 0122     	 movs r2,#1
 379 0012 1A70     	 strb r2,[r3]
 139:../Libraries/XMCLib/src/xmc_uart.c ****   
 140:../Libraries/XMCLib/src/xmc_uart.c ****   if ((rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 2U)) && (oversampling >= XMC_UART_CH
 380              	 .loc 3 140 17
 381 0014 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 382 0018 0300     	 movs r3,r0
 383              	 .loc 3 140 61
 384 001a 9B08     	 lsrs r3,r3,#2
 385              	 .loc 3 140 6
 386 001c BA68     	 ldr r2,[r7,#8]
 387 001e 9A42     	 cmp r2,r3
 388 0020 0DD8     	 bhi .L14
 389              	 .loc 3 140 69 discriminator 1
 390 0022 7B68     	 ldr r3,[r7,#4]
 391 0024 032B     	 cmp r3,#3
 392 0026 0AD9     	 bls .L14
 141:../Libraries/XMCLib/src/xmc_uart.c ****   {
 142:../Libraries/XMCLib/src/xmc_uart.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, oversampling) == XMC_USIC_CH_STATUS_OK)
 393              	 .loc 3 142 9
 394 0028 7A68     	 ldr r2,[r7,#4]
 395 002a B968     	 ldr r1,[r7,#8]
 396 002c FB68     	 ldr r3,[r7,#12]
 397 002e 1800     	 movs r0,r3
 398 0030 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 399 0034 031E     	 subs r3,r0,#0
 400              	 .loc 3 142 8
 401 0036 02D1     	 bne .L14
 143:../Libraries/XMCLib/src/xmc_uart.c ****     {
 144:../Libraries/XMCLib/src/xmc_uart.c ****       status = XMC_UART_CH_STATUS_OK;
 402              	 .loc 3 144 14
 403 0038 3B19     	 adds r3,r7,r4
 404 003a 0022     	 movs r2,#0
 405 003c 1A70     	 strb r2,[r3]
 406              	.L14:
 145:../Libraries/XMCLib/src/xmc_uart.c ****     }
 146:../Libraries/XMCLib/src/xmc_uart.c ****   } 
 147:../Libraries/XMCLib/src/xmc_uart.c ****   return status;
 407              	 .loc 3 147 10
 408 003e 1723     	 movs r3,#23
 409 0040 FB18     	 adds r3,r7,r3
 410 0042 1B78     	 ldrb r3,[r3]
 148:../Libraries/XMCLib/src/xmc_uart.c **** }
 411              	 .loc 3 148 1
 412 0044 1800     	 movs r0,r3
 413 0046 BD46     	 mov sp,r7
 414 0048 07B0     	 add sp,sp,#28
 415              	 
 416 004a 90BD     	 pop {r4,r7,pc}
 417              	 .cfi_endproc
 418              	.LFE143:
 420              	 .section .text.XMC_UART_CH_Transmit,"ax",%progbits
 421              	 .align 1
 422              	 .global XMC_UART_CH_Transmit
 423              	 .syntax unified
 424              	 .code 16
 425              	 .thumb_func
 426              	 .fpu softvfp
 428              	XMC_UART_CH_Transmit:
 429              	.LFB144:
 149:../Libraries/XMCLib/src/xmc_uart.c **** 
 150:../Libraries/XMCLib/src/xmc_uart.c **** void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
 151:../Libraries/XMCLib/src/xmc_uart.c **** {
 430              	 .loc 3 151 1
 431              	 .cfi_startproc
 432              	 
 433              	 
 434 0000 80B5     	 push {r7,lr}
 435              	.LCFI18:
 436              	 .cfi_def_cfa_offset 8
 437              	 .cfi_offset 7,-8
 438              	 .cfi_offset 14,-4
 439 0002 82B0     	 sub sp,sp,#8
 440              	.LCFI19:
 441              	 .cfi_def_cfa_offset 16
 442 0004 00AF     	 add r7,sp,#0
 443              	.LCFI20:
 444              	 .cfi_def_cfa_register 7
 445 0006 7860     	 str r0,[r7,#4]
 446 0008 0A00     	 movs r2,r1
 447 000a BB1C     	 adds r3,r7,#2
 448 000c 1A80     	 strh r2,[r3]
 152:../Libraries/XMCLib/src/xmc_uart.c ****   /* Check FIFO size */
 153:../Libraries/XMCLib/src/xmc_uart.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 449              	 .loc 3 153 15
 450 000e 7A68     	 ldr r2,[r7,#4]
 451 0010 8423     	 movs r3,#132
 452 0012 5B00     	 lsls r3,r3,#1
 453 0014 D258     	 ldr r2,[r2,r3]
 454              	 .loc 3 153 23
 455 0016 E023     	 movs r3,#224
 456 0018 DB04     	 lsls r3,r3,#19
 457 001a 1340     	 ands r3,r2
 458              	 .loc 3 153 6
 459 001c 14D1     	 bne .L17
 154:../Libraries/XMCLib/src/xmc_uart.c ****   {
 155:../Libraries/XMCLib/src/xmc_uart.c ****     /* Wait till the Transmit Buffer is free for transmission */
 156:../Libraries/XMCLib/src/xmc_uart.c ****     while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 460              	 .loc 3 156 10
 461 001e C046     	 nop
 462              	.L18:
 463              	 .loc 3 156 11 discriminator 1
 464 0020 7B68     	 ldr r3,[r7,#4]
 465 0022 1800     	 movs r0,r3
 466 0024 FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 467 0028 0300     	 movs r3,r0
 468              	 .loc 3 156 10 discriminator 1
 469 002a 802B     	 cmp r3,#128
 470 002c F8D0     	 beq .L18
 157:../Libraries/XMCLib/src/xmc_uart.c ****     {
 158:../Libraries/XMCLib/src/xmc_uart.c ****     }
 159:../Libraries/XMCLib/src/xmc_uart.c ****   
 160:../Libraries/XMCLib/src/xmc_uart.c ****     /* Clear the Transmit Buffer indication flag */
 161:../Libraries/XMCLib/src/xmc_uart.c ****     XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATI
 471              	 .loc 3 161 5
 472 002e 8023     	 movs r3,#128
 473 0030 9A01     	 lsls r2,r3,#6
 474 0032 7B68     	 ldr r3,[r7,#4]
 475 0034 1100     	 movs r1,r2
 476 0036 1800     	 movs r0,r3
 477 0038 FFF7FEFF 	 bl XMC_UART_CH_ClearStatusFlag
 162:../Libraries/XMCLib/src/xmc_uart.c ****   
 163:../Libraries/XMCLib/src/xmc_uart.c ****     /*Transmit data */
 164:../Libraries/XMCLib/src/xmc_uart.c ****     channel->TBUF[0U] = data;
 478              	 .loc 3 164 23
 479 003c BB1C     	 adds r3,r7,#2
 480 003e 1A88     	 ldrh r2,[r3]
 481 0040 7B68     	 ldr r3,[r7,#4]
 482 0042 8021     	 movs r1,#128
 483 0044 5A50     	 str r2,[r3,r1]
 165:../Libraries/XMCLib/src/xmc_uart.c ****   }
 166:../Libraries/XMCLib/src/xmc_uart.c ****   else
 167:../Libraries/XMCLib/src/xmc_uart.c ****   {
 168:../Libraries/XMCLib/src/xmc_uart.c ****     channel->IN[0U] = data;
 169:../Libraries/XMCLib/src/xmc_uart.c ****   }
 170:../Libraries/XMCLib/src/xmc_uart.c **** }
 484              	 .loc 3 170 1
 485 0046 05E0     	 b .L20
 486              	.L17:
 168:../Libraries/XMCLib/src/xmc_uart.c ****   }
 487              	 .loc 3 168 21
 488 0048 BB1C     	 adds r3,r7,#2
 489 004a 1988     	 ldrh r1,[r3]
 490 004c 7A68     	 ldr r2,[r7,#4]
 491 004e C023     	 movs r3,#192
 492 0050 5B00     	 lsls r3,r3,#1
 493 0052 D150     	 str r1,[r2,r3]
 494              	.L20:
 495              	 .loc 3 170 1
 496 0054 C046     	 nop
 497 0056 BD46     	 mov sp,r7
 498 0058 02B0     	 add sp,sp,#8
 499              	 
 500 005a 80BD     	 pop {r7,pc}
 501              	 .cfi_endproc
 502              	.LFE144:
 504              	 .section .text.XMC_UART_CH_GetReceivedData,"ax",%progbits
 505              	 .align 1
 506              	 .global XMC_UART_CH_GetReceivedData
 507              	 .syntax unified
 508              	 .code 16
 509              	 .thumb_func
 510              	 .fpu softvfp
 512              	XMC_UART_CH_GetReceivedData:
 513              	.LFB145:
 171:../Libraries/XMCLib/src/xmc_uart.c **** 
 172:../Libraries/XMCLib/src/xmc_uart.c **** uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
 173:../Libraries/XMCLib/src/xmc_uart.c **** {
 514              	 .loc 3 173 1
 515              	 .cfi_startproc
 516              	 
 517              	 
 518 0000 80B5     	 push {r7,lr}
 519              	.LCFI21:
 520              	 .cfi_def_cfa_offset 8
 521              	 .cfi_offset 7,-8
 522              	 .cfi_offset 14,-4
 523 0002 84B0     	 sub sp,sp,#16
 524              	.LCFI22:
 525              	 .cfi_def_cfa_offset 24
 526 0004 00AF     	 add r7,sp,#0
 527              	.LCFI23:
 528              	 .cfi_def_cfa_register 7
 529 0006 7860     	 str r0,[r7,#4]
 174:../Libraries/XMCLib/src/xmc_uart.c ****   uint16_t retval;
 175:../Libraries/XMCLib/src/xmc_uart.c **** 
 176:../Libraries/XMCLib/src/xmc_uart.c ****   /* Check FIFO size */
 177:../Libraries/XMCLib/src/xmc_uart.c ****   if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 530              	 .loc 3 177 15
 531 0008 7A68     	 ldr r2,[r7,#4]
 532 000a 8623     	 movs r3,#134
 533 000c 5B00     	 lsls r3,r3,#1
 534 000e D258     	 ldr r2,[r2,r3]
 535              	 .loc 3 177 23
 536 0010 E023     	 movs r3,#224
 537 0012 DB04     	 lsls r3,r3,#19
 538 0014 1340     	 ands r3,r2
 539              	 .loc 3 177 6
 540 0016 05D1     	 bne .L22
 178:../Libraries/XMCLib/src/xmc_uart.c ****   {
 179:../Libraries/XMCLib/src/xmc_uart.c ****     retval = (uint16_t)channel->RBUF;
 541              	 .loc 3 179 31
 542 0018 7B68     	 ldr r3,[r7,#4]
 543 001a 5A6D     	 ldr r2,[r3,#84]
 544              	 .loc 3 179 12
 545 001c 0E23     	 movs r3,#14
 546 001e FB18     	 adds r3,r7,r3
 547 0020 1A80     	 strh r2,[r3]
 548 0022 06E0     	 b .L23
 549              	.L22:
 180:../Libraries/XMCLib/src/xmc_uart.c ****   }
 181:../Libraries/XMCLib/src/xmc_uart.c ****   else
 182:../Libraries/XMCLib/src/xmc_uart.c ****   {
 183:../Libraries/XMCLib/src/xmc_uart.c ****     retval = (uint16_t)channel->OUTR;
 550              	 .loc 3 183 31
 551 0024 7A68     	 ldr r2,[r7,#4]
 552 0026 8E23     	 movs r3,#142
 553 0028 5B00     	 lsls r3,r3,#1
 554 002a D258     	 ldr r2,[r2,r3]
 555              	 .loc 3 183 12
 556 002c 0E23     	 movs r3,#14
 557 002e FB18     	 adds r3,r7,r3
 558 0030 1A80     	 strh r2,[r3]
 559              	.L23:
 184:../Libraries/XMCLib/src/xmc_uart.c ****   }
 185:../Libraries/XMCLib/src/xmc_uart.c **** 
 186:../Libraries/XMCLib/src/xmc_uart.c ****   return retval;
 560              	 .loc 3 186 10
 561 0032 0E23     	 movs r3,#14
 562 0034 FB18     	 adds r3,r7,r3
 563 0036 1B88     	 ldrh r3,[r3]
 187:../Libraries/XMCLib/src/xmc_uart.c **** }
 564              	 .loc 3 187 1
 565 0038 1800     	 movs r0,r3
 566 003a BD46     	 mov sp,r7
 567 003c 04B0     	 add sp,sp,#16
 568              	 
 569 003e 80BD     	 pop {r7,pc}
 570              	 .cfi_endproc
 571              	.LFE145:
 573              	 .section .text.XMC_UART_CH_Stop,"ax",%progbits
 574              	 .align 1
 575              	 .global XMC_UART_CH_Stop
 576              	 .syntax unified
 577              	 .code 16
 578              	 .thumb_func
 579              	 .fpu softvfp
 581              	XMC_UART_CH_Stop:
 582              	.LFB146:
 188:../Libraries/XMCLib/src/xmc_uart.c **** 
 189:../Libraries/XMCLib/src/xmc_uart.c **** XMC_UART_CH_STATUS_t XMC_UART_CH_Stop(XMC_USIC_CH_t *const channel)
 190:../Libraries/XMCLib/src/xmc_uart.c **** {
 583              	 .loc 3 190 1
 584              	 .cfi_startproc
 585              	 
 586              	 
 587 0000 80B5     	 push {r7,lr}
 588              	.LCFI24:
 589              	 .cfi_def_cfa_offset 8
 590              	 .cfi_offset 7,-8
 591              	 .cfi_offset 14,-4
 592 0002 84B0     	 sub sp,sp,#16
 593              	.LCFI25:
 594              	 .cfi_def_cfa_offset 24
 595 0004 00AF     	 add r7,sp,#0
 596              	.LCFI26:
 597              	 .cfi_def_cfa_register 7
 598 0006 7860     	 str r0,[r7,#4]
 191:../Libraries/XMCLib/src/xmc_uart.c ****   XMC_UART_CH_STATUS_t status = XMC_UART_CH_STATUS_OK;
 599              	 .loc 3 191 24
 600 0008 0F23     	 movs r3,#15
 601 000a FB18     	 adds r3,r7,r3
 602 000c 0022     	 movs r2,#0
 603 000e 1A70     	 strb r2,[r3]
 192:../Libraries/XMCLib/src/xmc_uart.c **** 
 193:../Libraries/XMCLib/src/xmc_uart.c ****   if (((XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t) XMC_USIC_CH_TBUF_STATUS_BUSY) != 
 604              	 .loc 3 193 9
 605 0010 7B68     	 ldr r3,[r7,#4]
 606 0012 1800     	 movs r0,r3
 607 0014 FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 608 0018 0300     	 movs r3,r0
 609              	 .loc 3 193 97
 610 001a 5BB2     	 sxtb r3,r3
 611              	 .loc 3 193 6
 612 001c 002B     	 cmp r3,#0
 613 001e 08DB     	 blt .L26
 194:../Libraries/XMCLib/src/xmc_uart.c ****       ((XMC_UART_CH_GetStatusFlag(channel) & XMC_UART_CH_STATUS_FLAG_TRANSFER_STATUS_BUSY) != 0))
 614              	 .loc 3 194 9 discriminator 1
 615 0020 7B68     	 ldr r3,[r7,#4]
 616 0022 1800     	 movs r0,r3
 617 0024 FFF7FEFF 	 bl XMC_UART_CH_GetStatusFlag
 618 0028 0200     	 movs r2,r0
 619              	 .loc 3 194 44 discriminator 1
 620 002a 8023     	 movs r3,#128
 621 002c 9B00     	 lsls r3,r3,#2
 622 002e 1340     	 ands r3,r2
 193:../Libraries/XMCLib/src/xmc_uart.c ****       ((XMC_UART_CH_GetStatusFlag(channel) & XMC_UART_CH_STATUS_FLAG_TRANSFER_STATUS_BUSY) != 0))
 623              	 .loc 3 193 104 discriminator 1
 624 0030 04D0     	 beq .L27
 625              	.L26:
 195:../Libraries/XMCLib/src/xmc_uart.c ****   {
 196:../Libraries/XMCLib/src/xmc_uart.c ****     status = XMC_UART_CH_STATUS_BUSY;
 626              	 .loc 3 196 12
 627 0032 0F23     	 movs r3,#15
 628 0034 FB18     	 adds r3,r7,r3
 629 0036 0222     	 movs r2,#2
 630 0038 1A70     	 strb r2,[r3]
 631 003a 04E0     	 b .L28
 632              	.L27:
 197:../Libraries/XMCLib/src/xmc_uart.c ****   }
 198:../Libraries/XMCLib/src/xmc_uart.c ****   else
 199:../Libraries/XMCLib/src/xmc_uart.c ****   {
 200:../Libraries/XMCLib/src/xmc_uart.c ****     /* USIC channel in IDLE mode */
 201:../Libraries/XMCLib/src/xmc_uart.c ****     XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 633              	 .loc 3 201 5
 634 003c 7B68     	 ldr r3,[r7,#4]
 635 003e 0021     	 movs r1,#0
 636 0040 1800     	 movs r0,r3
 637 0042 FFF7FEFF 	 bl XMC_USIC_CH_SetMode
 638              	.L28:
 202:../Libraries/XMCLib/src/xmc_uart.c ****   }
 203:../Libraries/XMCLib/src/xmc_uart.c ****   return status;
 639              	 .loc 3 203 10
 640 0046 0F23     	 movs r3,#15
 641 0048 FB18     	 adds r3,r7,r3
 642 004a 1B78     	 ldrb r3,[r3]
 204:../Libraries/XMCLib/src/xmc_uart.c **** }
 643              	 .loc 3 204 1
 644 004c 1800     	 movs r0,r3
 645 004e BD46     	 mov sp,r7
 646 0050 04B0     	 add sp,sp,#16
 647              	 
 648 0052 80BD     	 pop {r7,pc}
 649              	 .cfi_endproc
 650              	.LFE146:
 652              	 .section .text.XMC_UART_CH_EnableEvent,"ax",%progbits
 653              	 .align 1
 654              	 .global XMC_UART_CH_EnableEvent
 655              	 .syntax unified
 656              	 .code 16
 657              	 .thumb_func
 658              	 .fpu softvfp
 660              	XMC_UART_CH_EnableEvent:
 661              	.LFB147:
 205:../Libraries/XMCLib/src/xmc_uart.c **** 
 206:../Libraries/XMCLib/src/xmc_uart.c **** void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 207:../Libraries/XMCLib/src/xmc_uart.c **** {
 662              	 .loc 3 207 1
 663              	 .cfi_startproc
 664              	 
 665              	 
 666 0000 80B5     	 push {r7,lr}
 667              	.LCFI27:
 668              	 .cfi_def_cfa_offset 8
 669              	 .cfi_offset 7,-8
 670              	 .cfi_offset 14,-4
 671 0002 82B0     	 sub sp,sp,#8
 672              	.LCFI28:
 673              	 .cfi_def_cfa_offset 16
 674 0004 00AF     	 add r7,sp,#0
 675              	.LCFI29:
 676              	 .cfi_def_cfa_register 7
 677 0006 7860     	 str r0,[r7,#4]
 678 0008 3960     	 str r1,[r7]
 208:../Libraries/XMCLib/src/xmc_uart.c ****   channel->CCR |= (event&0x1fc00U);
 679              	 .loc 3 208 16
 680 000a 7B68     	 ldr r3,[r7,#4]
 681 000c 1A6C     	 ldr r2,[r3,#64]
 682              	 .loc 3 208 25
 683 000e 3968     	 ldr r1,[r7]
 684 0010 FE23     	 movs r3,#254
 685 0012 5B02     	 lsls r3,r3,#9
 686 0014 0B40     	 ands r3,r1
 687              	 .loc 3 208 16
 688 0016 1A43     	 orrs r2,r3
 689 0018 7B68     	 ldr r3,[r7,#4]
 690 001a 1A64     	 str r2,[r3,#64]
 209:../Libraries/XMCLib/src/xmc_uart.c ****   channel->PCR_ASCMode |= (event&0xf8U);
 691              	 .loc 3 209 24
 692 001c 7B68     	 ldr r3,[r7,#4]
 693 001e DA6B     	 ldr r2,[r3,#60]
 694              	 .loc 3 209 33
 695 0020 3B68     	 ldr r3,[r7]
 696 0022 F821     	 movs r1,#248
 697 0024 0B40     	 ands r3,r1
 698              	 .loc 3 209 24
 699 0026 1A43     	 orrs r2,r3
 700 0028 7B68     	 ldr r3,[r7,#4]
 701 002a DA63     	 str r2,[r3,#60]
 210:../Libraries/XMCLib/src/xmc_uart.c **** }
 702              	 .loc 3 210 1
 703 002c C046     	 nop
 704 002e BD46     	 mov sp,r7
 705 0030 02B0     	 add sp,sp,#8
 706              	 
 707 0032 80BD     	 pop {r7,pc}
 708              	 .cfi_endproc
 709              	.LFE147:
 711              	 .section .text.XMC_UART_CH_DisableEvent,"ax",%progbits
 712              	 .align 1
 713              	 .global XMC_UART_CH_DisableEvent
 714              	 .syntax unified
 715              	 .code 16
 716              	 .thumb_func
 717              	 .fpu softvfp
 719              	XMC_UART_CH_DisableEvent:
 720              	.LFB148:
 211:../Libraries/XMCLib/src/xmc_uart.c **** 
 212:../Libraries/XMCLib/src/xmc_uart.c **** void XMC_UART_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 213:../Libraries/XMCLib/src/xmc_uart.c **** {
 721              	 .loc 3 213 1
 722              	 .cfi_startproc
 723              	 
 724              	 
 725 0000 80B5     	 push {r7,lr}
 726              	.LCFI30:
 727              	 .cfi_def_cfa_offset 8
 728              	 .cfi_offset 7,-8
 729              	 .cfi_offset 14,-4
 730 0002 82B0     	 sub sp,sp,#8
 731              	.LCFI31:
 732              	 .cfi_def_cfa_offset 16
 733 0004 00AF     	 add r7,sp,#0
 734              	.LCFI32:
 735              	 .cfi_def_cfa_register 7
 736 0006 7860     	 str r0,[r7,#4]
 737 0008 3960     	 str r1,[r7]
 214:../Libraries/XMCLib/src/xmc_uart.c ****   channel->CCR &= (uint32_t)~(event&0x1fc00U);
 738              	 .loc 3 214 16
 739 000a 7B68     	 ldr r3,[r7,#4]
 740 000c 1B6C     	 ldr r3,[r3,#64]
 741              	 .loc 3 214 36
 742 000e 3968     	 ldr r1,[r7]
 743 0010 FE22     	 movs r2,#254
 744 0012 5202     	 lsls r2,r2,#9
 745 0014 0A40     	 ands r2,r1
 746              	 .loc 3 214 19
 747 0016 D243     	 mvns r2,r2
 748              	 .loc 3 214 16
 749 0018 1A40     	 ands r2,r3
 750 001a 7B68     	 ldr r3,[r7,#4]
 751 001c 1A64     	 str r2,[r3,#64]
 215:../Libraries/XMCLib/src/xmc_uart.c ****   channel->PCR_ASCMode &= (uint32_t)~(event&0xf8U);
 752              	 .loc 3 215 24
 753 001e 7B68     	 ldr r3,[r7,#4]
 754 0020 DB6B     	 ldr r3,[r3,#60]
 755              	 .loc 3 215 44
 756 0022 3A68     	 ldr r2,[r7]
 757 0024 F821     	 movs r1,#248
 758 0026 0A40     	 ands r2,r1
 759              	 .loc 3 215 27
 760 0028 D243     	 mvns r2,r2
 761              	 .loc 3 215 24
 762 002a 1A40     	 ands r2,r3
 763 002c 7B68     	 ldr r3,[r7,#4]
 764 002e DA63     	 str r2,[r3,#60]
 216:../Libraries/XMCLib/src/xmc_uart.c **** }
 765              	 .loc 3 216 1
 766 0030 C046     	 nop
 767 0032 BD46     	 mov sp,r7
 768 0034 02B0     	 add sp,sp,#8
 769              	 
 770 0036 80BD     	 pop {r7,pc}
 771              	 .cfi_endproc
 772              	.LFE148:
 774              	 .text
 775              	.Letext0:
 776              	 .file 4 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
 777              	 .file 5 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 778              	 .file 6 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/lock.h"
 779              	 .file 7 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h"
 780              	 .file 8 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 781              	 .file 9 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h"
 782              	 .file 10 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 xmc_uart.c
    {standard input}:16     .text.XMC_USIC_CH_GetTransmitBufferStatus:0000000000000000 $t
    {standard input}:23     .text.XMC_USIC_CH_GetTransmitBufferStatus:0000000000000000 XMC_USIC_CH_GetTransmitBufferStatus
    {standard input}:60     .text.XMC_USIC_CH_SetMode:0000000000000000 $t
    {standard input}:66     .text.XMC_USIC_CH_SetMode:0000000000000000 XMC_USIC_CH_SetMode
    {standard input}:112    .text.XMC_UART_CH_GetStatusFlag:0000000000000000 $t
    {standard input}:118    .text.XMC_UART_CH_GetStatusFlag:0000000000000000 XMC_UART_CH_GetStatusFlag
    {standard input}:150    .text.XMC_UART_CH_ClearStatusFlag:0000000000000000 $t
    {standard input}:156    .text.XMC_UART_CH_ClearStatusFlag:0000000000000000 XMC_UART_CH_ClearStatusFlag
    {standard input}:189    .text.XMC_UART_CH_Init:0000000000000000 $t
    {standard input}:196    .text.XMC_UART_CH_Init:0000000000000000 XMC_UART_CH_Init
    {standard input}:342    .text.XMC_UART_CH_Init:00000000000000b0 $d
    {standard input}:347    .text.XMC_UART_CH_SetBaudrate:0000000000000000 $t
    {standard input}:354    .text.XMC_UART_CH_SetBaudrate:0000000000000000 XMC_UART_CH_SetBaudrate
    {standard input}:421    .text.XMC_UART_CH_Transmit:0000000000000000 $t
    {standard input}:428    .text.XMC_UART_CH_Transmit:0000000000000000 XMC_UART_CH_Transmit
    {standard input}:505    .text.XMC_UART_CH_GetReceivedData:0000000000000000 $t
    {standard input}:512    .text.XMC_UART_CH_GetReceivedData:0000000000000000 XMC_UART_CH_GetReceivedData
    {standard input}:574    .text.XMC_UART_CH_Stop:0000000000000000 $t
    {standard input}:581    .text.XMC_UART_CH_Stop:0000000000000000 XMC_UART_CH_Stop
    {standard input}:653    .text.XMC_UART_CH_EnableEvent:0000000000000000 $t
    {standard input}:660    .text.XMC_UART_CH_EnableEvent:0000000000000000 XMC_UART_CH_EnableEvent
    {standard input}:712    .text.XMC_UART_CH_DisableEvent:0000000000000000 $t
    {standard input}:719    .text.XMC_UART_CH_DisableEvent:0000000000000000 XMC_UART_CH_DisableEvent

UNDEFINED SYMBOLS
XMC_USIC_CH_Enable
XMC_USIC_CH_SetBaudrate
XMC_SCU_CLOCK_GetPeripheralClockFrequency

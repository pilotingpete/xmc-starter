   1              	 .cpu cortex-m0
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,0
  10              	 .eabi_attribute 18,4
  11              	 .file "xmc_spi.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.XMC_USIC_CH_GetTransmitBufferStatus,"ax",%progbits
  16              	 .align 1
  17              	 .arch armv6s-m
  18              	 .syntax unified
  19              	 .code 16
  20              	 .thumb_func
  21              	 .fpu softvfp
  23              	XMC_USIC_CH_GetTransmitBufferStatus:
  24              	.LFB84:
  25              	 .file 1 "..//Libraries/XMCLib/inc/xmc_usic.h"
   1:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
   2:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @file xmc_usic.h
   3:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @date 2017-09-08
   4:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
   5:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @cond
   6:..//Libraries/XMCLib/inc/xmc_usic.h ****  **************************************************************************************************
   7:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
   9:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:..//Libraries/XMCLib/inc/xmc_usic.h ****  * All rights reserved.                        
  11:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                                             
  12:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:..//Libraries/XMCLib/inc/xmc_usic.h ****  * following conditions are met:   
  14:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                                                                              
  15:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:..//Libraries/XMCLib/inc/xmc_usic.h ****  * disclaimer.                        
  17:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
  18:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:..//Libraries/XMCLib/inc/xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
  21:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:..//Libraries/XMCLib/inc/xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                                                                              
  24:..//Libraries/XMCLib/inc/xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:..//Libraries/XMCLib/inc/xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:..//Libraries/XMCLib/inc/xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:..//Libraries/XMCLib/inc/xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:..//Libraries/XMCLib/inc/xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:..//Libraries/XMCLib/inc/xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:..//Libraries/XMCLib/inc/xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                                                                              
  32:..//Libraries/XMCLib/inc/xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:..//Libraries/XMCLib/inc/xmc_usic.h ****  **************************************************************************************************
  35:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  36:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Change History
  37:..//Libraries/XMCLib/inc/xmc_usic.h ****  * --------------
  38:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  39:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-02-20:
  40:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Initial draft<br>
  41:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Documentation improved <br>
  42:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  43:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-05-08:
  44:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:..//Libraries/XMCLib/inc/xmc_usic.h ****  *      
  46:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-06-20:
  47:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
  49:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-17:
  50:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  52:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-24:
  53:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:..//Libraries/XMCLib/inc/xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  56:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-25:
  57:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:..//Libraries/XMCLib/inc/xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:..//Libraries/XMCLib/inc/xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  61:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-27:
  62:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  66:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-28:
  67:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:..//Libraries/XMCLib/inc/xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  70:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2016-03-09:
  71:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Optimization of write only registers
  72:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  73:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2016-04-10:
  74:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  76:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2017-02-10:
  77:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  78:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  79:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  80:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2017-09-08:
  81:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  82:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  83:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @endcond
  84:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  85:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
  86:..//Libraries/XMCLib/inc/xmc_usic.h **** 
  87:..//Libraries/XMCLib/inc/xmc_usic.h **** #ifndef XMC_USIC_H
  88:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC_H
  89:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
  90:..//Libraries/XMCLib/inc/xmc_usic.h ****  * HEADER FILES
  91:..//Libraries/XMCLib/inc/xmc_usic.h ****  *******************************************************************************/
  92:..//Libraries/XMCLib/inc/xmc_usic.h **** 
  93:..//Libraries/XMCLib/inc/xmc_usic.h **** #include "xmc_common.h"
  94:..//Libraries/XMCLib/inc/xmc_usic.h **** 
  95:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
  96:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  97:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @{
  98:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
  99:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 100:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 101:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @addtogroup USIC
 102:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 103:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 104:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 105:..//Libraries/XMCLib/inc/xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 106:..//Libraries/XMCLib/inc/xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 107:..//Libraries/XMCLib/inc/xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 108:..//Libraries/XMCLib/inc/xmc_usic.h ****  * by each communication channel and which pins are used.
 109:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 110:..//Libraries/XMCLib/inc/xmc_usic.h ****  * communication protocols.
 111:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
 112:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC driver features:
 113:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 114:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 115:..//Libraries/XMCLib/inc/xmc_usic.h ****  friendly format.
 116:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 117:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 118:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 119:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 120:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 121:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @{
 122:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 123:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 124:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
 125:..//Libraries/XMCLib/inc/xmc_usic.h ****  * MACROS
 126:..//Libraries/XMCLib/inc/xmc_usic.h ****  *******************************************************************************/
 127:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 128:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 129:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 130:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 131:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 132:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(USIC1)
 133:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 134:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 135:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 136:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 137:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 138:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(USIC2)
 139:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 140:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 141:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 142:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 143:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 144:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 145:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 146:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 147:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 148:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 149:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 150:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 151:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 152:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 153:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 154:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 155:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 156:..//Libraries/XMCLib/inc/xmc_usic.h **** #if UC_FAMILY == XMC1
 157:..//Libraries/XMCLib/inc/xmc_usic.h ****  #include "xmc1_usic_map.h"
 158:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 159:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 160:..//Libraries/XMCLib/inc/xmc_usic.h **** #if UC_FAMILY == XMC4
 161:..//Libraries/XMCLib/inc/xmc_usic.h ****  #include "xmc4_usic_map.h"
 162:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 163:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 164:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
 165:..//Libraries/XMCLib/inc/xmc_usic.h ****  * ENUMS
 166:..//Libraries/XMCLib/inc/xmc_usic.h ****  *******************************************************************************/
 167:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 168:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 169:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel driver status
 170:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 171:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 172:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 173:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 174:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 175:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 176:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 177:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 178:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 179:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel kernel mode
 180:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 181:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 182:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 183:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 184:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 185:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 186:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 187:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 188:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 189:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 190:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel operating mode
 191:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 192:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 193:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 194:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 195:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 196:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 197:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 198:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 199:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 200:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 201:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 202:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel inputs
 203:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 204:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 205:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 206:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 207:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 208:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 209:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 210:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 211:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 212:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 213:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 214:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 215:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel input source sampling frequency
 216:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 217:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 218:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 219:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 220:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 221:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 222:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 223:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 224:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel input combination mode
 225:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 226:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 227:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 228:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 229:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 230:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 231:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 232:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 233:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 234:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 235:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel data transmission start modes.
 236:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 237:..//Libraries/XMCLib/inc/xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 238:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the TCSR->TDEN bitfield.
 239:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 240:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 241:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 242:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 243:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 244:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 245:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 246:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 247:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 248:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 249:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel interrupt node pointers
 250:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 251:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 252:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 253:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 254:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 255:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 256:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 257:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 258:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 259:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 260:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 261:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel events
 262:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 263:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 264:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 265:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 266:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 267:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 268:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 269:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 270:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 271:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 272:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 273:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 274:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 275:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel parity mode
 276:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 277:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 278:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 279:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 280:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 281:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 282:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 283:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 284:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 285:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel data output mode
 286:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 287:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 288:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 289:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 290:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 291:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 292:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 293:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 294:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel data transmit buffer status
 295:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 296:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 297:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 298:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 299:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 300:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 301:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 302:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 303:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 304:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 305:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel data transmit buffer status modification
 306:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 307:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 308:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 309:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 310:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 311:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 312:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 313:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 314:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive buffer status
 315:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 316:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 317:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 318:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 319:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 320:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 321:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 322:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 323:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel output signal passive data level
 324:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 325:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 326:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 327:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 328:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 329:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 330:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 331:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 332:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive FIFO size
 333:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 334:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 335:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 336:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 337:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 338:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 339:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 340:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 341:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 342:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 343:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 344:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 345:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 346:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 347:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 348:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 349:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 350:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 351:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 352:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 353:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 354:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 355:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel transmit FIFO event configuration
 356:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 357:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 358:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 359:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 360:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 361:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 362:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 363:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 364:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel transmit FIFO status
 365:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 366:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 367:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 368:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 369:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 370:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 371:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 372:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 373:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 374:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 375:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 376:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 377:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 378:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 379:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 380:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 381:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 382:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive FIFO event configuration
 383:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 384:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 385:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 386:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 387:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 388:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 389:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 390:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 391:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 392:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive FIFO status
 393:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 394:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 395:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 396:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 397:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 398:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 399:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 400:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 401:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 402:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator clock source
 403:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 404:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 405:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 406:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 407:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 408:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 409:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 410:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 411:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator divider mode
 412:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 413:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 414:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 415:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 416:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 417:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 418:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 419:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 420:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 421:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 422:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 423:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 424:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 425:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 426:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 427:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 428:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 429:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 430:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 431:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 432:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 433:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 434:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 435:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 436:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 437:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 438:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 439:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 440:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 441:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator shift clock output
 442:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 443:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 444:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 445:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 446:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 447:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 448:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 449:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 450:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel shift direction.
 451:..//Libraries/XMCLib/inc/xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 452:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 453:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 454:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 455:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 456:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 457:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 458:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 459:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 460:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
 461:..//Libraries/XMCLib/inc/xmc_usic.h ****  * DATA STRUCTURES
 462:..//Libraries/XMCLib/inc/xmc_usic.h ****  *******************************************************************************/
 463:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 464:..//Libraries/XMCLib/inc/xmc_usic.h **** /*Anonymous structure/union guard start*/
 465:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(__CC_ARM)
 466:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma push
 467:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma anon_unions
 468:..//Libraries/XMCLib/inc/xmc_usic.h **** #elif defined(__TASKING__)
 469:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma warning 586
 470:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 471:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 472:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 473:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC module structure
 474:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 475:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 476:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 477:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 478:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 479:..//Libraries/XMCLib/inc/xmc_usic.h ****  * except for some registers.
 480:..//Libraries/XMCLib/inc/xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 481:..//Libraries/XMCLib/inc/xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 482:..//Libraries/XMCLib/inc/xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 483:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 484:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef struct XMC_USIC_CH
 485:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 486:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RESERVED0;
 487:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 488:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RESERVED1;
 489:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 490:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 491:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 492:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 493:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 494:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 495:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  TCSR;
 496:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 497:..//Libraries/XMCLib/inc/xmc_usic.h ****   union {
 498:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 499:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 500:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 501:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 502:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 503:..//Libraries/XMCLib/inc/xmc_usic.h ****   };
 504:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 505:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 506:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 507:..//Libraries/XMCLib/inc/xmc_usic.h ****   union {
 508:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 509:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 510:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 511:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 512:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 513:..//Libraries/XMCLib/inc/xmc_usic.h ****   };
 514:..//Libraries/XMCLib/inc/xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 515:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 516:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 517:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 518:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 519:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 520:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 521:..//Libraries/XMCLib/inc/xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 522:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 523:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 524:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 525:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 526:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 527:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 528:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 529:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 530:..//Libraries/XMCLib/inc/xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 531:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 532:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 533:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 534:..//Libraries/XMCLib/inc/xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 535:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_t;
 536:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 537:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 538:..//Libraries/XMCLib/inc/xmc_usic.h **** /*Anonymous structure/union guard end*/
 539:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(__CC_ARM)
 540:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma pop
 541:..//Libraries/XMCLib/inc/xmc_usic.h **** #elif defined(__TASKING__)
 542:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma warning restore
 543:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 544:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 545:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
 546:..//Libraries/XMCLib/inc/xmc_usic.h ****  * API PROTOTYPES
 547:..//Libraries/XMCLib/inc/xmc_usic.h ****  ******************************************************************************/
 548:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 549:..//Libraries/XMCLib/inc/xmc_usic.h **** #ifdef __cplusplus
 550:..//Libraries/XMCLib/inc/xmc_usic.h **** extern "C" {
 551:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 552:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 553:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 554:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 555:..//Libraries/XMCLib/inc/xmc_usic.h ****   bool tmp;
 556:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 557:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = (module == XMC_USIC0);
 558:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(XMC_USIC1)  
 559:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 560:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 561:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(XMC_USIC2)  
 562:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 563:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 564:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 565:..//Libraries/XMCLib/inc/xmc_usic.h ****   return tmp;
 566:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 567:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 568:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 569:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 570:..//Libraries/XMCLib/inc/xmc_usic.h ****   bool tmp;
 571:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 572:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 573:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(XMC_USIC1)  
 574:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 575:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 576:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(XMC_USIC2)  
 577:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 578:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 579:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 580:..//Libraries/XMCLib/inc/xmc_usic.h ****   return tmp;
 581:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 582:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 583:..//Libraries/XMCLib/inc/xmc_usic.h **** /* Common APIs */
 584:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 585:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 586:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 587:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 588:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 589:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
 590:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 591:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the USIC module.\n\n
 592:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the clock for the USIC module by following the
 593:..//Libraries/XMCLib/inc/xmc_usic.h ****  * clock enabling sequence for the selected device.
 594:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 595:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 596:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 597:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 598:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 599:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 600:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 601:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 602:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 603:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 604:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 605:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the USIC module.\n\n
 606:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 607:..//Libraries/XMCLib/inc/xmc_usic.h ****  * disabling sequence for the selected device.
 608:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 609:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 610:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 611:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 612:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 613:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 614:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 615:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 616:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 617:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 618:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 619:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the USIC channel. \n\n
 620:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 621:..//Libraries/XMCLib/inc/xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 622:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 623:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 624:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 625:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 626:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 627:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 628:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 629:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 630:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 631:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 632:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 633:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the USIC channel.\n\n
 634:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 635:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 636:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 637:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 638:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 639:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 640:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 641:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 642:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 643:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 644:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 645:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 646:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 647:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 648:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 649:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 650:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 651:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 652:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 653:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 654:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 655:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 656:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 657:..//Libraries/XMCLib/inc/xmc_usic.h ****  * baudrate.
 658:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 659:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 660:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 661:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 662:..//Libraries/XMCLib/inc/xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 663:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 664:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 665:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 666:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 667:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 668:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 669:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 670:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 671:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 672:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                          output DXnT of the input stage.
 673:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 674:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 675:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 676:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 677:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 678:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 679:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 680:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 681:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 682:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 683:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 684:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                         const uint16_t pdiv,
 685:..//Libraries/XMCLib/inc/xmc_usic.h **** 												 const uint32_t oversampling,
 686:..//Libraries/XMCLib/inc/xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 687:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 688:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 689:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 690:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 691:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 692:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 693:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 694:..//Libraries/XMCLib/inc/xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 695:..//Libraries/XMCLib/inc/xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 696:..//Libraries/XMCLib/inc/xmc_usic.h ****  * </tr></table>
 697:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 698:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 699:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 700:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 701:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 702:..//Libraries/XMCLib/inc/xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 703:..//Libraries/XMCLib/inc/xmc_usic.h ****  *  
 704:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 705:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 706:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 707:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 708:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 709:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 710:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 711:..//Libraries/XMCLib/inc/xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 712:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 713:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 714:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 715:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 716:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 717:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 718:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 719:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 720:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 721:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The input of the data shift unit is controlled by the
 722:..//Libraries/XMCLib/inc/xmc_usic.h ****  * protocol pre-processor. \n\n
 723:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 724:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 725:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 726:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 727:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 728:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 729:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 730:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 731:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 732:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 733:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 734:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 735:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 736:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 737:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 738:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 739:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 740:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The input of the data shift unit is connected to
 741:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the selected data input line. \n\n
 742:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 743:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This setting is used
 744:..//Libraries/XMCLib/inc/xmc_usic.h ****  * if the signals are directly derived from an input
 745:..//Libraries/XMCLib/inc/xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 746:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 747:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 748:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 749:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 750:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 751:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 752:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 753:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 754:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 755:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 756:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 757:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 758:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 759:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 760:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 761:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 762:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 763:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 764:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 765:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 766:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 767:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 768:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 769:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 770:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 771:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 772:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 773:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 774:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 775:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 776:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 777:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 778:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 779:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 780:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 781:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 782:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 783:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 784:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 785:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 786:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 787:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 788:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 789:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 790:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 791:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 792:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 793:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 794:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 795:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 796:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 797:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 798:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables delay compensation. \n\n
 799:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 800:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 801:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 802:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 803:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 804:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 805:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 806:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 807:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 808:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 809:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 810:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 811:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 812:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 813:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 814:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 815:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables delay compensation.. \n\n
 816:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 817:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 818:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 819:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 820:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 821:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 822:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 823:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 824:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 825:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 826:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 827:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 828:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 829:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 830:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 831:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 832:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 833:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 834:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 835:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 836:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 837:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 838:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 839:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 840:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 841:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 842:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 843:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 844:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 845:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 846:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 847:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 848:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 849:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 850:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 851:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 852:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 853:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 854:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 855:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 856:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 857:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 858:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 859:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 860:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 861:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 862:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 863:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 864:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 865:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 866:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 867:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 868:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 869:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 870:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 871:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 872:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 873:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 874:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 875:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 876:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 877:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 878:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 879:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 880:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 881:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 882:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 883:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 884:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 885:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 886:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 887:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 888:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 889:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 890:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 891:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 893:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 894:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 895:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 896:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 897:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 898:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 899:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 900:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 901:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 902:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 903:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 904:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 905:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 906:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 907:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 908:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 909:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 910:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 911:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 912:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 913:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 914:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 915:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 916:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 917:..//Libraries/XMCLib/inc/xmc_usic.h ****                          ((uint32_t)sampling_freq);
 918:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 919:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 920:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 921:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 922:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 923:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 924:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 925:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 926:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 927:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 928:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 929:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 930:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 931:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 932:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 933:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 934:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 935:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 936:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 937:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 938:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 939:..//Libraries/XMCLib/inc/xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 940:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 941:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 942:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 943:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 944:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 945:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 946:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 947:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 948:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 949:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 950:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 951:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 952:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 953:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 954:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 955:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 956:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 957:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 958:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 959:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 960:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 961:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 962:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted. \n
 963:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
 964:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 965:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 966:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 967:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
 968:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The data provided is placed in TBUF[0U].
 969:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 970:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 971:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 972:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
 973:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 974:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
 975:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 976:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TBUF[0U] = data;
 977:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 978:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 979:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 980:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 981:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 982:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted.
 983:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
 984:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
 985:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 986:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 987:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 988:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
 989:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
 990:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 991:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 992:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 993:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
 994:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 995:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
 996:..//Libraries/XMCLib/inc/xmc_usic.h ****                                              const uint16_t data,
 997:..//Libraries/XMCLib/inc/xmc_usic.h ****                                              const uint32_t transmit_control_information)
 998:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 999:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1000:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1001:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1002:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1003:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1004:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1005:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1006:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1007:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1008:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1009:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1010:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1011:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1012:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1013:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1014:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1015:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1016:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1017:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1018:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1019:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1020:..//Libraries/XMCLib/inc/xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1021:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1022:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1023:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1024:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1025:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1026:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1027:..//Libraries/XMCLib/inc/xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1028:..//Libraries/XMCLib/inc/xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1029:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1030:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1031:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1032:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1033:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1034:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1035:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1036:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1037:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1038:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1039:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1040:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1041:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1042:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1043:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1044:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1045:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1046:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1047:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Captured counter value 
1048:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1049:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1050:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1051:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1052:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1053:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1054:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1055:..//Libraries/XMCLib/inc/xmc_usic.h ****   return channel->CMTR;
1056:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1057:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1058:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1059:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1060:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1061:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1062:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  step divider \n
1063:..//Libraries/XMCLib/inc/xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1064:..//Libraries/XMCLib/inc/xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1065:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1066:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1067:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1068:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1069:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1070:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1071:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1072:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1073:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1074:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->FDR = mode | step;
1075:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1076:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1077:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1078:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1079:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1080:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1081:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1082:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1083:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1084:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1085:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1086:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Define the data frame length.\n\n
1087:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1088:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1089:..//Libraries/XMCLib/inc/xmc_usic.h ****  * has to be controlled explicitly. 
1090:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1091:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1092:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1093:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1094:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1095:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1096:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1097:..//Libraries/XMCLib/inc/xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1098:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1099:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1100:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1101:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1102:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1103:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1104:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1105:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				can be combined using \a OR operation.
1106:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1107:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1108:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1109:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1110:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1111:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1112:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1113:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1114:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1115:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1116:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1117:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1118:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1119:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->CCR |= event;
1120:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1121:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1122:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1123:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1124:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1125:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1126:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1127:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				can be combined using \a OR operation.
1128:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1129:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1130:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1131:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1132:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1133:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1134:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1135:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1136:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1137:..//Libraries/XMCLib/inc/xmc_usic.h **** */
1138:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1139:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1140:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1141:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1142:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1143:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1144:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1145:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1146:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1147:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1148:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1149:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param service_request Service request number.\n
1150:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  \b Range: 0 to 5.
1151:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1152:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1153:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1154:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1155:..//Libraries/XMCLib/inc/xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1156:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1157:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1158:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1159:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1160:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1161:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1162:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1163:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1164:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          const uint32_t service_request);
1165:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1166:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1167:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1168:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1169:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1170:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1171:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1172:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1173:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets transmit buffer status. \n\n
1174:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1175:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1176:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1177:..//Libraries/XMCLib/inc/xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1178:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1179:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1180:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1181:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1182:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1183:..//Libraries/XMCLib/inc/xmc_usic.h **** {
  26              	 .loc 1 1183 1
  27              	 .cfi_startproc
  28              	 
  29              	 
  30 0000 80B5     	 push {r7,lr}
  31              	.LCFI0:
  32              	 .cfi_def_cfa_offset 8
  33              	 .cfi_offset 7,-8
  34              	 .cfi_offset 14,-4
  35 0002 82B0     	 sub sp,sp,#8
  36              	.LCFI1:
  37              	 .cfi_def_cfa_offset 16
  38 0004 00AF     	 add r7,sp,#0
  39              	.LCFI2:
  40              	 .cfi_def_cfa_register 7
  41 0006 7860     	 str r0,[r7,#4]
1184:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
  42              	 .loc 1 1184 45
  43 0008 7B68     	 ldr r3,[r7,#4]
  44 000a 9B6B     	 ldr r3,[r3,#56]
  45              	 .loc 1 1184 10
  46 000c DBB2     	 uxtb r3,r3
  47 000e 7F22     	 movs r2,#127
  48 0010 9343     	 bics r3,r2
  49 0012 DBB2     	 uxtb r3,r3
1185:..//Libraries/XMCLib/inc/xmc_usic.h **** }
  50              	 .loc 1 1185 1
  51 0014 1800     	 movs r0,r3
  52 0016 BD46     	 mov sp,r7
  53 0018 02B0     	 add sp,sp,#8
  54              	 
  55 001a 80BD     	 pop {r7,pc}
  56              	 .cfi_endproc
  57              	.LFE84:
  59              	 .section .text.XMC_USIC_CH_SetMode,"ax",%progbits
  60              	 .align 1
  61              	 .syntax unified
  62              	 .code 16
  63              	 .thumb_func
  64              	 .fpu softvfp
  66              	XMC_USIC_CH_SetMode:
  67              	.LFB119:
1186:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1187:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1188:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @brief API to get receive buffer status
1189:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1190:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1191:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1192:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1193:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1194:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1195:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1196:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1197:..//Libraries/XMCLib/inc/xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1198:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1199:..//Libraries/XMCLib/inc/xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1200:..//Libraries/XMCLib/inc/xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1201:..//Libraries/XMCLib/inc/xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1202:..//Libraries/XMCLib/inc/xmc_usic.h ****  * can be read from RBUF.
1203:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1204:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1205:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1206:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1207:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1208:..//Libraries/XMCLib/inc/xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1209:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1210:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1211:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1212:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1213:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1214:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1215:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1216:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1217:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1218:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1219:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                              
1220:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1221:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1222:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1223:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Configures data transmission. \n\n
1224:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1225:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1226:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1227:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1228:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1229:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1230:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1231:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1232:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1233:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1234:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1235:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1236:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1237:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1238:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1239:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1240:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1241:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1242:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1243:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1244:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Configures the mode for data output. \n\n
1245:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1246:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1247:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1248:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1249:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1250:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1251:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1252:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1253:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1254:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1255:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1256:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1257:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1258:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1259:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1260:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1261:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1262:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1263:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1264:..//Libraries/XMCLib/inc/xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1265:..//Libraries/XMCLib/inc/xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1266:..//Libraries/XMCLib/inc/xmc_usic.h ****  * IN[x] register.
1267:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1268:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1269:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1270:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1271:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1272:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1273:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1274:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1275:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1276:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1277:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1278:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1279:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1280:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1281:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1282:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1283:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1284:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1285:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1286:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1287:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1288:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1289:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1290:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1291:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1292:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1293:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1294:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1295:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1296:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1297:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1298:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1299:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1300:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1301:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1302:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1303:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1304:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1305:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1306:..//Libraries/XMCLib/inc/xmc_usic.h ****  * for event driven transfer starts.
1307:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1308:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1309:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1310:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1311:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1312:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1313:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1314:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1315:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1316:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1317:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1318:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1319:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1320:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1321:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1322:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1323:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1324:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1325:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1326:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1327:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1328:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1329:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1330:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1331:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1332:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1333:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1334:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1335:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1336:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1337:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: 0 to 5.
1338:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1339:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1340:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1341:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1342:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1343:..//Libraries/XMCLib/inc/xmc_usic.h ****  * generated if enabled. 
1344:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1345:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1346:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1347:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1348:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1349:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1350:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1351:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1352:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1353:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1354:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1355:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1356:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1357:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1358:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1359:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1360:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1361:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1362:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1363:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1364:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1365:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1366:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1367:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1368:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1369:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1370:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1371:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1372:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1373:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1376:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1377:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1378:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1379:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1380:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1381:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1382:..//Libraries/XMCLib/inc/xmc_usic.h ****  * configured passive level.
1383:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1384:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1385:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1386:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1387:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1388:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1389:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1390:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1391:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1392:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1393:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1394:..//Libraries/XMCLib/inc/xmc_usic.h **** /* TX FIFO APIs */
1395:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1396:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1397:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1398:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1399:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to 63.
1400:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1401:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1402:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1403:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1404:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1405:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1406:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1407:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1408:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1409:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1410:..//Libraries/XMCLib/inc/xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1411:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1412:..//Libraries/XMCLib/inc/xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1413:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1414:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1415:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1416:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1417:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1418:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const uint32_t data_pointer,
1419:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1420:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const uint32_t limit);
1421:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1422:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1423:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1424:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1425:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1426:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1427:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1428:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1429:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1430:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1431:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1432:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1433:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1434:..//Libraries/XMCLib/inc/xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1435:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1436:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1437:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1438:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1439:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1440:..//Libraries/XMCLib/inc/xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1441:..//Libraries/XMCLib/inc/xmc_usic.h ****                                             const uint32_t limit);
1442:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1443:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1444:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1445:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1446:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1447:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1448:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1449:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1450:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1451:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1452:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1453:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1454:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1455:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1456:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1457:..//Libraries/XMCLib/inc/xmc_usic.h ****  * must be enabled.
1458:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1459:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1460:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1461:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1462:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1463:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1464:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TBCTR |= event;
1465:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1466:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1467:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1468:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1469:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1470:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1471:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1472:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1473:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1474:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1475:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1476:..//Libraries/XMCLib/inc/xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1477:..//Libraries/XMCLib/inc/xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1478:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1479:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1480:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1481:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1482:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1483:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1484:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1485:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1486:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1487:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1488:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1489:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1490:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1491:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1492:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1493:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1494:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1495:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1496:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  \b Range: 0 to 5.
1497:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1498:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1499:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1500:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1501:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1502:..//Libraries/XMCLib/inc/xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1503:..//Libraries/XMCLib/inc/xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1504:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1505:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1506:..//Libraries/XMCLib/inc/xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1507:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1508:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1509:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1510:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1511:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1512:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1513:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1514:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1515:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                 const uint32_t service_request);
1516:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1517:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1518:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1519:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1520:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted. \n
1521:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1522:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1523:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1524:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1525:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1526:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1527:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1528:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1529:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1530:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1531:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1532:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1533:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1534:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->IN[0] = data;
1535:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1536:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1537:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1538:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1539:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1540:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted.
1541:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1542:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1543:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1544:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1545:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1546:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1547:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1548:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1549:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1550:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1551:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1552:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1553:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1554:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1555:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                        const uint16_t data,
1556:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                        const uint32_t frame_length)
1557:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1558:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->IN[frame_length] = data;
1559:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1560:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1561:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1562:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1563:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1564:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted.
1565:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1566:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1567:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1568:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1569:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1570:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1571:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1572:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1573:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1574:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1575:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1576:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1577:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1578:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1579:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                        const uint16_t data,
1580:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                        const uint32_t frame_length)
1581:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1582:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->IN[frame_length] = data;
1583:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1584:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1585:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1586:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1587:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1588:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1589:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1590:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1591:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1592:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1593:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1594:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1595:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1596:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1597:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1598:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1599:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1600:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1601:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1602:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1603:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1604:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1605:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1606:..//Libraries/XMCLib/inc/xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1607:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1608:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1609:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1610:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1611:..//Libraries/XMCLib/inc/xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1612:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1613:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1614:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1615:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1616:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1617:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1618:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1619:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1620:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1621:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1622:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1623:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1624:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1625:..//Libraries/XMCLib/inc/xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1626:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1627:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1628:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1629:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1630:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1631:..//Libraries/XMCLib/inc/xmc_usic.h ****  * FIFO empty flag is set.
1632:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1633:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1634:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1635:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1636:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1637:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1638:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1639:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1640:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1641:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1642:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1643:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1644:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1645:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1646:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1647:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1648:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1649:..//Libraries/XMCLib/inc/xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1650:..//Libraries/XMCLib/inc/xmc_usic.h ****  * of this filling level.
1651:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1652:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1653:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1654:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1655:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1656:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1657:..//Libraries/XMCLib/inc/xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1658:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1659:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1660:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1661:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1662:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1663:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1664:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1665:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1666:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1667:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1668:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1669:..//Libraries/XMCLib/inc/xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1670:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1671:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1672:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1673:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1674:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1675:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1676:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1677:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1678:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1679:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1680:..//Libraries/XMCLib/inc/xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1681:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1682:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1683:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1684:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1685:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1686:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1687:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1688:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1689:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1690:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1691:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1692:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1693:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1694:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1695:..//Libraries/XMCLib/inc/xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1696:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple event enumerations.
1697:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1698:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1699:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1700:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1701:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1702:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                    const uint32_t event)
1703:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1704:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TRBSCR = event;
1705:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1706:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1707:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1708:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1710:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1711:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to 63.
1712:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1713:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1714:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1715:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1716:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1717:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1718:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1719:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Configures the receive FIFO. \n\n
1720:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1721:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1722:..//Libraries/XMCLib/inc/xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1723:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1724:..//Libraries/XMCLib/inc/xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1725:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1726:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1727:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1728:..//Libraries/XMCLib/inc/xmc_usic.h **** */
1729:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1730:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const uint32_t data_pointer,
1731:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1732:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const uint32_t limit);
1733:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1734:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1735:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1736:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1737:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1738:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1739:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1740:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1741:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1742:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1743:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1744:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1745:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1746:..//Libraries/XMCLib/inc/xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1747:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1748:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1749:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1750:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1751:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1752:..//Libraries/XMCLib/inc/xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1753:..//Libraries/XMCLib/inc/xmc_usic.h ****                                             const uint32_t limit);
1754:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1755:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1756:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1757:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1758:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1759:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1760:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1761:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1762:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1763:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1764:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1765:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1766:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1767:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1768:..//Libraries/XMCLib/inc/xmc_usic.h ****  * must be enabled.
1769:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1770:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1771:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1772:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1773:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1774:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1775:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->RBCTR |= event;
1776:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1777:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1778:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1779:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1780:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1781:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1782:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Events to be disabled. \n
1783:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1784:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1785:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1786:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1787:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1788:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1789:..//Libraries/XMCLib/inc/xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1790:..//Libraries/XMCLib/inc/xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1791:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1792:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1793:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1794:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1795:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1796:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1797:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1798:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1799:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1800:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1801:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1802:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1803:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1804:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1805:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1806:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1807:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1808:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1809:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: 0 to 5.
1810:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1811:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1812:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1813:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1814:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1815:..//Libraries/XMCLib/inc/xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1816:..//Libraries/XMCLib/inc/xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1817:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1818:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1819:..//Libraries/XMCLib/inc/xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1820:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1821:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1822:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1823:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1824:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1825:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1826:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1827:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1828:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                 const uint32_t service_request);
1829:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1830:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1831:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1832:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1833:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1834:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1835:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1836:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1837:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1838:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1839:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1840:..//Libraries/XMCLib/inc/xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1841:..//Libraries/XMCLib/inc/xmc_usic.h ****  * until receive FIFO is empty.
1842:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1843:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1844:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1845:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1846:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1847:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1848:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1849:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1850:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1851:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1852:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1853:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1854:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1855:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1856:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1857:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1858:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1859:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1860:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1861:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1862:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1863:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1864:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1865:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1866:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1867:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1868:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1869:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1870:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1871:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1872:..//Libraries/XMCLib/inc/xmc_usic.h ****  *              \a false if receive FIFO is not full.
1873:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1874:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1875:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1876:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1877:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1878:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1879:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1880:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1881:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1882:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1883:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1884:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1885:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1886:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1887:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1888:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1889:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1890:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1891:..//Libraries/XMCLib/inc/xmc_usic.h ****  *              \a false if receive FIFO has some data.
1892:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1893:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1894:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1895:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1896:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1897:..//Libraries/XMCLib/inc/xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1898:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1899:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1900:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1901:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1902:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1903:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1904:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1905:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1906:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1907:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1908:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1909:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1910:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1911:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1912:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1913:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1914:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1915:..//Libraries/XMCLib/inc/xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1916:..//Libraries/XMCLib/inc/xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1917:..//Libraries/XMCLib/inc/xmc_usic.h ****  * receive FIFO.
1918:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1919:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1920:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1921:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1922:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1923:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1924:..//Libraries/XMCLib/inc/xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1925:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1926:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1927:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1928:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1929:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1930:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
1931:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1932:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1933:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1934:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1935:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
1936:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
1937:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
1938:..//Libraries/XMCLib/inc/xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
1939:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1940:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1941:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1942:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1943:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1944:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
1945:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1946:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1947:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1948:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
1949:..//Libraries/XMCLib/inc/xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
1950:..//Libraries/XMCLib/inc/xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
1951:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1952:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1953:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1954:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1955:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1956:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
1957:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1958:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1959:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1960:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1961:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1962:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
1963:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1964:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1965:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
1966:..//Libraries/XMCLib/inc/xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1967:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple event enumerations.
1968:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1969:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1970:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
1971:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1972:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1973:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                    const uint32_t event)
1974:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1975:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TRBSCR = event;
1976:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1977:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1978:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1979:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1980:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1981:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1982:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1983:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1984:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
1985:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
1986:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1987:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1988:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
1989:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1990:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
1991:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1992:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
1993:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1994:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1995:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1996:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1997:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1998:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1999:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2000:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
2001:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
2002:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
2003:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2004:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2005:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
2006:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
2007:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
2008:..//Libraries/XMCLib/inc/xmc_usic.h **** {
2009:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
2010:..//Libraries/XMCLib/inc/xmc_usic.h **** }
2011:..//Libraries/XMCLib/inc/xmc_usic.h **** 
2012:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
2013:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2014:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2015:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
2016:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
2017:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
2018:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2019:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
2020:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
2021:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
2022:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
2023:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
2024:..//Libraries/XMCLib/inc/xmc_usic.h **** {
2025:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
2026:..//Libraries/XMCLib/inc/xmc_usic.h **** }
2027:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
2028:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2029:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2030:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
2031:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
2032:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
2033:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
2034:..//Libraries/XMCLib/inc/xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
2035:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
2036:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
2037:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
2038:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
2039:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2040:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
2041:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
2042:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
2043:..//Libraries/XMCLib/inc/xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
2044:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
2045:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This value should be configured based on the slave device requirement.
2046:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
2047:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
2048:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
2049:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
2050:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
2051:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
2052:..//Libraries/XMCLib/inc/xmc_usic.h **** {
2053:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
2054:..//Libraries/XMCLib/inc/xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
2055:..//Libraries/XMCLib/inc/xmc_usic.h ****                  (uint32_t)passive_level |
2056:..//Libraries/XMCLib/inc/xmc_usic.h ****                  (uint32_t)clock_output;
2057:..//Libraries/XMCLib/inc/xmc_usic.h **** }
2058:..//Libraries/XMCLib/inc/xmc_usic.h **** 
2059:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
2060:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2061:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2062:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param mode USIC channel operation mode. \n
2063:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
2064:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
2065:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
2066:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
2067:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2068:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
2069:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
2070:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
2071:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
2072:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2073:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2074:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
2075:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
2076:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
2077:..//Libraries/XMCLib/inc/xmc_usic.h **** {
  68              	 .loc 1 2077 1
  69              	 .cfi_startproc
  70              	 
  71              	 
  72 0000 80B5     	 push {r7,lr}
  73              	.LCFI3:
  74              	 .cfi_def_cfa_offset 8
  75              	 .cfi_offset 7,-8
  76              	 .cfi_offset 14,-4
  77 0002 82B0     	 sub sp,sp,#8
  78              	.LCFI4:
  79              	 .cfi_def_cfa_offset 16
  80 0004 00AF     	 add r7,sp,#0
  81              	.LCFI5:
  82              	 .cfi_def_cfa_register 7
  83 0006 7860     	 str r0,[r7,#4]
  84 0008 0A00     	 movs r2,r1
  85 000a FB1C     	 adds r3,r7,#3
  86 000c 1A70     	 strb r2,[r3]
2078:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
  87              	 .loc 1 2078 36
  88 000e 7B68     	 ldr r3,[r7,#4]
  89 0010 1B6C     	 ldr r3,[r3,#64]
  90              	 .loc 1 2078 18
  91 0012 0F22     	 movs r2,#15
  92 0014 9343     	 bics r3,r2
  93 0016 1A00     	 movs r2,r3
  94              	 .loc 1 2078 73
  95 0018 FB1C     	 adds r3,r7,#3
  96 001a 1B78     	 ldrb r3,[r3]
  97              	 .loc 1 2078 71
  98 001c 1A43     	 orrs r2,r3
  99              	 .loc 1 2078 16
 100 001e 7B68     	 ldr r3,[r7,#4]
 101 0020 1A64     	 str r2,[r3,#64]
2079:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 102              	 .loc 1 2079 1
 103 0022 C046     	 nop
 104 0024 BD46     	 mov sp,r7
 105 0026 02B0     	 add sp,sp,#8
 106              	 
 107 0028 80BD     	 pop {r7,pc}
 108              	 .cfi_endproc
 109              	.LFE119:
 111              	 .section .text.XMC_SPI_CH_ClearStatusFlag,"ax",%progbits
 112              	 .align 1
 113              	 .syntax unified
 114              	 .code 16
 115              	 .thumb_func
 116              	 .fpu softvfp
 118              	XMC_SPI_CH_ClearStatusFlag:
 119              	.LFB126:
 120              	 .file 2 "..//Libraries/XMCLib/inc/xmc_spi.h"
   1:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
   2:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @file xmc_spi.h
   3:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @date 2016-05-20
   4:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
   5:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @cond
   6:..//Libraries/XMCLib/inc/xmc_spi.h ****  **************************************************************************************************
   7:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
   9:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:..//Libraries/XMCLib/inc/xmc_spi.h ****  * All rights reserved.                        
  11:..//Libraries/XMCLib/inc/xmc_spi.h ****  *                                             
  12:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:..//Libraries/XMCLib/inc/xmc_spi.h ****  * following conditions are met:   
  14:..//Libraries/XMCLib/inc/xmc_spi.h ****  *                                                                              
  15:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:..//Libraries/XMCLib/inc/xmc_spi.h ****  * disclaimer.                        
  17:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 
  18:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:..//Libraries/XMCLib/inc/xmc_spi.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 
  21:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:..//Libraries/XMCLib/inc/xmc_spi.h ****  * products derived from this software without specific prior written permission.                  
  23:..//Libraries/XMCLib/inc/xmc_spi.h ****  *                                                                              
  24:..//Libraries/XMCLib/inc/xmc_spi.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:..//Libraries/XMCLib/inc/xmc_spi.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:..//Libraries/XMCLib/inc/xmc_spi.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:..//Libraries/XMCLib/inc/xmc_spi.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:..//Libraries/XMCLib/inc/xmc_spi.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:..//Libraries/XMCLib/inc/xmc_spi.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:..//Libraries/XMCLib/inc/xmc_spi.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:..//Libraries/XMCLib/inc/xmc_spi.h ****  *                                                                              
  32:..//Libraries/XMCLib/inc/xmc_spi.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:..//Libraries/XMCLib/inc/xmc_spi.h ****  **************************************************************************************************
  35:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
  36:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Change History
  37:..//Libraries/XMCLib/inc/xmc_spi.h ****  * --------------
  38:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
  39:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 2015-02-20:
  40:..//Libraries/XMCLib/inc/xmc_spi.h ****  *     - Initial
  41:..//Libraries/XMCLib/inc/xmc_spi.h ****  *   
  42:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 2015-05-20:
  43:..//Libraries/XMCLib/inc/xmc_spi.h ****  *     - Documentation improved <br>
  44:..//Libraries/XMCLib/inc/xmc_spi.h ****  *     - Added XMC_SPI_CH_SetSlaveSelectDelay(), XMC_SPI_CH_TriggerServiceRequest() and 
  45:..//Libraries/XMCLib/inc/xmc_spi.h ****  *       XMC_SPI_CH_SelectInterruptNodePointer() <br>
  46:..//Libraries/XMCLib/inc/xmc_spi.h ****  *     - Added XMC_SPI_CH_SetInterwordDelaySCLK() <br>
  47:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
  48:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 2015-06-20:
  49:..//Libraries/XMCLib/inc/xmc_spi.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  50:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
  51:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 2015-08-24:
  52:..//Libraries/XMCLib/inc/xmc_spi.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_SPI_CH_DisableDelayCompensation()
  53:..//Libraries/XMCLib/inc/xmc_spi.h ****  *       XMC_SPI_CH_EnableDelayCompensation() <br>
  54:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
  55:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 2015-08-27:
  56:..//Libraries/XMCLib/inc/xmc_spi.h ****  *     - Added APIs for external input for BRG configuration:XMC_SPI_CH_ConfigExternalInputSignalTo
  57:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
  58:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 2015-09-01:
  59:..//Libraries/XMCLib/inc/xmc_spi.h ****  *     - Modified XMC_SPI_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br>
  60:..//Libraries/XMCLib/inc/xmc_spi.h ****  *     - Modified XMC_SPI_CH_EVENT_t enum for supporting XMC_SPI_CH_EnableEvent() and XMC_SPI_CH_Di
  61:..//Libraries/XMCLib/inc/xmc_spi.h ****  *       for supporting multiple events configuration <br>
  62:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
  63:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 2015-09-08:
  64:..//Libraries/XMCLib/inc/xmc_spi.h ****  *     - Adding API for configuring the receiving clock phase in the slave:XMC_SPI_CH_DataLatchedIn
  65:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
  66:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 2016-04-10:
  67:..//Libraries/XMCLib/inc/xmc_spi.h ****  *     - Added an API for configuring the transmit mode:XMC_SPI_CH_SetTransmitMode() <br>
  68:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
  69:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 2016-05-20:
  70:..//Libraries/XMCLib/inc/xmc_spi.h ****  *     - Added XMC_SPI_CH_EnableDataTransmission() and XMC_SPI_CH_DisableDataTransmission()
  71:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 
  72:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @endcond 
  73:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
  74:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
  75:..//Libraries/XMCLib/inc/xmc_spi.h **** 
  76:..//Libraries/XMCLib/inc/xmc_spi.h **** #ifndef XMC_SPI_H
  77:..//Libraries/XMCLib/inc/xmc_spi.h **** #define XMC_SPI_H
  78:..//Libraries/XMCLib/inc/xmc_spi.h **** 
  79:..//Libraries/XMCLib/inc/xmc_spi.h **** /**************************************************************************************************
  80:..//Libraries/XMCLib/inc/xmc_spi.h ****  * HEADER FILES
  81:..//Libraries/XMCLib/inc/xmc_spi.h ****  **************************************************************************************************
  82:..//Libraries/XMCLib/inc/xmc_spi.h **** #include "xmc_usic.h"
  83:..//Libraries/XMCLib/inc/xmc_spi.h **** 
  84:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
  85:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @addtogroup XMClib XMC Peripheral Library
  86:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @{
  87:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
  88:..//Libraries/XMCLib/inc/xmc_spi.h **** 
  89:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
  90:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @addtogroup SPI
  91:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @brief Synchronous serial channel driver for SPI-like communication.
  92:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 
  93:..//Libraries/XMCLib/inc/xmc_spi.h ****  * The SPI driver uses Universal Serial Interface Channel(USIC) module. 
  94:..//Libraries/XMCLib/inc/xmc_spi.h ****  * The USIC module supports multiple data lines for SPI communication. \n
  95:..//Libraries/XMCLib/inc/xmc_spi.h ****  * -# Full duplex communication with 2 separate lines for transmission and reception.
  96:..//Libraries/XMCLib/inc/xmc_spi.h ****  * -# Half duplex communication with 1 common line shared for transmission and reception.
  97:..//Libraries/XMCLib/inc/xmc_spi.h ****  * -# Dual mode communication with 2 common lines shared for transmission and reception.
  98:..//Libraries/XMCLib/inc/xmc_spi.h ****  * -# Quad mode communication with 4 common lines shared for transmission and reception.<br><br>
  99:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 
 100:..//Libraries/XMCLib/inc/xmc_spi.h ****  * SPI driver provides structures, enumerations and APIs for configuring the USIC channel for SPI c
 101:..//Libraries/XMCLib/inc/xmc_spi.h ****  * and also for data transaction.<br>
 102:..//Libraries/XMCLib/inc/xmc_spi.h ****  * SPI driver features:
 103:..//Libraries/XMCLib/inc/xmc_spi.h ****  * -# Configuration structure XMC_SPI_CH_CONFIG_t and SPI initialization function XMC_SPI_CH_Init()
 104:..//Libraries/XMCLib/inc/xmc_spi.h ****  * -# Allows configuration of protocol word and frame length using XMC_SPI_CH_SetWordLength(), XMC_
 105:..//Libraries/XMCLib/inc/xmc_spi.h ****  * -# Allows manipulation of data frame at runtime using XMC_SPI_CH_EnableSOF(), XMC_SPI_CH_EnableE
 106:..//Libraries/XMCLib/inc/xmc_spi.h ****  XMC_SPI_CH_EnableSlaveSelect(), XMC_SPI_CH_DisableSlaveSelect()
 107:..//Libraries/XMCLib/inc/xmc_spi.h ****  * -# Provides APIs for transmitting data and receiving data using XMC_SPI_CH_Transmit(), XMC_SPI_C
 108:..//Libraries/XMCLib/inc/xmc_spi.h ****  * -# Allows configuration of shift clock using XMC_SPI_CH_ConfigureShiftClockOutput()
 109:..//Libraries/XMCLib/inc/xmc_spi.h ****  * -# Provides enumeration of SPI protocol events using @ref XMC_SPI_CH_STATUS_FLAG_t
 110:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @{
 111:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 112:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 113:..//Libraries/XMCLib/inc/xmc_spi.h **** /**************************************************************************************************
 114:..//Libraries/XMCLib/inc/xmc_spi.h ****  * MACROS
 115:..//Libraries/XMCLib/inc/xmc_spi.h ****  **************************************************************************************************
 116:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 117:..//Libraries/XMCLib/inc/xmc_spi.h **** #if defined(USIC0)
 118:..//Libraries/XMCLib/inc/xmc_spi.h **** #define XMC_SPI0_CH0 XMC_USIC0_CH0 /**< SPI0 channel 0 base address */
 119:..//Libraries/XMCLib/inc/xmc_spi.h **** #define XMC_SPI0_CH1 XMC_USIC0_CH1 /**< SPI0 channel 1 base address */
 120:..//Libraries/XMCLib/inc/xmc_spi.h **** #endif
 121:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 122:..//Libraries/XMCLib/inc/xmc_spi.h **** #if defined(USIC1)
 123:..//Libraries/XMCLib/inc/xmc_spi.h **** #define XMC_SPI1_CH0 XMC_USIC1_CH0 /**< SPI1 channel 0 base address */
 124:..//Libraries/XMCLib/inc/xmc_spi.h **** #define XMC_SPI1_CH1 XMC_USIC1_CH1 /**< SPI1 channel 1 base address */
 125:..//Libraries/XMCLib/inc/xmc_spi.h **** #endif
 126:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 127:..//Libraries/XMCLib/inc/xmc_spi.h **** #if defined(USIC2)
 128:..//Libraries/XMCLib/inc/xmc_spi.h **** #define XMC_SPI2_CH0 XMC_USIC2_CH0 /**< SPI2 channel 0 base address */
 129:..//Libraries/XMCLib/inc/xmc_spi.h **** #define XMC_SPI2_CH1 XMC_USIC2_CH1 /**< SPI2 channel 1 base address */
 130:..//Libraries/XMCLib/inc/xmc_spi.h **** #endif
 131:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 132:..//Libraries/XMCLib/inc/xmc_spi.h **** /**************************************************************************************************
 133:..//Libraries/XMCLib/inc/xmc_spi.h ****  * ENUMS
 134:..//Libraries/XMCLib/inc/xmc_spi.h ****  **************************************************************************************************
 135:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 136:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 137:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Defines return status of SPI driver APIs
 138:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 139:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS
 140:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 141:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_OK,    /**< Status of the Module: OK */
 142:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_ERROR, /**< Status of the Module: ERROR */
 143:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_BUSY   /**< The Module is busy */
 144:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_STATUS_t;
 145:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 146:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Defines the SPI bus mode
 147:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 148:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef enum XMC_SPI_CH_BUS_MODE
 149:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 150:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_MASTER, /**< SPI Master */
 151:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_SLAVE   /**< SPI Slave */
 152:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_BUS_MODE_t;
 153:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 154:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 155:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Defines the Polarity of the slave select signals SELO[7:0] in relation to the master slave selec
 156:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 157:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SEL_MSLS_INV
 158:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 159:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_SAME_AS_MSLS = 0x0UL, /**< The SELO outputs have the same polarity as the MS
 160:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                   (active high) */
 161:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_INV_TO_MSLS = 0x1UL << USIC_CH_PCR_SSCMode_SELINV_Pos /**< The SELO outputs 
 162:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                                                   polarity to the M
 163:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                                                   (active low)*/
 164:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t;
 165:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 166:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 167:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Defines the Polarity of the data inputs.
 168:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 169:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef enum XMC_SPI_CH_DATA_POLARITY
 170:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 171:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_DIRECT = 0x0UL, /**< The polarity of the data line is not inverted */
 172:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_INVERT = 0x1UL << USIC_CH_DX2CR_DPOL_Pos /**< The polarity of the data l
 173:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_DATA_POLARITY_t;
 174:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 175:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 176:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Defines Slave Select lines
 177:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 178:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SELECT
 179:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 180:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_0 = 1UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 0 */
 181:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_1 = 2UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 1 */
 182:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_2 = 4UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 2 */
 183:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_3 = 8UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 3 */
 184:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_4 = 16UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 4 */
 185:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_5 = 32UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 5 */
 186:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_6 = 64UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 6 */
 187:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_7 = 128UL << USIC_CH_PCR_SSCMode_SELO_Pos /**< Slave Select line 7 */
 188:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_SLAVE_SELECT_t;
 189:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 190:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 191:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Defines SPI specific events
 192:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 193:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef enum XMC_SPI_CH_EVENT
 194:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 195:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 196:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 197:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 198:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 199:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 200:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 201:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 202:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 203:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_EVENT_PARITY_ERROR = USIC_CH_PCR_SSCMode_PARIEN_Msk >> 13U,       /**< Parity error ev
 204:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_EVENT_MSLS_CHANGE =  USIC_CH_PCR_SSCMode_MSLSIEN_Msk >> 13U,      /**< Master slave se
 205:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_EVENT_DX2TIEN_ACTIVATED = USIC_CH_PCR_SSCMode_DX2TIEN_Msk >> 13U  /**< Slave select in
 206:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_EVENT_t;
 207:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 208:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 209:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Defines SPI event status
 210:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 211:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS_FLAG
 212:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 213:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS = USIC_CH_PSR_SSCMode_MSLS_Msk,                          /**< Status 
 214:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                                                             select(
 215:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2S = USIC_CH_PSR_SSCMode_DX2S_Msk,                          /**< Status 
 216:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                                                             input(D
 217:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS_EVENT_DETECTED = USIC_CH_PSR_SSCMode_MSLSEV_Msk,         /**< Status 
 218:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                                                             output 
 219:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2T_EVENT_DETECTED = USIC_CH_PSR_SSCMode_DX2TEV_Msk,         /**< Status 
 220:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                                                             input s
 221:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_PARITY_ERROR_EVENT_DETECTED = USIC_CH_PSR_SSCMode_PARERR_Msk, /**< Indicat
 222:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                                                             parity 
 223:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_SSCMode_RSIF_Msk,     /**< Status 
 224:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                                                             event *
 225:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_SSCMode_DLIF_Msk,          /**< Status 
 226:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_SSCMode_TSIF_Msk,      /**< Status
 227:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                                                             event *
 228:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_SSCMode_TBIF_Msk,    /**< Status 
 229:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                                                             event *
 230:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_RIF_Msk,             /**< Status 
 231:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_AIF_Msk, /**< Status 
 232:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                                                             receive
 233:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_SSCMode_BRGIF_Msk/**< Status 
 234:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                                                             generat
 235:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_STATUS_FLAG_t;
 236:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 237:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 238:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Defines input frequency sources for slave select signal delay configuration.
 239:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 240:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY
 241:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 242:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPDIV = 0x0UL, /**< Output of PDIV divider: FPDIV */
 243:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPPP  = 0x1UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< P
 244:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FSCLK = 0x2UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< S
 245:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FMCLK = 0x3UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos  /**< M
 246:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_t;
 247:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 248:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 249:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Define data and clock input stages
 250:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 251:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT
 252:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 253:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN0 = 0UL,         /**< Data input stage 0 */ 
 254:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SCLKIN = 1UL, /**< Clock input stage */
 255:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SELIN = 2UL,  /**< Slave select input stage */
 256:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN1 = 3UL,         /**< Data input stage 1 */
 257:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN2 = 4UL,         /**< Data input stage 2 */
 258:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN3 = 5UL          /**< Data input stage 3 */
 259:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_INPUT_t;
 260:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 261:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 262:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Define SPI data transfer mode
 263:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 264:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef enum XMC_SPI_CH_MODE
 265:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 266:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD = 0UL,            /**< SPI standard full duplex mode */ 
 267:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX = 4UL, /**< SPI standard half duplex mode */ 
 268:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_MODE_DUAL= 6UL,                 /**< SPI half duplex mode with dual data lines */ 
 269:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_MODE_QUAD= 7UL                  /**< SPI half duplex mode with quad data lines */
 270:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_MODE_t;
 271:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 272:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 273:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 274:..//Libraries/XMCLib/inc/xmc_spi.h ****  * SPI Baudrate Generator shift clock passive level
 275:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 276:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 277:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 278:..//Libraries/XMCLib/inc/xmc_spi.h ****   /**< Passive clock level 0, delay disabled */
 279:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 280:..//Libraries/XMCLib/inc/xmc_spi.h ****   /**< Passive clock level 1, delay disabled */
 281:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 282:..//Libraries/XMCLib/inc/xmc_spi.h ****   /**< Passive clock level 0, delay enabled */
 283:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 284:..//Libraries/XMCLib/inc/xmc_spi.h ****   /**< Passive clock level 1, delay enabled */
 285:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 286:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 287:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 288:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 289:..//Libraries/XMCLib/inc/xmc_spi.h ****  * SPI Baudrate Generator shift clock output
 290:..//Libraries/XMCLib/inc/xmc_spi.h **** */
 291:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT
 292:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 293:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,  /**< Baudrate 
 294:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1  = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1   /**< Clock obta
 295:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 296:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 297:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 298:..//Libraries/XMCLib/inc/xmc_spi.h ****  * SPI channel interrupt node pointers
 299:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 300:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef enum XMC_SPI_CH_INTERRUPT_NODE_POINTER
 301:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 302:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 303:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 304:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 305:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 306:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 307:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_INTERRUPT_NODE_POINTER_t;
 308:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 309:..//Libraries/XMCLib/inc/xmc_spi.h **** /**************************************************************************************************
 310:..//Libraries/XMCLib/inc/xmc_spi.h ****  * DATA STRUCTURES
 311:..//Libraries/XMCLib/inc/xmc_spi.h **** ***************************************************************************************************
 312:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 313:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 314:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Structure for initializing SPI channel.
 315:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 316:..//Libraries/XMCLib/inc/xmc_spi.h **** typedef struct XMC_SPI_CH_CONFIG
 317:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 318:..//Libraries/XMCLib/inc/xmc_spi.h ****   uint32_t baudrate;							  /**< Module baud rate for communication */
 319:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_t bus_mode;                 /**< Bus mode: Master/Slave */
 320:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t selo_inversion; /**< Enable inversion of Slave select signal rela
 321:..//Libraries/XMCLib/inc/xmc_spi.h ****                                                        MSLS signal  */
 322:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_USIC_CH_PARITY_MODE_t parity_mode;          /**< Enable parity check for transmit and receive
 323:..//Libraries/XMCLib/inc/xmc_spi.h **** } XMC_SPI_CH_CONFIG_t;
 324:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 325:..//Libraries/XMCLib/inc/xmc_spi.h **** /**************************************************************************************************
 326:..//Libraries/XMCLib/inc/xmc_spi.h ****  * API PROTOTYPES
 327:..//Libraries/XMCLib/inc/xmc_spi.h ****  **************************************************************************************************
 328:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 329:..//Libraries/XMCLib/inc/xmc_spi.h **** #ifdef __cplusplus
 330:..//Libraries/XMCLib/inc/xmc_spi.h **** extern "C" {
 331:..//Libraries/XMCLib/inc/xmc_spi.h **** #endif
 332:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 333:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 334:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 335:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param config pointer to constant SPI channel configuration data structure.\n
 336:..//Libraries/XMCLib/inc/xmc_spi.h ****  *               Refer data structure @ref XMC_SPI_CH_CONFIG_t for detail.
 337:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 338:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return None
 339:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 340:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 341:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Initializes the selected SPI \a channel with the \a config structure.\n\n
 342:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Enable SPI channel by calling XMC_USIC_CH_Enable() and then configures
 343:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <ul>
 344:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <li>Baudrate,</li>
 345:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <li>Passive data level as active high,</li>
 346:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <li>Shift control signal as active high,</li>
 347:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <li>Frame length as 64U,</li>
 348:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <li>Word length as 8U,</li>
 349:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <li>Enable Hardware port control mode,</li>
 350:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <li>Enable transmission of data TDV(Transmit data valid) bit is set to 1,</li>
 351:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <li>Enable invalidation of data in TBUF once loaded into shift register,</li>
 352:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <li>Parity mode settings</li>
 353:..//Libraries/XMCLib/inc/xmc_spi.h ****  * </ul>
 354:..//Libraries/XMCLib/inc/xmc_spi.h ****  * And if master mode is selected,
 355:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <ul>
 356:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <li>Enables MSLS signal generation,</li>
 357:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <li>configures slave selection as normal mode,</li>
 358:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <li>Set polarity for the Slave signal,</li>
 359:..//Libraries/XMCLib/inc/xmc_spi.h ****  * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 360:..//Libraries/XMCLib/inc/xmc_spi.h ****  * </ul>
 361:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 362:..//Libraries/XMCLib/inc/xmc_spi.h **** void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config);
 363:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 364:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 365:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 366:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 367:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return None
 368:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 369:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 370:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Set the selected USIC channel to operate in SPI mode, by setting CCR.MODE bits.\n\n
 371:..//Libraries/XMCLib/inc/xmc_spi.h ****  * It should be executed after XMC_SPI_CH_Init() during initialization. By invoking XMC_SPI_CH_Stop
 372:..//Libraries/XMCLib/inc/xmc_spi.h ****  * to IDLE state. Call XMC_SPI_CH_Start() to set the SPI mode again, as needed later in the program
 373:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 374:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 375:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 376:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 377:..//Libraries/XMCLib/inc/xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
 378:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 379:..//Libraries/XMCLib/inc/xmc_spi.h ****   /* USIC channel in SPI mode */
 380:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 381:..//Libraries/XMCLib/inc/xmc_spi.h **** }
 382:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 383:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 384:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 385:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 386:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for stopping is processed
 387:..//Libraries/XMCLib/inc/xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the USIC channel is successfully put to IDLE mode. \n
 388:..//Libraries/XMCLib/inc/xmc_spi.h ****  *        XMC_SPI_CH_STATUS_BUSY- If the USIC channel is busy transmitting data.
 389:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 390:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 391:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Set the selected SPI channel to IDLE mode, by clearing CCR.MODE bits.\n\n
 392:..//Libraries/XMCLib/inc/xmc_spi.h ****  * After calling XMC_SPI_CH_Stop, channel is IDLE mode. So no communication is supported. XMC_SPI_C
 393:..//Libraries/XMCLib/inc/xmc_spi.h ****  * invoked to start the communication again.
 394:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 395:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 396:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_Start()
 397:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 398:..//Libraries/XMCLib/inc/xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel);
 399:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 400:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 401:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 402:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param rate Bus speed in bits per second
 403:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 404:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for setting baudrate is p
 405:..//Libraries/XMCLib/inc/xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the baudrate is successfully changed. \n
 406:..//Libraries/XMCLib/inc/xmc_spi.h ****  *        XMC_SPI_CH_STATUS_ERROR- If the new baudrate value is out of range.
 407:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 408:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 409:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Sets the bus speed in bits per second
 410:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 411:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 412:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 413:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 414:..//Libraries/XMCLib/inc/xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 415:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 416:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 417:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 418:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param slave Slave select signal.\n
 419:..//Libraries/XMCLib/inc/xmc_spi.h ****  *              Refer @ref XMC_SPI_CH_SLAVE_SELECT_t for valid values.
 420:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 421:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return None
 422:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 423:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 424:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Enable the selected slave signal by setting PCR.SELO bits.\n\n
 425:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Each slave is connected with one slave select signal. This is not configured in XMC_SPI_CH_Init(
 426:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() with required \a slave to to start the communication. After finis
 427:..//Libraries/XMCLib/inc/xmc_spi.h ****  * communication XMC_SPI_CH_DisableSlaveSelect() can be invoked to disable the slaves.
 428:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 429:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 430:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_DisableSlaveSelect()
 431:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 432:..//Libraries/XMCLib/inc/xmc_spi.h **** void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t sla
 433:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 434:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 435:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant ponter to XMC_USIC_CH_t, pointing to the USIC channel base address.
 436:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 437:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return None
 438:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 439:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 440:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Disable all the slave signals by clearing PCR.SELO bits.\n\n
 441:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() has to be invoked to start the communication with the desired sla
 442:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 443:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 444:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect()
 445:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 446:..//Libraries/XMCLib/inc/xmc_spi.h **** void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel);
 447:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 448:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 449:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 450:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 451:..//Libraries/XMCLib/inc/xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 452:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 453:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return None
 454:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 455:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 456:..//Libraries/XMCLib/inc/xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. \n\n
 457:..//Libraries/XMCLib/inc/xmc_spi.h ****  * By enabling this the direction of the data pin is updated by hardware itself. Before transmittin
 458:..//Libraries/XMCLib/inc/xmc_spi.h ****  * mode to ensure the proper communication.
 459:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 
 460:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 461:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_Transmit()
 462:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 463:..//Libraries/XMCLib/inc/xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE
 464:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 465:..//Libraries/XMCLib/inc/xmc_spi.h ****   channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 466:..//Libraries/XMCLib/inc/xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 467:..//Libraries/XMCLib/inc/xmc_spi.h **** }
 468:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 469:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 470:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 471:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param data Data to be transmitted
 472:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 473:..//Libraries/XMCLib/inc/xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 474:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 475:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return None
 476:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 477:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 478:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Puts the data into FIFO, if FIFO mode is enabled or else into standard buffer, by setting the pr
 479:..//Libraries/XMCLib/inc/xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. By enabling this the 
 480:..//Libraries/XMCLib/inc/xmc_spi.h ****  * pin is updated by hardware itself. TCI(Transmit Control Information) allows dynamic control of b
 481:..//Libraries/XMCLib/inc/xmc_spi.h ****  * and pin direction during data transfers by writing to SCTR.DSM and SCTR.HPCDIR bit fields. To su
 482:..//Libraries/XMCLib/inc/xmc_spi.h ****  * update, TCSR.HPCMD(Hardware Port control) will be enabled during the initialization using XMC_SP
 483:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 
 484:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 
 485:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 486:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_Receive()
 487:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 488:..//Libraries/XMCLib/inc/xmc_spi.h **** void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t
 489:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 490:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 491:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 492:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 493:..//Libraries/XMCLib/inc/xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.      
 494:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 495:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return None
 496:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 497:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 498:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Transmits a dummy data(FFFFH) to provide clock for slave and receives the data from the slave.\n
 499:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_Receive() receives the data and places it into buffer based on the FIFO selection. Af
 500:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be invoked to read the data from the buffers.
 501:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 
 502:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 503:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_GetReceivedDaa()
 504:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 505:..//Libraries/XMCLib/inc/xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Receive(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
 506:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 507:..//Libraries/XMCLib/inc/xmc_spi.h ****   /* Transmit dummy data */
 508:..//Libraries/XMCLib/inc/xmc_spi.h ****   XMC_SPI_CH_Transmit(channel, (uint16_t)0xffffU, (XMC_SPI_CH_MODE_t)((uint16_t)mode & 0xfffbU));
 509:..//Libraries/XMCLib/inc/xmc_spi.h **** }
 510:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 511:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 512:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 513:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 514:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return uint16_t Data read from the receive buffer.
 515:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 516:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 517:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Reads data from the receive buffer based on the FIFO selection.\n\n
 518:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Invocation of XMC_SPI_CH_Receive() receives the data and place it into receive buffer. After rec
 519:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be used to read the data from the buffer.
 520:..//Libraries/XMCLib/inc/xmc_spi.h ****  * 
 521:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 522:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_Receive()
 523:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 524:..//Libraries/XMCLib/inc/xmc_spi.h **** uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 525:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 526:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 527:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 528:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 529:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return None
 530:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 531:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 532:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Set the order of data transfer from LSB to MSB, by clearing SCTR.SDIR bit.\n\n
 533:..//Libraries/XMCLib/inc/xmc_spi.h ****  * This is typically based on the slave settings. Invoke XMC_SPI_CH_SetBitOrderLsbFirst() to set di
 534:..//Libraries/XMCLib/inc/xmc_spi.h ****  * the program.
 535:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 536:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 537:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderMsbFirst()
 538:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 539:..//Libraries/XMCLib/inc/xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderLsbFirst(XMC_USIC_CH_t *const channel)
 540:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 541:..//Libraries/XMCLib/inc/xmc_spi.h ****   channel->SCTR &= (uint32_t)~USIC_CH_SCTR_SDIR_Msk;
 542:..//Libraries/XMCLib/inc/xmc_spi.h **** }
 543:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 544:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 545:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 546:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 547:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return None
 548:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 549:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 550:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Set the order of data transfer from MSB to LSB, by setting SCTR.SDIR bit.\n\n
 551:..//Libraries/XMCLib/inc/xmc_spi.h ****  * This is typically based on the slave settings. This is not set during XMC_SPI_CH_Init(). 
 552:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Invoke XMC_SPI_CH_SetBitOrderMsbFirst() to set direction as needed in the program.
 553:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 554:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 555:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderLsbFirst()
 556:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 557:..//Libraries/XMCLib/inc/xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
 558:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 559:..//Libraries/XMCLib/inc/xmc_spi.h ****   channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 560:..//Libraries/XMCLib/inc/xmc_spi.h **** }
 561:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 562:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 563:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 564:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param event Protocol events which have to be enabled.
 565:..//Libraries/XMCLib/inc/xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 566:..//Libraries/XMCLib/inc/xmc_spi.h ****  *              as input.
 567:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 568:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return None
 569:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 570:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 571:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Enables the SPI protocol specific events, by configuring PCR register.\n\n
 572:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Events can be enabled as needed using XMC_SPI_CH_EnableEvent(). 
 573:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_DisableEvent() can be used to disable the events.
 574:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 575:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 576:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_DisableEvent()
 577:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 578:..//Libraries/XMCLib/inc/xmc_spi.h **** void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 579:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 580:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 581:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 582:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param event Protocol events which have to be disabled.
 583:..//Libraries/XMCLib/inc/xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 584:..//Libraries/XMCLib/inc/xmc_spi.h ****  *              as input.
 585:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 586:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return None
 587:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 588:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 589:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Disables the SPI protocol specific events, by configuring PCR register.\n\n
 590:..//Libraries/XMCLib/inc/xmc_spi.h ****  * After disabling the events, XMC_SPI_CH_EnableEvent() has to be invoked to re-enable the events.
 591:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 592:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 593:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_EnableEvent()
 594:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 595:..//Libraries/XMCLib/inc/xmc_spi.h **** void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 596:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 597:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 598:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 599:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 600:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return uint32_t Status of SPI protocol events.
 601:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 602:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 603:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Returns the status of the events, by reading PSR register.\n\n
 604:..//Libraries/XMCLib/inc/xmc_spi.h ****  * This indicates the status of the all the events, for SPI communication. 
 605:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 606:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 607:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_ClearStatusFlag()
 608:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 609:..//Libraries/XMCLib/inc/xmc_spi.h **** __STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 610:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 611:..//Libraries/XMCLib/inc/xmc_spi.h ****   return channel->PSR_SSCMode;
 612:..//Libraries/XMCLib/inc/xmc_spi.h **** }
 613:..//Libraries/XMCLib/inc/xmc_spi.h **** 
 614:..//Libraries/XMCLib/inc/xmc_spi.h **** /**
 615:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 616:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @param flag Protocol event status to be cleared for detection of next occurence.
 617:..//Libraries/XMCLib/inc/xmc_spi.h ****  *              Refer @ XMC_SPI_CH_STATUS_FLAG_t for valid values. <b>OR</b> combinations of these 
 618:..//Libraries/XMCLib/inc/xmc_spi.h ****  *              as input.
 619:..//Libraries/XMCLib/inc/xmc_spi.h ****  * @return None
 620:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 621:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Description:</b><br>
 622:..//Libraries/XMCLib/inc/xmc_spi.h ****  * Clears the events specified, by setting PSCR register.\n\n
 623:..//Libraries/XMCLib/inc/xmc_spi.h ****  * During communication the events occurred have to be cleared to detect their next occurence.\n
 624:..//Libraries/XMCLib/inc/xmc_spi.h ****  * e.g: During transmission Transmit buffer event occurs to indicating data word transfer has start
 625:..//Libraries/XMCLib/inc/xmc_spi.h ****  *       event has to be cleared after transmission of each data word. Otherwise next event cannot 
 626:..//Libraries/XMCLib/inc/xmc_spi.h ****  *
 627:..//Libraries/XMCLib/inc/xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 628:..//Libraries/XMCLib/inc/xmc_spi.h ****  * XMC_SPI_CH_GetStatusFlag()
 629:..//Libraries/XMCLib/inc/xmc_spi.h ****  */
 630:..//Libraries/XMCLib/inc/xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 631:..//Libraries/XMCLib/inc/xmc_spi.h **** {
 121              	 .loc 2 631 1
 122              	 .cfi_startproc
 123              	 
 124              	 
 125 0000 80B5     	 push {r7,lr}
 126              	.LCFI6:
 127              	 .cfi_def_cfa_offset 8
 128              	 .cfi_offset 7,-8
 129              	 .cfi_offset 14,-4
 130 0002 82B0     	 sub sp,sp,#8
 131              	.LCFI7:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI8:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 3960     	 str r1,[r7]
 632:..//Libraries/XMCLib/inc/xmc_spi.h ****   channel->PSCR |= flag;
 138              	 .loc 2 632 17
 139 000a 7B68     	 ldr r3,[r7,#4]
 140 000c DA6C     	 ldr r2,[r3,#76]
 141 000e 3B68     	 ldr r3,[r7]
 142 0010 1A43     	 orrs r2,r3
 143 0012 7B68     	 ldr r3,[r7,#4]
 144 0014 DA64     	 str r2,[r3,#76]
 633:..//Libraries/XMCLib/inc/xmc_spi.h **** }
 145              	 .loc 2 633 1
 146 0016 C046     	 nop
 147 0018 BD46     	 mov sp,r7
 148 001a 02B0     	 add sp,sp,#8
 149              	 
 150 001c 80BD     	 pop {r7,pc}
 151              	 .cfi_endproc
 152              	.LFE126:
 154              	 .section .text.XMC_SPI_CH_Init,"ax",%progbits
 155              	 .align 1
 156              	 .global XMC_SPI_CH_Init
 157              	 .syntax unified
 158              	 .code 16
 159              	 .thumb_func
 160              	 .fpu softvfp
 162              	XMC_SPI_CH_Init:
 163              	.LFB158:
 164              	 .file 3 "../Libraries/XMCLib/src/xmc_spi.c"
   1:../Libraries/XMCLib/src/xmc_spi.c **** /**
   2:../Libraries/XMCLib/src/xmc_spi.c ****  * @file xmc_spi.c
   3:../Libraries/XMCLib/src/xmc_spi.c ****  * @date 2015-11-04
   4:../Libraries/XMCLib/src/xmc_spi.c ****  *
   5:../Libraries/XMCLib/src/xmc_spi.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_spi.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_spi.c ****  *
   9:../Libraries/XMCLib/src/xmc_spi.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_spi.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_spi.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_spi.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_spi.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_spi.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_spi.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_spi.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_spi.c ****  * 
  18:../Libraries/XMCLib/src/xmc_spi.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_spi.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_spi.c ****  * 
  21:../Libraries/XMCLib/src/xmc_spi.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_spi.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_spi.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_spi.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_spi.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_spi.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_spi.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_spi.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_spi.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_spi.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_spi.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_spi.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_spi.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_spi.c ****  *
  36:../Libraries/XMCLib/src/xmc_spi.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_spi.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_spi.c ****  *
  39:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_spi.c ****  *      
  42:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Modified XMC_SPI_CH_Stop() API for not setting to IDLE the channel if it is busy
  44:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Modified XMC_SPI_CH_SetInterwordDelay() implementation in order to gain accuracy <br>
  45:../Libraries/XMCLib/src/xmc_spi.c ****  *     
  46:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Removed GetDriverVersion API <br>
  48:../Libraries/XMCLib/src/xmc_spi.c ****  *
  49:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-09-01:
  50:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Modified XMC_SPI_CH_EnableEvent() and XMC_SPI_CH_DisableEvent() for supporting multiple ev
  51:../Libraries/XMCLib/src/xmc_spi.c ****  *
  52:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-11-04: 
  53:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Modified the check of XMC_USIC_CH_GetTransmitBufferStatus() in the XMC_SPI_CH_Transmit() f
  54:../Libraries/XMCLib/src/xmc_spi.c ****  * @endcond 
  55:../Libraries/XMCLib/src/xmc_spi.c ****  *
  56:../Libraries/XMCLib/src/xmc_spi.c ****  */
  57:../Libraries/XMCLib/src/xmc_spi.c **** /**
  58:../Libraries/XMCLib/src/xmc_spi.c ****  *
  59:../Libraries/XMCLib/src/xmc_spi.c ****  * @brief SPI driver for XMC microcontroller family
  60:../Libraries/XMCLib/src/xmc_spi.c ****  *
  61:../Libraries/XMCLib/src/xmc_spi.c ****  */
  62:../Libraries/XMCLib/src/xmc_spi.c **** /**************************************************************************************************
  63:../Libraries/XMCLib/src/xmc_spi.c ****  * HEADER FILES
  64:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
  65:../Libraries/XMCLib/src/xmc_spi.c **** 
  66:../Libraries/XMCLib/src/xmc_spi.c **** #include <xmc_scu.h>
  67:../Libraries/XMCLib/src/xmc_spi.c **** #include <xmc_spi.h>
  68:../Libraries/XMCLib/src/xmc_spi.c **** 
  69:../Libraries/XMCLib/src/xmc_spi.c **** /**************************************************************************************************
  70:../Libraries/XMCLib/src/xmc_spi.c ****  * MACROS
  71:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
  72:../Libraries/XMCLib/src/xmc_spi.c **** #define XMC_SPI_CH_OVERSAMPLING (2UL)
  73:../Libraries/XMCLib/src/xmc_spi.c **** 
  74:../Libraries/XMCLib/src/xmc_spi.c **** /**************************************************************************************************
  75:../Libraries/XMCLib/src/xmc_spi.c ****  * API IMPLEMENTATION
  76:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
  77:../Libraries/XMCLib/src/xmc_spi.c ****  
  78:../Libraries/XMCLib/src/xmc_spi.c **** /* Initializes the selected SPI channel with the config structure. */
  79:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
  80:../Libraries/XMCLib/src/xmc_spi.c **** {
 165              	 .loc 3 80 1
 166              	 .cfi_startproc
 167              	 
 168              	 
 169 0000 80B5     	 push {r7,lr}
 170              	.LCFI9:
 171              	 .cfi_def_cfa_offset 8
 172              	 .cfi_offset 7,-8
 173              	 .cfi_offset 14,-4
 174 0002 82B0     	 sub sp,sp,#8
 175              	.LCFI10:
 176              	 .cfi_def_cfa_offset 16
 177 0004 00AF     	 add r7,sp,#0
 178              	.LCFI11:
 179              	 .cfi_def_cfa_register 7
 180 0006 7860     	 str r0,[r7,#4]
 181 0008 3960     	 str r1,[r7]
  81:../Libraries/XMCLib/src/xmc_spi.c ****   XMC_USIC_CH_Enable(channel);
 182              	 .loc 3 81 3
 183 000a 7B68     	 ldr r3,[r7,#4]
 184 000c 1800     	 movs r0,r3
 185 000e FFF7FEFF 	 bl XMC_USIC_CH_Enable
  82:../Libraries/XMCLib/src/xmc_spi.c ****   
  83:../Libraries/XMCLib/src/xmc_spi.c ****   if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 186              	 .loc 3 83 12
 187 0012 3B68     	 ldr r3,[r7]
 188 0014 1B79     	 ldrb r3,[r3,#4]
 189              	 .loc 3 83 5
 190 0016 002B     	 cmp r3,#0
 191 0018 06D1     	 bne .L6
  84:../Libraries/XMCLib/src/xmc_spi.c ****   {
  85:../Libraries/XMCLib/src/xmc_spi.c ****     /* Configure baud rate */
  86:../Libraries/XMCLib/src/xmc_spi.c ****     (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 192              	 .loc 3 86 11
 193 001a 3B68     	 ldr r3,[r7]
 194 001c 1968     	 ldr r1,[r3]
 195 001e 7B68     	 ldr r3,[r7,#4]
 196 0020 0222     	 movs r2,#2
 197 0022 1800     	 movs r0,r3
 198 0024 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 199              	.L6:
  87:../Libraries/XMCLib/src/xmc_spi.c ****   }
  88:../Libraries/XMCLib/src/xmc_spi.c ****   
  89:../Libraries/XMCLib/src/xmc_spi.c ****   /* Configuration of USIC Shift Control */
  90:../Libraries/XMCLib/src/xmc_spi.c ****   /* Transmission Mode (TRM) = 1  */
  91:../Libraries/XMCLib/src/xmc_spi.c ****   /* Passive Data Level (PDL) = 1 */
  92:../Libraries/XMCLib/src/xmc_spi.c ****   channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 200              	 .loc 3 92 17
 201 0028 7B68     	 ldr r3,[r7,#4]
 202 002a 0F4A     	 ldr r2,.L8
 203 002c 5A63     	 str r2,[r3,#52]
  93:../Libraries/XMCLib/src/xmc_spi.c ****                   (0x1UL << USIC_CH_SCTR_TRM_Pos) |
  94:../Libraries/XMCLib/src/xmc_spi.c ****                   (0x3fUL << USIC_CH_SCTR_FLE_Pos)|
  95:../Libraries/XMCLib/src/xmc_spi.c ****                   (0x7UL << USIC_CH_SCTR_WLE_Pos);
  96:../Libraries/XMCLib/src/xmc_spi.c **** 
  97:../Libraries/XMCLib/src/xmc_spi.c ****   /* Configuration of USIC Transmit Control/Status Register */
  98:../Libraries/XMCLib/src/xmc_spi.c ****   /* TBUF Data Enable (TDEN) = 1 */
  99:../Libraries/XMCLib/src/xmc_spi.c ****   /* TBUF Data Single Shot Mode (TDSSM) = 1 */
 100:../Libraries/XMCLib/src/xmc_spi.c ****   channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 204              	 .loc 3 100 17
 205 002e 7B68     	 ldr r3,[r7,#4]
 206 0030 A222     	 movs r2,#162
 207 0032 D200     	 lsls r2,r2,#3
 208 0034 9A63     	 str r2,[r3,#56]
 101:../Libraries/XMCLib/src/xmc_spi.c ****                   (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
 102:../Libraries/XMCLib/src/xmc_spi.c ****                   USIC_CH_TCSR_TDSSM_Msk);
 103:../Libraries/XMCLib/src/xmc_spi.c **** 
 104:../Libraries/XMCLib/src/xmc_spi.c ****   if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 209              	 .loc 3 104 12
 210 0036 3B68     	 ldr r3,[r7]
 211 0038 1B79     	 ldrb r3,[r3,#4]
 212              	 .loc 3 104 5
 213 003a 002B     	 cmp r3,#0
 214 003c 07D1     	 bne .L7
 105:../Libraries/XMCLib/src/xmc_spi.c ****   {
 106:../Libraries/XMCLib/src/xmc_spi.c ****     /* Configuration of Protocol Control Register */
 107:../Libraries/XMCLib/src/xmc_spi.c ****     channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 108:../Libraries/XMCLib/src/xmc_spi.c ****                            USIC_CH_PCR_SSCMode_SELCTR_Msk |
 109:../Libraries/XMCLib/src/xmc_spi.c ****                            (uint32_t)config->selo_inversion |
 215              	 .loc 3 109 44
 216 003e 3B68     	 ldr r3,[r7]
 217 0040 5B79     	 ldrb r3,[r3,#5]
 107:../Libraries/XMCLib/src/xmc_spi.c ****                            USIC_CH_PCR_SSCMode_SELCTR_Msk |
 218              	 .loc 3 107 28
 219 0042 0B22     	 movs r2,#11
 220 0044 1343     	 orrs r3,r2
 221 0046 DBB2     	 uxtb r3,r3
 222 0048 1A00     	 movs r2,r3
 107:../Libraries/XMCLib/src/xmc_spi.c ****                            USIC_CH_PCR_SSCMode_SELCTR_Msk |
 223              	 .loc 3 107 26
 224 004a 7B68     	 ldr r3,[r7,#4]
 225 004c DA63     	 str r2,[r3,#60]
 226              	.L7:
 110:../Libraries/XMCLib/src/xmc_spi.c ****                            USIC_CH_PCR_SSCMode_FEM_Msk);
 111:../Libraries/XMCLib/src/xmc_spi.c ****   }
 112:../Libraries/XMCLib/src/xmc_spi.c **** 
 113:../Libraries/XMCLib/src/xmc_spi.c ****   /* Clear protocol status */
 114:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PSCR = 0xFFFFFFFFUL;
 227              	 .loc 3 114 17
 228 004e 7B68     	 ldr r3,[r7,#4]
 229 0050 0122     	 movs r2,#1
 230 0052 5242     	 rsbs r2,r2,#0
 231 0054 DA64     	 str r2,[r3,#76]
 115:../Libraries/XMCLib/src/xmc_spi.c **** 
 116:../Libraries/XMCLib/src/xmc_spi.c ****   /* Set parity settings */
 117:../Libraries/XMCLib/src/xmc_spi.c ****   channel->CCR = (uint32_t)config->parity_mode;
 232              	 .loc 3 117 34
 233 0056 3B68     	 ldr r3,[r7]
 234 0058 DB88     	 ldrh r3,[r3,#6]
 235              	 .loc 3 117 18
 236 005a 1A00     	 movs r2,r3
 237              	 .loc 3 117 16
 238 005c 7B68     	 ldr r3,[r7,#4]
 239 005e 1A64     	 str r2,[r3,#64]
 118:../Libraries/XMCLib/src/xmc_spi.c **** }
 240              	 .loc 3 118 1
 241 0060 C046     	 nop
 242 0062 BD46     	 mov sp,r7
 243 0064 02B0     	 add sp,sp,#8
 244              	 
 245 0066 80BD     	 pop {r7,pc}
 246              	.L9:
 247              	 .align 2
 248              	.L8:
 249 0068 02013F07 	 .word 121569538
 250              	 .cfi_endproc
 251              	.LFE158:
 253              	 .section .text.XMC_SPI_CH_SetBaudrate,"ax",%progbits
 254              	 .align 1
 255              	 .global XMC_SPI_CH_SetBaudrate
 256              	 .syntax unified
 257              	 .code 16
 258              	 .thumb_func
 259              	 .fpu softvfp
 261              	XMC_SPI_CH_SetBaudrate:
 262              	.LFB159:
 119:../Libraries/XMCLib/src/xmc_spi.c **** 
 120:../Libraries/XMCLib/src/xmc_spi.c **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate)
 121:../Libraries/XMCLib/src/xmc_spi.c **** {
 263              	 .loc 3 121 1
 264              	 .cfi_startproc
 265              	 
 266              	 
 267 0000 90B5     	 push {r4,r7,lr}
 268              	.LCFI12:
 269              	 .cfi_def_cfa_offset 12
 270              	 .cfi_offset 4,-12
 271              	 .cfi_offset 7,-8
 272              	 .cfi_offset 14,-4
 273 0002 85B0     	 sub sp,sp,#20
 274              	.LCFI13:
 275              	 .cfi_def_cfa_offset 32
 276 0004 00AF     	 add r7,sp,#0
 277              	.LCFI14:
 278              	 .cfi_def_cfa_register 7
 279 0006 7860     	 str r0,[r7,#4]
 280 0008 3960     	 str r1,[r7]
 122:../Libraries/XMCLib/src/xmc_spi.c ****   XMC_SPI_CH_STATUS_t status;
 123:../Libraries/XMCLib/src/xmc_spi.c ****   
 124:../Libraries/XMCLib/src/xmc_spi.c ****   status = XMC_SPI_CH_STATUS_ERROR;
 281              	 .loc 3 124 10
 282 000a 0F24     	 movs r4,#15
 283 000c 3B19     	 adds r3,r7,r4
 284 000e 0122     	 movs r2,#1
 285 0010 1A70     	 strb r2,[r3]
 125:../Libraries/XMCLib/src/xmc_spi.c ****   
 126:../Libraries/XMCLib/src/xmc_spi.c ****   if (rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 1U))
 286              	 .loc 3 126 16
 287 0012 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 288 0016 0300     	 movs r3,r0
 289              	 .loc 3 126 60
 290 0018 5B08     	 lsrs r3,r3,#1
 291              	 .loc 3 126 6
 292 001a 3A68     	 ldr r2,[r7]
 293 001c 9A42     	 cmp r2,r3
 294 001e 0AD8     	 bhi .L11
 127:../Libraries/XMCLib/src/xmc_spi.c ****   {
 128:../Libraries/XMCLib/src/xmc_spi.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, XMC_SPI_CH_OVERSAMPLING) == XMC_USIC_CH_STATUS_OK)
 295              	 .loc 3 128 9
 296 0020 3968     	 ldr r1,[r7]
 297 0022 7B68     	 ldr r3,[r7,#4]
 298 0024 0222     	 movs r2,#2
 299 0026 1800     	 movs r0,r3
 300 0028 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 301 002c 031E     	 subs r3,r0,#0
 302              	 .loc 3 128 8
 303 002e 02D1     	 bne .L11
 129:../Libraries/XMCLib/src/xmc_spi.c ****     {
 130:../Libraries/XMCLib/src/xmc_spi.c ****       status = XMC_SPI_CH_STATUS_OK;
 304              	 .loc 3 130 14
 305 0030 3B19     	 adds r3,r7,r4
 306 0032 0022     	 movs r2,#0
 307 0034 1A70     	 strb r2,[r3]
 308              	.L11:
 131:../Libraries/XMCLib/src/xmc_spi.c ****     }
 132:../Libraries/XMCLib/src/xmc_spi.c ****   } 
 133:../Libraries/XMCLib/src/xmc_spi.c ****   return status;
 309              	 .loc 3 133 10
 310 0036 0F23     	 movs r3,#15
 311 0038 FB18     	 adds r3,r7,r3
 312 003a 1B78     	 ldrb r3,[r3]
 134:../Libraries/XMCLib/src/xmc_spi.c **** }
 313              	 .loc 3 134 1
 314 003c 1800     	 movs r0,r3
 315 003e BD46     	 mov sp,r7
 316 0040 05B0     	 add sp,sp,#20
 317              	 
 318 0042 90BD     	 pop {r4,r7,pc}
 319              	 .cfi_endproc
 320              	.LFE159:
 322              	 .section .text.XMC_SPI_CH_EnableSlaveSelect,"ax",%progbits
 323              	 .align 1
 324              	 .global XMC_SPI_CH_EnableSlaveSelect
 325              	 .syntax unified
 326              	 .code 16
 327              	 .thumb_func
 328              	 .fpu softvfp
 330              	XMC_SPI_CH_EnableSlaveSelect:
 331              	.LFB160:
 135:../Libraries/XMCLib/src/xmc_spi.c **** 
 136:../Libraries/XMCLib/src/xmc_spi.c **** /* Enable the selected slave signal by setting (SELO) bits in PCR register. */
 137:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t sla
 138:../Libraries/XMCLib/src/xmc_spi.c **** {
 332              	 .loc 3 138 1
 333              	 .cfi_startproc
 334              	 
 335              	 
 336 0000 80B5     	 push {r7,lr}
 337              	.LCFI15:
 338              	 .cfi_def_cfa_offset 8
 339              	 .cfi_offset 7,-8
 340              	 .cfi_offset 14,-4
 341 0002 82B0     	 sub sp,sp,#8
 342              	.LCFI16:
 343              	 .cfi_def_cfa_offset 16
 344 0004 00AF     	 add r7,sp,#0
 345              	.LCFI17:
 346              	 .cfi_def_cfa_register 7
 347 0006 7860     	 str r0,[r7,#4]
 348 0008 3960     	 str r1,[r7]
 139:../Libraries/XMCLib/src/xmc_spi.c ****   /* Configuration of Protocol Control Register */
 140:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 349              	 .loc 3 140 24
 350 000a 7B68     	 ldr r3,[r7,#4]
 351 000c DB6B     	 ldr r3,[r3,#60]
 352 000e 074A     	 ldr r2,.L14
 353 0010 1A40     	 ands r2,r3
 354 0012 7B68     	 ldr r3,[r7,#4]
 355 0014 DA63     	 str r2,[r3,#60]
 141:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode |= (uint32_t)slave;
 356              	 .loc 3 141 24
 357 0016 7B68     	 ldr r3,[r7,#4]
 358 0018 DA6B     	 ldr r2,[r3,#60]
 359 001a 3B68     	 ldr r3,[r7]
 360 001c 1A43     	 orrs r2,r3
 361 001e 7B68     	 ldr r3,[r7,#4]
 362 0020 DA63     	 str r2,[r3,#60]
 142:../Libraries/XMCLib/src/xmc_spi.c **** }
 363              	 .loc 3 142 1
 364 0022 C046     	 nop
 365 0024 BD46     	 mov sp,r7
 366 0026 02B0     	 add sp,sp,#8
 367              	 
 368 0028 80BD     	 pop {r7,pc}
 369              	.L15:
 370 002a C046     	 .align 2
 371              	.L14:
 372 002c FFFF00FF 	 .word -16711681
 373              	 .cfi_endproc
 374              	.LFE160:
 376              	 .section .text.XMC_SPI_CH_DisableSlaveSelect,"ax",%progbits
 377              	 .align 1
 378              	 .global XMC_SPI_CH_DisableSlaveSelect
 379              	 .syntax unified
 380              	 .code 16
 381              	 .thumb_func
 382              	 .fpu softvfp
 384              	XMC_SPI_CH_DisableSlaveSelect:
 385              	.LFB161:
 143:../Libraries/XMCLib/src/xmc_spi.c **** 
 144:../Libraries/XMCLib/src/xmc_spi.c **** /* Disable the slave signals by clearing (SELO) bits in PCR register. */
 145:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel)
 146:../Libraries/XMCLib/src/xmc_spi.c **** {
 386              	 .loc 3 146 1
 387              	 .cfi_startproc
 388              	 
 389              	 
 390 0000 80B5     	 push {r7,lr}
 391              	.LCFI18:
 392              	 .cfi_def_cfa_offset 8
 393              	 .cfi_offset 7,-8
 394              	 .cfi_offset 14,-4
 395 0002 82B0     	 sub sp,sp,#8
 396              	.LCFI19:
 397              	 .cfi_def_cfa_offset 16
 398 0004 00AF     	 add r7,sp,#0
 399              	.LCFI20:
 400              	 .cfi_def_cfa_register 7
 401 0006 7860     	 str r0,[r7,#4]
 147:../Libraries/XMCLib/src/xmc_spi.c ****   XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_MSLS);
 402              	 .loc 3 147 3
 403 0008 7B68     	 ldr r3,[r7,#4]
 404 000a 0121     	 movs r1,#1
 405 000c 1800     	 movs r0,r3
 406 000e FFF7FEFF 	 bl XMC_SPI_CH_ClearStatusFlag
 148:../Libraries/XMCLib/src/xmc_spi.c ****   
 149:../Libraries/XMCLib/src/xmc_spi.c ****   /* Configuration of Protocol Control Register */
 150:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 407              	 .loc 3 150 24
 408 0012 7B68     	 ldr r3,[r7,#4]
 409 0014 DB6B     	 ldr r3,[r3,#60]
 410 0016 044A     	 ldr r2,.L17
 411 0018 1A40     	 ands r2,r3
 412 001a 7B68     	 ldr r3,[r7,#4]
 413 001c DA63     	 str r2,[r3,#60]
 151:../Libraries/XMCLib/src/xmc_spi.c **** }
 414              	 .loc 3 151 1
 415 001e C046     	 nop
 416 0020 BD46     	 mov sp,r7
 417 0022 02B0     	 add sp,sp,#8
 418              	 
 419 0024 80BD     	 pop {r7,pc}
 420              	.L18:
 421 0026 C046     	 .align 2
 422              	.L17:
 423 0028 FFFF00FF 	 .word -16711681
 424              	 .cfi_endproc
 425              	.LFE161:
 427              	 .section .text.XMC_SPI_CH_Transmit,"ax",%progbits
 428              	 .align 1
 429              	 .global XMC_SPI_CH_Transmit
 430              	 .syntax unified
 431              	 .code 16
 432              	 .thumb_func
 433              	 .fpu softvfp
 435              	XMC_SPI_CH_Transmit:
 436              	.LFB162:
 152:../Libraries/XMCLib/src/xmc_spi.c **** 
 153:../Libraries/XMCLib/src/xmc_spi.c **** /* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the pr
 154:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t
 155:../Libraries/XMCLib/src/xmc_spi.c **** {
 437              	 .loc 3 155 1
 438              	 .cfi_startproc
 439              	 
 440              	 
 441 0000 80B5     	 push {r7,lr}
 442              	.LCFI21:
 443              	 .cfi_def_cfa_offset 8
 444              	 .cfi_offset 7,-8
 445              	 .cfi_offset 14,-4
 446 0002 82B0     	 sub sp,sp,#8
 447              	.LCFI22:
 448              	 .cfi_def_cfa_offset 16
 449 0004 00AF     	 add r7,sp,#0
 450              	.LCFI23:
 451              	 .cfi_def_cfa_register 7
 452 0006 7860     	 str r0,[r7,#4]
 453 0008 0800     	 movs r0,r1
 454 000a 1100     	 movs r1,r2
 455 000c BB1C     	 adds r3,r7,#2
 456 000e 021C     	 adds r2,r0,#0
 457 0010 1A80     	 strh r2,[r3]
 458 0012 7B1C     	 adds r3,r7,#1
 459 0014 0A1C     	 adds r2,r1,#0
 460 0016 1A70     	 strb r2,[r3]
 156:../Libraries/XMCLib/src/xmc_spi.c **** 
 157:../Libraries/XMCLib/src/xmc_spi.c ****   channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 461              	 .loc 3 157 26
 462 0018 7B68     	 ldr r3,[r7,#4]
 463 001a 1B6C     	 ldr r3,[r3,#64]
 464              	 .loc 3 157 32
 465 001c C022     	 movs r2,#192
 466 001e 9343     	 bics r3,r2
 467 0020 1A00     	 movs r2,r3
 158:../Libraries/XMCLib/src/xmc_spi.c ****                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 468              	 .loc 3 158 20
 469 0022 7B1C     	 adds r3,r7,#1
 470 0024 1B78     	 ldrb r3,[r3]
 471              	 .loc 3 158 36
 472 0026 9B01     	 lsls r3,r3,#6
 473              	 .loc 3 158 62
 474 0028 FF21     	 movs r1,#255
 475 002a 0B40     	 ands r3,r1
 157:../Libraries/XMCLib/src/xmc_spi.c ****                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 476              	 .loc 3 157 70
 477 002c 1A43     	 orrs r2,r3
 157:../Libraries/XMCLib/src/xmc_spi.c ****                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 478              	 .loc 3 157 16
 479 002e 7B68     	 ldr r3,[r7,#4]
 480 0030 1A64     	 str r2,[r3,#64]
 159:../Libraries/XMCLib/src/xmc_spi.c **** 
 160:../Libraries/XMCLib/src/xmc_spi.c **** 
 161:../Libraries/XMCLib/src/xmc_spi.c ****   /* Check FIFO size */
 162:../Libraries/XMCLib/src/xmc_spi.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 481              	 .loc 3 162 15
 482 0032 7A68     	 ldr r2,[r7,#4]
 483 0034 8423     	 movs r3,#132
 484 0036 5B00     	 lsls r3,r3,#1
 485 0038 D258     	 ldr r2,[r2,r3]
 486              	 .loc 3 162 23
 487 003a E023     	 movs r3,#224
 488 003c DB04     	 lsls r3,r3,#19
 489 003e 1340     	 ands r3,r2
 490              	 .loc 3 162 6
 491 0040 17D1     	 bne .L20
 163:../Libraries/XMCLib/src/xmc_spi.c ****   {
 164:../Libraries/XMCLib/src/xmc_spi.c ****     while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) == (uint32_t)XMC_USIC_CH_TBUF_STAT
 492              	 .loc 3 164 10
 493 0042 C046     	 nop
 494              	.L21:
 495              	 .loc 3 164 21 discriminator 1
 496 0044 7B68     	 ldr r3,[r7,#4]
 497 0046 1800     	 movs r0,r3
 498 0048 FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 499 004c 0300     	 movs r3,r0
 500              	 .loc 3 164 10 discriminator 1
 501 004e 802B     	 cmp r3,#128
 502 0050 F8D0     	 beq .L21
 165:../Libraries/XMCLib/src/xmc_spi.c ****     {
 166:../Libraries/XMCLib/src/xmc_spi.c ****     }
 167:../Libraries/XMCLib/src/xmc_spi.c ****   
 168:../Libraries/XMCLib/src/xmc_spi.c ****     XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 503              	 .loc 3 168 5
 504 0052 8023     	 movs r3,#128
 505 0054 9A01     	 lsls r2,r3,#6
 506 0056 7B68     	 ldr r3,[r7,#4]
 507 0058 1100     	 movs r1,r2
 508 005a 1800     	 movs r0,r3
 509 005c FFF7FEFF 	 bl XMC_SPI_CH_ClearStatusFlag
 169:../Libraries/XMCLib/src/xmc_spi.c ****   
 170:../Libraries/XMCLib/src/xmc_spi.c ****     channel->TBUF[mode] = data;
 510              	 .loc 3 170 18
 511 0060 7B1C     	 adds r3,r7,#1
 512 0062 1A78     	 ldrb r2,[r3]
 513              	 .loc 3 170 25
 514 0064 BB1C     	 adds r3,r7,#2
 515 0066 1988     	 ldrh r1,[r3]
 516 0068 7B68     	 ldr r3,[r7,#4]
 517 006a 2032     	 adds r2,r2,#32
 518 006c 9200     	 lsls r2,r2,#2
 519 006e D150     	 str r1,[r2,r3]
 171:../Libraries/XMCLib/src/xmc_spi.c ****   }
 172:../Libraries/XMCLib/src/xmc_spi.c ****   else
 173:../Libraries/XMCLib/src/xmc_spi.c ****   {
 174:../Libraries/XMCLib/src/xmc_spi.c ****     channel->IN[mode] = data;
 175:../Libraries/XMCLib/src/xmc_spi.c ****   }
 176:../Libraries/XMCLib/src/xmc_spi.c **** }
 520              	 .loc 3 176 1
 521 0070 07E0     	 b .L23
 522              	.L20:
 174:../Libraries/XMCLib/src/xmc_spi.c ****   }
 523              	 .loc 3 174 16
 524 0072 7B1C     	 adds r3,r7,#1
 525 0074 1A78     	 ldrb r2,[r3]
 174:../Libraries/XMCLib/src/xmc_spi.c ****   }
 526              	 .loc 3 174 23
 527 0076 BB1C     	 adds r3,r7,#2
 528 0078 1988     	 ldrh r1,[r3]
 529 007a 7B68     	 ldr r3,[r7,#4]
 530 007c 6032     	 adds r2,r2,#96
 531 007e 9200     	 lsls r2,r2,#2
 532 0080 D150     	 str r1,[r2,r3]
 533              	.L23:
 534              	 .loc 3 176 1
 535 0082 C046     	 nop
 536 0084 BD46     	 mov sp,r7
 537 0086 02B0     	 add sp,sp,#8
 538              	 
 539 0088 80BD     	 pop {r7,pc}
 540              	 .cfi_endproc
 541              	.LFE162:
 543              	 .section .text.XMC_SPI_CH_GetReceivedData,"ax",%progbits
 544              	 .align 1
 545              	 .global XMC_SPI_CH_GetReceivedData
 546              	 .syntax unified
 547              	 .code 16
 548              	 .thumb_func
 549              	 .fpu softvfp
 551              	XMC_SPI_CH_GetReceivedData:
 552              	.LFB163:
 177:../Libraries/XMCLib/src/xmc_spi.c **** 
 178:../Libraries/XMCLib/src/xmc_spi.c **** /* Reads the data from the buffers based on the FIFO mode selection. */
 179:../Libraries/XMCLib/src/xmc_spi.c **** uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
 180:../Libraries/XMCLib/src/xmc_spi.c **** {
 553              	 .loc 3 180 1
 554              	 .cfi_startproc
 555              	 
 556              	 
 557 0000 80B5     	 push {r7,lr}
 558              	.LCFI24:
 559              	 .cfi_def_cfa_offset 8
 560              	 .cfi_offset 7,-8
 561              	 .cfi_offset 14,-4
 562 0002 84B0     	 sub sp,sp,#16
 563              	.LCFI25:
 564              	 .cfi_def_cfa_offset 24
 565 0004 00AF     	 add r7,sp,#0
 566              	.LCFI26:
 567              	 .cfi_def_cfa_register 7
 568 0006 7860     	 str r0,[r7,#4]
 181:../Libraries/XMCLib/src/xmc_spi.c ****   uint16_t retval;
 182:../Libraries/XMCLib/src/xmc_spi.c **** 
 183:../Libraries/XMCLib/src/xmc_spi.c ****   /* Check FIFO size */
 184:../Libraries/XMCLib/src/xmc_spi.c ****   if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 569              	 .loc 3 184 15
 570 0008 7A68     	 ldr r2,[r7,#4]
 571 000a 8623     	 movs r3,#134
 572 000c 5B00     	 lsls r3,r3,#1
 573 000e D258     	 ldr r2,[r2,r3]
 574              	 .loc 3 184 23
 575 0010 E023     	 movs r3,#224
 576 0012 DB04     	 lsls r3,r3,#19
 577 0014 1340     	 ands r3,r2
 578              	 .loc 3 184 6
 579 0016 05D1     	 bne .L25
 185:../Libraries/XMCLib/src/xmc_spi.c ****   {
 186:../Libraries/XMCLib/src/xmc_spi.c ****     retval = (uint16_t)channel->RBUF;
 580              	 .loc 3 186 31
 581 0018 7B68     	 ldr r3,[r7,#4]
 582 001a 5A6D     	 ldr r2,[r3,#84]
 583              	 .loc 3 186 12
 584 001c 0E23     	 movs r3,#14
 585 001e FB18     	 adds r3,r7,r3
 586 0020 1A80     	 strh r2,[r3]
 587 0022 06E0     	 b .L26
 588              	.L25:
 187:../Libraries/XMCLib/src/xmc_spi.c ****   }
 188:../Libraries/XMCLib/src/xmc_spi.c ****   else
 189:../Libraries/XMCLib/src/xmc_spi.c ****   {
 190:../Libraries/XMCLib/src/xmc_spi.c ****     retval = (uint16_t)channel->OUTR;
 589              	 .loc 3 190 31
 590 0024 7A68     	 ldr r2,[r7,#4]
 591 0026 8E23     	 movs r3,#142
 592 0028 5B00     	 lsls r3,r3,#1
 593 002a D258     	 ldr r2,[r2,r3]
 594              	 .loc 3 190 12
 595 002c 0E23     	 movs r3,#14
 596 002e FB18     	 adds r3,r7,r3
 597 0030 1A80     	 strh r2,[r3]
 598              	.L26:
 191:../Libraries/XMCLib/src/xmc_spi.c ****   }
 192:../Libraries/XMCLib/src/xmc_spi.c **** 
 193:../Libraries/XMCLib/src/xmc_spi.c ****   return retval;
 599              	 .loc 3 193 10
 600 0032 0E23     	 movs r3,#14
 601 0034 FB18     	 adds r3,r7,r3
 602 0036 1B88     	 ldrh r3,[r3]
 194:../Libraries/XMCLib/src/xmc_spi.c **** }
 603              	 .loc 3 194 1
 604 0038 1800     	 movs r0,r3
 605 003a BD46     	 mov sp,r7
 606 003c 04B0     	 add sp,sp,#16
 607              	 
 608 003e 80BD     	 pop {r7,pc}
 609              	 .cfi_endproc
 610              	.LFE163:
 612              	 .global __aeabi_uidiv
 613              	 .global __aeabi_uidivmod
 614              	 .section .text.XMC_SPI_CH_SetInterwordDelay,"ax",%progbits
 615              	 .align 1
 616              	 .global XMC_SPI_CH_SetInterwordDelay
 617              	 .syntax unified
 618              	 .code 16
 619              	 .thumb_func
 620              	 .fpu softvfp
 622              	XMC_SPI_CH_SetInterwordDelay:
 623              	.LFB164:
 195:../Libraries/XMCLib/src/xmc_spi.c **** 
 196:../Libraries/XMCLib/src/xmc_spi.c **** /* Configures the inter word delay by setting PCR.PCTQ1, PCR.DCTQ1 bit fields. */
 197:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_SetInterwordDelay(XMC_USIC_CH_t *const channel,uint32_t tinterword_delay_us)
 198:../Libraries/XMCLib/src/xmc_spi.c **** {
 624              	 .loc 3 198 1
 625              	 .cfi_startproc
 626              	 
 627              	 
 628 0000 80B5     	 push {r7,lr}
 629              	.LCFI27:
 630              	 .cfi_def_cfa_offset 8
 631              	 .cfi_offset 7,-8
 632              	 .cfi_offset 14,-4
 633 0002 8EB0     	 sub sp,sp,#56
 634              	.LCFI28:
 635              	 .cfi_def_cfa_offset 64
 636 0004 00AF     	 add r7,sp,#0
 637              	.LCFI29:
 638              	 .cfi_def_cfa_register 7
 639 0006 7860     	 str r0,[r7,#4]
 640 0008 3960     	 str r1,[r7]
 199:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t peripheral_clock;
 200:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t pdiv;
 201:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t step;
 202:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t fFD;
 203:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t fpdiv;
 204:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1 = 0U;
 641              	 .loc 3 204 12
 642 000a 0023     	 movs r3,#0
 643 000c FB61     	 str r3,[r7,#28]
 205:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor2 = 32U;
 644              	 .loc 3 205 12
 645 000e 2023     	 movs r3,#32
 646 0010 7B63     	 str r3,[r7,#52]
 206:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1_int = 0U;
 647              	 .loc 3 206 12
 648 0012 0023     	 movs r3,#0
 649 0014 3B63     	 str r3,[r7,#48]
 207:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1_int_min = 4U;
 650              	 .loc 3 207 12
 651 0016 0423     	 movs r3,#4
 652 0018 FB62     	 str r3,[r7,#44]
 208:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1_frac_min =100U;
 653              	 .loc 3 208 12
 654 001a 6423     	 movs r3,#100
 655 001c BB62     	 str r3,[r7,#40]
 209:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1_frac = 0U;
 656              	 .loc 3 209 12
 657 001e 0023     	 movs r3,#0
 658 0020 7B62     	 str r3,[r7,#36]
 210:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor2_temp = 0U;
 659              	 .loc 3 210 12
 660 0022 0023     	 movs r3,#0
 661 0024 3B62     	 str r3,[r7,#32]
 211:../Libraries/XMCLib/src/xmc_spi.c ****   peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 662              	 .loc 3 211 22
 663 0026 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 664 002a 0300     	 movs r3,r0
 665 002c BB61     	 str r3,[r7,#24]
 212:../Libraries/XMCLib/src/xmc_spi.c ****   pdiv = (uint32_t)(channel->BRG & USIC_CH_BRG_PDIV_Msk) >> USIC_CH_BRG_PDIV_Pos;
 666              	 .loc 3 212 28
 667 002e 7B68     	 ldr r3,[r7,#4]
 668 0030 5B69     	 ldr r3,[r3,#20]
 669              	 .loc 3 212 58
 670 0032 1B0C     	 lsrs r3,r3,#16
 671              	 .loc 3 212 8
 672 0034 9B05     	 lsls r3,r3,#22
 673 0036 9B0D     	 lsrs r3,r3,#22
 674 0038 7B61     	 str r3,[r7,#20]
 213:../Libraries/XMCLib/src/xmc_spi.c ****   step = (uint32_t)(channel->FDR & USIC_CH_FDR_STEP_Msk) >> USIC_CH_FDR_STEP_Pos;
 675              	 .loc 3 213 28
 676 003a 7B68     	 ldr r3,[r7,#4]
 677 003c 1B69     	 ldr r3,[r3,#16]
 678              	 .loc 3 213 8
 679 003e 9B05     	 lsls r3,r3,#22
 680 0040 9B0D     	 lsrs r3,r3,#22
 681 0042 3B61     	 str r3,[r7,#16]
 214:../Libraries/XMCLib/src/xmc_spi.c ****   fFD = (uint32_t)((peripheral_clock >> 10U) * step);
 682              	 .loc 3 214 38
 683 0044 BB69     	 ldr r3,[r7,#24]
 684 0046 9A0A     	 lsrs r2,r3,#10
 685              	 .loc 3 214 7
 686 0048 3B69     	 ldr r3,[r7,#16]
 687 004a 5343     	 muls r3,r2
 688 004c FB60     	 str r3,[r7,#12]
 215:../Libraries/XMCLib/src/xmc_spi.c ****   fpdiv= fFD/(1U+pdiv);
 689              	 .loc 3 215 17
 690 004e 7B69     	 ldr r3,[r7,#20]
 691 0050 0133     	 adds r3,r3,#1
 692              	 .loc 3 215 8
 693 0052 1900     	 movs r1,r3
 694 0054 F868     	 ldr r0,[r7,#12]
 695 0056 FFF7FEFF 	 bl __aeabi_uidiv
 696              	.LVL0:
 697 005a 0300     	 movs r3,r0
 698 005c BB60     	 str r3,[r7,#8]
 216:../Libraries/XMCLib/src/xmc_spi.c **** 
 217:../Libraries/XMCLib/src/xmc_spi.c ****   if(tinterword_delay_us < (128000000/fpdiv))
 699              	 .loc 3 217 38
 700 005e B968     	 ldr r1,[r7,#8]
 701 0060 3148     	 ldr r0,.L35
 702 0062 FFF7FEFF 	 bl __aeabi_uidiv
 703              	.LVL1:
 704 0066 0300     	 movs r3,r0
 705 0068 1A00     	 movs r2,r3
 706              	 .loc 3 217 5
 707 006a 3B68     	 ldr r3,[r7]
 708 006c 9342     	 cmp r3,r2
 709 006e 44D2     	 bcs .L29
 218:../Libraries/XMCLib/src/xmc_spi.c ****   {
 219:../Libraries/XMCLib/src/xmc_spi.c ****     for(divider_factor2_temp = 32U; divider_factor2_temp > 0U; --divider_factor2_temp)
 710              	 .loc 3 219 30
 711 0070 2023     	 movs r3,#32
 712 0072 3B62     	 str r3,[r7,#32]
 713              	 .loc 3 219 5
 714 0074 3EE0     	 b .L30
 715              	.L34:
 220:../Libraries/XMCLib/src/xmc_spi.c ****     {
 221:../Libraries/XMCLib/src/xmc_spi.c **** 
 222:../Libraries/XMCLib/src/xmc_spi.c ****       divider_factor1 = (tinterword_delay_us*fpdiv)/(divider_factor2_temp*10000);
 716              	 .loc 3 222 45
 717 0076 3B68     	 ldr r3,[r7]
 718 0078 BA68     	 ldr r2,[r7,#8]
 719 007a 5A43     	 muls r2,r3
 720              	 .loc 3 222 74
 721 007c 3B6A     	 ldr r3,[r7,#32]
 722 007e 2B49     	 ldr r1,.L35+4
 723 0080 4B43     	 muls r3,r1
 724              	 .loc 3 222 23
 725 0082 1900     	 movs r1,r3
 726 0084 1000     	 movs r0,r2
 727 0086 FFF7FEFF 	 bl __aeabi_uidiv
 728              	.LVL2:
 729 008a 0300     	 movs r3,r0
 730 008c FB61     	 str r3,[r7,#28]
 223:../Libraries/XMCLib/src/xmc_spi.c ****       divider_factor1_frac = divider_factor1%100U;
 731              	 .loc 3 223 28
 732 008e FB69     	 ldr r3,[r7,#28]
 733 0090 6421     	 movs r1,#100
 734 0092 1800     	 movs r0,r3
 735 0094 FFF7FEFF 	 bl __aeabi_uidivmod
 736              	.LVL3:
 737 0098 0B00     	 movs r3,r1
 738 009a 7B62     	 str r3,[r7,#36]
 224:../Libraries/XMCLib/src/xmc_spi.c **** 
 225:../Libraries/XMCLib/src/xmc_spi.c ****       if(divider_factor1_frac > 50)
 739              	 .loc 3 225 9
 740 009c 7B6A     	 ldr r3,[r7,#36]
 741 009e 322B     	 cmp r3,#50
 742 00a0 0ED9     	 bls .L31
 226:../Libraries/XMCLib/src/xmc_spi.c ****       {
 227:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_int =  (divider_factor1/100U)+1;
 743              	 .loc 3 227 48
 744 00a2 FB69     	 ldr r3,[r7,#28]
 745 00a4 6421     	 movs r1,#100
 746 00a6 1800     	 movs r0,r3
 747 00a8 FFF7FEFF 	 bl __aeabi_uidiv
 748              	.LVL4:
 749 00ac 0300     	 movs r3,r0
 750              	 .loc 3 227 29
 751 00ae 0133     	 adds r3,r3,#1
 752 00b0 3B63     	 str r3,[r7,#48]
 228:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_frac = (divider_factor1_int*100)-divider_factor1;
 753              	 .loc 3 228 52
 754 00b2 3B6B     	 ldr r3,[r7,#48]
 755 00b4 6422     	 movs r2,#100
 756 00b6 5A43     	 muls r2,r3
 757              	 .loc 3 228 30
 758 00b8 FB69     	 ldr r3,[r7,#28]
 759 00ba D31A     	 subs r3,r2,r3
 760 00bc 7B62     	 str r3,[r7,#36]
 761 00be 06E0     	 b .L32
 762              	.L31:
 229:../Libraries/XMCLib/src/xmc_spi.c ****       }
 230:../Libraries/XMCLib/src/xmc_spi.c ****       else
 231:../Libraries/XMCLib/src/xmc_spi.c ****       {
 232:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_int =  (divider_factor1/100U);
 763              	 .loc 3 232 29
 764 00c0 FB69     	 ldr r3,[r7,#28]
 765 00c2 6421     	 movs r1,#100
 766 00c4 1800     	 movs r0,r3
 767 00c6 FFF7FEFF 	 bl __aeabi_uidiv
 768              	.LVL5:
 769 00ca 0300     	 movs r3,r0
 770 00cc 3B63     	 str r3,[r7,#48]
 771              	.L32:
 233:../Libraries/XMCLib/src/xmc_spi.c ****       }
 234:../Libraries/XMCLib/src/xmc_spi.c **** 
 235:../Libraries/XMCLib/src/xmc_spi.c ****       if ((divider_factor1_int < 5U) && (divider_factor1_int > 0) && (divider_factor1_frac < divide
 772              	 .loc 3 235 10
 773 00ce 3B6B     	 ldr r3,[r7,#48]
 774 00d0 042B     	 cmp r3,#4
 775 00d2 0CD8     	 bhi .L33
 776              	 .loc 3 235 38 discriminator 1
 777 00d4 3B6B     	 ldr r3,[r7,#48]
 778 00d6 002B     	 cmp r3,#0
 779 00d8 09D0     	 beq .L33
 780              	 .loc 3 235 67 discriminator 2
 781 00da 7A6A     	 ldr r2,[r7,#36]
 782 00dc BB6A     	 ldr r3,[r7,#40]
 783 00de 9A42     	 cmp r2,r3
 784 00e0 05D2     	 bcs .L33
 236:../Libraries/XMCLib/src/xmc_spi.c ****       {
 237:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_frac_min = divider_factor1_frac;
 785              	 .loc 3 237 34
 786 00e2 7B6A     	 ldr r3,[r7,#36]
 787 00e4 BB62     	 str r3,[r7,#40]
 238:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_int_min = divider_factor1_int;
 788              	 .loc 3 238 33
 789 00e6 3B6B     	 ldr r3,[r7,#48]
 790 00e8 FB62     	 str r3,[r7,#44]
 239:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor2= divider_factor2_temp;
 791              	 .loc 3 239 24
 792 00ea 3B6A     	 ldr r3,[r7,#32]
 793 00ec 7B63     	 str r3,[r7,#52]
 794              	.L33:
 219:../Libraries/XMCLib/src/xmc_spi.c ****     {
 795              	 .loc 3 219 64 discriminator 2
 796 00ee 3B6A     	 ldr r3,[r7,#32]
 797 00f0 013B     	 subs r3,r3,#1
 798 00f2 3B62     	 str r3,[r7,#32]
 799              	.L30:
 219:../Libraries/XMCLib/src/xmc_spi.c ****     {
 800              	 .loc 3 219 5 discriminator 1
 801 00f4 3B6A     	 ldr r3,[r7,#32]
 802 00f6 002B     	 cmp r3,#0
 803 00f8 BDD1     	 bne .L34
 804              	.L29:
 240:../Libraries/XMCLib/src/xmc_spi.c ****       }
 241:../Libraries/XMCLib/src/xmc_spi.c ****     }
 242:../Libraries/XMCLib/src/xmc_spi.c ****   }
 243:../Libraries/XMCLib/src/xmc_spi.c **** 
 244:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode = (uint32_t)((channel->PCR_SSCMode) & (~(USIC_CH_PCR_SSCMode_DCTQ1_Msk |
 805              	 .loc 3 244 45
 806 00fa 7B68     	 ldr r3,[r7,#4]
 807 00fc DB6B     	 ldr r3,[r3,#60]
 808              	 .loc 3 244 26
 809 00fe 0C4A     	 ldr r2,.L35+8
 810 0100 1A40     	 ands r2,r3
 245:../Libraries/XMCLib/src/xmc_spi.c ****                                                                 USIC_CH_PCR_SSCMode_PCTQ1_Msk |
 246:../Libraries/XMCLib/src/xmc_spi.c ****                                                                 USIC_CH_PCR_SSCMode_CTQSEL1_Msk))) 
 247:../Libraries/XMCLib/src/xmc_spi.c ****                          (((divider_factor1_int_min - 1) << USIC_CH_PCR_SSCMode_PCTQ1_Pos) & (uint3
 811              	 .loc 3 247 53
 812 0102 FB6A     	 ldr r3,[r7,#44]
 813 0104 013B     	 subs r3,r3,#1
 814              	 .loc 3 247 58
 815 0106 9B01     	 lsls r3,r3,#6
 816              	 .loc 3 247 92
 817 0108 FF21     	 movs r1,#255
 818 010a 0B40     	 ands r3,r1
 246:../Libraries/XMCLib/src/xmc_spi.c ****                          (((divider_factor1_int_min - 1) << USIC_CH_PCR_SSCMode_PCTQ1_Pos) & (uint3
 819              	 .loc 3 246 100
 820 010c 1A43     	 orrs r2,r3
 248:../Libraries/XMCLib/src/xmc_spi.c ****                          (((divider_factor2 - 1 ) << USIC_CH_PCR_SSCMode_DCTQ1_Pos) & (uint32_t)USI
 821              	 .loc 3 248 45
 822 010e 7B6B     	 ldr r3,[r7,#52]
 823 0110 013B     	 subs r3,r3,#1
 824              	 .loc 3 248 51
 825 0112 1902     	 lsls r1,r3,#8
 826              	 .loc 3 248 85
 827 0114 F823     	 movs r3,#248
 828 0116 5B01     	 lsls r3,r3,#5
 829 0118 0B40     	 ands r3,r1
 247:../Libraries/XMCLib/src/xmc_spi.c ****                          (((divider_factor2 - 1 ) << USIC_CH_PCR_SSCMode_DCTQ1_Pos) & (uint32_t)USI
 830              	 .loc 3 247 135
 831 011a 1A43     	 orrs r2,r3
 244:../Libraries/XMCLib/src/xmc_spi.c ****                                                                 USIC_CH_PCR_SSCMode_PCTQ1_Msk |
 832              	 .loc 3 244 24
 833 011c 7B68     	 ldr r3,[r7,#4]
 834 011e DA63     	 str r2,[r3,#60]
 249:../Libraries/XMCLib/src/xmc_spi.c **** }
 835              	 .loc 3 249 1
 836 0120 C046     	 nop
 837 0122 BD46     	 mov sp,r7
 838 0124 0EB0     	 add sp,sp,#56
 839              	 
 840 0126 80BD     	 pop {r7,pc}
 841              	.L36:
 842              	 .align 2
 843              	.L35:
 844 0128 0020A107 	 .word 128000000
 845 012c 10270000 	 .word 10000
 846 0130 0FE0FFFF 	 .word -8177
 847              	 .cfi_endproc
 848              	.LFE164:
 850              	 .section .text.XMC_SPI_CH_Stop,"ax",%progbits
 851              	 .align 1
 852              	 .global XMC_SPI_CH_Stop
 853              	 .syntax unified
 854              	 .code 16
 855              	 .thumb_func
 856              	 .fpu softvfp
 858              	XMC_SPI_CH_Stop:
 859              	.LFB165:
 250:../Libraries/XMCLib/src/xmc_spi.c **** 
 251:../Libraries/XMCLib/src/xmc_spi.c **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel)
 252:../Libraries/XMCLib/src/xmc_spi.c **** {
 860              	 .loc 3 252 1
 861              	 .cfi_startproc
 862              	 
 863              	 
 864 0000 90B5     	 push {r4,r7,lr}
 865              	.LCFI30:
 866              	 .cfi_def_cfa_offset 12
 867              	 .cfi_offset 4,-12
 868              	 .cfi_offset 7,-8
 869              	 .cfi_offset 14,-4
 870 0002 85B0     	 sub sp,sp,#20
 871              	.LCFI31:
 872              	 .cfi_def_cfa_offset 32
 873 0004 00AF     	 add r7,sp,#0
 874              	.LCFI32:
 875              	 .cfi_def_cfa_register 7
 876 0006 7860     	 str r0,[r7,#4]
 253:../Libraries/XMCLib/src/xmc_spi.c ****   XMC_SPI_CH_STATUS_t status = XMC_SPI_CH_STATUS_OK;
 877              	 .loc 3 253 23
 878 0008 0F24     	 movs r4,#15
 879 000a 3B19     	 adds r3,r7,r4
 880 000c 0022     	 movs r2,#0
 881 000e 1A70     	 strb r2,[r3]
 254:../Libraries/XMCLib/src/xmc_spi.c **** 
 255:../Libraries/XMCLib/src/xmc_spi.c ****   if (((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_B
 882              	 .loc 3 255 18
 883 0010 7B68     	 ldr r3,[r7,#4]
 884 0012 1800     	 movs r0,r3
 885 0014 FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 886 0018 0300     	 movs r3,r0
 887              	 .loc 3 255 105
 888 001a 5BB2     	 sxtb r3,r3
 889              	 .loc 3 255 6
 890 001c 002B     	 cmp r3,#0
 891 001e 03DA     	 bge .L38
 256:../Libraries/XMCLib/src/xmc_spi.c ****   {
 257:../Libraries/XMCLib/src/xmc_spi.c ****     status = XMC_SPI_CH_STATUS_BUSY;
 892              	 .loc 3 257 12
 893 0020 3B19     	 adds r3,r7,r4
 894 0022 0222     	 movs r2,#2
 895 0024 1A70     	 strb r2,[r3]
 896 0026 04E0     	 b .L39
 897              	.L38:
 258:../Libraries/XMCLib/src/xmc_spi.c ****   }
 259:../Libraries/XMCLib/src/xmc_spi.c ****   else
 260:../Libraries/XMCLib/src/xmc_spi.c ****   {
 261:../Libraries/XMCLib/src/xmc_spi.c **** 
 262:../Libraries/XMCLib/src/xmc_spi.c ****     /* USIC channel in IDLE mode */
 263:../Libraries/XMCLib/src/xmc_spi.c ****     XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 898              	 .loc 3 263 5
 899 0028 7B68     	 ldr r3,[r7,#4]
 900 002a 0021     	 movs r1,#0
 901 002c 1800     	 movs r0,r3
 902 002e FFF7FEFF 	 bl XMC_USIC_CH_SetMode
 903              	.L39:
 264:../Libraries/XMCLib/src/xmc_spi.c ****   }
 265:../Libraries/XMCLib/src/xmc_spi.c **** 
 266:../Libraries/XMCLib/src/xmc_spi.c ****   return status;
 904              	 .loc 3 266 10
 905 0032 0F23     	 movs r3,#15
 906 0034 FB18     	 adds r3,r7,r3
 907 0036 1B78     	 ldrb r3,[r3]
 267:../Libraries/XMCLib/src/xmc_spi.c **** }
 908              	 .loc 3 267 1
 909 0038 1800     	 movs r0,r3
 910 003a BD46     	 mov sp,r7
 911 003c 05B0     	 add sp,sp,#20
 912              	 
 913 003e 90BD     	 pop {r4,r7,pc}
 914              	 .cfi_endproc
 915              	.LFE165:
 917              	 .section .text.XMC_SPI_CH_EnableEvent,"ax",%progbits
 918              	 .align 1
 919              	 .global XMC_SPI_CH_EnableEvent
 920              	 .syntax unified
 921              	 .code 16
 922              	 .thumb_func
 923              	 .fpu softvfp
 925              	XMC_SPI_CH_EnableEvent:
 926              	.LFB166:
 268:../Libraries/XMCLib/src/xmc_spi.c **** 
 269:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 270:../Libraries/XMCLib/src/xmc_spi.c **** {
 927              	 .loc 3 270 1
 928              	 .cfi_startproc
 929              	 
 930              	 
 931 0000 80B5     	 push {r7,lr}
 932              	.LCFI33:
 933              	 .cfi_def_cfa_offset 8
 934              	 .cfi_offset 7,-8
 935              	 .cfi_offset 14,-4
 936 0002 82B0     	 sub sp,sp,#8
 937              	.LCFI34:
 938              	 .cfi_def_cfa_offset 16
 939 0004 00AF     	 add r7,sp,#0
 940              	.LCFI35:
 941              	 .cfi_def_cfa_register 7
 942 0006 7860     	 str r0,[r7,#4]
 943 0008 3960     	 str r1,[r7]
 271:../Libraries/XMCLib/src/xmc_spi.c ****   channel->CCR |= (event&0x1fc00U);
 944              	 .loc 3 271 16
 945 000a 7B68     	 ldr r3,[r7,#4]
 946 000c 1A6C     	 ldr r2,[r3,#64]
 947              	 .loc 3 271 25
 948 000e 3968     	 ldr r1,[r7]
 949 0010 FE23     	 movs r3,#254
 950 0012 5B02     	 lsls r3,r3,#9
 951 0014 0B40     	 ands r3,r1
 952              	 .loc 3 271 16
 953 0016 1A43     	 orrs r2,r3
 954 0018 7B68     	 ldr r3,[r7,#4]
 955 001a 1A64     	 str r2,[r3,#64]
 272:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 956              	 .loc 3 272 24
 957 001c 7B68     	 ldr r3,[r7,#4]
 958 001e DA6B     	 ldr r2,[r3,#60]
 959              	 .loc 3 272 35
 960 0020 3B68     	 ldr r3,[r7]
 961 0022 5B03     	 lsls r3,r3,#13
 962              	 .loc 3 272 43
 963 0024 1B04     	 lsls r3,r3,#16
 964 0026 1B0C     	 lsrs r3,r3,#16
 965              	 .loc 3 272 24
 966 0028 1A43     	 orrs r2,r3
 967 002a 7B68     	 ldr r3,[r7,#4]
 968 002c DA63     	 str r2,[r3,#60]
 273:../Libraries/XMCLib/src/xmc_spi.c **** }
 969              	 .loc 3 273 1
 970 002e C046     	 nop
 971 0030 BD46     	 mov sp,r7
 972 0032 02B0     	 add sp,sp,#8
 973              	 
 974 0034 80BD     	 pop {r7,pc}
 975              	 .cfi_endproc
 976              	.LFE166:
 978              	 .section .text.XMC_SPI_CH_DisableEvent,"ax",%progbits
 979              	 .align 1
 980              	 .global XMC_SPI_CH_DisableEvent
 981              	 .syntax unified
 982              	 .code 16
 983              	 .thumb_func
 984              	 .fpu softvfp
 986              	XMC_SPI_CH_DisableEvent:
 987              	.LFB167:
 274:../Libraries/XMCLib/src/xmc_spi.c **** 
 275:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 276:../Libraries/XMCLib/src/xmc_spi.c **** {
 988              	 .loc 3 276 1
 989              	 .cfi_startproc
 990              	 
 991              	 
 992 0000 80B5     	 push {r7,lr}
 993              	.LCFI36:
 994              	 .cfi_def_cfa_offset 8
 995              	 .cfi_offset 7,-8
 996              	 .cfi_offset 14,-4
 997 0002 82B0     	 sub sp,sp,#8
 998              	.LCFI37:
 999              	 .cfi_def_cfa_offset 16
 1000 0004 00AF     	 add r7,sp,#0
 1001              	.LCFI38:
 1002              	 .cfi_def_cfa_register 7
 1003 0006 7860     	 str r0,[r7,#4]
 1004 0008 3960     	 str r1,[r7]
 277:../Libraries/XMCLib/src/xmc_spi.c ****   channel->CCR &= (uint32_t)~(event&0x1fc00U);
 1005              	 .loc 3 277 16
 1006 000a 7B68     	 ldr r3,[r7,#4]
 1007 000c 1B6C     	 ldr r3,[r3,#64]
 1008              	 .loc 3 277 36
 1009 000e 3968     	 ldr r1,[r7]
 1010 0010 FE22     	 movs r2,#254
 1011 0012 5202     	 lsls r2,r2,#9
 1012 0014 0A40     	 ands r2,r1
 1013              	 .loc 3 277 19
 1014 0016 D243     	 mvns r2,r2
 1015              	 .loc 3 277 16
 1016 0018 1A40     	 ands r2,r3
 1017 001a 7B68     	 ldr r3,[r7,#4]
 1018 001c 1A64     	 str r2,[r3,#64]
 278:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 1019              	 .loc 3 278 24
 1020 001e 7B68     	 ldr r3,[r7,#4]
 1021 0020 DB6B     	 ldr r3,[r3,#60]
 1022              	 .loc 3 278 46
 1023 0022 3A68     	 ldr r2,[r7]
 1024 0024 5203     	 lsls r2,r2,#13
 1025              	 .loc 3 278 54
 1026 0026 1204     	 lsls r2,r2,#16
 1027 0028 120C     	 lsrs r2,r2,#16
 1028              	 .loc 3 278 27
 1029 002a D243     	 mvns r2,r2
 1030              	 .loc 3 278 24
 1031 002c 1A40     	 ands r2,r3
 1032 002e 7B68     	 ldr r3,[r7,#4]
 1033 0030 DA63     	 str r2,[r3,#60]
 279:../Libraries/XMCLib/src/xmc_spi.c **** }
 1034              	 .loc 3 279 1
 1035 0032 C046     	 nop
 1036 0034 BD46     	 mov sp,r7
 1037 0036 02B0     	 add sp,sp,#8
 1038              	 
 1039 0038 80BD     	 pop {r7,pc}
 1040              	 .cfi_endproc
 1041              	.LFE167:
 1043              	 .text
 1044              	.Letext0:
 1045              	 .file 4 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
 1046              	 .file 5 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1047              	 .file 6 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/lock.h"
 1048              	 .file 7 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h"
 1049              	 .file 8 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 1050              	 .file 9 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h"
 1051              	 .file 10 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 xmc_spi.c
    {standard input}:16     .text.XMC_USIC_CH_GetTransmitBufferStatus:0000000000000000 $t
    {standard input}:23     .text.XMC_USIC_CH_GetTransmitBufferStatus:0000000000000000 XMC_USIC_CH_GetTransmitBufferStatus
    {standard input}:60     .text.XMC_USIC_CH_SetMode:0000000000000000 $t
    {standard input}:66     .text.XMC_USIC_CH_SetMode:0000000000000000 XMC_USIC_CH_SetMode
    {standard input}:112    .text.XMC_SPI_CH_ClearStatusFlag:0000000000000000 $t
    {standard input}:118    .text.XMC_SPI_CH_ClearStatusFlag:0000000000000000 XMC_SPI_CH_ClearStatusFlag
    {standard input}:155    .text.XMC_SPI_CH_Init:0000000000000000 $t
    {standard input}:162    .text.XMC_SPI_CH_Init:0000000000000000 XMC_SPI_CH_Init
    {standard input}:249    .text.XMC_SPI_CH_Init:0000000000000068 $d
    {standard input}:254    .text.XMC_SPI_CH_SetBaudrate:0000000000000000 $t
    {standard input}:261    .text.XMC_SPI_CH_SetBaudrate:0000000000000000 XMC_SPI_CH_SetBaudrate
    {standard input}:323    .text.XMC_SPI_CH_EnableSlaveSelect:0000000000000000 $t
    {standard input}:330    .text.XMC_SPI_CH_EnableSlaveSelect:0000000000000000 XMC_SPI_CH_EnableSlaveSelect
    {standard input}:372    .text.XMC_SPI_CH_EnableSlaveSelect:000000000000002c $d
    {standard input}:377    .text.XMC_SPI_CH_DisableSlaveSelect:0000000000000000 $t
    {standard input}:384    .text.XMC_SPI_CH_DisableSlaveSelect:0000000000000000 XMC_SPI_CH_DisableSlaveSelect
    {standard input}:423    .text.XMC_SPI_CH_DisableSlaveSelect:0000000000000028 $d
    {standard input}:428    .text.XMC_SPI_CH_Transmit:0000000000000000 $t
    {standard input}:435    .text.XMC_SPI_CH_Transmit:0000000000000000 XMC_SPI_CH_Transmit
    {standard input}:544    .text.XMC_SPI_CH_GetReceivedData:0000000000000000 $t
    {standard input}:551    .text.XMC_SPI_CH_GetReceivedData:0000000000000000 XMC_SPI_CH_GetReceivedData
    {standard input}:615    .text.XMC_SPI_CH_SetInterwordDelay:0000000000000000 $t
    {standard input}:622    .text.XMC_SPI_CH_SetInterwordDelay:0000000000000000 XMC_SPI_CH_SetInterwordDelay
    {standard input}:844    .text.XMC_SPI_CH_SetInterwordDelay:0000000000000128 $d
    {standard input}:851    .text.XMC_SPI_CH_Stop:0000000000000000 $t
    {standard input}:858    .text.XMC_SPI_CH_Stop:0000000000000000 XMC_SPI_CH_Stop
    {standard input}:918    .text.XMC_SPI_CH_EnableEvent:0000000000000000 $t
    {standard input}:925    .text.XMC_SPI_CH_EnableEvent:0000000000000000 XMC_SPI_CH_EnableEvent
    {standard input}:979    .text.XMC_SPI_CH_DisableEvent:0000000000000000 $t
    {standard input}:986    .text.XMC_SPI_CH_DisableEvent:0000000000000000 XMC_SPI_CH_DisableEvent

UNDEFINED SYMBOLS
XMC_USIC_CH_Enable
XMC_USIC_CH_SetBaudrate
XMC_SCU_CLOCK_GetPeripheralClockFrequency
__aeabi_uidiv
__aeabi_uidivmod

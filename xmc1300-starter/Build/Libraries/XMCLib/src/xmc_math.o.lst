   1              	 .cpu cortex-m0
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,0
  10              	 .eabi_attribute 18,4
  11              	 .file "xmc_math.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.XMC_MATH_DIV_IsBusy,"ax",%progbits
  16              	 .align 1
  17              	 .global XMC_MATH_DIV_IsBusy
  18              	 .arch armv6s-m
  19              	 .syntax unified
  20              	 .code 16
  21              	 .thumb_func
  22              	 .fpu softvfp
  24              	XMC_MATH_DIV_IsBusy:
  25              	.LFB78:
  26              	 .file 1 "../Libraries/XMCLib/src/xmc_math.c"
   1:../Libraries/XMCLib/src/xmc_math.c **** 
   2:../Libraries/XMCLib/src/xmc_math.c **** /**
   3:../Libraries/XMCLib/src/xmc_math.c ****  * @file xmc_math.c
   4:../Libraries/XMCLib/src/xmc_math.c ****  * @date 2017-11-30
   5:../Libraries/XMCLib/src/xmc_math.c ****  *
   6:../Libraries/XMCLib/src/xmc_math.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_math.c ****  **********************************************************************************
   8:../Libraries/XMCLib/src/xmc_math.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_math.c ****  *
  10:../Libraries/XMCLib/src/xmc_math.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_math.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_math.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_math.c ****  * Redistribution and use in source and binary forms, with or without           
  14:../Libraries/XMCLib/src/xmc_math.c ****  * modification,are permitted provided that the following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_math.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_math.c ****  *   Redistributions of source code must retain the above copyright notice,      
  17:../Libraries/XMCLib/src/xmc_math.c ****  *   this list of conditions and the following disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_math.c ****  * 
  19:../Libraries/XMCLib/src/xmc_math.c ****  *   Redistributions in binary form must reproduce the above copyright notice,   
  20:../Libraries/XMCLib/src/xmc_math.c ****  *   this list of conditions and the following disclaimer in the documentation    
  21:../Libraries/XMCLib/src/xmc_math.c ****  *   and/or other materials provided with the distribution.                       
  22:../Libraries/XMCLib/src/xmc_math.c ****  * 
  23:../Libraries/XMCLib/src/xmc_math.c ****  *   Neither the name of the copyright holders nor the names of its contributors 
  24:../Libraries/XMCLib/src/xmc_math.c ****  *   may be used to endorse or promote products derived from this software without
  25:../Libraries/XMCLib/src/xmc_math.c ****  *   specific prior written permission.                                           
  26:../Libraries/XMCLib/src/xmc_math.c ****  *                                                                              
  27:../Libraries/XMCLib/src/xmc_math.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  
  28:../Libraries/XMCLib/src/xmc_math.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    
  29:../Libraries/XMCLib/src/xmc_math.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   
  30:../Libraries/XMCLib/src/xmc_math.c ****  * ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   
  31:../Libraries/XMCLib/src/xmc_math.c ****  * LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         
  32:../Libraries/XMCLib/src/xmc_math.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         
  33:../Libraries/XMCLib/src/xmc_math.c ****  * SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    
  34:../Libraries/XMCLib/src/xmc_math.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      
  35:../Libraries/XMCLib/src/xmc_math.c ****  * CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       
  36:../Libraries/XMCLib/src/xmc_math.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   
  37:../Libraries/XMCLib/src/xmc_math.c ****  * POSSIBILITY OF SUCH DAMAGE.                                                  
  38:../Libraries/XMCLib/src/xmc_math.c ****  *                                                                              
  39:../Libraries/XMCLib/src/xmc_math.c ****  * To improve the quality of the software, users are encouraged to share        
  40:../Libraries/XMCLib/src/xmc_math.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG       
  41:../Libraries/XMCLib/src/xmc_math.c ****  * dave@infineon.com).                                                          
  42:../Libraries/XMCLib/src/xmc_math.c ****  **********************************************************************************
  43:../Libraries/XMCLib/src/xmc_math.c ****  *
  44:../Libraries/XMCLib/src/xmc_math.c ****  * Change History
  45:../Libraries/XMCLib/src/xmc_math.c ****  * --------------
  46:../Libraries/XMCLib/src/xmc_math.c ****  *
  47:../Libraries/XMCLib/src/xmc_math.c ****  * 2015-06-20: 
  48:../Libraries/XMCLib/src/xmc_math.c ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  49:../Libraries/XMCLib/src/xmc_math.c ****  *     - Updated copyright and change history section.
  50:../Libraries/XMCLib/src/xmc_math.c ****  *
  51:../Libraries/XMCLib/src/xmc_math.c ****  * 2015-09-23: 
  52:../Libraries/XMCLib/src/xmc_math.c ****  *     - Added SQRT functions
  53:../Libraries/XMCLib/src/xmc_math.c ****  *
  54:../Libraries/XMCLib/src/xmc_math.c ****  * 2015-10-08:
  55:../Libraries/XMCLib/src/xmc_math.c ****  *     - Return values for sin(), cos(), sinh(), cosh(), arctan() are corrected.
  56:../Libraries/XMCLib/src/xmc_math.c ****  *
  57:../Libraries/XMCLib/src/xmc_math.c ****  * 2017-04-20:
  58:../Libraries/XMCLib/src/xmc_math.c ****  *     - Foward declaration of __aeabi_* to fix link time optimization (-flto) compilation errors
  59:../Libraries/XMCLib/src/xmc_math.c ****  * 
  60:../Libraries/XMCLib/src/xmc_math.c ****  * 2017-11-30:
  61:../Libraries/XMCLib/src/xmc_math.c ****  *     - Fixed reentrancy problems when using __aeabi_* functions (division ‘/’ and modulo ‘%
  62:../Libraries/XMCLib/src/xmc_math.c ****  *       as long as XMC_MATH_DISABLE_DIV_ABI is not defined
  63:../Libraries/XMCLib/src/xmc_math.c ****  * 
  64:../Libraries/XMCLib/src/xmc_math.c ****  * @endcond
  65:../Libraries/XMCLib/src/xmc_math.c ****  *
  66:../Libraries/XMCLib/src/xmc_math.c ****  */
  67:../Libraries/XMCLib/src/xmc_math.c **** 
  68:../Libraries/XMCLib/src/xmc_math.c **** /**
  69:../Libraries/XMCLib/src/xmc_math.c ****  *
  70:../Libraries/XMCLib/src/xmc_math.c ****  * @brief MATH driver - API implementation for XMC13/14 family MATH libraries. <br>
  71:../Libraries/XMCLib/src/xmc_math.c ****  * 
  72:../Libraries/XMCLib/src/xmc_math.c ****  * <b>Detailed description of file</b> <br>
  73:../Libraries/XMCLib/src/xmc_math.c ****  * APIs provided in this file cover the following functional blocks of MATH: <br>
  74:../Libraries/XMCLib/src/xmc_math.c ****  *
  75:../Libraries/XMCLib/src/xmc_math.c ****  */
  76:../Libraries/XMCLib/src/xmc_math.c **** 
  77:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  78:../Libraries/XMCLib/src/xmc_math.c ****  * HEADER FILES
  79:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  80:../Libraries/XMCLib/src/xmc_math.c **** #include <xmc_math.h>
  81:../Libraries/XMCLib/src/xmc_math.c **** 
  82:../Libraries/XMCLib/src/xmc_math.c **** #if defined (MATH)
  83:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  84:../Libraries/XMCLib/src/xmc_math.c ****  * MACROS
  85:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  86:../Libraries/XMCLib/src/xmc_math.c **** /* Reciprocal of Circular gain in XMC_MATH_Q0_23_t format ((2^23)/1.646760258121) */
  87:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023       (0x4DBA76U)
  88:../Libraries/XMCLib/src/xmc_math.c **** /* Reciprocal of Hyperbolic gain in XMC_MATH_Q1_22_t format ((2^22)/0.828159360960) */
  89:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22    (0x4D47A1U)
  90:../Libraries/XMCLib/src/xmc_math.c **** /* Signed division is selected */
  91:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_SIGNED_DIVISION                      ((uint32_t) 0 << MATH_DIVCON_USIGN_Pos)
  92:../Libraries/XMCLib/src/xmc_math.c **** /* Unsigned division is selected */
  93:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_UNSIGNED_DIVISION                    ((uint32_t) 1 << MATH_DIVCON_USIGN_Pos)
  94:../Libraries/XMCLib/src/xmc_math.c **** 
  95:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  96:../Libraries/XMCLib/src/xmc_math.c ****  * ENUMS
  97:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  98:../Libraries/XMCLib/src/xmc_math.c **** 
  99:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 100:../Libraries/XMCLib/src/xmc_math.c ****  * GLOBAL DATA
 101:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 102:../Libraries/XMCLib/src/xmc_math.c **** 
 103:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 104:../Libraries/XMCLib/src/xmc_math.c ****  * DATA STRUCTURES
 105:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 106:../Libraries/XMCLib/src/xmc_math.c **** 
 107:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 108:../Libraries/XMCLib/src/xmc_math.c ****  * LOCAL ROUTINES
 109:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 110:../Libraries/XMCLib/src/xmc_math.c **** 
 111:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 112:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - Utility functions
 113:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 114:../Libraries/XMCLib/src/xmc_math.c **** __attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
 115:../Libraries/XMCLib/src/xmc_math.c **** {
 116:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t status;
 117:../Libraries/XMCLib/src/xmc_math.c ****   status = __get_PRIMASK();
 118:../Libraries/XMCLib/src/xmc_math.c ****   __disable_irq ();
 119:../Libraries/XMCLib/src/xmc_math.c ****   return status;
 120:../Libraries/XMCLib/src/xmc_math.c **** }
 121:../Libraries/XMCLib/src/xmc_math.c **** 
 122:../Libraries/XMCLib/src/xmc_math.c **** __attribute__((always_inline)) __STATIC_INLINE void critical_section_exit(uint32_t status)
 123:../Libraries/XMCLib/src/xmc_math.c **** {
 124:../Libraries/XMCLib/src/xmc_math.c ****   __set_PRIMASK(status);
 125:../Libraries/XMCLib/src/xmc_math.c **** }
 126:../Libraries/XMCLib/src/xmc_math.c **** 
 127:../Libraries/XMCLib/src/xmc_math.c **** /* Utility function to check if the DIV unit is busy */
 128:../Libraries/XMCLib/src/xmc_math.c **** bool XMC_MATH_DIV_IsBusy(void)
 129:../Libraries/XMCLib/src/xmc_math.c **** {
  27              	 .loc 1 129 1
  28              	 .cfi_startproc
  29              	 
  30              	 
  31 0000 80B5     	 push {r7,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 8
  34              	 .cfi_offset 7,-8
  35              	 .cfi_offset 14,-4
  36 0002 82B0     	 sub sp,sp,#8
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
 130:../Libraries/XMCLib/src/xmc_math.c ****   bool status;
 131:../Libraries/XMCLib/src/xmc_math.c ****   if (MATH->DIVST & MATH_DIVST_BSY_Msk)
  42              	 .loc 1 131 11
  43 0006 094B     	 ldr r3,.L5
  44 0008 1B6B     	 ldr r3,[r3,#48]
  45              	 .loc 1 131 19
  46 000a 0122     	 movs r2,#1
  47 000c 1340     	 ands r3,r2
  48              	 .loc 1 131 6
  49 000e 03D0     	 beq .L2
 132:../Libraries/XMCLib/src/xmc_math.c ****   {
 133:../Libraries/XMCLib/src/xmc_math.c ****     status = true;  /* DIV unit is busy running a division operation */ 
  50              	 .loc 1 133 12
  51 0010 FB1D     	 adds r3,r7,#7
  52 0012 0122     	 movs r2,#1
  53 0014 1A70     	 strb r2,[r3]
  54 0016 02E0     	 b .L3
  55              	.L2:
 134:../Libraries/XMCLib/src/xmc_math.c ****   }
 135:../Libraries/XMCLib/src/xmc_math.c ****   else
 136:../Libraries/XMCLib/src/xmc_math.c ****   {
 137:../Libraries/XMCLib/src/xmc_math.c ****     status = false; /* DIV unit is idle */ 
  56              	 .loc 1 137 12
  57 0018 FB1D     	 adds r3,r7,#7
  58 001a 0022     	 movs r2,#0
  59 001c 1A70     	 strb r2,[r3]
  60              	.L3:
 138:../Libraries/XMCLib/src/xmc_math.c ****   }
 139:../Libraries/XMCLib/src/xmc_math.c **** 
 140:../Libraries/XMCLib/src/xmc_math.c ****   return (status);
  61              	 .loc 1 140 10
  62 001e FB1D     	 adds r3,r7,#7
  63 0020 1B78     	 ldrb r3,[r3]
 141:../Libraries/XMCLib/src/xmc_math.c **** }
  64              	 .loc 1 141 1
  65 0022 1800     	 movs r0,r3
  66 0024 BD46     	 mov sp,r7
  67 0026 02B0     	 add sp,sp,#8
  68              	 
  69 0028 80BD     	 pop {r7,pc}
  70              	.L6:
  71 002a C046     	 .align 2
  72              	.L5:
  73 002c 00000340 	 .word 1073938432
  74              	 .cfi_endproc
  75              	.LFE78:
  77              	 .section .text.XMC_MATH_CORDIC_IsBusy,"ax",%progbits
  78              	 .align 1
  79              	 .global XMC_MATH_CORDIC_IsBusy
  80              	 .syntax unified
  81              	 .code 16
  82              	 .thumb_func
  83              	 .fpu softvfp
  85              	XMC_MATH_CORDIC_IsBusy:
  86              	.LFB79:
 142:../Libraries/XMCLib/src/xmc_math.c **** 
 143:../Libraries/XMCLib/src/xmc_math.c **** /* Utility function to check if the CORDIC unit is busy */
 144:../Libraries/XMCLib/src/xmc_math.c **** bool XMC_MATH_CORDIC_IsBusy(void)
 145:../Libraries/XMCLib/src/xmc_math.c **** {
  87              	 .loc 1 145 1
  88              	 .cfi_startproc
  89              	 
  90              	 
  91 0000 80B5     	 push {r7,lr}
  92              	.LCFI3:
  93              	 .cfi_def_cfa_offset 8
  94              	 .cfi_offset 7,-8
  95              	 .cfi_offset 14,-4
  96 0002 82B0     	 sub sp,sp,#8
  97              	.LCFI4:
  98              	 .cfi_def_cfa_offset 16
  99 0004 00AF     	 add r7,sp,#0
 100              	.LCFI5:
 101              	 .cfi_def_cfa_register 7
 146:../Libraries/XMCLib/src/xmc_math.c ****   bool status;
 147:../Libraries/XMCLib/src/xmc_math.c ****   if (MATH->STATC & MATH_STATC_BSY_Msk)
 102              	 .loc 1 147 11
 103 0006 094B     	 ldr r3,.L11
 104 0008 1B6C     	 ldr r3,[r3,#64]
 105              	 .loc 1 147 19
 106 000a 0122     	 movs r2,#1
 107 000c 1340     	 ands r3,r2
 108              	 .loc 1 147 6
 109 000e 03D0     	 beq .L8
 148:../Libraries/XMCLib/src/xmc_math.c ****   {
 149:../Libraries/XMCLib/src/xmc_math.c ****     status = true;  /* CORDIC unit is busy running an operation */  
 110              	 .loc 1 149 12
 111 0010 FB1D     	 adds r3,r7,#7
 112 0012 0122     	 movs r2,#1
 113 0014 1A70     	 strb r2,[r3]
 114 0016 02E0     	 b .L9
 115              	.L8:
 150:../Libraries/XMCLib/src/xmc_math.c ****   }
 151:../Libraries/XMCLib/src/xmc_math.c ****   else
 152:../Libraries/XMCLib/src/xmc_math.c ****   {
 153:../Libraries/XMCLib/src/xmc_math.c ****     status = false; /* CORDIC unit is idle */   
 116              	 .loc 1 153 12
 117 0018 FB1D     	 adds r3,r7,#7
 118 001a 0022     	 movs r2,#0
 119 001c 1A70     	 strb r2,[r3]
 120              	.L9:
 154:../Libraries/XMCLib/src/xmc_math.c ****   }
 155:../Libraries/XMCLib/src/xmc_math.c **** 
 156:../Libraries/XMCLib/src/xmc_math.c ****   return (status);
 121              	 .loc 1 156 10
 122 001e FB1D     	 adds r3,r7,#7
 123 0020 1B78     	 ldrb r3,[r3]
 157:../Libraries/XMCLib/src/xmc_math.c **** }
 124              	 .loc 1 157 1
 125 0022 1800     	 movs r0,r3
 126 0024 BD46     	 mov sp,r7
 127 0026 02B0     	 add sp,sp,#8
 128              	 
 129 0028 80BD     	 pop {r7,pc}
 130              	.L12:
 131 002a C046     	 .align 2
 132              	.L11:
 133 002c 00000340 	 .word 1073938432
 134              	 .cfi_endproc
 135              	.LFE79:
 137              	 .section .text.XMC_MATH_GetEventStatus,"ax",%progbits
 138              	 .align 1
 139              	 .global XMC_MATH_GetEventStatus
 140              	 .syntax unified
 141              	 .code 16
 142              	 .thumb_func
 143              	 .fpu softvfp
 145              	XMC_MATH_GetEventStatus:
 146              	.LFB80:
 158:../Libraries/XMCLib/src/xmc_math.c **** 
 159:../Libraries/XMCLib/src/xmc_math.c **** /* This functions returns the status of a requested event */
 160:../Libraries/XMCLib/src/xmc_math.c **** bool XMC_MATH_GetEventStatus(const XMC_MATH_EVENT_t event)
 161:../Libraries/XMCLib/src/xmc_math.c **** {
 147              	 .loc 1 161 1
 148              	 .cfi_startproc
 149              	 
 150              	 
 151 0000 80B5     	 push {r7,lr}
 152              	.LCFI6:
 153              	 .cfi_def_cfa_offset 8
 154              	 .cfi_offset 7,-8
 155              	 .cfi_offset 14,-4
 156 0002 84B0     	 sub sp,sp,#16
 157              	.LCFI7:
 158              	 .cfi_def_cfa_offset 24
 159 0004 00AF     	 add r7,sp,#0
 160              	.LCFI8:
 161              	 .cfi_def_cfa_register 7
 162 0006 0200     	 movs r2,r0
 163 0008 FB1D     	 adds r3,r7,#7
 164 000a 1A70     	 strb r2,[r3]
 162:../Libraries/XMCLib/src/xmc_math.c ****   bool status;
 163:../Libraries/XMCLib/src/xmc_math.c ****   if (MATH->EVFR & (uint32_t) event)
 165              	 .loc 1 163 11
 166 000c 0A4B     	 ldr r3,.L17
 167 000e 1B69     	 ldr r3,[r3,#16]
 168              	 .loc 1 163 20
 169 0010 FA1D     	 adds r2,r7,#7
 170 0012 1278     	 ldrb r2,[r2]
 171              	 .loc 1 163 18
 172 0014 1340     	 ands r3,r2
 173              	 .loc 1 163 6
 174 0016 04D0     	 beq .L14
 164:../Libraries/XMCLib/src/xmc_math.c ****   {
 165:../Libraries/XMCLib/src/xmc_math.c ****     status = true; /* Requested event has been detected */
 175              	 .loc 1 165 12
 176 0018 0F23     	 movs r3,#15
 177 001a FB18     	 adds r3,r7,r3
 178 001c 0122     	 movs r2,#1
 179 001e 1A70     	 strb r2,[r3]
 180 0020 03E0     	 b .L15
 181              	.L14:
 166:../Libraries/XMCLib/src/xmc_math.c ****   }
 167:../Libraries/XMCLib/src/xmc_math.c ****   else
 168:../Libraries/XMCLib/src/xmc_math.c ****   {
 169:../Libraries/XMCLib/src/xmc_math.c ****     status = false; /* Requested event has not been detected */
 182              	 .loc 1 169 12
 183 0022 0F23     	 movs r3,#15
 184 0024 FB18     	 adds r3,r7,r3
 185 0026 0022     	 movs r2,#0
 186 0028 1A70     	 strb r2,[r3]
 187              	.L15:
 170:../Libraries/XMCLib/src/xmc_math.c ****   }
 171:../Libraries/XMCLib/src/xmc_math.c ****   return (status);
 188              	 .loc 1 171 10
 189 002a 0F23     	 movs r3,#15
 190 002c FB18     	 adds r3,r7,r3
 191 002e 1B78     	 ldrb r3,[r3]
 172:../Libraries/XMCLib/src/xmc_math.c **** }
 192              	 .loc 1 172 1
 193 0030 1800     	 movs r0,r3
 194 0032 BD46     	 mov sp,r7
 195 0034 04B0     	 add sp,sp,#16
 196              	 
 197 0036 80BD     	 pop {r7,pc}
 198              	.L18:
 199              	 .align 2
 200              	.L17:
 201 0038 00000340 	 .word 1073938432
 202              	 .cfi_endproc
 203              	.LFE80:
 205              	 .section .text.__aeabi_uidiv,"ax",%progbits
 206              	 .align 1
 207              	 .global __aeabi_uidiv
 208              	 .syntax unified
 209              	 .code 16
 210              	 .thumb_func
 211              	 .fpu softvfp
 213              	__aeabi_uidiv:
 214              	.LFB81:
 173:../Libraries/XMCLib/src/xmc_math.c **** 
 174:../Libraries/XMCLib/src/xmc_math.c **** #ifndef XMC_MATH_DISABLE_DIV_ABI
 175:../Libraries/XMCLib/src/xmc_math.c **** 
 176:../Libraries/XMCLib/src/xmc_math.c **** /* Forward prototypes.  */
 177:../Libraries/XMCLib/src/xmc_math.c **** uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor) __attribute__((externally_visible));
 178:../Libraries/XMCLib/src/xmc_math.c **** int32_t __aeabi_idiv(int32_t dividend, int32_t divisor) __attribute__((externally_visible));
 179:../Libraries/XMCLib/src/xmc_math.c **** uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor) __attribute__((externally_visible));
 180:../Libraries/XMCLib/src/xmc_math.c **** int64_t __aeabi_idivmod(int32_t dividend, int32_t divisor) __attribute__((externally_visible));
 181:../Libraries/XMCLib/src/xmc_math.c **** 
 182:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 183:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - aeabi routines
 184:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 185:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs unsigned integer division */
 186:../Libraries/XMCLib/src/xmc_math.c **** uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
 187:../Libraries/XMCLib/src/xmc_math.c **** {
 215              	 .loc 1 187 1
 216              	 .cfi_startproc
 217              	 
 218              	 
 219 0000 80B5     	 push {r7,lr}
 220              	.LCFI9:
 221              	 .cfi_def_cfa_offset 8
 222              	 .cfi_offset 7,-8
 223              	 .cfi_offset 14,-4
 224 0002 88B0     	 sub sp,sp,#32
 225              	.LCFI10:
 226              	 .cfi_def_cfa_offset 40
 227 0004 00AF     	 add r7,sp,#0
 228              	.LCFI11:
 229              	 .cfi_def_cfa_register 7
 230 0006 7860     	 str r0,[r7,#4]
 231 0008 3960     	 str r1,[r7]
 232              	.LBB48:
 233              	.LBB49:
 234              	.LBB50:
 235              	.LBB51:
 236              	 .file 2 "..//Libraries/CMSIS/Include/cmsis_gcc.h"
   1:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.2
   5:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * @date     13. February 2017
   6:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /*
   8:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
   9:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  *
  10:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  *
  12:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  *
  16:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  *
  18:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
  24:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
  25:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
  28:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
  34:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  38:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
  39:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  43:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  46:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  49:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  55:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  58:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  61:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  64:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  67:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  70:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  78:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  86:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  94:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 102:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 110:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 113:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 116:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 117:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 118:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:..//Libraries/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   @{
 122:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 123:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 124:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 125:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:..//Libraries/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 129:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 131:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 133:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 134:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 135:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 136:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:..//Libraries/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 140:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 142:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 144:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 145:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 146:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 147:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 151:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 153:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 155:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 158:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 159:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 160:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 162:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 166:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 168:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 170:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 173:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 174:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 175:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 176:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 177:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 181:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 183:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 185:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 186:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 187:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 189:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 193:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 195:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 197:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 198:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 199:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 200:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 201:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 205:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 207:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 209:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 212:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 213:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 214:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 215:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 219:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 221:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 223:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 226:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 227:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 228:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 229:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 233:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 235:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 237:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 240:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 241:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 242:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 243:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 247:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 249:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 250:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 251:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 254:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 255:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 256:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 258:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 262:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 264:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 265:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 266:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 269:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 270:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 271:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 272:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 273:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 277:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 279:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 281:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 282:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 283:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 285:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 289:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 291:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 293:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 294:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 295:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 296:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 297:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 301:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 303:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 304:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 305:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 308:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 309:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 310:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 312:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 316:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 318:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 319:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 320:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 323:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 324:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 325:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 326:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 327:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 331:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 333:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 335:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 336:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 337:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 339:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 343:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 345:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 347:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 348:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 349:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 350:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 352:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 356:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 358:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 359:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 360:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 363:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 364:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 365:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 366:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 370:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 372:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 374:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 375:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 376:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 377:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 378:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 382:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 384:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 386:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 237              	 .loc 2 386 3
 238              	 .syntax divided
 239              	
 240 000a EFF31083 	 MRS r3,primask
 241              	
 242              	 .thumb
 243              	 .syntax unified
 244 000e FB60     	 str r3,[r7,#12]
 387:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 245              	 .loc 2 387 9
 246 0010 FB68     	 ldr r3,[r7,#12]
 247              	.LBE51:
 248              	.LBE50:
 117:../Libraries/XMCLib/src/xmc_math.c ****   __disable_irq ();
 249              	 .loc 1 117 12
 250 0012 BB60     	 str r3,[r7,#8]
 251              	.LBB52:
 252              	.LBB53:
 142:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 253              	 .loc 2 142 3
 254              	 .syntax divided
 255              	
 256 0014 72B6     	 cpsid i
 257              	
 143:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 258              	 .loc 2 143 1
 259              	 .thumb
 260              	 .syntax unified
 261 0016 C046     	 nop
 262              	.LBE53:
 263              	.LBE52:
 119:../Libraries/XMCLib/src/xmc_math.c **** }
 264              	 .loc 1 119 10
 265 0018 BB68     	 ldr r3,[r7,#8]
 266              	.LBE49:
 267              	.LBE48:
 188:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 189:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t ics;
 190:../Libraries/XMCLib/src/xmc_math.c ****   ics = critical_section_enter();
 268              	 .loc 1 190 9
 269 001a FB61     	 str r3,[r7,#28]
 191:../Libraries/XMCLib/src/xmc_math.c **** 
 192:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
 270              	 .loc 1 192 7
 271 001c 0C4B     	 ldr r3,.L23
 272              	 .loc 1 192 17
 273 001e 0422     	 movs r2,#4
 274 0020 5A63     	 str r2,[r3,#52]
 193:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 275              	 .loc 1 193 7
 276 0022 0B4B     	 ldr r3,.L23
 277              	 .loc 1 193 17
 278 0024 7A68     	 ldr r2,[r7,#4]
 279 0026 1A62     	 str r2,[r3,#32]
 194:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 280              	 .loc 1 194 7
 281 0028 094B     	 ldr r3,.L23
 282              	 .loc 1 194 17
 283 002a 3A68     	 ldr r2,[r7]
 284 002c 5A62     	 str r2,[r3,#36]
 195:../Libraries/XMCLib/src/xmc_math.c **** 
 196:../Libraries/XMCLib/src/xmc_math.c ****   result = MATH->QUOT;
 285              	 .loc 1 196 16
 286 002e 084B     	 ldr r3,.L23
 287              	 .loc 1 196 10
 288 0030 9B6A     	 ldr r3,[r3,#40]
 289 0032 BB61     	 str r3,[r7,#24]
 290 0034 FB69     	 ldr r3,[r7,#28]
 291 0036 7B61     	 str r3,[r7,#20]
 292 0038 7B69     	 ldr r3,[r7,#20]
 293 003a 3B61     	 str r3,[r7,#16]
 294              	.LBB54:
 295              	.LBB55:
 296              	.LBB56:
 297              	.LBB57:
 388:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 389:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 390:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 391:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 393:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 397:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 399:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 401:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 404:..//Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 405:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 406:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 407:..//Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 408:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:..//Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 412:..//Libraries/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:..//Libraries/CMSIS/Include/cmsis_gcc.h **** {
 414:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 298              	 .loc 2 414 3
 299 003c 3B69     	 ldr r3,[r7,#16]
 300              	 .syntax divided
 301              	
 302 003e 83F31088 	 MSR primask,r3
 303              	
 415:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 304              	 .loc 2 415 1
 305              	 .thumb
 306              	 .syntax unified
 307 0042 C046     	 nop
 308              	.LBE57:
 309              	.LBE56:
 125:../Libraries/XMCLib/src/xmc_math.c **** 
 310              	 .loc 1 125 1
 311 0044 C046     	 nop
 312              	.LBE55:
 313              	.LBE54:
 197:../Libraries/XMCLib/src/xmc_math.c **** 
 198:../Libraries/XMCLib/src/xmc_math.c ****   critical_section_exit(ics);
 199:../Libraries/XMCLib/src/xmc_math.c **** 
 200:../Libraries/XMCLib/src/xmc_math.c ****   return result;
 314              	 .loc 1 200 10
 315 0046 BB69     	 ldr r3,[r7,#24]
 201:../Libraries/XMCLib/src/xmc_math.c **** }
 316              	 .loc 1 201 1
 317 0048 1800     	 movs r0,r3
 318 004a BD46     	 mov sp,r7
 319 004c 08B0     	 add sp,sp,#32
 320              	 
 321 004e 80BD     	 pop {r7,pc}
 322              	.L24:
 323              	 .align 2
 324              	.L23:
 325 0050 00000340 	 .word 1073938432
 326              	 .cfi_endproc
 327              	.LFE81:
 329              	 .section .text.__aeabi_idiv,"ax",%progbits
 330              	 .align 1
 331              	 .global __aeabi_idiv
 332              	 .syntax unified
 333              	 .code 16
 334              	 .thumb_func
 335              	 .fpu softvfp
 337              	__aeabi_idiv:
 338              	.LFB82:
 202:../Libraries/XMCLib/src/xmc_math.c **** 
 203:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs signed integer division */
 204:../Libraries/XMCLib/src/xmc_math.c **** int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
 205:../Libraries/XMCLib/src/xmc_math.c **** {
 339              	 .loc 1 205 1
 340              	 .cfi_startproc
 341              	 
 342              	 
 343 0000 80B5     	 push {r7,lr}
 344              	.LCFI12:
 345              	 .cfi_def_cfa_offset 8
 346              	 .cfi_offset 7,-8
 347              	 .cfi_offset 14,-4
 348 0002 88B0     	 sub sp,sp,#32
 349              	.LCFI13:
 350              	 .cfi_def_cfa_offset 40
 351 0004 00AF     	 add r7,sp,#0
 352              	.LCFI14:
 353              	 .cfi_def_cfa_register 7
 354 0006 7860     	 str r0,[r7,#4]
 355 0008 3960     	 str r1,[r7]
 356              	.LBB58:
 357              	.LBB59:
 358              	.LBB60:
 359              	.LBB61:
 386:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 360              	 .loc 2 386 3
 361              	 .syntax divided
 362              	
 363 000a EFF31083 	 MRS r3,primask
 364              	
 365              	 .thumb
 366              	 .syntax unified
 367 000e FB60     	 str r3,[r7,#12]
 387:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 368              	 .loc 2 387 9
 369 0010 FB68     	 ldr r3,[r7,#12]
 370              	.LBE61:
 371              	.LBE60:
 117:../Libraries/XMCLib/src/xmc_math.c ****   __disable_irq ();
 372              	 .loc 1 117 12
 373 0012 BB60     	 str r3,[r7,#8]
 374              	.LBB62:
 375              	.LBB63:
 142:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 376              	 .loc 2 142 3
 377              	 .syntax divided
 378              	
 379 0014 72B6     	 cpsid i
 380              	
 143:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 381              	 .loc 2 143 1
 382              	 .thumb
 383              	 .syntax unified
 384 0016 C046     	 nop
 385              	.LBE63:
 386              	.LBE62:
 119:../Libraries/XMCLib/src/xmc_math.c **** }
 387              	 .loc 1 119 10
 388 0018 BB68     	 ldr r3,[r7,#8]
 389              	.LBE59:
 390              	.LBE58:
 206:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 207:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t ics;
 208:../Libraries/XMCLib/src/xmc_math.c ****   ics = critical_section_enter();
 391              	 .loc 1 208 9
 392 001a FB61     	 str r3,[r7,#28]
 209:../Libraries/XMCLib/src/xmc_math.c **** 
 210:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
 393              	 .loc 1 210 7
 394 001c 0C4B     	 ldr r3,.L29
 395              	 .loc 1 210 17
 396 001e 0022     	 movs r2,#0
 397 0020 5A63     	 str r2,[r3,#52]
 211:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 398              	 .loc 1 211 7
 399 0022 0B4B     	 ldr r3,.L29
 400              	 .loc 1 211 17
 401 0024 7A68     	 ldr r2,[r7,#4]
 402 0026 1A62     	 str r2,[r3,#32]
 212:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 403              	 .loc 1 212 7
 404 0028 094B     	 ldr r3,.L29
 405              	 .loc 1 212 17
 406 002a 3A68     	 ldr r2,[r7]
 407 002c 5A62     	 str r2,[r3,#36]
 213:../Libraries/XMCLib/src/xmc_math.c **** 
 214:../Libraries/XMCLib/src/xmc_math.c ****   result = MATH->QUOT;
 408              	 .loc 1 214 16
 409 002e 084B     	 ldr r3,.L29
 410              	 .loc 1 214 10
 411 0030 9B6A     	 ldr r3,[r3,#40]
 412 0032 BB61     	 str r3,[r7,#24]
 413 0034 FB69     	 ldr r3,[r7,#28]
 414 0036 7B61     	 str r3,[r7,#20]
 415 0038 7B69     	 ldr r3,[r7,#20]
 416 003a 3B61     	 str r3,[r7,#16]
 417              	.LBB64:
 418              	.LBB65:
 419              	.LBB66:
 420              	.LBB67:
 414:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 421              	 .loc 2 414 3
 422 003c 3B69     	 ldr r3,[r7,#16]
 423              	 .syntax divided
 424              	
 425 003e 83F31088 	 MSR primask,r3
 426              	
 427              	 .loc 2 415 1
 428              	 .thumb
 429              	 .syntax unified
 430 0042 C046     	 nop
 431              	.LBE67:
 432              	.LBE66:
 125:../Libraries/XMCLib/src/xmc_math.c **** 
 433              	 .loc 1 125 1
 434 0044 C046     	 nop
 435              	.LBE65:
 436              	.LBE64:
 215:../Libraries/XMCLib/src/xmc_math.c **** 
 216:../Libraries/XMCLib/src/xmc_math.c ****   critical_section_exit(ics);
 217:../Libraries/XMCLib/src/xmc_math.c ****   
 218:../Libraries/XMCLib/src/xmc_math.c ****   return result;
 437              	 .loc 1 218 10
 438 0046 BB69     	 ldr r3,[r7,#24]
 219:../Libraries/XMCLib/src/xmc_math.c **** }
 439              	 .loc 1 219 1
 440 0048 1800     	 movs r0,r3
 441 004a BD46     	 mov sp,r7
 442 004c 08B0     	 add sp,sp,#32
 443              	 
 444 004e 80BD     	 pop {r7,pc}
 445              	.L30:
 446              	 .align 2
 447              	.L29:
 448 0050 00000340 	 .word 1073938432
 449              	 .cfi_endproc
 450              	.LFE82:
 452              	 .section .text.__aeabi_uidivmod,"ax",%progbits
 453              	 .align 1
 454              	 .global __aeabi_uidivmod
 455              	 .syntax unified
 456              	 .code 16
 457              	 .thumb_func
 458              	 .fpu softvfp
 460              	__aeabi_uidivmod:
 461              	.LFB83:
 220:../Libraries/XMCLib/src/xmc_math.c **** 
 221:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs unsigned integer division modulo */
 222:../Libraries/XMCLib/src/xmc_math.c **** uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
 223:../Libraries/XMCLib/src/xmc_math.c **** {
 462              	 .loc 1 223 1
 463              	 .cfi_startproc
 464              	 
 465              	 
 466 0000 B0B5     	 push {r4,r5,r7,lr}
 467              	.LCFI15:
 468              	 .cfi_def_cfa_offset 16
 469              	 .cfi_offset 4,-16
 470              	 .cfi_offset 5,-12
 471              	 .cfi_offset 7,-8
 472              	 .cfi_offset 14,-4
 473 0002 8CB0     	 sub sp,sp,#48
 474              	.LCFI16:
 475              	 .cfi_def_cfa_offset 64
 476 0004 00AF     	 add r7,sp,#0
 477              	.LCFI17:
 478              	 .cfi_def_cfa_register 7
 479 0006 7860     	 str r0,[r7,#4]
 480 0008 3960     	 str r1,[r7]
 481              	.LBB68:
 482              	.LBB69:
 483              	.LBB70:
 484              	.LBB71:
 386:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 485              	 .loc 2 386 3
 486              	 .syntax divided
 487              	
 488 000a EFF31081 	 MRS r1,primask
 489              	
 490              	 .thumb
 491              	 .syntax unified
 492 000e F960     	 str r1,[r7,#12]
 387:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 493              	 .loc 2 387 9
 494 0010 F968     	 ldr r1,[r7,#12]
 495              	.LBE71:
 496              	.LBE70:
 117:../Libraries/XMCLib/src/xmc_math.c ****   __disable_irq ();
 497              	 .loc 1 117 12
 498 0012 B960     	 str r1,[r7,#8]
 499              	.LBB72:
 500              	.LBB73:
 142:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 501              	 .loc 2 142 3
 502              	 .syntax divided
 503              	
 504 0014 72B6     	 cpsid i
 505              	
 143:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 506              	 .loc 2 143 1
 507              	 .thumb
 508              	 .syntax unified
 509 0016 C046     	 nop
 510              	.LBE73:
 511              	.LBE72:
 119:../Libraries/XMCLib/src/xmc_math.c **** }
 512              	 .loc 1 119 10
 513 0018 B968     	 ldr r1,[r7,#8]
 514              	.LBE69:
 515              	.LBE68:
 224:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t remainder;
 225:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t quot;
 226:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t ics;
 227:../Libraries/XMCLib/src/xmc_math.c ****   ics = critical_section_enter();
 516              	 .loc 1 227 9
 517 001a F962     	 str r1,[r7,#44]
 228:../Libraries/XMCLib/src/xmc_math.c ****   
 229:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
 518              	 .loc 1 229 7
 519 001c 1649     	 ldr r1,.L35
 520              	 .loc 1 229 17
 521 001e 0420     	 movs r0,#4
 522 0020 4863     	 str r0,[r1,#52]
 230:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 523              	 .loc 1 230 7
 524 0022 1549     	 ldr r1,.L35
 525              	 .loc 1 230 17
 526 0024 7868     	 ldr r0,[r7,#4]
 527 0026 0862     	 str r0,[r1,#32]
 231:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 528              	 .loc 1 231 7
 529 0028 1349     	 ldr r1,.L35
 530              	 .loc 1 231 17
 531 002a 3868     	 ldr r0,[r7]
 532 002c 4862     	 str r0,[r1,#36]
 232:../Libraries/XMCLib/src/xmc_math.c **** 
 233:../Libraries/XMCLib/src/xmc_math.c ****   remainder = (uint64_t)MATH->RMD;
 533              	 .loc 1 233 29
 534 002e 1249     	 ldr r1,.L35
 535 0030 C96A     	 ldr r1,[r1,#44]
 536              	 .loc 1 233 13
 537 0032 3962     	 str r1,[r7,#32]
 538 0034 0021     	 movs r1,#0
 539 0036 7962     	 str r1,[r7,#36]
 234:../Libraries/XMCLib/src/xmc_math.c ****   quot = (uint64_t)MATH->QUOT;
 540              	 .loc 1 234 24
 541 0038 0F49     	 ldr r1,.L35
 542 003a 896A     	 ldr r1,[r1,#40]
 543              	 .loc 1 234 8
 544 003c B961     	 str r1,[r7,#24]
 545 003e 0021     	 movs r1,#0
 546 0040 F961     	 str r1,[r7,#28]
 547 0042 F96A     	 ldr r1,[r7,#44]
 548 0044 7961     	 str r1,[r7,#20]
 549 0046 7969     	 ldr r1,[r7,#20]
 550 0048 3961     	 str r1,[r7,#16]
 551              	.LBB74:
 552              	.LBB75:
 553              	.LBB76:
 554              	.LBB77:
 414:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 555              	 .loc 2 414 3
 556 004a 3969     	 ldr r1,[r7,#16]
 557              	 .syntax divided
 558              	
 559 004c 81F31088 	 MSR primask,r1
 560              	
 561              	 .loc 2 415 1
 562              	 .thumb
 563              	 .syntax unified
 564 0050 C046     	 nop
 565              	.LBE77:
 566              	.LBE76:
 125:../Libraries/XMCLib/src/xmc_math.c **** 
 567              	 .loc 1 125 1
 568 0052 C046     	 nop
 569              	.LBE75:
 570              	.LBE74:
 235:../Libraries/XMCLib/src/xmc_math.c **** 
 236:../Libraries/XMCLib/src/xmc_math.c ****   critical_section_exit(ics);
 237:../Libraries/XMCLib/src/xmc_math.c **** 
 238:../Libraries/XMCLib/src/xmc_math.c ****   return ((remainder << 32) | quot);
 571              	 .loc 1 238 22
 572 0054 396A     	 ldr r1,[r7,#32]
 573 0056 0B00     	 lsls r3,r1,#0
 574 0058 0021     	 movs r1,#0
 575 005a 0A00     	 movs r2,r1
 576              	 .loc 1 238 29
 577 005c B969     	 ldr r1,[r7,#24]
 578 005e 1143     	 orrs r1,r2
 579 0060 0C00     	 movs r4,r1
 580 0062 F969     	 ldr r1,[r7,#28]
 581 0064 1943     	 orrs r1,r3
 582 0066 0D00     	 movs r5,r1
 583 0068 2200     	 movs r2,r4
 584 006a 2B00     	 movs r3,r5
 239:../Libraries/XMCLib/src/xmc_math.c **** }
 585              	 .loc 1 239 1
 586 006c 1000     	 movs r0,r2
 587 006e 1900     	 movs r1,r3
 588 0070 BD46     	 mov sp,r7
 589 0072 0CB0     	 add sp,sp,#48
 590              	 
 591 0074 B0BD     	 pop {r4,r5,r7,pc}
 592              	.L36:
 593 0076 C046     	 .align 2
 594              	.L35:
 595 0078 00000340 	 .word 1073938432
 596              	 .cfi_endproc
 597              	.LFE83:
 599              	 .section .text.__aeabi_idivmod,"ax",%progbits
 600              	 .align 1
 601              	 .global __aeabi_idivmod
 602              	 .syntax unified
 603              	 .code 16
 604              	 .thumb_func
 605              	 .fpu softvfp
 607              	__aeabi_idivmod:
 608              	.LFB84:
 240:../Libraries/XMCLib/src/xmc_math.c **** 
 241:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs signed integer division modulo */
 242:../Libraries/XMCLib/src/xmc_math.c **** int64_t __aeabi_idivmod(int32_t dividend, int32_t divisor)
 243:../Libraries/XMCLib/src/xmc_math.c **** {
 609              	 .loc 1 243 1
 610              	 .cfi_startproc
 611              	 
 612              	 
 613 0000 B0B5     	 push {r4,r5,r7,lr}
 614              	.LCFI18:
 615              	 .cfi_def_cfa_offset 16
 616              	 .cfi_offset 4,-16
 617              	 .cfi_offset 5,-12
 618              	 .cfi_offset 7,-8
 619              	 .cfi_offset 14,-4
 620 0002 8CB0     	 sub sp,sp,#48
 621              	.LCFI19:
 622              	 .cfi_def_cfa_offset 64
 623 0004 00AF     	 add r7,sp,#0
 624              	.LCFI20:
 625              	 .cfi_def_cfa_register 7
 626 0006 7860     	 str r0,[r7,#4]
 627 0008 3960     	 str r1,[r7]
 628              	.LBB78:
 629              	.LBB79:
 630              	.LBB80:
 631              	.LBB81:
 386:..//Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 632              	 .loc 2 386 3
 633              	 .syntax divided
 634              	
 635 000a EFF31081 	 MRS r1,primask
 636              	
 637              	 .thumb
 638              	 .syntax unified
 639 000e F960     	 str r1,[r7,#12]
 387:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 640              	 .loc 2 387 9
 641 0010 F968     	 ldr r1,[r7,#12]
 642              	.LBE81:
 643              	.LBE80:
 117:../Libraries/XMCLib/src/xmc_math.c ****   __disable_irq ();
 644              	 .loc 1 117 12
 645 0012 B960     	 str r1,[r7,#8]
 646              	.LBB82:
 647              	.LBB83:
 142:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 648              	 .loc 2 142 3
 649              	 .syntax divided
 650              	
 651 0014 72B6     	 cpsid i
 652              	
 143:..//Libraries/CMSIS/Include/cmsis_gcc.h **** 
 653              	 .loc 2 143 1
 654              	 .thumb
 655              	 .syntax unified
 656 0016 C046     	 nop
 657              	.LBE83:
 658              	.LBE82:
 119:../Libraries/XMCLib/src/xmc_math.c **** }
 659              	 .loc 1 119 10
 660 0018 B968     	 ldr r1,[r7,#8]
 661              	.LBE79:
 662              	.LBE78:
 244:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t remainder;
 245:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t quot;
 246:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t ics;
 247:../Libraries/XMCLib/src/xmc_math.c ****   ics = critical_section_enter();
 663              	 .loc 1 247 9
 664 001a F962     	 str r1,[r7,#44]
 248:../Libraries/XMCLib/src/xmc_math.c ****   
 249:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
 665              	 .loc 1 249 7
 666 001c 1649     	 ldr r1,.L41
 667              	 .loc 1 249 17
 668 001e 0020     	 movs r0,#0
 669 0020 4863     	 str r0,[r1,#52]
 250:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 670              	 .loc 1 250 7
 671 0022 1549     	 ldr r1,.L41
 672              	 .loc 1 250 17
 673 0024 7868     	 ldr r0,[r7,#4]
 674 0026 0862     	 str r0,[r1,#32]
 251:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 675              	 .loc 1 251 7
 676 0028 1349     	 ldr r1,.L41
 677              	 .loc 1 251 17
 678 002a 3868     	 ldr r0,[r7]
 679 002c 4862     	 str r0,[r1,#36]
 252:../Libraries/XMCLib/src/xmc_math.c **** 
 253:../Libraries/XMCLib/src/xmc_math.c ****   remainder = (uint64_t)MATH->RMD;;
 680              	 .loc 1 253 29
 681 002e 1249     	 ldr r1,.L41
 682 0030 C96A     	 ldr r1,[r1,#44]
 683              	 .loc 1 253 13
 684 0032 3962     	 str r1,[r7,#32]
 685 0034 0021     	 movs r1,#0
 686 0036 7962     	 str r1,[r7,#36]
 254:../Libraries/XMCLib/src/xmc_math.c ****   quot    = (uint64_t)MATH->QUOT;
 687              	 .loc 1 254 27
 688 0038 0F49     	 ldr r1,.L41
 689 003a 896A     	 ldr r1,[r1,#40]
 690              	 .loc 1 254 11
 691 003c B961     	 str r1,[r7,#24]
 692 003e 0021     	 movs r1,#0
 693 0040 F961     	 str r1,[r7,#28]
 694 0042 F96A     	 ldr r1,[r7,#44]
 695 0044 7961     	 str r1,[r7,#20]
 696 0046 7969     	 ldr r1,[r7,#20]
 697 0048 3961     	 str r1,[r7,#16]
 698              	.LBB84:
 699              	.LBB85:
 700              	.LBB86:
 701              	.LBB87:
 414:..//Libraries/CMSIS/Include/cmsis_gcc.h **** }
 702              	 .loc 2 414 3
 703 004a 3969     	 ldr r1,[r7,#16]
 704              	 .syntax divided
 705              	
 706 004c 81F31088 	 MSR primask,r1
 707              	
 708              	 .loc 2 415 1
 709              	 .thumb
 710              	 .syntax unified
 711 0050 C046     	 nop
 712              	.LBE87:
 713              	.LBE86:
 125:../Libraries/XMCLib/src/xmc_math.c **** 
 714              	 .loc 1 125 1
 715 0052 C046     	 nop
 716              	.LBE85:
 717              	.LBE84:
 255:../Libraries/XMCLib/src/xmc_math.c **** 
 256:../Libraries/XMCLib/src/xmc_math.c ****   critical_section_exit(ics);
 257:../Libraries/XMCLib/src/xmc_math.c **** 
 258:../Libraries/XMCLib/src/xmc_math.c ****   return ((int64_t)((remainder << 32) | quot));
 718              	 .loc 1 258 32
 719 0054 396A     	 ldr r1,[r7,#32]
 720 0056 0B00     	 lsls r3,r1,#0
 721 0058 0021     	 movs r1,#0
 722 005a 0A00     	 movs r2,r1
 723              	 .loc 1 258 39
 724 005c B969     	 ldr r1,[r7,#24]
 725 005e 1143     	 orrs r1,r2
 726 0060 0C00     	 movs r4,r1
 727 0062 F969     	 ldr r1,[r7,#28]
 728 0064 1943     	 orrs r1,r3
 729 0066 0D00     	 movs r5,r1
 730              	 .loc 1 258 11
 731 0068 2200     	 movs r2,r4
 732 006a 2B00     	 movs r3,r5
 259:../Libraries/XMCLib/src/xmc_math.c **** }
 733              	 .loc 1 259 1
 734 006c 1000     	 movs r0,r2
 735 006e 1900     	 movs r1,r3
 736 0070 BD46     	 mov sp,r7
 737 0072 0CB0     	 add sp,sp,#48
 738              	 
 739 0074 B0BD     	 pop {r4,r5,r7,pc}
 740              	.L42:
 741 0076 C046     	 .align 2
 742              	.L41:
 743 0078 00000340 	 .word 1073938432
 744              	 .cfi_endproc
 745              	.LFE84:
 747              	 .section .text.XMC_MATH_CORDIC_Cos,"ax",%progbits
 748              	 .align 1
 749              	 .global XMC_MATH_CORDIC_Cos
 750              	 .syntax unified
 751              	 .code 16
 752              	 .thumb_func
 753              	 .fpu softvfp
 755              	XMC_MATH_CORDIC_Cos:
 756              	.LFB85:
 260:../Libraries/XMCLib/src/xmc_math.c **** #endif
 261:../Libraries/XMCLib/src/xmc_math.c **** 
 262:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 263:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - Blocking functions
 264:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 265:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the cosine of a given angle in radians */
 266:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_23_t XMC_MATH_CORDIC_Cos(XMC_MATH_Q0_23_t angle_in_radians)
 267:../Libraries/XMCLib/src/xmc_math.c **** {
 757              	 .loc 1 267 1
 758              	 .cfi_startproc
 759              	 
 760              	 
 761 0000 80B5     	 push {r7,lr}
 762              	.LCFI21:
 763              	 .cfi_def_cfa_offset 8
 764              	 .cfi_offset 7,-8
 765              	 .cfi_offset 14,-4
 766 0002 84B0     	 sub sp,sp,#16
 767              	.LCFI22:
 768              	 .cfi_def_cfa_offset 24
 769 0004 00AF     	 add r7,sp,#0
 770              	.LCFI23:
 771              	 .cfi_def_cfa_register 7
 772 0006 7860     	 str r0,[r7,#4]
 268:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 269:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 773              	 .loc 1 269 7
 774 0008 0C4B     	 ldr r3,.L45
 775              	 .loc 1 269 15
 776 000a 0022     	 movs r2,#0
 777 000c 1A64     	 str r2,[r3,#64]
 270:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 778              	 .loc 1 270 7
 779 000e 0B4B     	 ldr r3,.L45
 780              	 .loc 1 270 15
 781 0010 0A22     	 movs r2,#10
 782 0012 5A64     	 str r2,[r3,#68]
 271:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 272:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 783              	 .loc 1 272 18
 784 0014 7A68     	 ldr r2,[r7,#4]
 785              	 .loc 1 272 7
 786 0016 094B     	 ldr r3,.L45
 787              	 .loc 1 272 47
 788 0018 1202     	 lsls r2,r2,#8
 789              	 .loc 1 272 15
 790 001a 1A65     	 str r2,[r3,#80]
 273:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U;  /* Clear register */
 791              	 .loc 1 273 7
 792 001c 074B     	 ldr r3,.L45
 793              	 .loc 1 273 15
 794 001e 0022     	 movs r2,#0
 795 0020 DA64     	 str r2,[r3,#76]
 274:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 796              	 .loc 1 274 7
 797 0022 064B     	 ldr r3,.L45
 798              	 .loc 1 274 15
 799 0024 064A     	 ldr r2,.L45+4
 800 0026 9A64     	 str r2,[r3,#72]
 275:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRX) >> MATH_CORRX_RESULT_Pos;
 801              	 .loc 1 275 31
 802 0028 044B     	 ldr r3,.L45
 803 002a 5B6D     	 ldr r3,[r3,#84]
 804              	 .loc 1 275 15
 805 002c 1B12     	 asrs r3,r3,#8
 806 002e FB60     	 str r3,[r7,#12]
 276:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_23_t) result);
 807              	 .loc 1 276 11
 808 0030 FB68     	 ldr r3,[r7,#12]
 277:../Libraries/XMCLib/src/xmc_math.c **** }
 809              	 .loc 1 277 1
 810 0032 1800     	 movs r0,r3
 811 0034 BD46     	 mov sp,r7
 812 0036 04B0     	 add sp,sp,#16
 813              	 
 814 0038 80BD     	 pop {r7,pc}
 815              	.L46:
 816 003a C046     	 .align 2
 817              	.L45:
 818 003c 00000340 	 .word 1073938432
 819 0040 0076BA4D 	 .word 1304065536
 820              	 .cfi_endproc
 821              	.LFE85:
 823              	 .section .text.XMC_MATH_CORDIC_Sin,"ax",%progbits
 824              	 .align 1
 825              	 .global XMC_MATH_CORDIC_Sin
 826              	 .syntax unified
 827              	 .code 16
 828              	 .thumb_func
 829              	 .fpu softvfp
 831              	XMC_MATH_CORDIC_Sin:
 832              	.LFB86:
 278:../Libraries/XMCLib/src/xmc_math.c **** 
 279:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the sine of a given angle in radians */
 280:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_23_t XMC_MATH_CORDIC_Sin(XMC_MATH_Q0_23_t angle_in_radians)
 281:../Libraries/XMCLib/src/xmc_math.c **** {
 833              	 .loc 1 281 1
 834              	 .cfi_startproc
 835              	 
 836              	 
 837 0000 80B5     	 push {r7,lr}
 838              	.LCFI24:
 839              	 .cfi_def_cfa_offset 8
 840              	 .cfi_offset 7,-8
 841              	 .cfi_offset 14,-4
 842 0002 84B0     	 sub sp,sp,#16
 843              	.LCFI25:
 844              	 .cfi_def_cfa_offset 24
 845 0004 00AF     	 add r7,sp,#0
 846              	.LCFI26:
 847              	 .cfi_def_cfa_register 7
 848 0006 7860     	 str r0,[r7,#4]
 282:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 283:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 849              	 .loc 1 283 7
 850 0008 0C4B     	 ldr r3,.L49
 851              	 .loc 1 283 15
 852 000a 0022     	 movs r2,#0
 853 000c 1A64     	 str r2,[r3,#64]
 284:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 854              	 .loc 1 284 7
 855 000e 0B4B     	 ldr r3,.L49
 856              	 .loc 1 284 15
 857 0010 0A22     	 movs r2,#10
 858 0012 5A64     	 str r2,[r3,#68]
 285:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 286:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 859              	 .loc 1 286 18
 860 0014 7A68     	 ldr r2,[r7,#4]
 861              	 .loc 1 286 7
 862 0016 094B     	 ldr r3,.L49
 863              	 .loc 1 286 46
 864 0018 1202     	 lsls r2,r2,#8
 865              	 .loc 1 286 15
 866 001a 1A65     	 str r2,[r3,#80]
 287:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 867              	 .loc 1 287 7
 868 001c 074B     	 ldr r3,.L49
 869              	 .loc 1 287 15
 870 001e 0022     	 movs r2,#0
 871 0020 DA64     	 str r2,[r3,#76]
 288:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 872              	 .loc 1 288 7
 873 0022 064B     	 ldr r3,.L49
 874              	 .loc 1 288 15
 875 0024 064A     	 ldr r2,.L49+4
 876 0026 9A64     	 str r2,[r3,#72]
 289:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRY) >> MATH_CORRY_RESULT_Pos;
 877              	 .loc 1 289 31
 878 0028 044B     	 ldr r3,.L49
 879 002a 9B6D     	 ldr r3,[r3,#88]
 880              	 .loc 1 289 15
 881 002c 1B12     	 asrs r3,r3,#8
 882 002e FB60     	 str r3,[r7,#12]
 290:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_23_t) result);
 883              	 .loc 1 290 11
 884 0030 FB68     	 ldr r3,[r7,#12]
 291:../Libraries/XMCLib/src/xmc_math.c **** }
 885              	 .loc 1 291 1
 886 0032 1800     	 movs r0,r3
 887 0034 BD46     	 mov sp,r7
 888 0036 04B0     	 add sp,sp,#16
 889              	 
 890 0038 80BD     	 pop {r7,pc}
 891              	.L50:
 892 003a C046     	 .align 2
 893              	.L49:
 894 003c 00000340 	 .word 1073938432
 895 0040 0076BA4D 	 .word 1304065536
 896              	 .cfi_endproc
 897              	.LFE86:
 899              	 .section .text.XMC_MATH_CORDIC_Tan,"ax",%progbits
 900              	 .align 1
 901              	 .global XMC_MATH_CORDIC_Tan
 902              	 .syntax unified
 903              	 .code 16
 904              	 .thumb_func
 905              	 .fpu softvfp
 907              	XMC_MATH_CORDIC_Tan:
 908              	.LFB87:
 292:../Libraries/XMCLib/src/xmc_math.c **** 
 293:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the tangent of a given angle in radians */
 294:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_11_t XMC_MATH_CORDIC_Tan(XMC_MATH_Q0_23_t angle_in_radians)
 295:../Libraries/XMCLib/src/xmc_math.c **** {
 909              	 .loc 1 295 1
 910              	 .cfi_startproc
 911              	 
 912              	 
 913 0000 80B5     	 push {r7,lr}
 914              	.LCFI27:
 915              	 .cfi_def_cfa_offset 8
 916              	 .cfi_offset 7,-8
 917              	 .cfi_offset 14,-4
 918 0002 84B0     	 sub sp,sp,#16
 919              	.LCFI28:
 920              	 .cfi_def_cfa_offset 24
 921 0004 00AF     	 add r7,sp,#0
 922              	.LCFI29:
 923              	 .cfi_def_cfa_register 7
 924 0006 7860     	 str r0,[r7,#4]
 296:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 297:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 925              	 .loc 1 297 7
 926 0008 0F4B     	 ldr r3,.L53
 927              	 .loc 1 297 16
 928 000a 1C22     	 movs r2,#28
 929 000c 5A60     	 str r2,[r3,#4]
 298:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 299:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 930              	 .loc 1 299 7
 931 000e 0E4B     	 ldr r3,.L53
 932              	 .loc 1 299 16
 933 0010 B022     	 movs r2,#176
 934 0012 1205     	 lsls r2,r2,#20
 935 0014 5A63     	 str r2,[r3,#52]
 300:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 936              	 .loc 1 300 7
 937 0016 0C4B     	 ldr r3,.L53
 938              	 .loc 1 300 16
 939 0018 0022     	 movs r2,#0
 940 001a 1A64     	 str r2,[r3,#64]
 301:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 941              	 .loc 1 301 7
 942 001c 0A4B     	 ldr r3,.L53
 943              	 .loc 1 301 16
 944 001e 0A22     	 movs r2,#10
 945 0020 5A64     	 str r2,[r3,#68]
 302:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 303:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 946              	 .loc 1 303 19
 947 0022 7A68     	 ldr r2,[r7,#4]
 948              	 .loc 1 303 7
 949 0024 084B     	 ldr r3,.L53
 950              	 .loc 1 303 47
 951 0026 1202     	 lsls r2,r2,#8
 952              	 .loc 1 303 16
 953 0028 1A65     	 str r2,[r3,#80]
 304:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 954              	 .loc 1 304 7
 955 002a 074B     	 ldr r3,.L53
 956              	 .loc 1 304 16
 957 002c 0022     	 movs r2,#0
 958 002e DA64     	 str r2,[r3,#76]
 305:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 959              	 .loc 1 305 7
 960 0030 054B     	 ldr r3,.L53
 961              	 .loc 1 305 16
 962 0032 064A     	 ldr r2,.L53+4
 963 0034 9A64     	 str r2,[r3,#72]
 306:../Libraries/XMCLib/src/xmc_math.c ****   result       = MATH->QUOT;
 964              	 .loc 1 306 22
 965 0036 044B     	 ldr r3,.L53
 966              	 .loc 1 306 16
 967 0038 9B6A     	 ldr r3,[r3,#40]
 968 003a FB60     	 str r3,[r7,#12]
 307:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_11_t) result);
 969              	 .loc 1 307 11
 970 003c FB68     	 ldr r3,[r7,#12]
 308:../Libraries/XMCLib/src/xmc_math.c **** }
 971              	 .loc 1 308 1
 972 003e 1800     	 movs r0,r3
 973 0040 BD46     	 mov sp,r7
 974 0042 04B0     	 add sp,sp,#16
 975              	 
 976 0044 80BD     	 pop {r7,pc}
 977              	.L54:
 978 0046 C046     	 .align 2
 979              	.L53:
 980 0048 00000340 	 .word 1073938432
 981 004c 0076BA4D 	 .word 1304065536
 982              	 .cfi_endproc
 983              	.LFE87:
 985              	 .section .text.XMC_MATH_CORDIC_ArcTan,"ax",%progbits
 986              	 .align 1
 987              	 .global XMC_MATH_CORDIC_ArcTan
 988              	 .syntax unified
 989              	 .code 16
 990              	 .thumb_func
 991              	 .fpu softvfp
 993              	XMC_MATH_CORDIC_ArcTan:
 994              	.LFB88:
 309:../Libraries/XMCLib/src/xmc_math.c **** 
 310:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the arc tangent of a given angle in radians */
 311:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_23_t XMC_MATH_CORDIC_ArcTan(XMC_MATH_Q8_15_t x, XMC_MATH_Q8_15_t y)
 312:../Libraries/XMCLib/src/xmc_math.c **** {
 995              	 .loc 1 312 1
 996              	 .cfi_startproc
 997              	 
 998              	 
 999 0000 80B5     	 push {r7,lr}
 1000              	.LCFI30:
 1001              	 .cfi_def_cfa_offset 8
 1002              	 .cfi_offset 7,-8
 1003              	 .cfi_offset 14,-4
 1004 0002 84B0     	 sub sp,sp,#16
 1005              	.LCFI31:
 1006              	 .cfi_def_cfa_offset 24
 1007 0004 00AF     	 add r7,sp,#0
 1008              	.LCFI32:
 1009              	 .cfi_def_cfa_register 7
 1010 0006 7860     	 str r0,[r7,#4]
 1011 0008 3960     	 str r1,[r7]
 313:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 314:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1012              	 .loc 1 314 7
 1013 000a 0D4B     	 ldr r3,.L57
 1014              	 .loc 1 314 15
 1015 000c 0022     	 movs r2,#0
 1016 000e 1A64     	 str r2,[r3,#64]
 315:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR;
 1017              	 .loc 1 315 7
 1018 0010 0B4B     	 ldr r3,.L57
 1019              	 .loc 1 315 15
 1020 0012 0222     	 movs r2,#2
 1021 0014 5A64     	 str r2,[r3,#68]
 316:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = 0U; /* Clear register */
 1022              	 .loc 1 316 7
 1023 0016 0A4B     	 ldr r3,.L57
 1024              	 .loc 1 316 15
 1025 0018 0022     	 movs r2,#0
 1026 001a 1A65     	 str r2,[r3,#80]
 317:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = ((uint32_t) y) << MATH_CORDY_DATA_Pos;
 1027              	 .loc 1 317 18
 1028 001c 3A68     	 ldr r2,[r7]
 1029              	 .loc 1 317 7
 1030 001e 084B     	 ldr r3,.L57
 1031              	 .loc 1 317 32
 1032 0020 1202     	 lsls r2,r2,#8
 1033              	 .loc 1 317 15
 1034 0022 DA64     	 str r2,[r3,#76]
 318:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = ((uint32_t) x) << MATH_CORDX_DATA_Pos;
 1035              	 .loc 1 318 18
 1036 0024 7A68     	 ldr r2,[r7,#4]
 1037              	 .loc 1 318 7
 1038 0026 064B     	 ldr r3,.L57
 1039              	 .loc 1 318 32
 1040 0028 1202     	 lsls r2,r2,#8
 1041              	 .loc 1 318 15
 1042 002a 9A64     	 str r2,[r3,#72]
 319:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRZ) >> MATH_CORRZ_RESULT_Pos;
 1043              	 .loc 1 319 31
 1044 002c 044B     	 ldr r3,.L57
 1045 002e DB6D     	 ldr r3,[r3,#92]
 1046              	 .loc 1 319 40
 1047 0030 1B12     	 asrs r3,r3,#8
 1048              	 .loc 1 319 15
 1049 0032 FB60     	 str r3,[r7,#12]
 320:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_23_t) result);
 1050              	 .loc 1 320 11
 1051 0034 FB68     	 ldr r3,[r7,#12]
 321:../Libraries/XMCLib/src/xmc_math.c **** }
 1052              	 .loc 1 321 1
 1053 0036 1800     	 movs r0,r3
 1054 0038 BD46     	 mov sp,r7
 1055 003a 04B0     	 add sp,sp,#16
 1056              	 
 1057 003c 80BD     	 pop {r7,pc}
 1058              	.L58:
 1059 003e C046     	 .align 2
 1060              	.L57:
 1061 0040 00000340 	 .word 1073938432
 1062              	 .cfi_endproc
 1063              	.LFE88:
 1065              	 .section .text.XMC_MATH_CORDIC_Cosh,"ax",%progbits
 1066              	 .align 1
 1067              	 .global XMC_MATH_CORDIC_Cosh
 1068              	 .syntax unified
 1069              	 .code 16
 1070              	 .thumb_func
 1071              	 .fpu softvfp
 1073              	XMC_MATH_CORDIC_Cosh:
 1074              	.LFB89:
 322:../Libraries/XMCLib/src/xmc_math.c **** 
 323:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic cosine of a given angle in radians */
 324:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q1_22_t XMC_MATH_CORDIC_Cosh(XMC_MATH_Q0_23_t angle_in_radians)
 325:../Libraries/XMCLib/src/xmc_math.c **** {
 1075              	 .loc 1 325 1
 1076              	 .cfi_startproc
 1077              	 
 1078              	 
 1079 0000 80B5     	 push {r7,lr}
 1080              	.LCFI33:
 1081              	 .cfi_def_cfa_offset 8
 1082              	 .cfi_offset 7,-8
 1083              	 .cfi_offset 14,-4
 1084 0002 84B0     	 sub sp,sp,#16
 1085              	.LCFI34:
 1086              	 .cfi_def_cfa_offset 24
 1087 0004 00AF     	 add r7,sp,#0
 1088              	.LCFI35:
 1089              	 .cfi_def_cfa_register 7
 1090 0006 7860     	 str r0,[r7,#4]
 326:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 327:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1091              	 .loc 1 327 7
 1092 0008 0C4B     	 ldr r3,.L61
 1093              	 .loc 1 327 15
 1094 000a 0022     	 movs r2,#0
 1095 000c 1A64     	 str r2,[r3,#64]
 328:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1096              	 .loc 1 328 7
 1097 000e 0B4B     	 ldr r3,.L61
 1098              	 .loc 1 328 15
 1099 0010 0E22     	 movs r2,#14
 1100 0012 5A64     	 str r2,[r3,#68]
 329:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 330:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1101              	 .loc 1 330 18
 1102 0014 7A68     	 ldr r2,[r7,#4]
 1103              	 .loc 1 330 7
 1104 0016 094B     	 ldr r3,.L61
 1105              	 .loc 1 330 47
 1106 0018 1202     	 lsls r2,r2,#8
 1107              	 .loc 1 330 15
 1108 001a 1A65     	 str r2,[r3,#80]
 331:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 1109              	 .loc 1 331 7
 1110 001c 074B     	 ldr r3,.L61
 1111              	 .loc 1 331 15
 1112 001e 0022     	 movs r2,#0
 1113 0020 DA64     	 str r2,[r3,#76]
 332:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1114              	 .loc 1 332 7
 1115 0022 064B     	 ldr r3,.L61
 1116              	 .loc 1 332 15
 1117 0024 064A     	 ldr r2,.L61+4
 1118 0026 9A64     	 str r2,[r3,#72]
 333:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRX) >> MATH_CORRX_RESULT_Pos;
 1119              	 .loc 1 333 31
 1120 0028 044B     	 ldr r3,.L61
 1121 002a 5B6D     	 ldr r3,[r3,#84]
 1122              	 .loc 1 333 15
 1123 002c 1B12     	 asrs r3,r3,#8
 1124 002e FB60     	 str r3,[r7,#12]
 334:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q1_22_t) result);
 1125              	 .loc 1 334 11
 1126 0030 FB68     	 ldr r3,[r7,#12]
 335:../Libraries/XMCLib/src/xmc_math.c **** }
 1127              	 .loc 1 335 1
 1128 0032 1800     	 movs r0,r3
 1129 0034 BD46     	 mov sp,r7
 1130 0036 04B0     	 add sp,sp,#16
 1131              	 
 1132 0038 80BD     	 pop {r7,pc}
 1133              	.L62:
 1134 003a C046     	 .align 2
 1135              	.L61:
 1136 003c 00000340 	 .word 1073938432
 1137 0040 00A1474D 	 .word 1296539904
 1138              	 .cfi_endproc
 1139              	.LFE89:
 1141              	 .section .text.XMC_MATH_CORDIC_Sinh,"ax",%progbits
 1142              	 .align 1
 1143              	 .global XMC_MATH_CORDIC_Sinh
 1144              	 .syntax unified
 1145              	 .code 16
 1146              	 .thumb_func
 1147              	 .fpu softvfp
 1149              	XMC_MATH_CORDIC_Sinh:
 1150              	.LFB90:
 336:../Libraries/XMCLib/src/xmc_math.c **** 
 337:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic sine of a given angle in radians */
 338:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q1_22_t XMC_MATH_CORDIC_Sinh(XMC_MATH_Q0_23_t angle_in_radians)
 339:../Libraries/XMCLib/src/xmc_math.c **** {
 1151              	 .loc 1 339 1
 1152              	 .cfi_startproc
 1153              	 
 1154              	 
 1155 0000 80B5     	 push {r7,lr}
 1156              	.LCFI36:
 1157              	 .cfi_def_cfa_offset 8
 1158              	 .cfi_offset 7,-8
 1159              	 .cfi_offset 14,-4
 1160 0002 84B0     	 sub sp,sp,#16
 1161              	.LCFI37:
 1162              	 .cfi_def_cfa_offset 24
 1163 0004 00AF     	 add r7,sp,#0
 1164              	.LCFI38:
 1165              	 .cfi_def_cfa_register 7
 1166 0006 7860     	 str r0,[r7,#4]
 340:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 341:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1167              	 .loc 1 341 7
 1168 0008 0C4B     	 ldr r3,.L65
 1169              	 .loc 1 341 15
 1170 000a 0022     	 movs r2,#0
 1171 000c 1A64     	 str r2,[r3,#64]
 342:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1172              	 .loc 1 342 7
 1173 000e 0B4B     	 ldr r3,.L65
 1174              	 .loc 1 342 15
 1175 0010 0E22     	 movs r2,#14
 1176 0012 5A64     	 str r2,[r3,#68]
 343:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 344:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1177              	 .loc 1 344 18
 1178 0014 7A68     	 ldr r2,[r7,#4]
 1179              	 .loc 1 344 7
 1180 0016 094B     	 ldr r3,.L65
 1181              	 .loc 1 344 46
 1182 0018 1202     	 lsls r2,r2,#8
 1183              	 .loc 1 344 15
 1184 001a 1A65     	 str r2,[r3,#80]
 345:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 1185              	 .loc 1 345 7
 1186 001c 074B     	 ldr r3,.L65
 1187              	 .loc 1 345 15
 1188 001e 0022     	 movs r2,#0
 1189 0020 DA64     	 str r2,[r3,#76]
 346:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1190              	 .loc 1 346 7
 1191 0022 064B     	 ldr r3,.L65
 1192              	 .loc 1 346 15
 1193 0024 064A     	 ldr r2,.L65+4
 1194 0026 9A64     	 str r2,[r3,#72]
 347:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRY) >> MATH_CORRY_RESULT_Pos;
 1195              	 .loc 1 347 31
 1196 0028 044B     	 ldr r3,.L65
 1197 002a 9B6D     	 ldr r3,[r3,#88]
 1198              	 .loc 1 347 15
 1199 002c 1B12     	 asrs r3,r3,#8
 1200 002e FB60     	 str r3,[r7,#12]
 348:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q1_22_t) result);
 1201              	 .loc 1 348 11
 1202 0030 FB68     	 ldr r3,[r7,#12]
 349:../Libraries/XMCLib/src/xmc_math.c **** }
 1203              	 .loc 1 349 1
 1204 0032 1800     	 movs r0,r3
 1205 0034 BD46     	 mov sp,r7
 1206 0036 04B0     	 add sp,sp,#16
 1207              	 
 1208 0038 80BD     	 pop {r7,pc}
 1209              	.L66:
 1210 003a C046     	 .align 2
 1211              	.L65:
 1212 003c 00000340 	 .word 1073938432
 1213 0040 00A1474D 	 .word 1296539904
 1214              	 .cfi_endproc
 1215              	.LFE90:
 1217              	 .section .text.XMC_MATH_CORDIC_Tanh,"ax",%progbits
 1218              	 .align 1
 1219              	 .global XMC_MATH_CORDIC_Tanh
 1220              	 .syntax unified
 1221              	 .code 16
 1222              	 .thumb_func
 1223              	 .fpu softvfp
 1225              	XMC_MATH_CORDIC_Tanh:
 1226              	.LFB91:
 350:../Libraries/XMCLib/src/xmc_math.c **** 
 351:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic tangent of a given angle in radians */
 352:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_11_t XMC_MATH_CORDIC_Tanh(XMC_MATH_Q0_23_t angle_in_radians)
 353:../Libraries/XMCLib/src/xmc_math.c **** {
 1227              	 .loc 1 353 1
 1228              	 .cfi_startproc
 1229              	 
 1230              	 
 1231 0000 80B5     	 push {r7,lr}
 1232              	.LCFI39:
 1233              	 .cfi_def_cfa_offset 8
 1234              	 .cfi_offset 7,-8
 1235              	 .cfi_offset 14,-4
 1236 0002 84B0     	 sub sp,sp,#16
 1237              	.LCFI40:
 1238              	 .cfi_def_cfa_offset 24
 1239 0004 00AF     	 add r7,sp,#0
 1240              	.LCFI41:
 1241              	 .cfi_def_cfa_register 7
 1242 0006 7860     	 str r0,[r7,#4]
 354:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 355:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 1243              	 .loc 1 355 7
 1244 0008 0F4B     	 ldr r3,.L69
 1245              	 .loc 1 355 16
 1246 000a 1C22     	 movs r2,#28
 1247 000c 5A60     	 str r2,[r3,#4]
 356:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 357:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 1248              	 .loc 1 357 7
 1249 000e 0E4B     	 ldr r3,.L69
 1250              	 .loc 1 357 16
 1251 0010 B022     	 movs r2,#176
 1252 0012 1205     	 lsls r2,r2,#20
 1253 0014 5A63     	 str r2,[r3,#52]
 358:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 1254              	 .loc 1 358 7
 1255 0016 0C4B     	 ldr r3,.L69
 1256              	 .loc 1 358 16
 1257 0018 0022     	 movs r2,#0
 1258 001a 1A64     	 str r2,[r3,#64]
 359:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1259              	 .loc 1 359 7
 1260 001c 0A4B     	 ldr r3,.L69
 1261              	 .loc 1 359 16
 1262 001e 0E22     	 movs r2,#14
 1263 0020 5A64     	 str r2,[r3,#68]
 360:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 361:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1264              	 .loc 1 361 19
 1265 0022 7A68     	 ldr r2,[r7,#4]
 1266              	 .loc 1 361 7
 1267 0024 084B     	 ldr r3,.L69
 1268              	 .loc 1 361 48
 1269 0026 1202     	 lsls r2,r2,#8
 1270              	 .loc 1 361 16
 1271 0028 1A65     	 str r2,[r3,#80]
 362:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 1272              	 .loc 1 362 7
 1273 002a 074B     	 ldr r3,.L69
 1274              	 .loc 1 362 16
 1275 002c 0022     	 movs r2,#0
 1276 002e DA64     	 str r2,[r3,#76]
 363:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1277              	 .loc 1 363 7
 1278 0030 054B     	 ldr r3,.L69
 1279              	 .loc 1 363 16
 1280 0032 064A     	 ldr r2,.L69+4
 1281 0034 9A64     	 str r2,[r3,#72]
 364:../Libraries/XMCLib/src/xmc_math.c ****   result       = MATH->QUOT;
 1282              	 .loc 1 364 22
 1283 0036 044B     	 ldr r3,.L69
 1284              	 .loc 1 364 16
 1285 0038 9B6A     	 ldr r3,[r3,#40]
 1286 003a FB60     	 str r3,[r7,#12]
 365:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_11_t) result);
 1287              	 .loc 1 365 11
 1288 003c FB68     	 ldr r3,[r7,#12]
 366:../Libraries/XMCLib/src/xmc_math.c **** }
 1289              	 .loc 1 366 1
 1290 003e 1800     	 movs r0,r3
 1291 0040 BD46     	 mov sp,r7
 1292 0042 04B0     	 add sp,sp,#16
 1293              	 
 1294 0044 80BD     	 pop {r7,pc}
 1295              	.L70:
 1296 0046 C046     	 .align 2
 1297              	.L69:
 1298 0048 00000340 	 .word 1073938432
 1299 004c 00A1474D 	 .word 1296539904
 1300              	 .cfi_endproc
 1301              	.LFE91:
 1303              	 .section .text.XMC_MATH_CORDIC_CosNB,"ax",%progbits
 1304              	 .align 1
 1305              	 .global XMC_MATH_CORDIC_CosNB
 1306              	 .syntax unified
 1307              	 .code 16
 1308              	 .thumb_func
 1309              	 .fpu softvfp
 1311              	XMC_MATH_CORDIC_CosNB:
 1312              	.LFB92:
 367:../Libraries/XMCLib/src/xmc_math.c **** 
 368:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 369:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - Non blocking functions
 370:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 371:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the cosine of a given angle in radians */
 372:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_CosNB(XMC_MATH_Q0_23_t angle_in_radians)
 373:../Libraries/XMCLib/src/xmc_math.c **** {
 1313              	 .loc 1 373 1
 1314              	 .cfi_startproc
 1315              	 
 1316              	 
 1317 0000 80B5     	 push {r7,lr}
 1318              	.LCFI42:
 1319              	 .cfi_def_cfa_offset 8
 1320              	 .cfi_offset 7,-8
 1321              	 .cfi_offset 14,-4
 1322 0002 82B0     	 sub sp,sp,#8
 1323              	.LCFI43:
 1324              	 .cfi_def_cfa_offset 16
 1325 0004 00AF     	 add r7,sp,#0
 1326              	.LCFI44:
 1327              	 .cfi_def_cfa_register 7
 1328 0006 7860     	 str r0,[r7,#4]
 374:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1329              	 .loc 1 374 7
 1330 0008 094B     	 ldr r3,.L72
 1331              	 .loc 1 374 15
 1332 000a 0022     	 movs r2,#0
 1333 000c 1A64     	 str r2,[r3,#64]
 375:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 1334              	 .loc 1 375 7
 1335 000e 084B     	 ldr r3,.L72
 1336              	 .loc 1 375 15
 1337 0010 0A22     	 movs r2,#10
 1338 0012 5A64     	 str r2,[r3,#68]
 376:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 377:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1339              	 .loc 1 377 18
 1340 0014 7A68     	 ldr r2,[r7,#4]
 1341              	 .loc 1 377 7
 1342 0016 064B     	 ldr r3,.L72
 1343              	 .loc 1 377 47
 1344 0018 1202     	 lsls r2,r2,#8
 1345              	 .loc 1 377 15
 1346 001a 1A65     	 str r2,[r3,#80]
 378:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U;  /* Clear register */
 1347              	 .loc 1 378 7
 1348 001c 044B     	 ldr r3,.L72
 1349              	 .loc 1 378 15
 1350 001e 0022     	 movs r2,#0
 1351 0020 DA64     	 str r2,[r3,#76]
 379:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 1352              	 .loc 1 379 7
 1353 0022 034B     	 ldr r3,.L72
 1354              	 .loc 1 379 15
 1355 0024 034A     	 ldr r2,.L72+4
 1356 0026 9A64     	 str r2,[r3,#72]
 380:../Libraries/XMCLib/src/xmc_math.c **** }
 1357              	 .loc 1 380 1
 1358 0028 C046     	 nop
 1359 002a BD46     	 mov sp,r7
 1360 002c 02B0     	 add sp,sp,#8
 1361              	 
 1362 002e 80BD     	 pop {r7,pc}
 1363              	.L73:
 1364              	 .align 2
 1365              	.L72:
 1366 0030 00000340 	 .word 1073938432
 1367 0034 0076BA4D 	 .word 1304065536
 1368              	 .cfi_endproc
 1369              	.LFE92:
 1371              	 .section .text.XMC_MATH_CORDIC_SinNB,"ax",%progbits
 1372              	 .align 1
 1373              	 .global XMC_MATH_CORDIC_SinNB
 1374              	 .syntax unified
 1375              	 .code 16
 1376              	 .thumb_func
 1377              	 .fpu softvfp
 1379              	XMC_MATH_CORDIC_SinNB:
 1380              	.LFB93:
 381:../Libraries/XMCLib/src/xmc_math.c **** 
 382:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the sine of a given angle in radians */
 383:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_SinNB(XMC_MATH_Q0_23_t angle_in_radians)
 384:../Libraries/XMCLib/src/xmc_math.c **** {
 1381              	 .loc 1 384 1
 1382              	 .cfi_startproc
 1383              	 
 1384              	 
 1385 0000 80B5     	 push {r7,lr}
 1386              	.LCFI45:
 1387              	 .cfi_def_cfa_offset 8
 1388              	 .cfi_offset 7,-8
 1389              	 .cfi_offset 14,-4
 1390 0002 82B0     	 sub sp,sp,#8
 1391              	.LCFI46:
 1392              	 .cfi_def_cfa_offset 16
 1393 0004 00AF     	 add r7,sp,#0
 1394              	.LCFI47:
 1395              	 .cfi_def_cfa_register 7
 1396 0006 7860     	 str r0,[r7,#4]
 385:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1397              	 .loc 1 385 7
 1398 0008 094B     	 ldr r3,.L75
 1399              	 .loc 1 385 15
 1400 000a 0022     	 movs r2,#0
 1401 000c 1A64     	 str r2,[r3,#64]
 386:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 1402              	 .loc 1 386 7
 1403 000e 084B     	 ldr r3,.L75
 1404              	 .loc 1 386 15
 1405 0010 0A22     	 movs r2,#10
 1406 0012 5A64     	 str r2,[r3,#68]
 387:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 388:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1407              	 .loc 1 388 18
 1408 0014 7A68     	 ldr r2,[r7,#4]
 1409              	 .loc 1 388 7
 1410 0016 064B     	 ldr r3,.L75
 1411              	 .loc 1 388 46
 1412 0018 1202     	 lsls r2,r2,#8
 1413              	 .loc 1 388 15
 1414 001a 1A65     	 str r2,[r3,#80]
 389:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 1415              	 .loc 1 389 7
 1416 001c 044B     	 ldr r3,.L75
 1417              	 .loc 1 389 15
 1418 001e 0022     	 movs r2,#0
 1419 0020 DA64     	 str r2,[r3,#76]
 390:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 1420              	 .loc 1 390 7
 1421 0022 034B     	 ldr r3,.L75
 1422              	 .loc 1 390 15
 1423 0024 034A     	 ldr r2,.L75+4
 1424 0026 9A64     	 str r2,[r3,#72]
 391:../Libraries/XMCLib/src/xmc_math.c **** }
 1425              	 .loc 1 391 1
 1426 0028 C046     	 nop
 1427 002a BD46     	 mov sp,r7
 1428 002c 02B0     	 add sp,sp,#8
 1429              	 
 1430 002e 80BD     	 pop {r7,pc}
 1431              	.L76:
 1432              	 .align 2
 1433              	.L75:
 1434 0030 00000340 	 .word 1073938432
 1435 0034 0076BA4D 	 .word 1304065536
 1436              	 .cfi_endproc
 1437              	.LFE93:
 1439              	 .section .text.XMC_MATH_CORDIC_TanNB,"ax",%progbits
 1440              	 .align 1
 1441              	 .global XMC_MATH_CORDIC_TanNB
 1442              	 .syntax unified
 1443              	 .code 16
 1444              	 .thumb_func
 1445              	 .fpu softvfp
 1447              	XMC_MATH_CORDIC_TanNB:
 1448              	.LFB94:
 392:../Libraries/XMCLib/src/xmc_math.c **** 
 393:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the tangent of a given angle in radians */
 394:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_TanNB(XMC_MATH_Q0_23_t angle_in_radians)
 395:../Libraries/XMCLib/src/xmc_math.c **** {
 1449              	 .loc 1 395 1
 1450              	 .cfi_startproc
 1451              	 
 1452              	 
 1453 0000 80B5     	 push {r7,lr}
 1454              	.LCFI48:
 1455              	 .cfi_def_cfa_offset 8
 1456              	 .cfi_offset 7,-8
 1457              	 .cfi_offset 14,-4
 1458 0002 82B0     	 sub sp,sp,#8
 1459              	.LCFI49:
 1460              	 .cfi_def_cfa_offset 16
 1461 0004 00AF     	 add r7,sp,#0
 1462              	.LCFI50:
 1463              	 .cfi_def_cfa_register 7
 1464 0006 7860     	 str r0,[r7,#4]
 396:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 1465              	 .loc 1 396 7
 1466 0008 0D4B     	 ldr r3,.L78
 1467              	 .loc 1 396 16
 1468 000a 1C22     	 movs r2,#28
 1469 000c 5A60     	 str r2,[r3,#4]
 397:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 398:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 1470              	 .loc 1 398 7
 1471 000e 0C4B     	 ldr r3,.L78
 1472              	 .loc 1 398 16
 1473 0010 B022     	 movs r2,#176
 1474 0012 1205     	 lsls r2,r2,#20
 1475 0014 5A63     	 str r2,[r3,#52]
 399:../Libraries/XMCLib/src/xmc_math.c **** 
 400:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 1476              	 .loc 1 400 7
 1477 0016 0A4B     	 ldr r3,.L78
 1478              	 .loc 1 400 16
 1479 0018 0022     	 movs r2,#0
 1480 001a 1A64     	 str r2,[r3,#64]
 401:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 1481              	 .loc 1 401 7
 1482 001c 084B     	 ldr r3,.L78
 1483              	 .loc 1 401 16
 1484 001e 0A22     	 movs r2,#10
 1485 0020 5A64     	 str r2,[r3,#68]
 402:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 403:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1486              	 .loc 1 403 19
 1487 0022 7A68     	 ldr r2,[r7,#4]
 1488              	 .loc 1 403 7
 1489 0024 064B     	 ldr r3,.L78
 1490              	 .loc 1 403 47
 1491 0026 1202     	 lsls r2,r2,#8
 1492              	 .loc 1 403 16
 1493 0028 1A65     	 str r2,[r3,#80]
 404:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 1494              	 .loc 1 404 7
 1495 002a 054B     	 ldr r3,.L78
 1496              	 .loc 1 404 16
 1497 002c 0022     	 movs r2,#0
 1498 002e DA64     	 str r2,[r3,#76]
 405:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 1499              	 .loc 1 405 7
 1500 0030 034B     	 ldr r3,.L78
 1501              	 .loc 1 405 16
 1502 0032 044A     	 ldr r2,.L78+4
 1503 0034 9A64     	 str r2,[r3,#72]
 406:../Libraries/XMCLib/src/xmc_math.c **** }
 1504              	 .loc 1 406 1
 1505 0036 C046     	 nop
 1506 0038 BD46     	 mov sp,r7
 1507 003a 02B0     	 add sp,sp,#8
 1508              	 
 1509 003c 80BD     	 pop {r7,pc}
 1510              	.L79:
 1511 003e C046     	 .align 2
 1512              	.L78:
 1513 0040 00000340 	 .word 1073938432
 1514 0044 0076BA4D 	 .word 1304065536
 1515              	 .cfi_endproc
 1516              	.LFE94:
 1518              	 .section .text.XMC_MATH_CORDIC_ArcTanNB,"ax",%progbits
 1519              	 .align 1
 1520              	 .global XMC_MATH_CORDIC_ArcTanNB
 1521              	 .syntax unified
 1522              	 .code 16
 1523              	 .thumb_func
 1524              	 .fpu softvfp
 1526              	XMC_MATH_CORDIC_ArcTanNB:
 1527              	.LFB95:
 407:../Libraries/XMCLib/src/xmc_math.c **** 
 408:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the arc tangent of a given value */
 409:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_ArcTanNB(XMC_MATH_Q8_15_t x, XMC_MATH_Q8_15_t y)
 410:../Libraries/XMCLib/src/xmc_math.c **** {
 1528              	 .loc 1 410 1
 1529              	 .cfi_startproc
 1530              	 
 1531              	 
 1532 0000 80B5     	 push {r7,lr}
 1533              	.LCFI51:
 1534              	 .cfi_def_cfa_offset 8
 1535              	 .cfi_offset 7,-8
 1536              	 .cfi_offset 14,-4
 1537 0002 82B0     	 sub sp,sp,#8
 1538              	.LCFI52:
 1539              	 .cfi_def_cfa_offset 16
 1540 0004 00AF     	 add r7,sp,#0
 1541              	.LCFI53:
 1542              	 .cfi_def_cfa_register 7
 1543 0006 7860     	 str r0,[r7,#4]
 1544 0008 3960     	 str r1,[r7]
 411:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1545              	 .loc 1 411 7
 1546 000a 0A4B     	 ldr r3,.L81
 1547              	 .loc 1 411 15
 1548 000c 0022     	 movs r2,#0
 1549 000e 1A64     	 str r2,[r3,#64]
 412:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR;
 1550              	 .loc 1 412 7
 1551 0010 084B     	 ldr r3,.L81
 1552              	 .loc 1 412 15
 1553 0012 0222     	 movs r2,#2
 1554 0014 5A64     	 str r2,[r3,#68]
 413:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = 0U; /* Clear register */
 1555              	 .loc 1 413 7
 1556 0016 074B     	 ldr r3,.L81
 1557              	 .loc 1 413 15
 1558 0018 0022     	 movs r2,#0
 1559 001a 1A65     	 str r2,[r3,#80]
 414:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = ((uint32_t) y) << MATH_CORDY_DATA_Pos;
 1560              	 .loc 1 414 18
 1561 001c 3A68     	 ldr r2,[r7]
 1562              	 .loc 1 414 7
 1563 001e 054B     	 ldr r3,.L81
 1564              	 .loc 1 414 32
 1565 0020 1202     	 lsls r2,r2,#8
 1566              	 .loc 1 414 15
 1567 0022 DA64     	 str r2,[r3,#76]
 415:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = ((uint32_t) x) << MATH_CORDX_DATA_Pos;
 1568              	 .loc 1 415 18
 1569 0024 7A68     	 ldr r2,[r7,#4]
 1570              	 .loc 1 415 7
 1571 0026 034B     	 ldr r3,.L81
 1572              	 .loc 1 415 32
 1573 0028 1202     	 lsls r2,r2,#8
 1574              	 .loc 1 415 15
 1575 002a 9A64     	 str r2,[r3,#72]
 416:../Libraries/XMCLib/src/xmc_math.c **** }
 1576              	 .loc 1 416 1
 1577 002c C046     	 nop
 1578 002e BD46     	 mov sp,r7
 1579 0030 02B0     	 add sp,sp,#8
 1580              	 
 1581 0032 80BD     	 pop {r7,pc}
 1582              	.L82:
 1583              	 .align 2
 1584              	.L81:
 1585 0034 00000340 	 .word 1073938432
 1586              	 .cfi_endproc
 1587              	.LFE95:
 1589              	 .section .text.XMC_MATH_CORDIC_CoshNB,"ax",%progbits
 1590              	 .align 1
 1591              	 .global XMC_MATH_CORDIC_CoshNB
 1592              	 .syntax unified
 1593              	 .code 16
 1594              	 .thumb_func
 1595              	 .fpu softvfp
 1597              	XMC_MATH_CORDIC_CoshNB:
 1598              	.LFB96:
 417:../Libraries/XMCLib/src/xmc_math.c **** 
 418:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic cosine of a given angle in radians */
 419:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_CoshNB(XMC_MATH_Q0_23_t angle_in_radians)
 420:../Libraries/XMCLib/src/xmc_math.c **** {
 1599              	 .loc 1 420 1
 1600              	 .cfi_startproc
 1601              	 
 1602              	 
 1603 0000 80B5     	 push {r7,lr}
 1604              	.LCFI54:
 1605              	 .cfi_def_cfa_offset 8
 1606              	 .cfi_offset 7,-8
 1607              	 .cfi_offset 14,-4
 1608 0002 82B0     	 sub sp,sp,#8
 1609              	.LCFI55:
 1610              	 .cfi_def_cfa_offset 16
 1611 0004 00AF     	 add r7,sp,#0
 1612              	.LCFI56:
 1613              	 .cfi_def_cfa_register 7
 1614 0006 7860     	 str r0,[r7,#4]
 421:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1615              	 .loc 1 421 7
 1616 0008 094B     	 ldr r3,.L84
 1617              	 .loc 1 421 15
 1618 000a 0022     	 movs r2,#0
 1619 000c 1A64     	 str r2,[r3,#64]
 422:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1620              	 .loc 1 422 7
 1621 000e 084B     	 ldr r3,.L84
 1622              	 .loc 1 422 15
 1623 0010 0E22     	 movs r2,#14
 1624 0012 5A64     	 str r2,[r3,#68]
 423:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 424:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1625              	 .loc 1 424 18
 1626 0014 7A68     	 ldr r2,[r7,#4]
 1627              	 .loc 1 424 7
 1628 0016 064B     	 ldr r3,.L84
 1629              	 .loc 1 424 46
 1630 0018 1202     	 lsls r2,r2,#8
 1631              	 .loc 1 424 15
 1632 001a 1A65     	 str r2,[r3,#80]
 425:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 1633              	 .loc 1 425 7
 1634 001c 044B     	 ldr r3,.L84
 1635              	 .loc 1 425 15
 1636 001e 0022     	 movs r2,#0
 1637 0020 DA64     	 str r2,[r3,#76]
 426:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1638              	 .loc 1 426 7
 1639 0022 034B     	 ldr r3,.L84
 1640              	 .loc 1 426 15
 1641 0024 034A     	 ldr r2,.L84+4
 1642 0026 9A64     	 str r2,[r3,#72]
 427:../Libraries/XMCLib/src/xmc_math.c **** }
 1643              	 .loc 1 427 1
 1644 0028 C046     	 nop
 1645 002a BD46     	 mov sp,r7
 1646 002c 02B0     	 add sp,sp,#8
 1647              	 
 1648 002e 80BD     	 pop {r7,pc}
 1649              	.L85:
 1650              	 .align 2
 1651              	.L84:
 1652 0030 00000340 	 .word 1073938432
 1653 0034 00A1474D 	 .word 1296539904
 1654              	 .cfi_endproc
 1655              	.LFE96:
 1657              	 .section .text.XMC_MATH_CORDIC_SinhNB,"ax",%progbits
 1658              	 .align 1
 1659              	 .global XMC_MATH_CORDIC_SinhNB
 1660              	 .syntax unified
 1661              	 .code 16
 1662              	 .thumb_func
 1663              	 .fpu softvfp
 1665              	XMC_MATH_CORDIC_SinhNB:
 1666              	.LFB97:
 428:../Libraries/XMCLib/src/xmc_math.c **** 
 429:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic sine of a given angle in radians */
 430:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_SinhNB(XMC_MATH_Q0_23_t angle_in_radians)
 431:../Libraries/XMCLib/src/xmc_math.c **** {
 1667              	 .loc 1 431 1
 1668              	 .cfi_startproc
 1669              	 
 1670              	 
 1671 0000 80B5     	 push {r7,lr}
 1672              	.LCFI57:
 1673              	 .cfi_def_cfa_offset 8
 1674              	 .cfi_offset 7,-8
 1675              	 .cfi_offset 14,-4
 1676 0002 82B0     	 sub sp,sp,#8
 1677              	.LCFI58:
 1678              	 .cfi_def_cfa_offset 16
 1679 0004 00AF     	 add r7,sp,#0
 1680              	.LCFI59:
 1681              	 .cfi_def_cfa_register 7
 1682 0006 7860     	 str r0,[r7,#4]
 432:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1683              	 .loc 1 432 7
 1684 0008 094B     	 ldr r3,.L87
 1685              	 .loc 1 432 15
 1686 000a 0022     	 movs r2,#0
 1687 000c 1A64     	 str r2,[r3,#64]
 433:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1688              	 .loc 1 433 7
 1689 000e 084B     	 ldr r3,.L87
 1690              	 .loc 1 433 15
 1691 0010 0E22     	 movs r2,#14
 1692 0012 5A64     	 str r2,[r3,#68]
 434:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 435:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1693              	 .loc 1 435 18
 1694 0014 7A68     	 ldr r2,[r7,#4]
 1695              	 .loc 1 435 7
 1696 0016 064B     	 ldr r3,.L87
 1697              	 .loc 1 435 46
 1698 0018 1202     	 lsls r2,r2,#8
 1699              	 .loc 1 435 15
 1700 001a 1A65     	 str r2,[r3,#80]
 436:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 1701              	 .loc 1 436 7
 1702 001c 044B     	 ldr r3,.L87
 1703              	 .loc 1 436 15
 1704 001e 0022     	 movs r2,#0
 1705 0020 DA64     	 str r2,[r3,#76]
 437:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1706              	 .loc 1 437 7
 1707 0022 034B     	 ldr r3,.L87
 1708              	 .loc 1 437 15
 1709 0024 034A     	 ldr r2,.L87+4
 1710 0026 9A64     	 str r2,[r3,#72]
 438:../Libraries/XMCLib/src/xmc_math.c **** }
 1711              	 .loc 1 438 1
 1712 0028 C046     	 nop
 1713 002a BD46     	 mov sp,r7
 1714 002c 02B0     	 add sp,sp,#8
 1715              	 
 1716 002e 80BD     	 pop {r7,pc}
 1717              	.L88:
 1718              	 .align 2
 1719              	.L87:
 1720 0030 00000340 	 .word 1073938432
 1721 0034 00A1474D 	 .word 1296539904
 1722              	 .cfi_endproc
 1723              	.LFE97:
 1725              	 .section .text.XMC_MATH_CORDIC_TanhNB,"ax",%progbits
 1726              	 .align 1
 1727              	 .global XMC_MATH_CORDIC_TanhNB
 1728              	 .syntax unified
 1729              	 .code 16
 1730              	 .thumb_func
 1731              	 .fpu softvfp
 1733              	XMC_MATH_CORDIC_TanhNB:
 1734              	.LFB98:
 439:../Libraries/XMCLib/src/xmc_math.c **** 
 440:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic tangent of a given angle in radians */
 441:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_TanhNB(XMC_MATH_Q0_23_t angle_in_radians)
 442:../Libraries/XMCLib/src/xmc_math.c **** {
 1735              	 .loc 1 442 1
 1736              	 .cfi_startproc
 1737              	 
 1738              	 
 1739 0000 80B5     	 push {r7,lr}
 1740              	.LCFI60:
 1741              	 .cfi_def_cfa_offset 8
 1742              	 .cfi_offset 7,-8
 1743              	 .cfi_offset 14,-4
 1744 0002 82B0     	 sub sp,sp,#8
 1745              	.LCFI61:
 1746              	 .cfi_def_cfa_offset 16
 1747 0004 00AF     	 add r7,sp,#0
 1748              	.LCFI62:
 1749              	 .cfi_def_cfa_register 7
 1750 0006 7860     	 str r0,[r7,#4]
 443:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 1751              	 .loc 1 443 7
 1752 0008 0D4B     	 ldr r3,.L90
 1753              	 .loc 1 443 16
 1754 000a 1C22     	 movs r2,#28
 1755 000c 5A60     	 str r2,[r3,#4]
 444:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 445:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 1756              	 .loc 1 445 7
 1757 000e 0C4B     	 ldr r3,.L90
 1758              	 .loc 1 445 16
 1759 0010 B022     	 movs r2,#176
 1760 0012 1205     	 lsls r2,r2,#20
 1761 0014 5A63     	 str r2,[r3,#52]
 446:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 1762              	 .loc 1 446 7
 1763 0016 0A4B     	 ldr r3,.L90
 1764              	 .loc 1 446 16
 1765 0018 0022     	 movs r2,#0
 1766 001a 1A64     	 str r2,[r3,#64]
 447:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 1767              	 .loc 1 447 7
 1768 001c 084B     	 ldr r3,.L90
 1769              	 .loc 1 447 16
 1770 001e 0E22     	 movs r2,#14
 1771 0020 5A64     	 str r2,[r3,#68]
 448:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 449:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 1772              	 .loc 1 449 19
 1773 0022 7A68     	 ldr r2,[r7,#4]
 1774              	 .loc 1 449 7
 1775 0024 064B     	 ldr r3,.L90
 1776              	 .loc 1 449 48
 1777 0026 1202     	 lsls r2,r2,#8
 1778              	 .loc 1 449 16
 1779 0028 1A65     	 str r2,[r3,#80]
 450:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 1780              	 .loc 1 450 7
 1781 002a 054B     	 ldr r3,.L90
 1782              	 .loc 1 450 16
 1783 002c 0022     	 movs r2,#0
 1784 002e DA64     	 str r2,[r3,#76]
 451:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 1785              	 .loc 1 451 7
 1786 0030 034B     	 ldr r3,.L90
 1787              	 .loc 1 451 16
 1788 0032 044A     	 ldr r2,.L90+4
 1789 0034 9A64     	 str r2,[r3,#72]
 452:../Libraries/XMCLib/src/xmc_math.c **** }
 1790              	 .loc 1 452 1
 1791 0036 C046     	 nop
 1792 0038 BD46     	 mov sp,r7
 1793 003a 02B0     	 add sp,sp,#8
 1794              	 
 1795 003c 80BD     	 pop {r7,pc}
 1796              	.L91:
 1797 003e C046     	 .align 2
 1798              	.L90:
 1799 0040 00000340 	 .word 1073938432
 1800 0044 00A1474D 	 .word 1296539904
 1801              	 .cfi_endproc
 1802              	.LFE98:
 1804              	 .section .text.XMC_MATH_DIV_UnsignedDivNB,"ax",%progbits
 1805              	 .align 1
 1806              	 .global XMC_MATH_DIV_UnsignedDivNB
 1807              	 .syntax unified
 1808              	 .code 16
 1809              	 .thumb_func
 1810              	 .fpu softvfp
 1812              	XMC_MATH_DIV_UnsignedDivNB:
 1813              	.LFB99:
 453:../Libraries/XMCLib/src/xmc_math.c **** 
 454:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs division for given two unsigned arguments */
 455:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_UnsignedDivNB(uint32_t dividend, uint32_t divisor)
 456:../Libraries/XMCLib/src/xmc_math.c **** {
 1814              	 .loc 1 456 1
 1815              	 .cfi_startproc
 1816              	 
 1817              	 
 1818 0000 80B5     	 push {r7,lr}
 1819              	.LCFI63:
 1820              	 .cfi_def_cfa_offset 8
 1821              	 .cfi_offset 7,-8
 1822              	 .cfi_offset 14,-4
 1823 0002 82B0     	 sub sp,sp,#8
 1824              	.LCFI64:
 1825              	 .cfi_def_cfa_offset 16
 1826 0004 00AF     	 add r7,sp,#0
 1827              	.LCFI65:
 1828              	 .cfi_def_cfa_register 7
 1829 0006 7860     	 str r0,[r7,#4]
 1830 0008 3960     	 str r1,[r7]
 457:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_UNSIGNED_DIVISION;
 1831              	 .loc 1 457 7
 1832 000a 064B     	 ldr r3,.L93
 1833              	 .loc 1 457 16
 1834 000c 0422     	 movs r2,#4
 1835 000e 5A63     	 str r2,[r3,#52]
 458:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 1836              	 .loc 1 458 7
 1837 0010 044B     	 ldr r3,.L93
 1838              	 .loc 1 458 16
 1839 0012 7A68     	 ldr r2,[r7,#4]
 1840 0014 1A62     	 str r2,[r3,#32]
 459:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 1841              	 .loc 1 459 7
 1842 0016 034B     	 ldr r3,.L93
 1843              	 .loc 1 459 16
 1844 0018 3A68     	 ldr r2,[r7]
 1845 001a 5A62     	 str r2,[r3,#36]
 460:../Libraries/XMCLib/src/xmc_math.c **** }
 1846              	 .loc 1 460 1
 1847 001c C046     	 nop
 1848 001e BD46     	 mov sp,r7
 1849 0020 02B0     	 add sp,sp,#8
 1850              	 
 1851 0022 80BD     	 pop {r7,pc}
 1852              	.L94:
 1853              	 .align 2
 1854              	.L93:
 1855 0024 00000340 	 .word 1073938432
 1856              	 .cfi_endproc
 1857              	.LFE99:
 1859              	 .section .text.XMC_MATH_DIV_SignedDivNB,"ax",%progbits
 1860              	 .align 1
 1861              	 .global XMC_MATH_DIV_SignedDivNB
 1862              	 .syntax unified
 1863              	 .code 16
 1864              	 .thumb_func
 1865              	 .fpu softvfp
 1867              	XMC_MATH_DIV_SignedDivNB:
 1868              	.LFB100:
 461:../Libraries/XMCLib/src/xmc_math.c **** 
 462:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs division for given two signed arguments */
 463:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_SignedDivNB(int32_t dividend, int32_t divisor)
 464:../Libraries/XMCLib/src/xmc_math.c **** {
 1869              	 .loc 1 464 1
 1870              	 .cfi_startproc
 1871              	 
 1872              	 
 1873 0000 80B5     	 push {r7,lr}
 1874              	.LCFI66:
 1875              	 .cfi_def_cfa_offset 8
 1876              	 .cfi_offset 7,-8
 1877              	 .cfi_offset 14,-4
 1878 0002 82B0     	 sub sp,sp,#8
 1879              	.LCFI67:
 1880              	 .cfi_def_cfa_offset 16
 1881 0004 00AF     	 add r7,sp,#0
 1882              	.LCFI68:
 1883              	 .cfi_def_cfa_register 7
 1884 0006 7860     	 str r0,[r7,#4]
 1885 0008 3960     	 str r1,[r7]
 465:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_SIGNED_DIVISION;
 1886              	 .loc 1 465 7
 1887 000a 064B     	 ldr r3,.L96
 1888              	 .loc 1 465 16
 1889 000c 0022     	 movs r2,#0
 1890 000e 5A63     	 str r2,[r3,#52]
 466:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 1891              	 .loc 1 466 7
 1892 0010 044B     	 ldr r3,.L96
 1893              	 .loc 1 466 16
 1894 0012 7A68     	 ldr r2,[r7,#4]
 1895 0014 1A62     	 str r2,[r3,#32]
 467:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 1896              	 .loc 1 467 7
 1897 0016 034B     	 ldr r3,.L96
 1898              	 .loc 1 467 16
 1899 0018 3A68     	 ldr r2,[r7]
 1900 001a 5A62     	 str r2,[r3,#36]
 468:../Libraries/XMCLib/src/xmc_math.c **** }
 1901              	 .loc 1 468 1
 1902 001c C046     	 nop
 1903 001e BD46     	 mov sp,r7
 1904 0020 02B0     	 add sp,sp,#8
 1905              	 
 1906 0022 80BD     	 pop {r7,pc}
 1907              	.L97:
 1908              	 .align 2
 1909              	.L96:
 1910 0024 00000340 	 .word 1073938432
 1911              	 .cfi_endproc
 1912              	.LFE100:
 1914              	 .section .text.XMC_MATH_DIV_UnsignedModNB,"ax",%progbits
 1915              	 .align 1
 1916              	 .global XMC_MATH_DIV_UnsignedModNB
 1917              	 .syntax unified
 1918              	 .code 16
 1919              	 .thumb_func
 1920              	 .fpu softvfp
 1922              	XMC_MATH_DIV_UnsignedModNB:
 1923              	.LFB101:
 469:../Libraries/XMCLib/src/xmc_math.c **** 
 470:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs modulo operation for given two unsigned arguments */
 471:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_UnsignedModNB(uint32_t dividend, uint32_t divisor)
 472:../Libraries/XMCLib/src/xmc_math.c **** {
 1924              	 .loc 1 472 1
 1925              	 .cfi_startproc
 1926              	 
 1927              	 
 1928 0000 80B5     	 push {r7,lr}
 1929              	.LCFI69:
 1930              	 .cfi_def_cfa_offset 8
 1931              	 .cfi_offset 7,-8
 1932              	 .cfi_offset 14,-4
 1933 0002 82B0     	 sub sp,sp,#8
 1934              	.LCFI70:
 1935              	 .cfi_def_cfa_offset 16
 1936 0004 00AF     	 add r7,sp,#0
 1937              	.LCFI71:
 1938              	 .cfi_def_cfa_register 7
 1939 0006 7860     	 str r0,[r7,#4]
 1940 0008 3960     	 str r1,[r7]
 473:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_UNSIGNED_DIVISION;
 1941              	 .loc 1 473 7
 1942 000a 064B     	 ldr r3,.L99
 1943              	 .loc 1 473 16
 1944 000c 0422     	 movs r2,#4
 1945 000e 5A63     	 str r2,[r3,#52]
 474:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 1946              	 .loc 1 474 7
 1947 0010 044B     	 ldr r3,.L99
 1948              	 .loc 1 474 16
 1949 0012 7A68     	 ldr r2,[r7,#4]
 1950 0014 1A62     	 str r2,[r3,#32]
 475:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 1951              	 .loc 1 475 7
 1952 0016 034B     	 ldr r3,.L99
 1953              	 .loc 1 475 16
 1954 0018 3A68     	 ldr r2,[r7]
 1955 001a 5A62     	 str r2,[r3,#36]
 476:../Libraries/XMCLib/src/xmc_math.c **** }
 1956              	 .loc 1 476 1
 1957 001c C046     	 nop
 1958 001e BD46     	 mov sp,r7
 1959 0020 02B0     	 add sp,sp,#8
 1960              	 
 1961 0022 80BD     	 pop {r7,pc}
 1962              	.L100:
 1963              	 .align 2
 1964              	.L99:
 1965 0024 00000340 	 .word 1073938432
 1966              	 .cfi_endproc
 1967              	.LFE101:
 1969              	 .section .text.XMC_MATH_DIV_SignedModNB,"ax",%progbits
 1970              	 .align 1
 1971              	 .global XMC_MATH_DIV_SignedModNB
 1972              	 .syntax unified
 1973              	 .code 16
 1974              	 .thumb_func
 1975              	 .fpu softvfp
 1977              	XMC_MATH_DIV_SignedModNB:
 1978              	.LFB102:
 477:../Libraries/XMCLib/src/xmc_math.c **** 
 478:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs modulo operation for given two signed arguments */
 479:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_SignedModNB(int32_t dividend, int32_t divisor)
 480:../Libraries/XMCLib/src/xmc_math.c **** {
 1979              	 .loc 1 480 1
 1980              	 .cfi_startproc
 1981              	 
 1982              	 
 1983 0000 80B5     	 push {r7,lr}
 1984              	.LCFI72:
 1985              	 .cfi_def_cfa_offset 8
 1986              	 .cfi_offset 7,-8
 1987              	 .cfi_offset 14,-4
 1988 0002 82B0     	 sub sp,sp,#8
 1989              	.LCFI73:
 1990              	 .cfi_def_cfa_offset 16
 1991 0004 00AF     	 add r7,sp,#0
 1992              	.LCFI74:
 1993              	 .cfi_def_cfa_register 7
 1994 0006 7860     	 str r0,[r7,#4]
 1995 0008 3960     	 str r1,[r7]
 481:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_SIGNED_DIVISION;
 1996              	 .loc 1 481 7
 1997 000a 064B     	 ldr r3,.L102
 1998              	 .loc 1 481 16
 1999 000c 0022     	 movs r2,#0
 2000 000e 5A63     	 str r2,[r3,#52]
 482:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 2001              	 .loc 1 482 7
 2002 0010 044B     	 ldr r3,.L102
 2003              	 .loc 1 482 16
 2004 0012 7A68     	 ldr r2,[r7,#4]
 2005 0014 1A62     	 str r2,[r3,#32]
 483:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 2006              	 .loc 1 483 7
 2007 0016 034B     	 ldr r3,.L102
 2008              	 .loc 1 483 16
 2009 0018 3A68     	 ldr r2,[r7]
 2010 001a 5A62     	 str r2,[r3,#36]
 484:../Libraries/XMCLib/src/xmc_math.c **** }
 2011              	 .loc 1 484 1
 2012 001c C046     	 nop
 2013 001e BD46     	 mov sp,r7
 2014 0020 02B0     	 add sp,sp,#8
 2015              	 
 2016 0022 80BD     	 pop {r7,pc}
 2017              	.L103:
 2018              	 .align 2
 2019              	.L102:
 2020 0024 00000340 	 .word 1073938432
 2021              	 .cfi_endproc
 2022              	.LFE102:
 2024              	 .section .text.XMC_MATH_CORDIC_Q15_Sqrt,"ax",%progbits
 2025              	 .align 1
 2026              	 .global XMC_MATH_CORDIC_Q15_Sqrt
 2027              	 .syntax unified
 2028              	 .code 16
 2029              	 .thumb_func
 2030              	 .fpu softvfp
 2032              	XMC_MATH_CORDIC_Q15_Sqrt:
 2033              	.LFB103:
 485:../Libraries/XMCLib/src/xmc_math.c **** 
 486:../Libraries/XMCLib/src/xmc_math.c **** int16_t XMC_MATH_CORDIC_Q15_Sqrt(int16_t x)
 487:../Libraries/XMCLib/src/xmc_math.c **** {
 2034              	 .loc 1 487 1
 2035              	 .cfi_startproc
 2036              	 
 2037              	 
 2038 0000 80B5     	 push {r7,lr}
 2039              	.LCFI75:
 2040              	 .cfi_def_cfa_offset 8
 2041              	 .cfi_offset 7,-8
 2042              	 .cfi_offset 14,-4
 2043 0002 84B0     	 sub sp,sp,#16
 2044              	.LCFI76:
 2045              	 .cfi_def_cfa_offset 24
 2046 0004 00AF     	 add r7,sp,#0
 2047              	.LCFI77:
 2048              	 .cfi_def_cfa_register 7
 2049 0006 0200     	 movs r2,r0
 2050 0008 BB1D     	 adds r3,r7,#6
 2051 000a 1A80     	 strh r2,[r3]
 488:../Libraries/XMCLib/src/xmc_math.c ****   int32_t temp;
 489:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 2052              	 .loc 1 489 7
 2053 000c 114B     	 ldr r3,.L106
 2054              	 .loc 1 489 15
 2055 000e 0022     	 movs r2,#0
 2056 0010 1A64     	 str r2,[r3,#64]
 490:../Libraries/XMCLib/src/xmc_math.c **** 
 491:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t)XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC |
 2057              	 .loc 1 491 7
 2058 0012 104B     	 ldr r3,.L106
 2059              	 .loc 1 491 15
 2060 0014 0622     	 movs r2,#6
 2061 0016 5A64     	 str r2,[r3,#68]
 492:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t)XMC_MATH_CORDIC_ROTVEC_MODE_VECTORING;
 493:../Libraries/XMCLib/src/xmc_math.c **** 
 494:../Libraries/XMCLib/src/xmc_math.c ****   temp = (int32_t)x << 15; /* Q30 to handle numbers > 1.0 */
 2062              	 .loc 1 494 10
 2063 0018 BB1D     	 adds r3,r7,#6
 2064 001a 0022     	 movs r2,#0
 2065 001c 9B5E     	 ldrsh r3,[r3,r2]
 2066              	 .loc 1 494 8
 2067 001e DB03     	 lsls r3,r3,#15
 2068 0020 FB60     	 str r3,[r7,#12]
 495:../Libraries/XMCLib/src/xmc_math.c **** 
 496:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = (temp - 0x10000000U); /* x - 0.25 */
 2069              	 .loc 1 496 23
 2070 0022 FA68     	 ldr r2,[r7,#12]
 2071              	 .loc 1 496 7
 2072 0024 0B4B     	 ldr r3,.L106
 2073              	 .loc 1 496 23
 2074 0026 F021     	 movs r1,#240
 2075 0028 0906     	 lsls r1,r1,#24
 2076 002a 8C46     	 mov ip,r1
 2077 002c 6244     	 add r2,r2,ip
 2078              	 .loc 1 496 15
 2079 002e DA64     	 str r2,[r3,#76]
 497:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = (temp + 0x10000000U); /* x + 0.25 */
 2080              	 .loc 1 497 23
 2081 0030 FA68     	 ldr r2,[r7,#12]
 2082              	 .loc 1 497 7
 2083 0032 084B     	 ldr r3,.L106
 2084              	 .loc 1 497 23
 2085 0034 8021     	 movs r1,#128
 2086 0036 4905     	 lsls r1,r1,#21
 2087 0038 8C46     	 mov ip,r1
 2088 003a 6244     	 add r2,r2,ip
 2089              	 .loc 1 497 15
 2090 003c 9A64     	 str r2,[r3,#72]
 498:../Libraries/XMCLib/src/xmc_math.c **** 
 499:../Libraries/XMCLib/src/xmc_math.c ****   return (int16_t)(((MATH->CORRX >> 14) * 39568) >> 16); /* Q16 * Q15 */
 2091              	 .loc 1 499 26
 2092 003e 054B     	 ldr r3,.L106
 2093 0040 5B6D     	 ldr r3,[r3,#84]
 2094              	 .loc 1 499 34
 2095 0042 9B0B     	 lsrs r3,r3,#14
 2096              	 .loc 1 499 41
 2097 0044 044A     	 ldr r2,.L106+4
 2098 0046 5343     	 muls r3,r2
 2099              	 .loc 1 499 50
 2100 0048 1B0C     	 lsrs r3,r3,#16
 2101              	 .loc 1 499 10
 2102 004a 1BB2     	 sxth r3,r3
 500:../Libraries/XMCLib/src/xmc_math.c **** }
 2103              	 .loc 1 500 1
 2104 004c 1800     	 movs r0,r3
 2105 004e BD46     	 mov sp,r7
 2106 0050 04B0     	 add sp,sp,#16
 2107              	 
 2108 0052 80BD     	 pop {r7,pc}
 2109              	.L107:
 2110              	 .align 2
 2111              	.L106:
 2112 0054 00000340 	 .word 1073938432
 2113 0058 909A0000 	 .word 39568
 2114              	 .cfi_endproc
 2115              	.LFE103:
 2117              	 .section .text.XMC_MATH_CORDIC_Q31_Sqrt,"ax",%progbits
 2118              	 .align 1
 2119              	 .global XMC_MATH_CORDIC_Q31_Sqrt
 2120              	 .syntax unified
 2121              	 .code 16
 2122              	 .thumb_func
 2123              	 .fpu softvfp
 2125              	XMC_MATH_CORDIC_Q31_Sqrt:
 2126              	.LFB104:
 501:../Libraries/XMCLib/src/xmc_math.c **** 
 502:../Libraries/XMCLib/src/xmc_math.c **** int32_t XMC_MATH_CORDIC_Q31_Sqrt(int32_t x)
 503:../Libraries/XMCLib/src/xmc_math.c **** {
 2127              	 .loc 1 503 1
 2128              	 .cfi_startproc
 2129              	 
 2130              	 
 2131 0000 80B5     	 push {r7,lr}
 2132              	.LCFI78:
 2133              	 .cfi_def_cfa_offset 8
 2134              	 .cfi_offset 7,-8
 2135              	 .cfi_offset 14,-4
 2136 0002 82B0     	 sub sp,sp,#8
 2137              	.LCFI79:
 2138              	 .cfi_def_cfa_offset 16
 2139 0004 00AF     	 add r7,sp,#0
 2140              	.LCFI80:
 2141              	 .cfi_def_cfa_register 7
 2142 0006 7860     	 str r0,[r7,#4]
 504:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 2143              	 .loc 1 504 7
 2144 0008 0F4B     	 ldr r3,.L110
 2145              	 .loc 1 504 15
 2146 000a 0022     	 movs r2,#0
 2147 000c 1A64     	 str r2,[r3,#64]
 505:../Libraries/XMCLib/src/xmc_math.c **** 
 506:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t)XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC |
 2148              	 .loc 1 506 7
 2149 000e 0E4B     	 ldr r3,.L110
 2150              	 .loc 1 506 15
 2151 0010 0622     	 movs r2,#6
 2152 0012 5A64     	 str r2,[r3,#68]
 507:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t)XMC_MATH_CORDIC_ROTVEC_MODE_VECTORING;
 508:../Libraries/XMCLib/src/xmc_math.c **** 
 509:../Libraries/XMCLib/src/xmc_math.c ****   x >>= 1;  /* Q30 to handle numbers > 1.0 */
 2153              	 .loc 1 509 5
 2154 0014 7B68     	 ldr r3,[r7,#4]
 2155 0016 5B10     	 asrs r3,r3,#1
 2156 0018 7B60     	 str r3,[r7,#4]
 510:../Libraries/XMCLib/src/xmc_math.c **** 
 511:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = (x - 0x10000000U); /* x - 0.25 */
 2157              	 .loc 1 511 20
 2158 001a 7A68     	 ldr r2,[r7,#4]
 2159              	 .loc 1 511 7
 2160 001c 0A4B     	 ldr r3,.L110
 2161              	 .loc 1 511 20
 2162 001e F021     	 movs r1,#240
 2163 0020 0906     	 lsls r1,r1,#24
 2164 0022 8C46     	 mov ip,r1
 2165 0024 6244     	 add r2,r2,ip
 2166              	 .loc 1 511 15
 2167 0026 DA64     	 str r2,[r3,#76]
 512:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = (x + 0x10000000U); /* x + 0.25 */
 2168              	 .loc 1 512 20
 2169 0028 7A68     	 ldr r2,[r7,#4]
 2170              	 .loc 1 512 7
 2171 002a 074B     	 ldr r3,.L110
 2172              	 .loc 1 512 20
 2173 002c 8021     	 movs r1,#128
 2174 002e 4905     	 lsls r1,r1,#21
 2175 0030 8C46     	 mov ip,r1
 2176 0032 6244     	 add r2,r2,ip
 2177              	 .loc 1 512 15
 2178 0034 9A64     	 str r2,[r3,#72]
 513:../Libraries/XMCLib/src/xmc_math.c **** 
 514:../Libraries/XMCLib/src/xmc_math.c ****   return ((MATH->CORRX >> 14) * 39568); /* Q16 * Q15 */
 2179              	 .loc 1 514 16
 2180 0036 044B     	 ldr r3,.L110
 2181 0038 5B6D     	 ldr r3,[r3,#84]
 2182              	 .loc 1 514 24
 2183 003a 9B0B     	 lsrs r3,r3,#14
 2184              	 .loc 1 514 31
 2185 003c 034A     	 ldr r2,.L110+4
 2186 003e 5343     	 muls r3,r2
 515:../Libraries/XMCLib/src/xmc_math.c **** }
 2187              	 .loc 1 515 1
 2188 0040 1800     	 movs r0,r3
 2189 0042 BD46     	 mov sp,r7
 2190 0044 02B0     	 add sp,sp,#8
 2191              	 
 2192 0046 80BD     	 pop {r7,pc}
 2193              	.L111:
 2194              	 .align 2
 2195              	.L110:
 2196 0048 00000340 	 .word 1073938432
 2197 004c 909A0000 	 .word 39568
 2198              	 .cfi_endproc
 2199              	.LFE104:
 2201              	 .text
 2202              	.Letext0:
 2203              	 .file 3 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
 2204              	 .file 4 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2205              	 .file 5 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/lock.h"
 2206              	 .file 6 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h"
 2207              	 .file 7 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 2208              	 .file 8 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h"
 2209              	 .file 9 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
 2210              	 .file 10 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 2211              	 .file 11 "..//Libraries/XMCLib/inc/xmc_math.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 xmc_math.c
    {standard input}:16     .text.XMC_MATH_DIV_IsBusy:0000000000000000 $t
    {standard input}:24     .text.XMC_MATH_DIV_IsBusy:0000000000000000 XMC_MATH_DIV_IsBusy
    {standard input}:73     .text.XMC_MATH_DIV_IsBusy:000000000000002c $d
    {standard input}:78     .text.XMC_MATH_CORDIC_IsBusy:0000000000000000 $t
    {standard input}:85     .text.XMC_MATH_CORDIC_IsBusy:0000000000000000 XMC_MATH_CORDIC_IsBusy
    {standard input}:133    .text.XMC_MATH_CORDIC_IsBusy:000000000000002c $d
    {standard input}:138    .text.XMC_MATH_GetEventStatus:0000000000000000 $t
    {standard input}:145    .text.XMC_MATH_GetEventStatus:0000000000000000 XMC_MATH_GetEventStatus
    {standard input}:201    .text.XMC_MATH_GetEventStatus:0000000000000038 $d
    {standard input}:206    .text.__aeabi_uidiv:0000000000000000 $t
    {standard input}:213    .text.__aeabi_uidiv:0000000000000000 __aeabi_uidiv
    {standard input}:325    .text.__aeabi_uidiv:0000000000000050 $d
    {standard input}:330    .text.__aeabi_idiv:0000000000000000 $t
    {standard input}:337    .text.__aeabi_idiv:0000000000000000 __aeabi_idiv
    {standard input}:448    .text.__aeabi_idiv:0000000000000050 $d
    {standard input}:453    .text.__aeabi_uidivmod:0000000000000000 $t
    {standard input}:460    .text.__aeabi_uidivmod:0000000000000000 __aeabi_uidivmod
    {standard input}:595    .text.__aeabi_uidivmod:0000000000000078 $d
    {standard input}:600    .text.__aeabi_idivmod:0000000000000000 $t
    {standard input}:607    .text.__aeabi_idivmod:0000000000000000 __aeabi_idivmod
    {standard input}:743    .text.__aeabi_idivmod:0000000000000078 $d
    {standard input}:748    .text.XMC_MATH_CORDIC_Cos:0000000000000000 $t
    {standard input}:755    .text.XMC_MATH_CORDIC_Cos:0000000000000000 XMC_MATH_CORDIC_Cos
    {standard input}:818    .text.XMC_MATH_CORDIC_Cos:000000000000003c $d
    {standard input}:824    .text.XMC_MATH_CORDIC_Sin:0000000000000000 $t
    {standard input}:831    .text.XMC_MATH_CORDIC_Sin:0000000000000000 XMC_MATH_CORDIC_Sin
    {standard input}:894    .text.XMC_MATH_CORDIC_Sin:000000000000003c $d
    {standard input}:900    .text.XMC_MATH_CORDIC_Tan:0000000000000000 $t
    {standard input}:907    .text.XMC_MATH_CORDIC_Tan:0000000000000000 XMC_MATH_CORDIC_Tan
    {standard input}:980    .text.XMC_MATH_CORDIC_Tan:0000000000000048 $d
    {standard input}:986    .text.XMC_MATH_CORDIC_ArcTan:0000000000000000 $t
    {standard input}:993    .text.XMC_MATH_CORDIC_ArcTan:0000000000000000 XMC_MATH_CORDIC_ArcTan
    {standard input}:1061   .text.XMC_MATH_CORDIC_ArcTan:0000000000000040 $d
    {standard input}:1066   .text.XMC_MATH_CORDIC_Cosh:0000000000000000 $t
    {standard input}:1073   .text.XMC_MATH_CORDIC_Cosh:0000000000000000 XMC_MATH_CORDIC_Cosh
    {standard input}:1136   .text.XMC_MATH_CORDIC_Cosh:000000000000003c $d
    {standard input}:1142   .text.XMC_MATH_CORDIC_Sinh:0000000000000000 $t
    {standard input}:1149   .text.XMC_MATH_CORDIC_Sinh:0000000000000000 XMC_MATH_CORDIC_Sinh
    {standard input}:1212   .text.XMC_MATH_CORDIC_Sinh:000000000000003c $d
    {standard input}:1218   .text.XMC_MATH_CORDIC_Tanh:0000000000000000 $t
    {standard input}:1225   .text.XMC_MATH_CORDIC_Tanh:0000000000000000 XMC_MATH_CORDIC_Tanh
    {standard input}:1298   .text.XMC_MATH_CORDIC_Tanh:0000000000000048 $d
    {standard input}:1304   .text.XMC_MATH_CORDIC_CosNB:0000000000000000 $t
    {standard input}:1311   .text.XMC_MATH_CORDIC_CosNB:0000000000000000 XMC_MATH_CORDIC_CosNB
    {standard input}:1366   .text.XMC_MATH_CORDIC_CosNB:0000000000000030 $d
    {standard input}:1372   .text.XMC_MATH_CORDIC_SinNB:0000000000000000 $t
    {standard input}:1379   .text.XMC_MATH_CORDIC_SinNB:0000000000000000 XMC_MATH_CORDIC_SinNB
    {standard input}:1434   .text.XMC_MATH_CORDIC_SinNB:0000000000000030 $d
    {standard input}:1440   .text.XMC_MATH_CORDIC_TanNB:0000000000000000 $t
    {standard input}:1447   .text.XMC_MATH_CORDIC_TanNB:0000000000000000 XMC_MATH_CORDIC_TanNB
    {standard input}:1513   .text.XMC_MATH_CORDIC_TanNB:0000000000000040 $d
    {standard input}:1519   .text.XMC_MATH_CORDIC_ArcTanNB:0000000000000000 $t
    {standard input}:1526   .text.XMC_MATH_CORDIC_ArcTanNB:0000000000000000 XMC_MATH_CORDIC_ArcTanNB
    {standard input}:1585   .text.XMC_MATH_CORDIC_ArcTanNB:0000000000000034 $d
    {standard input}:1590   .text.XMC_MATH_CORDIC_CoshNB:0000000000000000 $t
    {standard input}:1597   .text.XMC_MATH_CORDIC_CoshNB:0000000000000000 XMC_MATH_CORDIC_CoshNB
    {standard input}:1652   .text.XMC_MATH_CORDIC_CoshNB:0000000000000030 $d
    {standard input}:1658   .text.XMC_MATH_CORDIC_SinhNB:0000000000000000 $t
    {standard input}:1665   .text.XMC_MATH_CORDIC_SinhNB:0000000000000000 XMC_MATH_CORDIC_SinhNB
    {standard input}:1720   .text.XMC_MATH_CORDIC_SinhNB:0000000000000030 $d
    {standard input}:1726   .text.XMC_MATH_CORDIC_TanhNB:0000000000000000 $t
    {standard input}:1733   .text.XMC_MATH_CORDIC_TanhNB:0000000000000000 XMC_MATH_CORDIC_TanhNB
    {standard input}:1799   .text.XMC_MATH_CORDIC_TanhNB:0000000000000040 $d
    {standard input}:1805   .text.XMC_MATH_DIV_UnsignedDivNB:0000000000000000 $t
    {standard input}:1812   .text.XMC_MATH_DIV_UnsignedDivNB:0000000000000000 XMC_MATH_DIV_UnsignedDivNB
    {standard input}:1855   .text.XMC_MATH_DIV_UnsignedDivNB:0000000000000024 $d
    {standard input}:1860   .text.XMC_MATH_DIV_SignedDivNB:0000000000000000 $t
    {standard input}:1867   .text.XMC_MATH_DIV_SignedDivNB:0000000000000000 XMC_MATH_DIV_SignedDivNB
    {standard input}:1910   .text.XMC_MATH_DIV_SignedDivNB:0000000000000024 $d
    {standard input}:1915   .text.XMC_MATH_DIV_UnsignedModNB:0000000000000000 $t
    {standard input}:1922   .text.XMC_MATH_DIV_UnsignedModNB:0000000000000000 XMC_MATH_DIV_UnsignedModNB
    {standard input}:1965   .text.XMC_MATH_DIV_UnsignedModNB:0000000000000024 $d
    {standard input}:1970   .text.XMC_MATH_DIV_SignedModNB:0000000000000000 $t
    {standard input}:1977   .text.XMC_MATH_DIV_SignedModNB:0000000000000000 XMC_MATH_DIV_SignedModNB
    {standard input}:2020   .text.XMC_MATH_DIV_SignedModNB:0000000000000024 $d
    {standard input}:2025   .text.XMC_MATH_CORDIC_Q15_Sqrt:0000000000000000 $t
    {standard input}:2032   .text.XMC_MATH_CORDIC_Q15_Sqrt:0000000000000000 XMC_MATH_CORDIC_Q15_Sqrt
    {standard input}:2112   .text.XMC_MATH_CORDIC_Q15_Sqrt:0000000000000054 $d
    {standard input}:2118   .text.XMC_MATH_CORDIC_Q31_Sqrt:0000000000000000 $t
    {standard input}:2125   .text.XMC_MATH_CORDIC_Q31_Sqrt:0000000000000000 XMC_MATH_CORDIC_Q31_Sqrt
    {standard input}:2196   .text.XMC_MATH_CORDIC_Q31_Sqrt:0000000000000048 $d

NO UNDEFINED SYMBOLS

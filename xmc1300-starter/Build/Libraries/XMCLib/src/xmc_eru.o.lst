   1              	 .cpu cortex-m0
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,0
  10              	 .eabi_attribute 18,4
  11              	 .file "xmc_eru.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.XMC_ERU_ETL_Init,"ax",%progbits
  16              	 .align 1
  17              	 .global XMC_ERU_ETL_Init
  18              	 .arch armv6s-m
  19              	 .syntax unified
  20              	 .code 16
  21              	 .thumb_func
  22              	 .fpu softvfp
  24              	XMC_ERU_ETL_Init:
  25              	.LFB45:
  26              	 .file 1 "../Libraries/XMCLib/src/xmc_eru.c"
   1:../Libraries/XMCLib/src/xmc_eru.c **** /**
   2:../Libraries/XMCLib/src/xmc_eru.c ****  * @file xmc_eru.c
   3:../Libraries/XMCLib/src/xmc_eru.c ****  * @date 2016-03-10
   4:../Libraries/XMCLib/src/xmc_eru.c ****  *
   5:../Libraries/XMCLib/src/xmc_eru.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_eru.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_eru.c ****  *
   9:../Libraries/XMCLib/src/xmc_eru.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_eru.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_eru.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_eru.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_eru.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_eru.c ****  * 
  18:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_eru.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_eru.c ****  * 
  21:../Libraries/XMCLib/src/xmc_eru.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_eru.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_eru.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_eru.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_eru.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_eru.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_eru.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_eru.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_eru.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_eru.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_eru.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_eru.c ****  *
  36:../Libraries/XMCLib/src/xmc_eru.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_eru.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_eru.c ****  *
  39:../Libraries/XMCLib/src/xmc_eru.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_eru.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_eru.c ****  *
  42:../Libraries/XMCLib/src/xmc_eru.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_eru.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_eru.c ****  *
  45:../Libraries/XMCLib/src/xmc_eru.c ****  * 2016-03-10:
  46:../Libraries/XMCLib/src/xmc_eru.c ****  *     - XMC_ERU_ETL_GetEdgeDetection() API is added to get the configured edge for event generatio
  47:../Libraries/XMCLib/src/xmc_eru.c ****  *
  48:../Libraries/XMCLib/src/xmc_eru.c ****  * @endcond
  49:../Libraries/XMCLib/src/xmc_eru.c ****  */
  50:../Libraries/XMCLib/src/xmc_eru.c **** 
  51:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  52:../Libraries/XMCLib/src/xmc_eru.c ****  * HEADER FILES
  53:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  54:../Libraries/XMCLib/src/xmc_eru.c **** 
  55:../Libraries/XMCLib/src/xmc_eru.c **** #include "xmc_eru.h"
  56:../Libraries/XMCLib/src/xmc_eru.c **** 
  57:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  58:../Libraries/XMCLib/src/xmc_eru.c ****  * MACROS
  59:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  60:../Libraries/XMCLib/src/xmc_eru.c **** 
  61:../Libraries/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_BITSIZE (4UL) /* Used to set the input for path A and path B based on the channe
  62:../Libraries/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_INPUT_BITSIZE (2UL)
  63:../Libraries/XMCLib/src/xmc_eru.c **** 
  64:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_A(input) \
  65:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_A0) || \
  66:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A1) || \
  67:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A2) || \
  68:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A3))
  69:../Libraries/XMCLib/src/xmc_eru.c **** 
  70:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_B(input) \
  71:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_B0) || \
  72:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B1) || \
  73:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B2) || \
  74:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B3))
  75:../Libraries/XMCLib/src/xmc_eru.c **** 
  76:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_STATUS_FLAG_MODE(mode) \
  77:../Libraries/XMCLib/src/xmc_eru.c ****     ((mode == XMC_ERU_ETL_STATUS_FLAG_MODE_SWCTRL) || \
  78:../Libraries/XMCLib/src/xmc_eru.c ****      (mode == XMC_ERU_ETL_STATUS_FLAG_MODE_HWCTRL))
  79:../Libraries/XMCLib/src/xmc_eru.c **** 
  80:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_EVENT_SOURCE(source) \
  81:../Libraries/XMCLib/src/xmc_eru.c ****     ((source == XMC_ERU_ETL_SOURCE_A)              || \
  82:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_B)              || \
  83:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_B)         || \
  84:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_B)        || \
  85:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A)          || \
  86:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_B)     || \
  87:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_B)    || \
  88:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_B)          || \
  89:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_NOT_B)     || \
  90:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_NOT_B)    || \
  91:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_NOT_B) || \
  92:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_NOT_B))
  93:../Libraries/XMCLib/src/xmc_eru.c **** 
  94:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_EDGE(edge) \
  95:../Libraries/XMCLib/src/xmc_eru.c ****     ((edge == XMC_ERU_ETL_EDGE_DETECTION_DISABLED) || \
  96:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_RISING) || \
  97:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_FALLING) || \
  98:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_BOTH))
  99:../Libraries/XMCLib/src/xmc_eru.c **** 
 100:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_CHANNEL(channel) \
 101:../Libraries/XMCLib/src/xmc_eru.c ****     ((channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL0) || \
 102:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL1) || \
 103:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL2) || \
 104:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL3))
 105:../Libraries/XMCLib/src/xmc_eru.c **** 
 106:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PATTERN_INPUT(input) \
 107:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT0) || \
 108:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT1) || \
 109:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT2) || \
 110:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT3))
 111:../Libraries/XMCLib/src/xmc_eru.c **** 
 112:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(trigger) \
 113:../Libraries/XMCLib/src/xmc_eru.c ****     ((trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER1) || \
 114:../Libraries/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER2) || \
 115:../Libraries/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER3))
 116:../Libraries/XMCLib/src/xmc_eru.c **** 
 117:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(service) \
 118:../Libraries/XMCLib/src/xmc_eru.c ****     ((service == XMC_ERU_OGU_SERVICE_REQUEST_DISABLED) || \
 119:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER) || \
 120:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MATCH) || \
 121:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MISMATCH))
 122:../Libraries/XMCLib/src/xmc_eru.c ****  
 123:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
 124:../Libraries/XMCLib/src/xmc_eru.c ****  * API IMPLEMENTATION
 125:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
 126:../Libraries/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_ETLx channel with the config structure.  */
 127:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
 128:../Libraries/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 129:../Libraries/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_ETL_CONFIG_t *const config)
 130:../Libraries/XMCLib/src/xmc_eru.c **** { 
  27              	 .loc 1 130 1
  28              	 .cfi_startproc
  29              	 
  30              	 
  31 0000 90B5     	 push {r4,r7,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 12
  34              	 .cfi_offset 4,-12
  35              	 .cfi_offset 7,-8
  36              	 .cfi_offset 14,-4
  37 0002 85B0     	 sub sp,sp,#20
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 32
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 7A60     	 str r2,[r7,#4]
  45 000a 0B24     	 movs r4,#11
  46 000c 3B19     	 adds r3,r7,r4
  47 000e 0A1C     	 adds r2,r1,#0
  48 0010 1A70     	 strb r2,[r3]
 131:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 132:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));
 133:../Libraries/XMCLib/src/xmc_eru.c **** 
 134:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
  49              	 .loc 1 134 3
  50 0012 FB68     	 ldr r3,[r7,#12]
  51 0014 1800     	 movs r0,r3
  52 0016 FFF7FEFF 	 bl XMC_ERU_Enable
 135:../Libraries/XMCLib/src/xmc_eru.c **** 
 136:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & 
  53              	 .loc 1 136 21
  54 001a FB68     	 ldr r3,[r7,#12]
  55 001c 1B68     	 ldr r3,[r3]
 137:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  56              	 .loc 1 137 88
  57 001e 2000     	 movs r0,r4
  58 0020 3A18     	 adds r2,r7,r0
  59 0022 1278     	 ldrb r2,[r2]
  60 0024 9200     	 lsls r2,r2,#2
  61              	 .loc 1 137 76
  62 0026 0F21     	 movs r1,#15
  63 0028 9140     	 lsls r1,r1,r2
  64 002a 0A00     	 movs r2,r1
  65              	 .loc 1 137 18
  66 002c D243     	 mvns r2,r2
 136:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  67              	 .loc 1 136 30
  68 002e 1A40     	 ands r2,r3
 138:../Libraries/XMCLib/src/xmc_eru.c ****                 (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  69              	 .loc 1 138 24
  70 0030 7B68     	 ldr r3,[r7,#4]
  71 0032 1968     	 ldr r1,[r3]
  72              	 .loc 1 138 44
  73 0034 3B18     	 adds r3,r7,r0
  74 0036 1B78     	 ldrb r3,[r3]
  75 0038 9B00     	 lsls r3,r3,#2
  76              	 .loc 1 138 32
  77 003a 9940     	 lsls r1,r1,r3
  78 003c 0B00     	 movs r3,r1
 137:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  79              	 .loc 1 137 112
  80 003e 1A43     	 orrs r2,r3
 136:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  81              	 .loc 1 136 15
  82 0040 FB68     	 ldr r3,[r7,#12]
  83 0042 1A60     	 str r2,[r3]
 139:../Libraries/XMCLib/src/xmc_eru.c ****   
 140:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON[channel] = config->raw;
  84              	 .loc 1 140 14
  85 0044 3B18     	 adds r3,r7,r0
  86 0046 1A78     	 ldrb r2,[r3]
  87              	 .loc 1 140 32
  88 0048 7B68     	 ldr r3,[r7,#4]
  89 004a 5968     	 ldr r1,[r3,#4]
  90              	 .loc 1 140 24
  91 004c FB68     	 ldr r3,[r7,#12]
  92 004e 0432     	 adds r2,r2,#4
  93 0050 9200     	 lsls r2,r2,#2
  94 0052 D150     	 str r1,[r2,r3]
 141:../Libraries/XMCLib/src/xmc_eru.c **** }
  95              	 .loc 1 141 1
  96 0054 C046     	 nop
  97 0056 BD46     	 mov sp,r7
  98 0058 05B0     	 add sp,sp,#20
  99              	 
 100 005a 90BD     	 pop {r4,r7,pc}
 101              	 .cfi_endproc
 102              	.LFE45:
 104              	 .section .text.XMC_ERU_OGU_Init,"ax",%progbits
 105              	 .align 1
 106              	 .global XMC_ERU_OGU_Init
 107              	 .syntax unified
 108              	 .code 16
 109              	 .thumb_func
 110              	 .fpu softvfp
 112              	XMC_ERU_OGU_Init:
 113              	.LFB46:
 142:../Libraries/XMCLib/src/xmc_eru.c **** 
 143:../Libraries/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_OGUy channel with the config structure.  */
 144:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
 145:../Libraries/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 146:../Libraries/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_OGU_CONFIG_t *const config)
 147:../Libraries/XMCLib/src/xmc_eru.c **** {
 114              	 .loc 1 147 1
 115              	 .cfi_startproc
 116              	 
 117              	 
 118 0000 90B5     	 push {r4,r7,lr}
 119              	.LCFI3:
 120              	 .cfi_def_cfa_offset 12
 121              	 .cfi_offset 4,-12
 122              	 .cfi_offset 7,-8
 123              	 .cfi_offset 14,-4
 124 0002 85B0     	 sub sp,sp,#20
 125              	.LCFI4:
 126              	 .cfi_def_cfa_offset 32
 127 0004 00AF     	 add r7,sp,#0
 128              	.LCFI5:
 129              	 .cfi_def_cfa_register 7
 130 0006 F860     	 str r0,[r7,#12]
 131 0008 7A60     	 str r2,[r7,#4]
 132 000a 0B24     	 movs r4,#11
 133 000c 3B19     	 adds r3,r7,r4
 134 000e 0A1C     	 adds r2,r1,#0
 135 0010 1A70     	 strb r2,[r3]
 148:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 149:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));
 150:../Libraries/XMCLib/src/xmc_eru.c **** 
 151:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
 136              	 .loc 1 151 3
 137 0012 FB68     	 ldr r3,[r7,#12]
 138 0014 1800     	 movs r0,r3
 139 0016 FFF7FEFF 	 bl XMC_ERU_Enable
 152:../Libraries/XMCLib/src/xmc_eru.c **** 
 153:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON[channel] = config->raw;
 140              	 .loc 1 153 14
 141 001a 3B19     	 adds r3,r7,r4
 142 001c 1A78     	 ldrb r2,[r3]
 143              	 .loc 1 153 32
 144 001e 7B68     	 ldr r3,[r7,#4]
 145 0020 1968     	 ldr r1,[r3]
 146              	 .loc 1 153 24
 147 0022 FB68     	 ldr r3,[r7,#12]
 148 0024 0832     	 adds r2,r2,#8
 149 0026 9200     	 lsls r2,r2,#2
 150 0028 D150     	 str r1,[r2,r3]
 154:../Libraries/XMCLib/src/xmc_eru.c **** }
 151              	 .loc 1 154 1
 152 002a C046     	 nop
 153 002c BD46     	 mov sp,r7
 154 002e 05B0     	 add sp,sp,#20
 155              	 
 156 0030 90BD     	 pop {r4,r7,pc}
 157              	 .cfi_endproc
 158              	.LFE46:
 160              	 .section .text.XMC_ERU_ETL_SetInput,"ax",%progbits
 161              	 .align 1
 162              	 .global XMC_ERU_ETL_SetInput
 163              	 .syntax unified
 164              	 .code 16
 165              	 .thumb_func
 166              	 .fpu softvfp
 168              	XMC_ERU_ETL_SetInput:
 169              	.LFB47:
 155:../Libraries/XMCLib/src/xmc_eru.c **** 
 156:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures the event source for path A and path B, with selected input_a and input_b respectivel
 157:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetInput(XMC_ERU_t *const eru,
 158:../Libraries/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 159:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_A_t input_a,
 160:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_B_t input_b)
 161:../Libraries/XMCLib/src/xmc_eru.c **** {
 170              	 .loc 1 161 1
 171              	 .cfi_startproc
 172              	 
 173              	 
 174 0000 90B5     	 push {r4,r7,lr}
 175              	.LCFI6:
 176              	 .cfi_def_cfa_offset 12
 177              	 .cfi_offset 4,-12
 178              	 .cfi_offset 7,-8
 179              	 .cfi_offset 14,-4
 180 0002 83B0     	 sub sp,sp,#12
 181              	.LCFI7:
 182              	 .cfi_def_cfa_offset 24
 183 0004 00AF     	 add r7,sp,#0
 184              	.LCFI8:
 185              	 .cfi_def_cfa_register 7
 186 0006 7860     	 str r0,[r7,#4]
 187 0008 0C00     	 movs r4,r1
 188 000a 1000     	 movs r0,r2
 189 000c 1900     	 movs r1,r3
 190 000e FB1C     	 adds r3,r7,#3
 191 0010 221C     	 adds r2,r4,#0
 192 0012 1A70     	 strb r2,[r3]
 193 0014 BB1C     	 adds r3,r7,#2
 194 0016 021C     	 adds r2,r0,#0
 195 0018 1A70     	 strb r2,[r3]
 196 001a 7B1C     	 adds r3,r7,#1
 197 001c 0A1C     	 adds r2,r1,#0
 198 001e 1A70     	 strb r2,[r3]
 162:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 163:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Channel Number", (channel < 4U));
 164:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid A", XMC_ERU_ETL_CHECK_INPUT_A(input_a));
 165:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid B", XMC_ERU_ETL_CHECK_INPUT_B(input_b));
 166:../Libraries/XMCLib/src/xmc_eru.c **** 
 167:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channe
 199              	 .loc 1 167 21
 200 0020 7B68     	 ldr r3,[r7,#4]
 201 0022 1B68     	 ldr r3,[r3]
 202              	 .loc 1 167 102
 203 0024 FA1C     	 adds r2,r7,#3
 204 0026 1278     	 ldrb r2,[r2]
 205 0028 9200     	 lsls r2,r2,#2
 206              	 .loc 1 167 90
 207 002a 0F21     	 movs r1,#15
 208 002c 9140     	 lsls r1,r1,r2
 209 002e 0A00     	 movs r2,r1
 210              	 .loc 1 167 32
 211 0030 D243     	 mvns r2,r2
 212              	 .loc 1 167 30
 213 0032 1A40     	 ands r2,r3
 168:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 214              	 .loc 1 168 19
 215 0034 BB1C     	 adds r3,r7,#2
 216 0036 1B78     	 ldrb r3,[r3]
 217              	 .loc 1 168 58
 218 0038 791C     	 adds r1,r7,#1
 219 003a 0978     	 ldrb r1,[r1]
 220 003c 8900     	 lsls r1,r1,#2
 221              	 .loc 1 168 37
 222 003e 1943     	 orrs r1,r3
 223              	 .loc 1 168 101
 224 0040 FB1C     	 adds r3,r7,#3
 225 0042 1B78     	 ldrb r3,[r3]
 226 0044 9B00     	 lsls r3,r3,#2
 227              	 .loc 1 168 89
 228 0046 9940     	 lsls r1,r1,r3
 229 0048 0B00     	 movs r3,r1
 167:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 230              	 .loc 1 167 126
 231 004a 1A43     	 orrs r2,r3
 167:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 232              	 .loc 1 167 15
 233 004c 7B68     	 ldr r3,[r7,#4]
 234 004e 1A60     	 str r2,[r3]
 169:../Libraries/XMCLib/src/xmc_eru.c **** }
 235              	 .loc 1 169 1
 236 0050 C046     	 nop
 237 0052 BD46     	 mov sp,r7
 238 0054 03B0     	 add sp,sp,#12
 239              	 
 240 0056 90BD     	 pop {r4,r7,pc}
 241              	 .cfi_endproc
 242              	.LFE47:
 244              	 .section .text.XMC_ERU_ETL_SetSource,"ax",%progbits
 245              	 .align 1
 246              	 .global XMC_ERU_ETL_SetSource
 247              	 .syntax unified
 248              	 .code 16
 249              	 .thumb_func
 250              	 .fpu softvfp
 252              	XMC_ERU_ETL_SetSource:
 253              	.LFB48:
 170:../Libraries/XMCLib/src/xmc_eru.c **** 
 171:../Libraries/XMCLib/src/xmc_eru.c **** /* Select input path combination along with polarity for event generation by setting (SS, NA, NB) b
 172:../Libraries/XMCLib/src/xmc_eru.c ****    EXICONx(x = [0 to 3]) register */
 173:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetSource(XMC_ERU_t *const eru,
 174:../Libraries/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 175:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_SOURCE_t source)
 176:../Libraries/XMCLib/src/xmc_eru.c **** {
 254              	 .loc 1 176 1
 255              	 .cfi_startproc
 256              	 
 257              	 
 258 0000 90B5     	 push {r4,r7,lr}
 259              	.LCFI9:
 260              	 .cfi_def_cfa_offset 12
 261              	 .cfi_offset 4,-12
 262              	 .cfi_offset 7,-8
 263              	 .cfi_offset 14,-4
 264 0002 83B0     	 sub sp,sp,#12
 265              	.LCFI10:
 266              	 .cfi_def_cfa_offset 24
 267 0004 00AF     	 add r7,sp,#0
 268              	.LCFI11:
 269              	 .cfi_def_cfa_register 7
 270 0006 7860     	 str r0,[r7,#4]
 271 0008 0800     	 movs r0,r1
 272 000a 1100     	 movs r1,r2
 273 000c FB1C     	 adds r3,r7,#3
 274 000e 021C     	 adds r2,r0,#0
 275 0010 1A70     	 strb r2,[r3]
 276 0012 BB1C     	 adds r3,r7,#2
 277 0014 0A1C     	 adds r2,r1,#0
 278 0016 1A70     	 strb r2,[r3]
 177:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 178:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Channel Number", (channel < 4U));
 179:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Source", XMC_ERU_ETL_CHECK_EVENT_SOURCE(source));
 180:../Libraries/XMCLib/src/xmc_eru.c **** 
 181:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].SS = (uint8_t)source;
 279              	 .loc 1 181 25
 280 0018 FB1C     	 adds r3,r7,#3
 281 001a 1B78     	 ldrb r3,[r3]
 282              	 .loc 1 181 31
 283 001c BA1C     	 adds r2,r7,#2
 284 001e 1278     	 ldrb r2,[r2]
 285 0020 0F21     	 movs r1,#15
 286 0022 0A40     	 ands r2,r1
 287 0024 D0B2     	 uxtb r0,r2
 288              	 .loc 1 181 29
 289 0026 7A68     	 ldr r2,[r7,#4]
 290 0028 0433     	 adds r3,r3,#4
 291 002a 9900     	 lsls r1,r3,#2
 292 002c 8B58     	 ldr r3,[r1,r2]
 293 002e 0F24     	 movs r4,#15
 294 0030 2040     	 ands r0,r4
 295 0032 0002     	 lsls r0,r0,#8
 296 0034 034C     	 ldr r4,.L5
 297 0036 2340     	 ands r3,r4
 298 0038 0343     	 orrs r3,r0
 299 003a 8B50     	 str r3,[r1,r2]
 182:../Libraries/XMCLib/src/xmc_eru.c **** }
 300              	 .loc 1 182 1
 301 003c C046     	 nop
 302 003e BD46     	 mov sp,r7
 303 0040 03B0     	 add sp,sp,#12
 304              	 
 305 0042 90BD     	 pop {r4,r7,pc}
 306              	.L6:
 307              	 .align 2
 308              	.L5:
 309 0044 FFF0FFFF 	 .word -3841
 310              	 .cfi_endproc
 311              	.LFE48:
 313              	 .section .text.XMC_ERU_ETL_SetEdgeDetection,"ax",%progbits
 314              	 .align 1
 315              	 .global XMC_ERU_ETL_SetEdgeDetection
 316              	 .syntax unified
 317              	 .code 16
 318              	 .thumb_func
 319              	 .fpu softvfp
 321              	XMC_ERU_ETL_SetEdgeDetection:
 322              	.LFB49:
 183:../Libraries/XMCLib/src/xmc_eru.c **** 
 184:../Libraries/XMCLib/src/xmc_eru.c **** /* Configure event trigger edge/s by setting (RE, FE) bits of EXICONx(x = [0 to 3]) register.*/
 185:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetEdgeDetection(XMC_ERU_t *const eru,
 186:../Libraries/XMCLib/src/xmc_eru.c ****                                   const uint8_t channel,
 187:../Libraries/XMCLib/src/xmc_eru.c ****                                   const XMC_ERU_ETL_EDGE_DETECTION_t edge_detection)
 188:../Libraries/XMCLib/src/xmc_eru.c **** {
 323              	 .loc 1 188 1
 324              	 .cfi_startproc
 325              	 
 326              	 
 327 0000 90B5     	 push {r4,r7,lr}
 328              	.LCFI12:
 329              	 .cfi_def_cfa_offset 12
 330              	 .cfi_offset 4,-12
 331              	 .cfi_offset 7,-8
 332              	 .cfi_offset 14,-4
 333 0002 83B0     	 sub sp,sp,#12
 334              	.LCFI13:
 335              	 .cfi_def_cfa_offset 24
 336 0004 00AF     	 add r7,sp,#0
 337              	.LCFI14:
 338              	 .cfi_def_cfa_register 7
 339 0006 7860     	 str r0,[r7,#4]
 340 0008 0800     	 movs r0,r1
 341 000a 1100     	 movs r1,r2
 342 000c FB1C     	 adds r3,r7,#3
 343 000e 021C     	 adds r2,r0,#0
 344 0010 1A70     	 strb r2,[r3]
 345 0012 BB1C     	 adds r3,r7,#2
 346 0014 0A1C     	 adds r2,r1,#0
 347 0016 1A70     	 strb r2,[r3]
 189:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 190:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Channel Number", (channel < 4U));
 191:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Trigger Edge", XMC_ERU_ETL_CHECK_TRIGGER_EDGE(ed
 192:../Libraries/XMCLib/src/xmc_eru.c **** 
 193:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].ED = (uint8_t)edge_detection;
 348              	 .loc 1 193 25
 349 0018 FB1C     	 adds r3,r7,#3
 350 001a 1B78     	 ldrb r3,[r3]
 351              	 .loc 1 193 31
 352 001c BA1C     	 adds r2,r7,#2
 353 001e 1278     	 ldrb r2,[r2]
 354 0020 0321     	 movs r1,#3
 355 0022 0A40     	 ands r2,r1
 356 0024 D0B2     	 uxtb r0,r2
 357              	 .loc 1 193 29
 358 0026 7A68     	 ldr r2,[r7,#4]
 359 0028 0433     	 adds r3,r3,#4
 360 002a 9900     	 lsls r1,r3,#2
 361 002c 8B58     	 ldr r3,[r1,r2]
 362 002e 0324     	 movs r4,#3
 363 0030 2040     	 ands r0,r4
 364 0032 8000     	 lsls r0,r0,#2
 365 0034 0C24     	 movs r4,#12
 366 0036 A343     	 bics r3,r4
 367 0038 0343     	 orrs r3,r0
 368 003a 8B50     	 str r3,[r1,r2]
 194:../Libraries/XMCLib/src/xmc_eru.c **** }
 369              	 .loc 1 194 1
 370 003c C046     	 nop
 371 003e BD46     	 mov sp,r7
 372 0040 03B0     	 add sp,sp,#12
 373              	 
 374 0042 90BD     	 pop {r4,r7,pc}
 375              	 .cfi_endproc
 376              	.LFE49:
 378              	 .section .text.XMC_ERU_ETL_GetEdgeDetection,"ax",%progbits
 379              	 .align 1
 380              	 .global XMC_ERU_ETL_GetEdgeDetection
 381              	 .syntax unified
 382              	 .code 16
 383              	 .thumb_func
 384              	 .fpu softvfp
 386              	XMC_ERU_ETL_GetEdgeDetection:
 387              	.LFB50:
 195:../Libraries/XMCLib/src/xmc_eru.c **** 
 196:../Libraries/XMCLib/src/xmc_eru.c **** /* Returns the configured event trigger edge/s by reading (RE, FE) bits of EXICONx(x = [0 to 3]) re
 197:../Libraries/XMCLib/src/xmc_eru.c **** XMC_ERU_ETL_EDGE_DETECTION_t XMC_ERU_ETL_GetEdgeDetection(XMC_ERU_t *const eru, const uint8_t chann
 198:../Libraries/XMCLib/src/xmc_eru.c **** {
 388              	 .loc 1 198 1
 389              	 .cfi_startproc
 390              	 
 391              	 
 392 0000 80B5     	 push {r7,lr}
 393              	.LCFI15:
 394              	 .cfi_def_cfa_offset 8
 395              	 .cfi_offset 7,-8
 396              	 .cfi_offset 14,-4
 397 0002 82B0     	 sub sp,sp,#8
 398              	.LCFI16:
 399              	 .cfi_def_cfa_offset 16
 400 0004 00AF     	 add r7,sp,#0
 401              	.LCFI17:
 402              	 .cfi_def_cfa_register 7
 403 0006 7860     	 str r0,[r7,#4]
 404 0008 0A00     	 movs r2,r1
 405 000a FB1C     	 adds r3,r7,#3
 406 000c 1A70     	 strb r2,[r3]
 199:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 200:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Channel Number", (channel < 4U));
 201:../Libraries/XMCLib/src/xmc_eru.c ****   return ((XMC_ERU_ETL_EDGE_DETECTION_t)(eru->EXICON_b[channel].ED));
 407              	 .loc 1 201 64
 408 000e FB1C     	 adds r3,r7,#3
 409 0010 1A78     	 ldrb r2,[r3]
 410 0012 7B68     	 ldr r3,[r7,#4]
 411 0014 0432     	 adds r2,r2,#4
 412 0016 9200     	 lsls r2,r2,#2
 413 0018 D358     	 ldr r3,[r2,r3]
 414 001a 1B07     	 lsls r3,r3,#28
 415 001c 9B0F     	 lsrs r3,r3,#30
 416 001e DBB2     	 uxtb r3,r3
 202:../Libraries/XMCLib/src/xmc_eru.c **** }
 417              	 .loc 1 202 1
 418 0020 1800     	 movs r0,r3
 419 0022 BD46     	 mov sp,r7
 420 0024 02B0     	 add sp,sp,#8
 421              	 
 422 0026 80BD     	 pop {r7,pc}
 423              	 .cfi_endproc
 424              	.LFE50:
 426              	 .section .text.XMC_ERU_ETL_SetStatusFlagMode,"ax",%progbits
 427              	 .align 1
 428              	 .global XMC_ERU_ETL_SetStatusFlagMode
 429              	 .syntax unified
 430              	 .code 16
 431              	 .thumb_func
 432              	 .fpu softvfp
 434              	XMC_ERU_ETL_SetStatusFlagMode:
 435              	.LFB51:
 203:../Libraries/XMCLib/src/xmc_eru.c **** 
 204:../Libraries/XMCLib/src/xmc_eru.c **** /* Set the status flag bit(FL) in EXICONx(x = [0 to 3]). */
 205:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetStatusFlagMode(XMC_ERU_t *const eru,
 206:../Libraries/XMCLib/src/xmc_eru.c ****                                    const uint8_t channel,
 207:../Libraries/XMCLib/src/xmc_eru.c ****                                    const XMC_ERU_ETL_STATUS_FLAG_MODE_t mode)
 208:../Libraries/XMCLib/src/xmc_eru.c **** {
 436              	 .loc 1 208 1
 437              	 .cfi_startproc
 438              	 
 439              	 
 440 0000 90B5     	 push {r4,r7,lr}
 441              	.LCFI18:
 442              	 .cfi_def_cfa_offset 12
 443              	 .cfi_offset 4,-12
 444              	 .cfi_offset 7,-8
 445              	 .cfi_offset 14,-4
 446 0002 83B0     	 sub sp,sp,#12
 447              	.LCFI19:
 448              	 .cfi_def_cfa_offset 24
 449 0004 00AF     	 add r7,sp,#0
 450              	.LCFI20:
 451              	 .cfi_def_cfa_register 7
 452 0006 7860     	 str r0,[r7,#4]
 453 0008 0800     	 movs r0,r1
 454 000a 1100     	 movs r1,r2
 455 000c FB1C     	 adds r3,r7,#3
 456 000e 021C     	 adds r2,r0,#0
 457 0010 1A70     	 strb r2,[r3]
 458 0012 BB1C     	 adds r3,r7,#2
 459 0014 0A1C     	 adds r2,r1,#0
 460 0016 1A70     	 strb r2,[r3]
 209:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru))
 210:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Channel Number", (channel < 4U));
 211:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Status Flag Mode", XMC_ERU_ETL_CHECK_STATUS_FLA
 212:../Libraries/XMCLib/src/xmc_eru.c **** 
 213:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].LD = (uint8_t)mode;
 461              	 .loc 1 213 25
 462 0018 FB1C     	 adds r3,r7,#3
 463 001a 1B78     	 ldrb r3,[r3]
 464              	 .loc 1 213 31
 465 001c BA1C     	 adds r2,r7,#2
 466 001e 1278     	 ldrb r2,[r2]
 467 0020 0121     	 movs r1,#1
 468 0022 0A40     	 ands r2,r1
 469 0024 D0B2     	 uxtb r0,r2
 470              	 .loc 1 213 29
 471 0026 7A68     	 ldr r2,[r7,#4]
 472 0028 0433     	 adds r3,r3,#4
 473 002a 9900     	 lsls r1,r3,#2
 474 002c 8B58     	 ldr r3,[r1,r2]
 475 002e 0124     	 movs r4,#1
 476 0030 2040     	 ands r0,r4
 477 0032 4000     	 lsls r0,r0,#1
 478 0034 0224     	 movs r4,#2
 479 0036 A343     	 bics r3,r4
 480 0038 0343     	 orrs r3,r0
 481 003a 8B50     	 str r3,[r1,r2]
 214:../Libraries/XMCLib/src/xmc_eru.c **** }
 482              	 .loc 1 214 1
 483 003c C046     	 nop
 484 003e BD46     	 mov sp,r7
 485 0040 03B0     	 add sp,sp,#12
 486              	 
 487 0042 90BD     	 pop {r4,r7,pc}
 488              	 .cfi_endproc
 489              	.LFE51:
 491              	 .section .text.XMC_ERU_ETL_EnableOutputTrigger,"ax",%progbits
 492              	 .align 1
 493              	 .global XMC_ERU_ETL_EnableOutputTrigger
 494              	 .syntax unified
 495              	 .code 16
 496              	 .thumb_func
 497              	 .fpu softvfp
 499              	XMC_ERU_ETL_EnableOutputTrigger:
 500              	.LFB52:
 215:../Libraries/XMCLib/src/xmc_eru.c **** 
 216:../Libraries/XMCLib/src/xmc_eru.c **** /* Configure which Channel of OGUy(Output gating unit y = [0 to 3]) to be mapped by the trigger pul
 217:../Libraries/XMCLib/src/xmc_eru.c ****  * ETLx(Event Trigger Logic, x = [0 to 3]) by setting (OCS and PE) bit fields. */
 218:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_EnableOutputTrigger(XMC_ERU_t *const eru,
 219:../Libraries/XMCLib/src/xmc_eru.c ****                                      const uint8_t channel,
 220:../Libraries/XMCLib/src/xmc_eru.c ****                                      const XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL_t trigger)
 221:../Libraries/XMCLib/src/xmc_eru.c **** {
 501              	 .loc 1 221 1
 502              	 .cfi_startproc
 503              	 
 504              	 
 505 0000 90B5     	 push {r4,r7,lr}
 506              	.LCFI21:
 507              	 .cfi_def_cfa_offset 12
 508              	 .cfi_offset 4,-12
 509              	 .cfi_offset 7,-8
 510              	 .cfi_offset 14,-4
 511 0002 83B0     	 sub sp,sp,#12
 512              	.LCFI22:
 513              	 .cfi_def_cfa_offset 24
 514 0004 00AF     	 add r7,sp,#0
 515              	.LCFI23:
 516              	 .cfi_def_cfa_register 7
 517 0006 7860     	 str r0,[r7,#4]
 518 0008 0800     	 movs r0,r1
 519 000a 1100     	 movs r1,r2
 520 000c FB1C     	 adds r3,r7,#3
 521 000e 021C     	 adds r2,r0,#0
 522 0010 1A70     	 strb r2,[r3]
 523 0012 BB1C     	 adds r3,r7,#2
 524 0014 0A1C     	 adds r2,r1,#0
 525 0016 1A70     	 strb r2,[r3]
 222:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru
 223:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Channel Number", (channel < 4U));
 224:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Output Channel", XMC_ERU_ETL_CHECK_TRIGGER_CH
 225:../Libraries/XMCLib/src/xmc_eru.c **** 
 226:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].OCS = (uint8_t)trigger;
 526              	 .loc 1 226 25
 527 0018 FB1C     	 adds r3,r7,#3
 528 001a 1B78     	 ldrb r3,[r3]
 529              	 .loc 1 226 32
 530 001c BA1C     	 adds r2,r7,#2
 531 001e 1278     	 ldrb r2,[r2]
 532 0020 0721     	 movs r1,#7
 533 0022 0A40     	 ands r2,r1
 534 0024 D0B2     	 uxtb r0,r2
 535              	 .loc 1 226 30
 536 0026 7A68     	 ldr r2,[r7,#4]
 537 0028 0433     	 adds r3,r3,#4
 538 002a 9900     	 lsls r1,r3,#2
 539 002c 8B58     	 ldr r3,[r1,r2]
 540 002e 0724     	 movs r4,#7
 541 0030 2040     	 ands r0,r4
 542 0032 0001     	 lsls r0,r0,#4
 543 0034 7024     	 movs r4,#112
 544 0036 A343     	 bics r3,r4
 545 0038 0343     	 orrs r3,r0
 546 003a 8B50     	 str r3,[r1,r2]
 227:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = (uint8_t)true;
 547              	 .loc 1 227 25
 548 003c FB1C     	 adds r3,r7,#3
 549 003e 1B78     	 ldrb r3,[r3]
 550              	 .loc 1 227 29
 551 0040 7A68     	 ldr r2,[r7,#4]
 552 0042 0433     	 adds r3,r3,#4
 553 0044 9900     	 lsls r1,r3,#2
 554 0046 8B58     	 ldr r3,[r1,r2]
 555 0048 0120     	 movs r0,#1
 556 004a 0343     	 orrs r3,r0
 557 004c 8B50     	 str r3,[r1,r2]
 228:../Libraries/XMCLib/src/xmc_eru.c **** }
 558              	 .loc 1 228 1
 559 004e C046     	 nop
 560 0050 BD46     	 mov sp,r7
 561 0052 03B0     	 add sp,sp,#12
 562              	 
 563 0054 90BD     	 pop {r4,r7,pc}
 564              	 .cfi_endproc
 565              	.LFE52:
 567              	 .section .text.XMC_ERU_ETL_DisableOutputTrigger,"ax",%progbits
 568              	 .align 1
 569              	 .global XMC_ERU_ETL_DisableOutputTrigger
 570              	 .syntax unified
 571              	 .code 16
 572              	 .thumb_func
 573              	 .fpu softvfp
 575              	XMC_ERU_ETL_DisableOutputTrigger:
 576              	.LFB53:
 229:../Libraries/XMCLib/src/xmc_eru.c **** 
 230:../Libraries/XMCLib/src/xmc_eru.c **** /* Disables the trigger pulse generation by clearing the (PE) of the EXICONx(x = [0 to 3]). */
 231:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_DisableOutputTrigger(XMC_ERU_t *const eru, const uint8_t channel)
 232:../Libraries/XMCLib/src/xmc_eru.c **** {
 577              	 .loc 1 232 1
 578              	 .cfi_startproc
 579              	 
 580              	 
 581 0000 80B5     	 push {r7,lr}
 582              	.LCFI24:
 583              	 .cfi_def_cfa_offset 8
 584              	 .cfi_offset 7,-8
 585              	 .cfi_offset 14,-4
 586 0002 82B0     	 sub sp,sp,#8
 587              	.LCFI25:
 588              	 .cfi_def_cfa_offset 16
 589 0004 00AF     	 add r7,sp,#0
 590              	.LCFI26:
 591              	 .cfi_def_cfa_register 7
 592 0006 7860     	 str r0,[r7,#4]
 593 0008 0A00     	 movs r2,r1
 594 000a FB1C     	 adds r3,r7,#3
 595 000c 1A70     	 strb r2,[r3]
 233:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(er
 234:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Channel Number", (channel < 4U));
 235:../Libraries/XMCLib/src/xmc_eru.c **** 
 236:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = false;
 596              	 .loc 1 236 25
 597 000e FB1C     	 adds r3,r7,#3
 598 0010 1B78     	 ldrb r3,[r3]
 599              	 .loc 1 236 29
 600 0012 7A68     	 ldr r2,[r7,#4]
 601 0014 0433     	 adds r3,r3,#4
 602 0016 9900     	 lsls r1,r3,#2
 603 0018 8B58     	 ldr r3,[r1,r2]
 604 001a 0120     	 movs r0,#1
 605 001c 8343     	 bics r3,r0
 606 001e 8B50     	 str r3,[r1,r2]
 237:../Libraries/XMCLib/src/xmc_eru.c **** }
 607              	 .loc 1 237 1
 608 0020 C046     	 nop
 609 0022 BD46     	 mov sp,r7
 610 0024 02B0     	 add sp,sp,#8
 611              	 
 612 0026 80BD     	 pop {r7,pc}
 613              	 .cfi_endproc
 614              	.LFE53:
 616              	 .section .text.XMC_ERU_OGU_EnablePatternDetection,"ax",%progbits
 617              	 .align 1
 618              	 .global XMC_ERU_OGU_EnablePatternDetection
 619              	 .syntax unified
 620              	 .code 16
 621              	 .thumb_func
 622              	 .fpu softvfp
 624              	XMC_ERU_OGU_EnablePatternDetection:
 625              	.LFB54:
 238:../Libraries/XMCLib/src/xmc_eru.c **** 
 239:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures ERU_ETLx(x = [0 to 3]) for pattern match detection by setting IPENx(x = [0 to 3) and 
 240:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePatternDetection(XMC_ERU_t *const eru,
 241:../Libraries/XMCLib/src/xmc_eru.c ****                                         const uint8_t channel,
 242:../Libraries/XMCLib/src/xmc_eru.c ****                                         const XMC_ERU_OGU_PATTERN_DETECTION_INPUT_t input)
 243:../Libraries/XMCLib/src/xmc_eru.c **** {
 626              	 .loc 1 243 1
 627              	 .cfi_startproc
 628              	 
 629              	 
 630 0000 90B5     	 push {r4,r7,lr}
 631              	.LCFI27:
 632              	 .cfi_def_cfa_offset 12
 633              	 .cfi_offset 4,-12
 634              	 .cfi_offset 7,-8
 635              	 .cfi_offset 14,-4
 636 0002 83B0     	 sub sp,sp,#12
 637              	.LCFI28:
 638              	 .cfi_def_cfa_offset 24
 639 0004 00AF     	 add r7,sp,#0
 640              	.LCFI29:
 641              	 .cfi_def_cfa_register 7
 642 0006 7860     	 str r0,[r7,#4]
 643 0008 0800     	 movs r0,r1
 644 000a 1100     	 movs r1,r2
 645 000c FB1C     	 adds r3,r7,#3
 646 000e 021C     	 adds r2,r0,#0
 647 0010 1A70     	 strb r2,[r3]
 648 0012 BB1C     	 adds r3,r7,#2
 649 0014 0A1C     	 adds r2,r1,#0
 650 0016 1A70     	 strb r2,[r3]
 244:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(
 245:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Channel Number", (channel < 4U));
 246:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Pattern input", XMC_ERU_OGU_CHECK_PATTERN_
 247:../Libraries/XMCLib/src/xmc_eru.c **** 
 248:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].IPEN = (uint8_t)input;
 651              	 .loc 1 248 25
 652 0018 FB1C     	 adds r3,r7,#3
 653 001a 1B78     	 ldrb r3,[r3]
 654              	 .loc 1 248 33
 655 001c BA1C     	 adds r2,r7,#2
 656 001e 1278     	 ldrb r2,[r2]
 657 0020 0F21     	 movs r1,#15
 658 0022 0A40     	 ands r2,r1
 659 0024 D0B2     	 uxtb r0,r2
 660              	 .loc 1 248 31
 661 0026 7A68     	 ldr r2,[r7,#4]
 662 0028 0833     	 adds r3,r3,#8
 663 002a 9900     	 lsls r1,r3,#2
 664 002c 8B58     	 ldr r3,[r1,r2]
 665 002e 0F24     	 movs r4,#15
 666 0030 2040     	 ands r0,r4
 667 0032 0003     	 lsls r0,r0,#12
 668 0034 084C     	 ldr r4,.L14
 669 0036 2340     	 ands r3,r4
 670 0038 0343     	 orrs r3,r0
 671 003a 8B50     	 str r3,[r1,r2]
 249:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = true;
 672              	 .loc 1 249 25
 673 003c FB1C     	 adds r3,r7,#3
 674 003e 1B78     	 ldrb r3,[r3]
 675              	 .loc 1 249 31
 676 0040 7A68     	 ldr r2,[r7,#4]
 677 0042 0833     	 adds r3,r3,#8
 678 0044 9900     	 lsls r1,r3,#2
 679 0046 8B58     	 ldr r3,[r1,r2]
 680 0048 0420     	 movs r0,#4
 681 004a 0343     	 orrs r3,r0
 682 004c 8B50     	 str r3,[r1,r2]
 250:../Libraries/XMCLib/src/xmc_eru.c **** }
 683              	 .loc 1 250 1
 684 004e C046     	 nop
 685 0050 BD46     	 mov sp,r7
 686 0052 03B0     	 add sp,sp,#12
 687              	 
 688 0054 90BD     	 pop {r4,r7,pc}
 689              	.L15:
 690 0056 C046     	 .align 2
 691              	.L14:
 692 0058 FF0FFFFF 	 .word -61441
 693              	 .cfi_endproc
 694              	.LFE54:
 696              	 .section .text.XMC_ERU_OGU_DisablePatternDetection,"ax",%progbits
 697              	 .align 1
 698              	 .global XMC_ERU_OGU_DisablePatternDetection
 699              	 .syntax unified
 700              	 .code 16
 701              	 .thumb_func
 702              	 .fpu softvfp
 704              	XMC_ERU_OGU_DisablePatternDetection:
 705              	.LFB55:
 251:../Libraries/XMCLib/src/xmc_eru.c **** 
 252:../Libraries/XMCLib/src/xmc_eru.c **** /* Disable the pattern detection by clearing (GEEN) bit. */
 253:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePatternDetection(XMC_ERU_t *const eru, const uint8_t channel)
 254:../Libraries/XMCLib/src/xmc_eru.c **** {
 706              	 .loc 1 254 1
 707              	 .cfi_startproc
 708              	 
 709              	 
 710 0000 80B5     	 push {r7,lr}
 711              	.LCFI30:
 712              	 .cfi_def_cfa_offset 8
 713              	 .cfi_offset 7,-8
 714              	 .cfi_offset 14,-4
 715 0002 82B0     	 sub sp,sp,#8
 716              	.LCFI31:
 717              	 .cfi_def_cfa_offset 16
 718 0004 00AF     	 add r7,sp,#0
 719              	.LCFI32:
 720              	 .cfi_def_cfa_register 7
 721 0006 7860     	 str r0,[r7,#4]
 722 0008 0A00     	 movs r2,r1
 723 000a FB1C     	 adds r3,r7,#3
 724 000c 1A70     	 strb r2,[r3]
 255:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 256:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Channel Number", (channel < 4U));
 257:../Libraries/XMCLib/src/xmc_eru.c **** 
 258:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = false;
 725              	 .loc 1 258 25
 726 000e FB1C     	 adds r3,r7,#3
 727 0010 1B78     	 ldrb r3,[r3]
 728              	 .loc 1 258 31
 729 0012 7A68     	 ldr r2,[r7,#4]
 730 0014 0833     	 adds r3,r3,#8
 731 0016 9900     	 lsls r1,r3,#2
 732 0018 8B58     	 ldr r3,[r1,r2]
 733 001a 0420     	 movs r0,#4
 734 001c 8343     	 bics r3,r0
 735 001e 8B50     	 str r3,[r1,r2]
 259:../Libraries/XMCLib/src/xmc_eru.c **** }
 736              	 .loc 1 259 1
 737 0020 C046     	 nop
 738 0022 BD46     	 mov sp,r7
 739 0024 02B0     	 add sp,sp,#8
 740              	 
 741 0026 80BD     	 pop {r7,pc}
 742              	 .cfi_endproc
 743              	.LFE55:
 745              	 .section .text.XMC_ERU_OGU_EnablePeripheralTrigger,"ax",%progbits
 746              	 .align 1
 747              	 .global XMC_ERU_OGU_EnablePeripheralTrigger
 748              	 .syntax unified
 749              	 .code 16
 750              	 .thumb_func
 751              	 .fpu softvfp
 753              	XMC_ERU_OGU_EnablePeripheralTrigger:
 754              	.LFB56:
 260:../Libraries/XMCLib/src/xmc_eru.c **** 
 261:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures peripheral trigger input, by setting (ISS) bit. */
 262:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePeripheralTrigger(XMC_ERU_t *const eru,
 263:../Libraries/XMCLib/src/xmc_eru.c ****                                          const uint8_t channel,
 264:../Libraries/XMCLib/src/xmc_eru.c ****                                          const XMC_ERU_OGU_PERIPHERAL_TRIGGER_t peripheral_trigger)
 265:../Libraries/XMCLib/src/xmc_eru.c **** {
 755              	 .loc 1 265 1
 756              	 .cfi_startproc
 757              	 
 758              	 
 759 0000 90B5     	 push {r4,r7,lr}
 760              	.LCFI33:
 761              	 .cfi_def_cfa_offset 12
 762              	 .cfi_offset 4,-12
 763              	 .cfi_offset 7,-8
 764              	 .cfi_offset 14,-4
 765 0002 83B0     	 sub sp,sp,#12
 766              	.LCFI34:
 767              	 .cfi_def_cfa_offset 24
 768 0004 00AF     	 add r7,sp,#0
 769              	.LCFI35:
 770              	 .cfi_def_cfa_register 7
 771 0006 7860     	 str r0,[r7,#4]
 772 0008 0800     	 movs r0,r1
 773 000a 1100     	 movs r1,r2
 774 000c FB1C     	 adds r3,r7,#3
 775 000e 021C     	 adds r2,r0,#0
 776 0010 1A70     	 strb r2,[r3]
 777 0012 BB1C     	 adds r3,r7,#2
 778 0014 0A1C     	 adds r2,r1,#0
 779 0016 1A70     	 strb r2,[r3]
 266:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 267:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 268:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Peripheral Trigger Input", 
 269:../Libraries/XMCLib/src/xmc_eru.c ****               XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(peripheral_trigger));
 270:../Libraries/XMCLib/src/xmc_eru.c **** 
 271:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)peripheral_trigger;
 780              	 .loc 1 271 25
 781 0018 FB1C     	 adds r3,r7,#3
 782 001a 1B78     	 ldrb r3,[r3]
 783              	 .loc 1 271 32
 784 001c BA1C     	 adds r2,r7,#2
 785 001e 1278     	 ldrb r2,[r2]
 786 0020 0321     	 movs r1,#3
 787 0022 0A40     	 ands r2,r1
 788 0024 D0B2     	 uxtb r0,r2
 789              	 .loc 1 271 30
 790 0026 7A68     	 ldr r2,[r7,#4]
 791 0028 0833     	 adds r3,r3,#8
 792 002a 9900     	 lsls r1,r3,#2
 793 002c 8B58     	 ldr r3,[r1,r2]
 794 002e 0324     	 movs r4,#3
 795 0030 2040     	 ands r0,r4
 796 0032 0324     	 movs r4,#3
 797 0034 A343     	 bics r3,r4
 798 0036 0343     	 orrs r3,r0
 799 0038 8B50     	 str r3,[r1,r2]
 272:../Libraries/XMCLib/src/xmc_eru.c **** }
 800              	 .loc 1 272 1
 801 003a C046     	 nop
 802 003c BD46     	 mov sp,r7
 803 003e 03B0     	 add sp,sp,#12
 804              	 
 805 0040 90BD     	 pop {r4,r7,pc}
 806              	 .cfi_endproc
 807              	.LFE56:
 809              	 .section .text.XMC_ERU_OGU_DisablePeripheralTrigger,"ax",%progbits
 810              	 .align 1
 811              	 .global XMC_ERU_OGU_DisablePeripheralTrigger
 812              	 .syntax unified
 813              	 .code 16
 814              	 .thumb_func
 815              	 .fpu softvfp
 817              	XMC_ERU_OGU_DisablePeripheralTrigger:
 818              	.LFB57:
 273:../Libraries/XMCLib/src/xmc_eru.c **** 
 274:../Libraries/XMCLib/src/xmc_eru.c **** /* Disables event generation based on peripheral trigger by clearing (ISS) bit. */
 275:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePeripheralTrigger(XMC_ERU_t *const eru,
 276:../Libraries/XMCLib/src/xmc_eru.c ****                                           const uint8_t channel)
 277:../Libraries/XMCLib/src/xmc_eru.c **** {
 819              	 .loc 1 277 1
 820              	 .cfi_startproc
 821              	 
 822              	 
 823 0000 80B5     	 push {r7,lr}
 824              	.LCFI36:
 825              	 .cfi_def_cfa_offset 8
 826              	 .cfi_offset 7,-8
 827              	 .cfi_offset 14,-4
 828 0002 82B0     	 sub sp,sp,#8
 829              	.LCFI37:
 830              	 .cfi_def_cfa_offset 16
 831 0004 00AF     	 add r7,sp,#0
 832              	.LCFI38:
 833              	 .cfi_def_cfa_register 7
 834 0006 7860     	 str r0,[r7,#4]
 835 0008 0A00     	 movs r2,r1
 836 000a FB1C     	 adds r3,r7,#3
 837 000c 1A70     	 strb r2,[r3]
 278:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PT
 279:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 280:../Libraries/XMCLib/src/xmc_eru.c **** 
 281:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)0;
 838              	 .loc 1 281 25
 839 000e FB1C     	 adds r3,r7,#3
 840 0010 1B78     	 ldrb r3,[r3]
 841              	 .loc 1 281 30
 842 0012 7A68     	 ldr r2,[r7,#4]
 843 0014 0833     	 adds r3,r3,#8
 844 0016 9900     	 lsls r1,r3,#2
 845 0018 8B58     	 ldr r3,[r1,r2]
 846 001a 0320     	 movs r0,#3
 847 001c 8343     	 bics r3,r0
 848 001e 8B50     	 str r3,[r1,r2]
 282:../Libraries/XMCLib/src/xmc_eru.c **** }
 849              	 .loc 1 282 1
 850 0020 C046     	 nop
 851 0022 BD46     	 mov sp,r7
 852 0024 02B0     	 add sp,sp,#8
 853              	 
 854 0026 80BD     	 pop {r7,pc}
 855              	 .cfi_endproc
 856              	.LFE57:
 858              	 .section .text.XMC_ERU_OGU_SetServiceRequestMode,"ax",%progbits
 859              	 .align 1
 860              	 .global XMC_ERU_OGU_SetServiceRequestMode
 861              	 .syntax unified
 862              	 .code 16
 863              	 .thumb_func
 864              	 .fpu softvfp
 866              	XMC_ERU_OGU_SetServiceRequestMode:
 867              	.LFB58:
 283:../Libraries/XMCLib/src/xmc_eru.c **** 
 284:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures the gating scheme for service request generation by setting (GP) bit. */
 285:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
 286:../Libraries/XMCLib/src/xmc_eru.c ****                                        const uint8_t channel,
 287:../Libraries/XMCLib/src/xmc_eru.c ****                                        const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
 288:../Libraries/XMCLib/src/xmc_eru.c **** {
 868              	 .loc 1 288 1
 869              	 .cfi_startproc
 870              	 
 871              	 
 872 0000 90B5     	 push {r4,r7,lr}
 873              	.LCFI39:
 874              	 .cfi_def_cfa_offset 12
 875              	 .cfi_offset 4,-12
 876              	 .cfi_offset 7,-8
 877              	 .cfi_offset 14,-4
 878 0002 83B0     	 sub sp,sp,#12
 879              	.LCFI40:
 880              	 .cfi_def_cfa_offset 24
 881 0004 00AF     	 add r7,sp,#0
 882              	.LCFI41:
 883              	 .cfi_def_cfa_register 7
 884 0006 7860     	 str r0,[r7,#4]
 885 0008 0800     	 movs r0,r1
 886 000a 1100     	 movs r1,r2
 887 000c FB1C     	 adds r3,r7,#3
 888 000e 021C     	 adds r2,r0,#0
 889 0010 1A70     	 strb r2,[r3]
 890 0012 BB1C     	 adds r3,r7,#2
 891 0014 0A1C     	 adds r2,r1,#0
 892 0016 1A70     	 strb r2,[r3]
 289:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(e
 290:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
 291:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SE
 292:../Libraries/XMCLib/src/xmc_eru.c **** 
 293:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GP = (uint8_t)mode;
 893              	 .loc 1 293 25
 894 0018 FB1C     	 adds r3,r7,#3
 895 001a 1B78     	 ldrb r3,[r3]
 896              	 .loc 1 293 31
 897 001c BA1C     	 adds r2,r7,#2
 898 001e 1278     	 ldrb r2,[r2]
 899 0020 0321     	 movs r1,#3
 900 0022 0A40     	 ands r2,r1
 901 0024 D0B2     	 uxtb r0,r2
 902              	 .loc 1 293 29
 903 0026 7A68     	 ldr r2,[r7,#4]
 904 0028 0833     	 adds r3,r3,#8
 905 002a 9900     	 lsls r1,r3,#2
 906 002c 8B58     	 ldr r3,[r1,r2]
 907 002e 0324     	 movs r4,#3
 908 0030 2040     	 ands r0,r4
 909 0032 0001     	 lsls r0,r0,#4
 910 0034 3024     	 movs r4,#48
 911 0036 A343     	 bics r3,r4
 912 0038 0343     	 orrs r3,r0
 913 003a 8B50     	 str r3,[r1,r2]
 294:../Libraries/XMCLib/src/xmc_eru.c **** 
 295:../Libraries/XMCLib/src/xmc_eru.c **** }
 914              	 .loc 1 295 1
 915 003c C046     	 nop
 916 003e BD46     	 mov sp,r7
 917 0040 03B0     	 add sp,sp,#12
 918              	 
 919 0042 90BD     	 pop {r4,r7,pc}
 920              	 .cfi_endproc
 921              	.LFE58:
 923              	 .text
 924              	.Letext0:
 925              	 .file 2 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
 926              	 .file 3 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 927              	 .file 4 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/lock.h"
 928              	 .file 5 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h"
 929              	 .file 6 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 930              	 .file 7 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h"
 931              	 .file 8 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
 932              	 .file 9 "..//Libraries/XMCLib/inc/xmc_eru.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 xmc_eru.c
    {standard input}:16     .text.XMC_ERU_ETL_Init:0000000000000000 $t
    {standard input}:24     .text.XMC_ERU_ETL_Init:0000000000000000 XMC_ERU_ETL_Init
    {standard input}:105    .text.XMC_ERU_OGU_Init:0000000000000000 $t
    {standard input}:112    .text.XMC_ERU_OGU_Init:0000000000000000 XMC_ERU_OGU_Init
    {standard input}:161    .text.XMC_ERU_ETL_SetInput:0000000000000000 $t
    {standard input}:168    .text.XMC_ERU_ETL_SetInput:0000000000000000 XMC_ERU_ETL_SetInput
    {standard input}:245    .text.XMC_ERU_ETL_SetSource:0000000000000000 $t
    {standard input}:252    .text.XMC_ERU_ETL_SetSource:0000000000000000 XMC_ERU_ETL_SetSource
    {standard input}:309    .text.XMC_ERU_ETL_SetSource:0000000000000044 $d
    {standard input}:314    .text.XMC_ERU_ETL_SetEdgeDetection:0000000000000000 $t
    {standard input}:321    .text.XMC_ERU_ETL_SetEdgeDetection:0000000000000000 XMC_ERU_ETL_SetEdgeDetection
    {standard input}:379    .text.XMC_ERU_ETL_GetEdgeDetection:0000000000000000 $t
    {standard input}:386    .text.XMC_ERU_ETL_GetEdgeDetection:0000000000000000 XMC_ERU_ETL_GetEdgeDetection
    {standard input}:427    .text.XMC_ERU_ETL_SetStatusFlagMode:0000000000000000 $t
    {standard input}:434    .text.XMC_ERU_ETL_SetStatusFlagMode:0000000000000000 XMC_ERU_ETL_SetStatusFlagMode
    {standard input}:492    .text.XMC_ERU_ETL_EnableOutputTrigger:0000000000000000 $t
    {standard input}:499    .text.XMC_ERU_ETL_EnableOutputTrigger:0000000000000000 XMC_ERU_ETL_EnableOutputTrigger
    {standard input}:568    .text.XMC_ERU_ETL_DisableOutputTrigger:0000000000000000 $t
    {standard input}:575    .text.XMC_ERU_ETL_DisableOutputTrigger:0000000000000000 XMC_ERU_ETL_DisableOutputTrigger
    {standard input}:617    .text.XMC_ERU_OGU_EnablePatternDetection:0000000000000000 $t
    {standard input}:624    .text.XMC_ERU_OGU_EnablePatternDetection:0000000000000000 XMC_ERU_OGU_EnablePatternDetection
    {standard input}:692    .text.XMC_ERU_OGU_EnablePatternDetection:0000000000000058 $d
    {standard input}:697    .text.XMC_ERU_OGU_DisablePatternDetection:0000000000000000 $t
    {standard input}:704    .text.XMC_ERU_OGU_DisablePatternDetection:0000000000000000 XMC_ERU_OGU_DisablePatternDetection
    {standard input}:746    .text.XMC_ERU_OGU_EnablePeripheralTrigger:0000000000000000 $t
    {standard input}:753    .text.XMC_ERU_OGU_EnablePeripheralTrigger:0000000000000000 XMC_ERU_OGU_EnablePeripheralTrigger
    {standard input}:810    .text.XMC_ERU_OGU_DisablePeripheralTrigger:0000000000000000 $t
    {standard input}:817    .text.XMC_ERU_OGU_DisablePeripheralTrigger:0000000000000000 XMC_ERU_OGU_DisablePeripheralTrigger
    {standard input}:859    .text.XMC_ERU_OGU_SetServiceRequestMode:0000000000000000 $t
    {standard input}:866    .text.XMC_ERU_OGU_SetServiceRequestMode:0000000000000000 XMC_ERU_OGU_SetServiceRequestMode

UNDEFINED SYMBOLS
XMC_ERU_Enable

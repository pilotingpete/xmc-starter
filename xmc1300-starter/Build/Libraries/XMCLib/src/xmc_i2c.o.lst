   1              	 .cpu cortex-m0
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,0
  10              	 .eabi_attribute 18,4
  11              	 .file "xmc_i2c.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.XMC_USIC_CH_GetTransmitBufferStatus,"ax",%progbits
  16              	 .align 1
  17              	 .arch armv6s-m
  18              	 .syntax unified
  19              	 .code 16
  20              	 .thumb_func
  21              	 .fpu softvfp
  23              	XMC_USIC_CH_GetTransmitBufferStatus:
  24              	.LFB66:
  25              	 .file 1 "..//Libraries/XMCLib/inc/xmc_usic.h"
   1:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
   2:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @file xmc_usic.h
   3:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @date 2017-09-08
   4:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
   5:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @cond
   6:..//Libraries/XMCLib/inc/xmc_usic.h ****  **************************************************************************************************
   7:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
   9:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:..//Libraries/XMCLib/inc/xmc_usic.h ****  * All rights reserved.                        
  11:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                                             
  12:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:..//Libraries/XMCLib/inc/xmc_usic.h ****  * following conditions are met:   
  14:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                                                                              
  15:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:..//Libraries/XMCLib/inc/xmc_usic.h ****  * disclaimer.                        
  17:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
  18:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:..//Libraries/XMCLib/inc/xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
  21:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:..//Libraries/XMCLib/inc/xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                                                                              
  24:..//Libraries/XMCLib/inc/xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:..//Libraries/XMCLib/inc/xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:..//Libraries/XMCLib/inc/xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:..//Libraries/XMCLib/inc/xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:..//Libraries/XMCLib/inc/xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:..//Libraries/XMCLib/inc/xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:..//Libraries/XMCLib/inc/xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                                                                              
  32:..//Libraries/XMCLib/inc/xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:..//Libraries/XMCLib/inc/xmc_usic.h ****  **************************************************************************************************
  35:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  36:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Change History
  37:..//Libraries/XMCLib/inc/xmc_usic.h ****  * --------------
  38:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  39:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-02-20:
  40:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Initial draft<br>
  41:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Documentation improved <br>
  42:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  43:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-05-08:
  44:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:..//Libraries/XMCLib/inc/xmc_usic.h ****  *      
  46:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-06-20:
  47:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
  49:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-17:
  50:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  52:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-24:
  53:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:..//Libraries/XMCLib/inc/xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  56:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-25:
  57:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:..//Libraries/XMCLib/inc/xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:..//Libraries/XMCLib/inc/xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  61:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-27:
  62:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  66:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2015-08-28:
  67:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:..//Libraries/XMCLib/inc/xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  70:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2016-03-09:
  71:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Optimization of write only registers
  72:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  73:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2016-04-10:
  74:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  76:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2017-02-10:
  77:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  78:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  79:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  80:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2017-09-08:
  81:..//Libraries/XMCLib/inc/xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  82:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  83:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @endcond
  84:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
  85:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
  86:..//Libraries/XMCLib/inc/xmc_usic.h **** 
  87:..//Libraries/XMCLib/inc/xmc_usic.h **** #ifndef XMC_USIC_H
  88:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC_H
  89:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
  90:..//Libraries/XMCLib/inc/xmc_usic.h ****  * HEADER FILES
  91:..//Libraries/XMCLib/inc/xmc_usic.h ****  *******************************************************************************/
  92:..//Libraries/XMCLib/inc/xmc_usic.h **** 
  93:..//Libraries/XMCLib/inc/xmc_usic.h **** #include "xmc_common.h"
  94:..//Libraries/XMCLib/inc/xmc_usic.h **** 
  95:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
  96:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  97:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @{
  98:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
  99:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 100:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 101:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @addtogroup USIC
 102:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 103:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 104:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 105:..//Libraries/XMCLib/inc/xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 106:..//Libraries/XMCLib/inc/xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 107:..//Libraries/XMCLib/inc/xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 108:..//Libraries/XMCLib/inc/xmc_usic.h ****  * by each communication channel and which pins are used.
 109:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 110:..//Libraries/XMCLib/inc/xmc_usic.h ****  * communication protocols.
 111:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
 112:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC driver features:
 113:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 114:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 115:..//Libraries/XMCLib/inc/xmc_usic.h ****  friendly format.
 116:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 117:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 118:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 119:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 120:..//Libraries/XMCLib/inc/xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 121:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @{
 122:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 123:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 124:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
 125:..//Libraries/XMCLib/inc/xmc_usic.h ****  * MACROS
 126:..//Libraries/XMCLib/inc/xmc_usic.h ****  *******************************************************************************/
 127:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 128:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 129:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 130:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 131:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 132:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(USIC1)
 133:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 134:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 135:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 136:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 137:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 138:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(USIC2)
 139:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 140:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 141:..//Libraries/XMCLib/inc/xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 142:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 143:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 144:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 145:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 146:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 147:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 148:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 149:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 150:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 151:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 152:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 153:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 154:..//Libraries/XMCLib/inc/xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 155:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 156:..//Libraries/XMCLib/inc/xmc_usic.h **** #if UC_FAMILY == XMC1
 157:..//Libraries/XMCLib/inc/xmc_usic.h ****  #include "xmc1_usic_map.h"
 158:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 159:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 160:..//Libraries/XMCLib/inc/xmc_usic.h **** #if UC_FAMILY == XMC4
 161:..//Libraries/XMCLib/inc/xmc_usic.h ****  #include "xmc4_usic_map.h"
 162:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 163:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 164:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
 165:..//Libraries/XMCLib/inc/xmc_usic.h ****  * ENUMS
 166:..//Libraries/XMCLib/inc/xmc_usic.h ****  *******************************************************************************/
 167:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 168:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 169:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel driver status
 170:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 171:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 172:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 173:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 174:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 175:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 176:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 177:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 178:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 179:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel kernel mode
 180:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 181:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 182:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 183:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 184:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 185:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 186:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 187:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 188:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 189:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 190:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel operating mode
 191:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 192:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 193:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 194:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 195:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 196:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 197:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 198:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 199:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 200:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 201:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 202:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel inputs
 203:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 204:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 205:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 206:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 207:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 208:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 209:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 210:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 211:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 212:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 213:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 214:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 215:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel input source sampling frequency
 216:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 217:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 218:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 219:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 220:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 221:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 222:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 223:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 224:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel input combination mode
 225:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 226:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 227:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 228:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 229:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 230:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 231:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 232:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 233:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 234:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 235:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel data transmission start modes.
 236:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 237:..//Libraries/XMCLib/inc/xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 238:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the TCSR->TDEN bitfield.
 239:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 240:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 241:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 242:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 243:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 244:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 245:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 246:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 247:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 248:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 249:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel interrupt node pointers
 250:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 251:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 252:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 253:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 254:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 255:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 256:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 257:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 258:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 259:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 260:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 261:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel events
 262:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 263:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 264:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 265:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 266:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 267:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 268:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 269:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 270:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 271:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 272:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 273:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 274:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 275:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel parity mode
 276:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 277:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 278:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 279:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 280:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 281:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 282:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 283:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 284:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 285:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel data output mode
 286:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 287:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 288:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 289:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 290:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 291:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 292:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 293:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 294:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel data transmit buffer status
 295:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 296:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 297:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 298:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 299:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 300:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 301:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 302:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 303:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 304:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 305:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel data transmit buffer status modification
 306:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 307:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 308:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 309:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 310:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 311:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 312:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 313:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 314:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive buffer status
 315:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 316:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 317:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 318:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 319:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 320:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 321:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 322:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 323:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel output signal passive data level
 324:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 325:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 326:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 327:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 328:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 329:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 330:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 331:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 332:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive FIFO size
 333:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 334:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 335:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 336:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 337:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 338:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 339:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 340:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 341:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 342:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 343:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 344:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 345:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 346:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 347:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 348:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 349:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 350:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 351:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 352:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 353:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 354:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 355:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel transmit FIFO event configuration
 356:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 357:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 358:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 359:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 360:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 361:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 362:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 363:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 364:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel transmit FIFO status
 365:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 366:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 367:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 368:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 369:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 370:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 371:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 372:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 373:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 374:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 375:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 376:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 377:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 378:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 379:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 380:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 381:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 382:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive FIFO event configuration
 383:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 384:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 385:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 386:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 387:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 388:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 389:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 390:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 391:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 392:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel receive FIFO status
 393:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 394:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 395:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 396:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 397:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 398:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 399:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 400:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 401:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 402:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator clock source
 403:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 404:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 405:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 406:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 407:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 408:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 409:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 410:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 411:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator divider mode
 412:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 413:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 414:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 415:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 416:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 417:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 418:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 419:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 420:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 421:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 422:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 423:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 424:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 425:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 426:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 427:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 428:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 429:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 430:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 431:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 432:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 433:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 434:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 435:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 436:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 437:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 438:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 439:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 440:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 441:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel baudrate generator shift clock output
 442:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 443:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 444:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 445:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 446:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 447:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 448:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 449:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 450:..//Libraries/XMCLib/inc/xmc_usic.h **** * USIC channel shift direction.
 451:..//Libraries/XMCLib/inc/xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 452:..//Libraries/XMCLib/inc/xmc_usic.h **** */
 453:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 454:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 455:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 456:..//Libraries/XMCLib/inc/xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 457:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 458:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 459:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 460:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
 461:..//Libraries/XMCLib/inc/xmc_usic.h ****  * DATA STRUCTURES
 462:..//Libraries/XMCLib/inc/xmc_usic.h ****  *******************************************************************************/
 463:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 464:..//Libraries/XMCLib/inc/xmc_usic.h **** /*Anonymous structure/union guard start*/
 465:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(__CC_ARM)
 466:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma push
 467:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma anon_unions
 468:..//Libraries/XMCLib/inc/xmc_usic.h **** #elif defined(__TASKING__)
 469:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma warning 586
 470:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 471:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 472:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 473:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC module structure
 474:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 475:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 476:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 477:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 478:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 479:..//Libraries/XMCLib/inc/xmc_usic.h ****  * except for some registers.
 480:..//Libraries/XMCLib/inc/xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 481:..//Libraries/XMCLib/inc/xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 482:..//Libraries/XMCLib/inc/xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 483:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 484:..//Libraries/XMCLib/inc/xmc_usic.h **** typedef struct XMC_USIC_CH
 485:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 486:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RESERVED0;
 487:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 488:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RESERVED1;
 489:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 490:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 491:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 492:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 493:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 494:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 495:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  TCSR;
 496:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 497:..//Libraries/XMCLib/inc/xmc_usic.h ****   union {
 498:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 499:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 500:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 501:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 502:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 503:..//Libraries/XMCLib/inc/xmc_usic.h ****   };
 504:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 505:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 506:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 507:..//Libraries/XMCLib/inc/xmc_usic.h ****   union {
 508:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 509:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 510:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 511:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 512:..//Libraries/XMCLib/inc/xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 513:..//Libraries/XMCLib/inc/xmc_usic.h ****   };
 514:..//Libraries/XMCLib/inc/xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 515:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 516:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 517:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 518:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 519:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 520:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 521:..//Libraries/XMCLib/inc/xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 522:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 523:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 524:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 525:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 526:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 527:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 528:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 529:..//Libraries/XMCLib/inc/xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 530:..//Libraries/XMCLib/inc/xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 531:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 532:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 533:..//Libraries/XMCLib/inc/xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 534:..//Libraries/XMCLib/inc/xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 535:..//Libraries/XMCLib/inc/xmc_usic.h **** } XMC_USIC_CH_t;
 536:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 537:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 538:..//Libraries/XMCLib/inc/xmc_usic.h **** /*Anonymous structure/union guard end*/
 539:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(__CC_ARM)
 540:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma pop
 541:..//Libraries/XMCLib/inc/xmc_usic.h **** #elif defined(__TASKING__)
 542:..//Libraries/XMCLib/inc/xmc_usic.h ****   #pragma warning restore
 543:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 544:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 545:..//Libraries/XMCLib/inc/xmc_usic.h **** /*******************************************************************************
 546:..//Libraries/XMCLib/inc/xmc_usic.h ****  * API PROTOTYPES
 547:..//Libraries/XMCLib/inc/xmc_usic.h ****  ******************************************************************************/
 548:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 549:..//Libraries/XMCLib/inc/xmc_usic.h **** #ifdef __cplusplus
 550:..//Libraries/XMCLib/inc/xmc_usic.h **** extern "C" {
 551:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 552:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 553:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 554:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 555:..//Libraries/XMCLib/inc/xmc_usic.h ****   bool tmp;
 556:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 557:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = (module == XMC_USIC0);
 558:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(XMC_USIC1)  
 559:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 560:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 561:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(XMC_USIC2)  
 562:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 563:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 564:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 565:..//Libraries/XMCLib/inc/xmc_usic.h ****   return tmp;
 566:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 567:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 568:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 569:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 570:..//Libraries/XMCLib/inc/xmc_usic.h ****   bool tmp;
 571:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 572:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 573:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(XMC_USIC1)  
 574:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 575:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 576:..//Libraries/XMCLib/inc/xmc_usic.h **** #if defined(XMC_USIC2)  
 577:..//Libraries/XMCLib/inc/xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 578:..//Libraries/XMCLib/inc/xmc_usic.h **** #endif
 579:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 580:..//Libraries/XMCLib/inc/xmc_usic.h ****   return tmp;
 581:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 582:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 583:..//Libraries/XMCLib/inc/xmc_usic.h **** /* Common APIs */
 584:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 585:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 586:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 587:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 588:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 589:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
 590:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 591:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the USIC module.\n\n
 592:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the clock for the USIC module by following the
 593:..//Libraries/XMCLib/inc/xmc_usic.h ****  * clock enabling sequence for the selected device.
 594:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 595:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 596:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 597:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 598:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 599:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 600:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 601:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 602:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 603:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 604:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 605:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the USIC module.\n\n
 606:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 607:..//Libraries/XMCLib/inc/xmc_usic.h ****  * disabling sequence for the selected device.
 608:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 609:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 610:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 611:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 612:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 613:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 614:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 615:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 616:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 617:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 618:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 619:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the USIC channel. \n\n
 620:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 621:..//Libraries/XMCLib/inc/xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 622:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 623:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 624:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 625:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 626:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 627:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 628:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 629:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 630:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 631:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 632:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 633:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the USIC channel.\n\n
 634:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 635:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 636:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 637:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 638:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 639:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 640:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 641:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 642:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 643:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 644:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 645:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 646:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 647:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 648:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 649:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 650:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 651:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 652:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 653:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 654:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 655:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 656:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 657:..//Libraries/XMCLib/inc/xmc_usic.h ****  * baudrate.
 658:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 659:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 660:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 661:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 662:..//Libraries/XMCLib/inc/xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 663:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 664:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 665:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 666:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 667:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 668:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 669:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 670:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 671:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 672:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                          output DXnT of the input stage.
 673:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 674:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 675:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 676:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 677:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 678:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 679:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 680:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 681:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 682:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 683:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 684:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                         const uint16_t pdiv,
 685:..//Libraries/XMCLib/inc/xmc_usic.h **** 												 const uint32_t oversampling,
 686:..//Libraries/XMCLib/inc/xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 687:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 688:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 689:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 690:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 691:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 692:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 693:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 694:..//Libraries/XMCLib/inc/xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 695:..//Libraries/XMCLib/inc/xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 696:..//Libraries/XMCLib/inc/xmc_usic.h ****  * </tr></table>
 697:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 698:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 699:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 700:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 701:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 702:..//Libraries/XMCLib/inc/xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 703:..//Libraries/XMCLib/inc/xmc_usic.h ****  *  
 704:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 705:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 706:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 707:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 708:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 709:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 710:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 711:..//Libraries/XMCLib/inc/xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 712:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 713:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 714:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 715:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 716:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 717:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 718:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 719:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 720:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 721:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The input of the data shift unit is controlled by the
 722:..//Libraries/XMCLib/inc/xmc_usic.h ****  * protocol pre-processor. \n\n
 723:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 724:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 725:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 726:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 727:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 728:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 729:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 730:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 731:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 732:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 733:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 734:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 735:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 736:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 737:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 738:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 739:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 740:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The input of the data shift unit is connected to
 741:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the selected data input line. \n\n
 742:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 743:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This setting is used
 744:..//Libraries/XMCLib/inc/xmc_usic.h ****  * if the signals are directly derived from an input
 745:..//Libraries/XMCLib/inc/xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 746:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 747:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 748:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 749:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 750:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 751:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 752:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 753:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 754:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 755:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 756:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 757:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 758:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 759:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 760:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 761:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 762:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 763:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 764:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 765:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 766:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 767:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 768:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 769:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 770:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 771:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 772:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 773:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 774:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 775:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 776:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 777:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 778:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 779:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 780:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 781:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 782:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 783:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 784:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 785:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 786:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 787:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 788:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 789:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 790:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 791:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 792:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 793:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 794:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 795:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 796:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 797:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 798:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables delay compensation. \n\n
 799:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 800:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 801:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 802:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 803:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 804:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 805:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 806:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 807:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 808:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 809:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 810:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 811:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 812:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 813:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 814:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 815:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables delay compensation.. \n\n
 816:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 817:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 818:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 819:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 820:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 821:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 822:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 823:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 824:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 825:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 826:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 827:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 828:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 829:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 830:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 831:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 832:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 833:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 834:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 835:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 836:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 837:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 838:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 839:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 840:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 841:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 842:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 843:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 844:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 845:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 846:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 847:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 848:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 849:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 850:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 851:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 852:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 853:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 854:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 855:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 856:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 857:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 858:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 859:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 860:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 861:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 862:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 863:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 864:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 865:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 866:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 867:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 868:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 869:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 870:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 871:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 872:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 873:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 874:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 875:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 876:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 877:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 878:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 879:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 880:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 881:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 882:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 883:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 884:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 885:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 886:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 887:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 888:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 889:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 890:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 891:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 893:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 894:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 895:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 896:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 897:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 898:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 899:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 900:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 901:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 902:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 903:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 904:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 905:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 906:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 907:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 908:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 909:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 910:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 911:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 912:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 913:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 914:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 915:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 916:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 917:..//Libraries/XMCLib/inc/xmc_usic.h ****                          ((uint32_t)sampling_freq);
 918:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 919:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 920:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 921:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 922:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 923:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 924:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 925:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 926:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 927:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 928:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 929:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 930:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 931:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 932:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 933:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 934:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 935:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 936:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 937:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 938:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 939:..//Libraries/XMCLib/inc/xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 940:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 941:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 942:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 943:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 944:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 945:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 946:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 947:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 948:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 949:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 950:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 951:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 952:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 953:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 954:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 955:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 956:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 957:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 958:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 959:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 960:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 961:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 962:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted. \n
 963:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
 964:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 965:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 966:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 967:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
 968:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The data provided is placed in TBUF[0U].
 969:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 970:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 971:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 972:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
 973:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 974:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
 975:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 976:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TBUF[0U] = data;
 977:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 978:..//Libraries/XMCLib/inc/xmc_usic.h **** 
 979:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
 980:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 981:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 982:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted.
 983:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
 984:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
 985:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
 986:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 987:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
 988:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
 989:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
 990:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 991:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
 992:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 993:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
 994:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
 995:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
 996:..//Libraries/XMCLib/inc/xmc_usic.h ****                                              const uint16_t data,
 997:..//Libraries/XMCLib/inc/xmc_usic.h ****                                              const uint32_t transmit_control_information)
 998:..//Libraries/XMCLib/inc/xmc_usic.h **** {
 999:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1000:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1001:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1002:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1003:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1004:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1005:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1006:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1007:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1008:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1009:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1010:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1011:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1012:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1013:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1014:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1015:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1016:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1017:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1018:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1019:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1020:..//Libraries/XMCLib/inc/xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1021:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1022:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1023:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1024:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1025:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1026:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1027:..//Libraries/XMCLib/inc/xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1028:..//Libraries/XMCLib/inc/xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1029:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1030:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1031:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1032:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1033:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1034:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1035:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1036:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1037:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1038:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1039:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1040:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1041:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1042:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1043:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1044:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1045:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1046:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1047:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Captured counter value 
1048:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1049:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1050:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1051:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1052:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1053:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1054:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1055:..//Libraries/XMCLib/inc/xmc_usic.h ****   return channel->CMTR;
1056:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1057:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1058:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1059:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1060:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1061:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1062:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  step divider \n
1063:..//Libraries/XMCLib/inc/xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1064:..//Libraries/XMCLib/inc/xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1065:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1066:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1067:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1068:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1069:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1070:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1071:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1072:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1073:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1074:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->FDR = mode | step;
1075:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1076:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1077:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1078:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1079:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1080:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1081:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1082:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1083:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1084:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1085:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1086:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Define the data frame length.\n\n
1087:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1088:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1089:..//Libraries/XMCLib/inc/xmc_usic.h ****  * has to be controlled explicitly. 
1090:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1091:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1092:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1093:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1094:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1095:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1096:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1097:..//Libraries/XMCLib/inc/xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1098:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1099:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1100:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1101:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1102:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1103:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1104:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1105:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				can be combined using \a OR operation.
1106:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1107:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1108:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1109:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1110:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1111:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1112:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1113:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1114:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1115:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1116:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1117:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1118:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1119:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->CCR |= event;
1120:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1121:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1122:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1123:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1124:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1125:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1126:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1127:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				can be combined using \a OR operation.
1128:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1129:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1130:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1131:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1132:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1133:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1134:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1135:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1136:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1137:..//Libraries/XMCLib/inc/xmc_usic.h **** */
1138:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1139:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1140:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1141:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1142:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1143:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1144:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1145:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1146:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1147:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1148:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1149:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param service_request Service request number.\n
1150:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  \b Range: 0 to 5.
1151:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1152:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1153:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1154:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1155:..//Libraries/XMCLib/inc/xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1156:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1157:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1158:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1159:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1160:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1161:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1162:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1163:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1164:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          const uint32_t service_request);
1165:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1166:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1167:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1168:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1169:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1170:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1171:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1172:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1173:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets transmit buffer status. \n\n
1174:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1175:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1176:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1177:..//Libraries/XMCLib/inc/xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1178:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1179:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1180:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1181:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1182:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1183:..//Libraries/XMCLib/inc/xmc_usic.h **** {
  26              	 .loc 1 1183 1
  27              	 .cfi_startproc
  28              	 
  29              	 
  30 0000 80B5     	 push {r7,lr}
  31              	.LCFI0:
  32              	 .cfi_def_cfa_offset 8
  33              	 .cfi_offset 7,-8
  34              	 .cfi_offset 14,-4
  35 0002 82B0     	 sub sp,sp,#8
  36              	.LCFI1:
  37              	 .cfi_def_cfa_offset 16
  38 0004 00AF     	 add r7,sp,#0
  39              	.LCFI2:
  40              	 .cfi_def_cfa_register 7
  41 0006 7860     	 str r0,[r7,#4]
1184:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
  42              	 .loc 1 1184 45
  43 0008 7B68     	 ldr r3,[r7,#4]
  44 000a 9B6B     	 ldr r3,[r3,#56]
  45              	 .loc 1 1184 10
  46 000c DBB2     	 uxtb r3,r3
  47 000e 7F22     	 movs r2,#127
  48 0010 9343     	 bics r3,r2
  49 0012 DBB2     	 uxtb r3,r3
1185:..//Libraries/XMCLib/inc/xmc_usic.h **** }
  50              	 .loc 1 1185 1
  51 0014 1800     	 movs r0,r3
  52 0016 BD46     	 mov sp,r7
  53 0018 02B0     	 add sp,sp,#8
  54              	 
  55 001a 80BD     	 pop {r7,pc}
  56              	 .cfi_endproc
  57              	.LFE66:
  59              	 .section .text.XMC_USIC_CH_SetMode,"ax",%progbits
  60              	 .align 1
  61              	 .syntax unified
  62              	 .code 16
  63              	 .thumb_func
  64              	 .fpu softvfp
  66              	XMC_USIC_CH_SetMode:
  67              	.LFB101:
1186:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1187:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1188:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @brief API to get receive buffer status
1189:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1190:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1191:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1192:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1193:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1194:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1195:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1196:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1197:..//Libraries/XMCLib/inc/xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1198:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1199:..//Libraries/XMCLib/inc/xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1200:..//Libraries/XMCLib/inc/xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1201:..//Libraries/XMCLib/inc/xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1202:..//Libraries/XMCLib/inc/xmc_usic.h ****  * can be read from RBUF.
1203:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1204:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1205:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1206:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1207:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1208:..//Libraries/XMCLib/inc/xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1209:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1210:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1211:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1212:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1213:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1214:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1215:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1216:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1217:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1218:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1219:..//Libraries/XMCLib/inc/xmc_usic.h ****  *                              
1220:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1221:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1222:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1223:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Configures data transmission. \n\n
1224:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1225:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1226:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1227:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1228:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1229:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1230:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1231:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1232:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1233:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1234:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1235:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1236:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1237:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1238:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1239:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1240:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1241:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1242:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1243:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1244:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Configures the mode for data output. \n\n
1245:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1246:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1247:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1248:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1249:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1250:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1251:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1252:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1253:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1254:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1255:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1256:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1257:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1258:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1259:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1260:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1261:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1262:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1263:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1264:..//Libraries/XMCLib/inc/xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1265:..//Libraries/XMCLib/inc/xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1266:..//Libraries/XMCLib/inc/xmc_usic.h ****  * IN[x] register.
1267:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1268:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1269:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1270:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1271:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1272:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1273:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1274:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1275:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1276:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1277:..//Libraries/XMCLib/inc/xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1278:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1279:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1280:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1281:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1282:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1283:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1284:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1285:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1286:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1287:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1288:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1289:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1290:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1291:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1292:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1293:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1294:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1295:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1296:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1297:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1298:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1299:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1300:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1301:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1302:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1303:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1304:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1305:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1306:..//Libraries/XMCLib/inc/xmc_usic.h ****  * for event driven transfer starts.
1307:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1308:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1309:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1310:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1311:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1312:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1313:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1314:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1315:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1316:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1317:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1318:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1319:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1320:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1321:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1322:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1323:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1324:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1325:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1326:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1327:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1328:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1329:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1330:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1331:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1332:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1333:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1334:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1335:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1336:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1337:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: 0 to 5.
1338:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1339:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1340:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1341:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1342:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1343:..//Libraries/XMCLib/inc/xmc_usic.h ****  * generated if enabled. 
1344:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1345:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1346:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1347:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1348:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1349:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1350:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1351:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1352:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1353:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1354:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1355:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1356:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1357:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1358:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1359:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1360:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1361:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1362:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1363:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1364:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1365:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1366:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1367:..//Libraries/XMCLib/inc/xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1368:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1369:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1370:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1371:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1372:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1373:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1376:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1377:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1378:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1379:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1380:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1381:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1382:..//Libraries/XMCLib/inc/xmc_usic.h ****  * configured passive level.
1383:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1384:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1385:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1386:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1387:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1388:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1389:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1390:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1391:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1392:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1393:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1394:..//Libraries/XMCLib/inc/xmc_usic.h **** /* TX FIFO APIs */
1395:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1396:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1397:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1398:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1399:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to 63.
1400:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1401:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1402:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1403:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1404:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1405:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1406:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1407:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1408:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1409:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1410:..//Libraries/XMCLib/inc/xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1411:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1412:..//Libraries/XMCLib/inc/xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1413:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1414:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1415:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1416:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1417:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1418:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const uint32_t data_pointer,
1419:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1420:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const uint32_t limit);
1421:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1422:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1423:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1424:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1425:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1426:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1427:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1428:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1429:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1430:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1431:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1432:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1433:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1434:..//Libraries/XMCLib/inc/xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1435:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1436:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1437:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1438:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1439:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1440:..//Libraries/XMCLib/inc/xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1441:..//Libraries/XMCLib/inc/xmc_usic.h ****                                             const uint32_t limit);
1442:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1443:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1444:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1445:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1446:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1447:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1448:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1449:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1450:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1451:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1452:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1453:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1454:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1455:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1456:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1457:..//Libraries/XMCLib/inc/xmc_usic.h ****  * must be enabled.
1458:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1459:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1460:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1461:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1462:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1463:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1464:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TBCTR |= event;
1465:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1466:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1467:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1468:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1469:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1470:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1471:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1472:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1473:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1474:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1475:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1476:..//Libraries/XMCLib/inc/xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1477:..//Libraries/XMCLib/inc/xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1478:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1479:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1480:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1481:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1482:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1483:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1484:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1485:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1486:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1487:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1488:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1489:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1490:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1491:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1492:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1493:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1494:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1495:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1496:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  \b Range: 0 to 5.
1497:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1498:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1499:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1500:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1501:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1502:..//Libraries/XMCLib/inc/xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1503:..//Libraries/XMCLib/inc/xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1504:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1505:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1506:..//Libraries/XMCLib/inc/xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1507:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1508:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1509:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1510:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1511:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1512:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1513:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1514:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1515:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                 const uint32_t service_request);
1516:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1517:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1518:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1519:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1520:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted. \n
1521:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1522:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1523:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1524:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1525:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1526:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1527:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1528:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1529:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1530:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1531:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1532:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1533:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1534:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->IN[0] = data;
1535:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1536:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1537:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1538:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1539:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1540:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted.
1541:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1542:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1543:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1544:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1545:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1546:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1547:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1548:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1549:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1550:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1551:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1552:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1553:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1554:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1555:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                        const uint16_t data,
1556:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                        const uint32_t frame_length)
1557:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1558:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->IN[frame_length] = data;
1559:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1560:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1561:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1562:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1563:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1564:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data Data to be transmitted.
1565:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1566:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1567:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1568:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1569:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1570:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1571:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1572:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1573:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1574:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1575:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1576:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1577:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1578:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1579:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                        const uint16_t data,
1580:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                        const uint32_t frame_length)
1581:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1582:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->IN[frame_length] = data;
1583:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1584:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1585:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1586:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1587:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1588:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1589:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1590:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1591:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1592:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1593:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1594:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1595:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1596:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1597:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1598:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1599:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1600:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1601:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1602:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1603:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1604:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1605:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1606:..//Libraries/XMCLib/inc/xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1607:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1608:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1609:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1610:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1611:..//Libraries/XMCLib/inc/xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1612:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1613:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1614:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1615:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1616:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1617:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1618:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1619:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1620:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1621:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1622:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1623:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1624:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1625:..//Libraries/XMCLib/inc/xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1626:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1627:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1628:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1629:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1630:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1631:..//Libraries/XMCLib/inc/xmc_usic.h ****  * FIFO empty flag is set.
1632:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1633:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1634:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1635:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1636:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1637:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1638:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1639:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1640:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1641:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1642:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1643:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1644:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1645:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1646:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1647:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1648:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1649:..//Libraries/XMCLib/inc/xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1650:..//Libraries/XMCLib/inc/xmc_usic.h ****  * of this filling level.
1651:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1652:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1653:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1654:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1655:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1656:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1657:..//Libraries/XMCLib/inc/xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1658:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1659:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1660:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1661:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1662:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1663:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1664:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1665:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1666:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1667:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1668:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1669:..//Libraries/XMCLib/inc/xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1670:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1671:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1672:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1673:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1674:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1675:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1676:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1677:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1678:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1679:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1680:..//Libraries/XMCLib/inc/xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1681:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1682:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1683:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1684:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1685:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1686:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1687:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1688:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1689:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1690:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1691:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1692:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1693:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1694:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1695:..//Libraries/XMCLib/inc/xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1696:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple event enumerations.
1697:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1698:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1699:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1700:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1701:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1702:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                    const uint32_t event)
1703:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1704:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TRBSCR = event;
1705:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1706:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1707:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1708:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1710:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1711:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to 63.
1712:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1713:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1714:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1715:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1716:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1717:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1718:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1719:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Configures the receive FIFO. \n\n
1720:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1721:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1722:..//Libraries/XMCLib/inc/xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1723:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1724:..//Libraries/XMCLib/inc/xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1725:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1726:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1727:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1728:..//Libraries/XMCLib/inc/xmc_usic.h **** */
1729:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1730:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const uint32_t data_pointer,
1731:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1732:..//Libraries/XMCLib/inc/xmc_usic.h ****                                   const uint32_t limit);
1733:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1734:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1735:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1736:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1737:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1738:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1739:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1740:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1741:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1742:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1743:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1744:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1745:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1746:..//Libraries/XMCLib/inc/xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1747:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1748:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1749:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1750:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1751:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1752:..//Libraries/XMCLib/inc/xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1753:..//Libraries/XMCLib/inc/xmc_usic.h ****                                             const uint32_t limit);
1754:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1755:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1756:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1757:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1758:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1759:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1760:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1761:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1762:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1763:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1764:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1765:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1766:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1767:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1768:..//Libraries/XMCLib/inc/xmc_usic.h ****  * must be enabled.
1769:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1770:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1771:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1772:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1773:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1774:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1775:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->RBCTR |= event;
1776:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1777:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1778:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1779:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1780:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1781:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1782:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param event Events to be disabled. \n
1783:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1784:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1785:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1786:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1787:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1788:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1789:..//Libraries/XMCLib/inc/xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1790:..//Libraries/XMCLib/inc/xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1791:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1792:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1793:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1794:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1795:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1796:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1797:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1798:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1799:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1800:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1801:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1802:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1803:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1804:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1805:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1806:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1807:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1808:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1809:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: 0 to 5.
1810:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1811:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1812:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1813:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1814:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1815:..//Libraries/XMCLib/inc/xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1816:..//Libraries/XMCLib/inc/xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1817:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1818:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1819:..//Libraries/XMCLib/inc/xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1820:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1821:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1822:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1823:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1824:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1825:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1826:..//Libraries/XMCLib/inc/xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1827:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1828:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                 const uint32_t service_request);
1829:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1830:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1831:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1832:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1833:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1834:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1835:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1836:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1837:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1838:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1839:..//Libraries/XMCLib/inc/xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1840:..//Libraries/XMCLib/inc/xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1841:..//Libraries/XMCLib/inc/xmc_usic.h ****  * until receive FIFO is empty.
1842:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1843:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1844:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1845:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1846:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1847:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1848:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1849:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1850:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1851:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1852:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1853:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1854:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1855:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1856:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1857:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1858:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1859:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1860:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1861:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1862:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1863:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1864:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1865:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1866:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1867:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1868:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1869:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1870:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1871:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1872:..//Libraries/XMCLib/inc/xmc_usic.h ****  *              \a false if receive FIFO is not full.
1873:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1874:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1875:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1876:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1877:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1878:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1879:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1880:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1881:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1882:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1883:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1884:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1885:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1886:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1887:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1888:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1889:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1890:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1891:..//Libraries/XMCLib/inc/xmc_usic.h ****  *              \a false if receive FIFO has some data.
1892:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1893:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1894:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1895:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1896:..//Libraries/XMCLib/inc/xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1897:..//Libraries/XMCLib/inc/xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1898:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1899:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1900:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1901:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1902:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1903:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1904:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1905:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1906:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1907:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1908:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1909:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1910:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1911:..//Libraries/XMCLib/inc/xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1912:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1913:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1914:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1915:..//Libraries/XMCLib/inc/xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1916:..//Libraries/XMCLib/inc/xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1917:..//Libraries/XMCLib/inc/xmc_usic.h ****  * receive FIFO.
1918:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1919:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1920:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1921:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1922:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1923:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1924:..//Libraries/XMCLib/inc/xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1925:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1926:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1927:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1928:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1929:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1930:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
1931:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1932:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1933:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1934:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1935:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
1936:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
1937:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
1938:..//Libraries/XMCLib/inc/xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
1939:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1940:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
1941:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1942:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1943:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1944:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
1945:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1946:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1947:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1948:..//Libraries/XMCLib/inc/xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
1949:..//Libraries/XMCLib/inc/xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
1950:..//Libraries/XMCLib/inc/xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
1951:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1952:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1953:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1954:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1955:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1956:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
1957:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1958:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1959:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1960:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1961:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1962:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
1963:..//Libraries/XMCLib/inc/xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1964:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1965:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
1966:..//Libraries/XMCLib/inc/xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1967:..//Libraries/XMCLib/inc/xmc_usic.h ****  * multiple event enumerations.
1968:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1969:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1970:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
1971:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1972:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1973:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                    const uint32_t event)
1974:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1975:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->TRBSCR = event;
1976:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1977:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1978:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1979:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1980:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1981:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1982:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1983:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
1984:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
1985:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
1986:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
1987:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1988:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
1989:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
1990:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
1991:..//Libraries/XMCLib/inc/xmc_usic.h **** {
1992:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
1993:..//Libraries/XMCLib/inc/xmc_usic.h **** }
1994:..//Libraries/XMCLib/inc/xmc_usic.h **** 
1995:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
1996:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1997:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1998:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
1999:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2000:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
2001:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
2002:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
2003:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2004:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2005:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
2006:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
2007:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
2008:..//Libraries/XMCLib/inc/xmc_usic.h **** {
2009:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
2010:..//Libraries/XMCLib/inc/xmc_usic.h **** }
2011:..//Libraries/XMCLib/inc/xmc_usic.h **** 
2012:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
2013:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2014:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2015:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
2016:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
2017:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
2018:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2019:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
2020:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
2021:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
2022:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
2023:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
2024:..//Libraries/XMCLib/inc/xmc_usic.h **** {
2025:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
2026:..//Libraries/XMCLib/inc/xmc_usic.h **** }
2027:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
2028:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2029:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2030:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
2031:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
2032:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
2033:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
2034:..//Libraries/XMCLib/inc/xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
2035:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
2036:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
2037:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
2038:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
2039:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2040:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
2041:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
2042:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
2043:..//Libraries/XMCLib/inc/xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
2044:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
2045:..//Libraries/XMCLib/inc/xmc_usic.h ****  * This value should be configured based on the slave device requirement.
2046:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
2047:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 
2048:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
2049:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
2050:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
2051:..//Libraries/XMCLib/inc/xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
2052:..//Libraries/XMCLib/inc/xmc_usic.h **** {
2053:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
2054:..//Libraries/XMCLib/inc/xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
2055:..//Libraries/XMCLib/inc/xmc_usic.h ****                  (uint32_t)passive_level |
2056:..//Libraries/XMCLib/inc/xmc_usic.h ****                  (uint32_t)clock_output;
2057:..//Libraries/XMCLib/inc/xmc_usic.h **** }
2058:..//Libraries/XMCLib/inc/xmc_usic.h **** 
2059:..//Libraries/XMCLib/inc/xmc_usic.h **** /**
2060:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2061:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2062:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @param mode USIC channel operation mode. \n
2063:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
2064:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
2065:..//Libraries/XMCLib/inc/xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
2066:..//Libraries/XMCLib/inc/xmc_usic.h ****  * @return None
2067:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2068:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Description</b><br>
2069:..//Libraries/XMCLib/inc/xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
2070:..//Libraries/XMCLib/inc/xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
2071:..//Libraries/XMCLib/inc/xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
2072:..//Libraries/XMCLib/inc/xmc_usic.h ****  *
2073:..//Libraries/XMCLib/inc/xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2074:..//Libraries/XMCLib/inc/xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
2075:..//Libraries/XMCLib/inc/xmc_usic.h ****  */
2076:..//Libraries/XMCLib/inc/xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
2077:..//Libraries/XMCLib/inc/xmc_usic.h **** {
  68              	 .loc 1 2077 1
  69              	 .cfi_startproc
  70              	 
  71              	 
  72 0000 80B5     	 push {r7,lr}
  73              	.LCFI3:
  74              	 .cfi_def_cfa_offset 8
  75              	 .cfi_offset 7,-8
  76              	 .cfi_offset 14,-4
  77 0002 82B0     	 sub sp,sp,#8
  78              	.LCFI4:
  79              	 .cfi_def_cfa_offset 16
  80 0004 00AF     	 add r7,sp,#0
  81              	.LCFI5:
  82              	 .cfi_def_cfa_register 7
  83 0006 7860     	 str r0,[r7,#4]
  84 0008 0A00     	 movs r2,r1
  85 000a FB1C     	 adds r3,r7,#3
  86 000c 1A70     	 strb r2,[r3]
2078:..//Libraries/XMCLib/inc/xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
  87              	 .loc 1 2078 36
  88 000e 7B68     	 ldr r3,[r7,#4]
  89 0010 1B6C     	 ldr r3,[r3,#64]
  90              	 .loc 1 2078 18
  91 0012 0F22     	 movs r2,#15
  92 0014 9343     	 bics r3,r2
  93 0016 1A00     	 movs r2,r3
  94              	 .loc 1 2078 73
  95 0018 FB1C     	 adds r3,r7,#3
  96 001a 1B78     	 ldrb r3,[r3]
  97              	 .loc 1 2078 71
  98 001c 1A43     	 orrs r2,r3
  99              	 .loc 1 2078 16
 100 001e 7B68     	 ldr r3,[r7,#4]
 101 0020 1A64     	 str r2,[r3,#64]
2079:..//Libraries/XMCLib/inc/xmc_usic.h **** }
 102              	 .loc 1 2079 1
 103 0022 C046     	 nop
 104 0024 BD46     	 mov sp,r7
 105 0026 02B0     	 add sp,sp,#8
 106              	 
 107 0028 80BD     	 pop {r7,pc}
 108              	 .cfi_endproc
 109              	.LFE101:
 111              	 .section .text.XMC_I2C_CH_ClearStatusFlag,"ax",%progbits
 112              	 .align 1
 113              	 .syntax unified
 114              	 .code 16
 115              	 .thumb_func
 116              	 .fpu softvfp
 118              	XMC_I2C_CH_ClearStatusFlag:
 119              	.LFB109:
 120              	 .file 2 "..//Libraries/XMCLib/inc/xmc_i2c.h"
   1:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
   2:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @file xmc_i2c.h
   3:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @date 2017-10-27
   4:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
   5:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @cond
   6:..//Libraries/XMCLib/inc/xmc_i2c.h ****  **************************************************************************************************
   7:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
   9:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * All rights reserved.                        
  11:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *                                             
  12:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * following conditions are met:   
  14:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *                                                                              
  15:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * disclaimer.                        
  17:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 
  18:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 
  21:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * products derived from this software without specific prior written permission.                  
  23:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *                                                                              
  24:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *                                                                              
  32:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:..//Libraries/XMCLib/inc/xmc_i2c.h ****  **************************************************************************************************
  35:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
  36:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Change History
  37:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * --------------
  38:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
  39:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 2015-02-20:
  40:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Initial <br>
  41:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *      
  42:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 2015-05-20:
  43:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Description updated <br>
  44:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Added XMC_I2C_CH_TriggerServiceRequest() and XMC_I2C_CH_SelectInterruptNodePointer() <br>
  45:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
  46:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 2015-06-20:
  47:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  48:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
  49:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 2015-08-27:
  50:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Added APIs for external input for BRG configuration:XMC_I2C_CH_ConfigExternalInputSignalTo
  51:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
  52:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 2015-09-01:
  53:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Added APIs for enabling or disabling the ACK response to a 0x00 slave address: XMC_I2C_CH_
  54:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *       XMC_I2C_CH_DisableSlaveAcknowledgeTo00(). <br>
  55:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Modified XMC_I2C_CH_SetInputSource() API for avoiding complete DXCR register overwriting. 
  56:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Modified XMC_I2C_CH_EVENT_t enum for supporting XMC_I2C_CH_EnableEvent() and XMC_I2C_CH_Di
  57:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *       for supporting multiple events configuration <br>
  58:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
  59:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 2015-10-02:
  60:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Fix 10bit addressing
  61:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
  62:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 2015-10-07:
  63:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Fix register access in XMC_I2C_CH_EnableSlaveAcknowledgeTo00() and XMC_I2C_CH_DisableSlave
  64:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Naming of APIs modified: from XMC_I2C_CH_EnableSlaveAcknowledgeTo00() to  XMC_I2C_CH_Enabl
  65:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *       and from XMC_I2C_CH_DisableSlaveAcknowledgeTo00() to XMC_I2C_CH_DisableAcknowledgeAddress0
  66:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
  67:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 2016-05-20:
  68:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableDataTransmission() and XMC_I2C_CH_DisableDataTransmission()
  69:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
  70:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 2016-08-17:
  71:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Improved documentation of slave address passing
  72:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
  73:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 2017-10-25:
  74:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableMasterClock() and XMC_I2C_CH_DisableMasterClock()
  75:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
  76:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 
  77:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @endcond 
  78:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
  79:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
  80:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
  81:..//Libraries/XMCLib/inc/xmc_i2c.h **** #ifndef XMC_I2C_H
  82:..//Libraries/XMCLib/inc/xmc_i2c.h **** #define XMC_I2C_H
  83:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
  84:..//Libraries/XMCLib/inc/xmc_i2c.h **** /*******************************************************************************
  85:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * HEADER FILES
  86:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *******************************************************************************/
  87:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
  88:..//Libraries/XMCLib/inc/xmc_i2c.h **** #include "xmc_usic.h"
  89:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
  90:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
  91:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @addtogroup XMClib XMC Peripheral Library
  92:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @{
  93:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
  94:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
  95:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
  96:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @addtogroup I2C
  97:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @brief Inter Integrated Circuit(IIC) driver for the XMC microcontroller family. 
  98:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
  99:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * USIC IIC Features: <br>
 100:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *  * Two-wire interface, with one line for shift clock transfer and synchronization (shift clock S
 101:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *	* Communication in standard mode (100 kBit/s) or in fast mode (up to 400 kBit/s) <br>
 102:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *	* Support of 7-bit addressing, as well as 10-bit addressing <br>
 103:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *	* Master mode operation, where the IIC controls the bus transactions and provides the clock sign
 104:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *	* Slave mode operation, where an external master controls the bus transactions and provides the 
 105:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *	* Multi-master mode operation, where several masters can be connected to the bus and bus arbitra
 106:..//Libraries/XMCLib/inc/xmc_i2c.h **** 	  The master/slave operation of an IIC bus participant can change from frame to frame. <br>
 107:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *	* Efficient frame handling (low software effort), also allowing DMA transfers <br>
 108:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *	* Powerful interrupt handling due to multitude of indication flags <br>
 109:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @{
 110:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 111:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 112:..//Libraries/XMCLib/inc/xmc_i2c.h **** /*******************************************************************************
 113:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * MACROS
 114:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *******************************************************************************/
 115:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 116:..//Libraries/XMCLib/inc/xmc_i2c.h **** #if defined(USIC0)
 117:..//Libraries/XMCLib/inc/xmc_i2c.h **** #define XMC_I2C0_CH0 XMC_USIC0_CH0                   /**< USIC0 channel 0 base address */
 118:..//Libraries/XMCLib/inc/xmc_i2c.h **** #define XMC_I2C0_CH1 XMC_USIC0_CH1                   /**< USIC0 channel 1 base address */
 119:..//Libraries/XMCLib/inc/xmc_i2c.h **** #endif
 120:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 121:..//Libraries/XMCLib/inc/xmc_i2c.h **** #if defined(USIC1)
 122:..//Libraries/XMCLib/inc/xmc_i2c.h **** #define XMC_I2C1_CH0 XMC_USIC1_CH0                   /**< USIC1 channel 0 base address */
 123:..//Libraries/XMCLib/inc/xmc_i2c.h **** #define XMC_I2C1_CH1 XMC_USIC1_CH1                   /**< USIC1 channel 1 base address */
 124:..//Libraries/XMCLib/inc/xmc_i2c.h **** #endif
 125:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 126:..//Libraries/XMCLib/inc/xmc_i2c.h **** #if defined(USIC2)
 127:..//Libraries/XMCLib/inc/xmc_i2c.h **** #define XMC_I2C2_CH0 XMC_USIC2_CH0                   /**< USIC2 channel 0 base address */
 128:..//Libraries/XMCLib/inc/xmc_i2c.h **** #define XMC_I2C2_CH1 XMC_USIC2_CH1                   /**< USIC2 channel 1 base address */
 129:..//Libraries/XMCLib/inc/xmc_i2c.h **** #endif
 130:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 131:..//Libraries/XMCLib/inc/xmc_i2c.h **** #define XMC_I2C_10BIT_ADDR_GROUP       (0x7800U)	 /**< Value to verify the address is 10-bit or not
 132:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 133:..//Libraries/XMCLib/inc/xmc_i2c.h **** /*******************************************************************************
 134:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * ENUMS
 135:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *******************************************************************************/
 136:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 137:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 138:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @brief I2C Status
 139:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 140:..//Libraries/XMCLib/inc/xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS
 141:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 142:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_OK,      /**< Status OK */
 143:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_ERROR,   /**< Status ERROR */
 144:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_BUSY     /**< Status BUSY */
 145:..//Libraries/XMCLib/inc/xmc_i2c.h **** } XMC_I2C_CH_STATUS_t;
 146:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 147:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 148:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @brief I2C status
 149:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 150:..//Libraries/XMCLib/inc/xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS_FLAG
 151:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 152:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_SELECT = USIC_CH_PSR_IICMode_SLSEL_Msk,                     /**< Sla
 153:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND = USIC_CH_PSR_IICMode_WTDF_Msk,              /**< Wro
 154:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_SCR_Msk,           /**< Sta
 155:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_RSCR_Msk, /**< Rep
 156:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_PCR_Msk,            /**< Sto
 157:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED = USIC_CH_PSR_IICMode_NACK_Msk,                     /**< NAC
 158:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST = USIC_CH_PSR_IICMode_ARL_Msk,                   /**< Arb
 159:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_READ_REQUESTED = USIC_CH_PSR_IICMode_SRR_Msk,               /**< Sla
 160:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ERROR = USIC_CH_PSR_IICMode_ERR_Msk,                              /**< Err
 161:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED = USIC_CH_PSR_IICMode_ACK_Msk,                       /**< ACK
 162:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_IICMode_RSIF_Msk,         /**< Rec
 163:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_IICMode_DLIF_Msk,              /**< Dat
 164:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_IICMode_TSIF_Msk,         /**< Tra
 165:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_IICMode_TBIF_Msk,        /**< Tra
 166:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_RIF_Msk,                 /**< Rec
 167:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_AIF_Msk,     /**< Alt
 168:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_IICMode_BRGIF_Msk    /**< Bau
 169:..//Libraries/XMCLib/inc/xmc_i2c.h **** } XMC_I2C_CH_STATUS_FLAG_t;
 170:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 171:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 172:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @brief I2C receiver status. The received data byte is available at the bit
 173:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * positions RBUF[7:0], whereas the additional information is monitored at the bit positions
 174:..//Libraries/XMCLib/inc/xmc_i2c.h **** *  RBUF[12:8].
 175:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 176:..//Libraries/XMCLib/inc/xmc_i2c.h **** typedef enum XMC_I2C_CH_RECEIVER_STATUS_FLAG
 177:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 178:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ACK = 0x1U,      /**< Bit 8:  Value of Received Acknowledgement b
 179:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_FIN = 0x2U,      /**< Bit 9:  A 1 at this bit position indicates 
 180:..//Libraries/XMCLib/inc/xmc_i2c.h ****                                                                 followed by the address reception t
 181:..//Libraries/XMCLib/inc/xmc_i2c.h ****                                                                 been received. A 0 at this bit posi
 182:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_MODE = 0x4U,     /**< Bit 10: A 0 at this bit position indicates 
 183:..//Libraries/XMCLib/inc/xmc_i2c.h ****                                                                 when the device has been in slave m
 184:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ERR = 0x8U,      /**< Bit 11: A 1 at this bit position indicates 
 185:..//Libraries/XMCLib/inc/xmc_i2c.h ****                                                                 data byte in the receive buffer */
 186:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ADR = 0x10       /**< Bit 12: A 0 at this bit position indicates 
 187:..//Libraries/XMCLib/inc/xmc_i2c.h ****                                                                 has been received. A 1 indicates a 
 188:..//Libraries/XMCLib/inc/xmc_i2c.h **** } XMC_I2C_CH_RECEIVER_STATUS_FLAG_t;
 189:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 190:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 191:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @brief I2C commands
 192:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 193:..//Libraries/XMCLib/inc/xmc_i2c.h **** typedef enum XMC_I2C_CH_CMD
 194:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 195:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_CMD_WRITE,                            /**< I2C Command Write */
 196:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_CMD_READ                              /**< I2C Command Read */
 197:..//Libraries/XMCLib/inc/xmc_i2c.h **** } XMC_I2C_CH_CMD_t;
 198:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 199:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 200:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @brief I2C events
 201:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 202:..//Libraries/XMCLib/inc/xmc_i2c.h **** typedef enum XMC_I2C_CH_EVENT
 203:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 204:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 205:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 206:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 207:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 208:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 209:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 210:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 211:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 212:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_SCRIEN_Msk,             /**< Star
 213:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_RSCRIEN_Msk,   /**< Repe
 214:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_STOP_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_PCRIEN_Msk,              /**< Stop
 215:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_NACK = USIC_CH_PCR_IICMode_NACKIEN_Msk,                                /**< NACK
 216:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_ARBITRATION_LOST = USIC_CH_PCR_IICMode_ARLIEN_Msk,                     /**< Arbi
 217:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_SLAVE_READ_REQUEST = USIC_CH_PCR_IICMode_SRRIEN_Msk,                   /**< Slav
 218:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_ERROR = USIC_CH_PCR_IICMode_ERRIEN_Msk,	                              /**< Error
 219:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_EVENT_ACK = USIC_CH_PCR_IICMode_ACKIEN_Msk                                   /**< ACK 
 220:..//Libraries/XMCLib/inc/xmc_i2c.h **** } XMC_I2C_CH_EVENT_t;
 221:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 222:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 223:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @brief I2C input stage selection
 224:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 225:..//Libraries/XMCLib/inc/xmc_i2c.h **** typedef enum XMC_I2C_CH_INPUT
 226:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 227:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA = 0U,   /**< selection of sda input stage */
 228:..//Libraries/XMCLib/inc/xmc_i2c.h **** #if UC_FAMILY == XMC1
 229:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA1 = 3U,
 230:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA2 = 5U,
 231:..//Libraries/XMCLib/inc/xmc_i2c.h **** #endif  
 232:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL = 1U,  /**< selection of scl input stage */
 233:..//Libraries/XMCLib/inc/xmc_i2c.h **** #if UC_FAMILY == XMC1
 234:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL1 = 4U
 235:..//Libraries/XMCLib/inc/xmc_i2c.h **** #endif  
 236:..//Libraries/XMCLib/inc/xmc_i2c.h **** } XMC_I2C_CH_INPUT_t;
 237:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 238:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 239:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * I2C channel interrupt node pointers
 240:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 241:..//Libraries/XMCLib/inc/xmc_i2c.h **** typedef enum XMC_I2C_CH_INTERRUPT_NODE_POINTER
 242:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 243:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 244:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 245:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 246:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 247:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 248:..//Libraries/XMCLib/inc/xmc_i2c.h **** } XMC_I2C_CH_INTERRUPT_NODE_POINTER_t;
 249:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 250:..//Libraries/XMCLib/inc/xmc_i2c.h **** /*******************************************************************************
 251:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * DATA STRUCTURES
 252:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *******************************************************************************/
 253:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 254:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @brief I2C_CH configuration structure
 255:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 256:..//Libraries/XMCLib/inc/xmc_i2c.h **** typedef struct XMC_I2C_CH_CONFIG
 257:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 258:..//Libraries/XMCLib/inc/xmc_i2c.h ****   uint32_t baudrate;   /**< baud rate configuration upto max of 400KHz */
 259:..//Libraries/XMCLib/inc/xmc_i2c.h ****   uint16_t address;    /**< slave address 
 260:..//Libraries/XMCLib/inc/xmc_i2c.h ****                             A 7-bit address needs to be left shifted it by 1.
 261:..//Libraries/XMCLib/inc/xmc_i2c.h ****                             A 10-bit address needs to be ORed with XMC_I2C_10BIT_ADDR_GROUP. */
 262:..//Libraries/XMCLib/inc/xmc_i2c.h **** } XMC_I2C_CH_CONFIG_t;
 263:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 264:..//Libraries/XMCLib/inc/xmc_i2c.h **** /*******************************************************************************
 265:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * API PROTOTYPES
 266:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *******************************************************************************/
 267:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 268:..//Libraries/XMCLib/inc/xmc_i2c.h **** #ifdef __cplusplus
 269:..//Libraries/XMCLib/inc/xmc_i2c.h **** extern "C" {
 270:..//Libraries/XMCLib/inc/xmc_i2c.h **** #endif
 271:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 272:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 273:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 274:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param config  Constant pointer to I2C channel config structure of type @ref XMC_I2C_CH_CONFIG_t
 275:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 276:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 277:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 278:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 279:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Initializes the I2C \a channel.<br>
 280:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 281:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 282:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Configures the data format in SCTR register. Sets the slave address, baud rate. Enables transmit
 283:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * and disables parity generation.<br>
 284:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 285:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 286:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_USIC_CH_Enable()\n\n
 287:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 288:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 289:..//Libraries/XMCLib/inc/xmc_i2c.h **** void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config);
 290:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 291:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 292:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 293:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param rate  baud rate of I2C channel
 294:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 295:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 296:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 297:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 298:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Sets the rate of I2C \a channel.
 299:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 300:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Note:</b><br>
 301:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Standard over sampling is considered if rate <= 100KHz and fast over sampling is considered if r
 302:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 303:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 304:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_USIC_CH_SetBaudrate()\n\n
 305:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 306:..//Libraries/XMCLib/inc/xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 307:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 308:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 309:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 310:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 311:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 312:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 313:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 314:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Starts the I2C \a channel.
 315:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 316:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 317:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Sets the USIC input operation mode to I2C mode using CCR register.
 318:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 319:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 320:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 321:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 322:..//Libraries/XMCLib/inc/xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
 323:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 324:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 325:..//Libraries/XMCLib/inc/xmc_i2c.h **** }
 326:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 327:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 328:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 329:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 330:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return @ref XMC_I2C_CH_STATUS_t<br>
 331:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 332:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 333:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Stops the I2C \a channel.<br>
 334:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 335:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 336:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Sets the USIC input operation to IDLE mode using CCR register.
 337:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 338:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 339:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 340:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 341:..//Libraries/XMCLib/inc/xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_Stop(XMC_USIC_CH_t *const channel);
 342:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 343:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 344:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 345:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param service_request Service request number in the range of 0-5
 346:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 347:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 348:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 349:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Sets the interrupt node for protocol interrupt.<br>
 350:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 351:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 352:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * To generate interrupt for an event, node pointer should be configured with service request numbe
 353:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 354:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 355:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Note:</b><br>
 356:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * NVIC node should be separately enabled to generate the interrupt. After setting the node pointer
 357:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 358:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 359:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 360:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 361:..//Libraries/XMCLib/inc/xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 362:..//Libraries/XMCLib/inc/xmc_i2c.h ****                                                         const uint8_t service_request)
 363:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 364:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service
 365:..//Libraries/XMCLib/inc/xmc_i2c.h **** }
 366:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 367:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 368:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 369:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 370:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 				  \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref XM
 371:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 372:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 						  \b Range: @ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 373:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 						  			@ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 374:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param service_request Service request number.\n
 375:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 						  \b Range: 0 to 5.
 376:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None
 377:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 378:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description</b><br>
 379:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Sets the interrupt node for USIC channel events. \n\n
 380:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 381:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 382:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 383:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 384:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 385:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent() \n\n\n
 386:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 387:..//Libraries/XMCLib/inc/xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 388:..//Libraries/XMCLib/inc/xmc_i2c.h ****                                                            const XMC_I2C_CH_INTERRUPT_NODE_POINTER_
 389:..//Libraries/XMCLib/inc/xmc_i2c.h ****                                                            const uint32_t service_request)
 390:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 391:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 392:..//Libraries/XMCLib/inc/xmc_i2c.h **** 		                                       (uint32_t)service_request);
 393:..//Libraries/XMCLib/inc/xmc_i2c.h **** }
 394:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 395:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 396:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 397:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 				   \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref X
 398:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 399:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 			\b Range: 0 to 5.
 400:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None
 401:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 402:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description</b><br>
 403:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Trigger a I2C interrupt service request.\n\n
 404:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * When the I2C service request is triggered, the NVIC interrupt associated with it will be
 405:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * generated if enabled.
 406:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 407:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 408:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_SelectInterruptNodePointer() \n\n\n
 409:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 410:..//Libraries/XMCLib/inc/xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t 
 411:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 412:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 413:..//Libraries/XMCLib/inc/xmc_i2c.h **** }
 414:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 415:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 416:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 417:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param input I2C channel input stage of type @ref XMC_I2C_CH_INPUT_t
 418:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param source Input source select for the input stage(0->DX0A, 1->DX1A, .. 7->DX7G)
 419:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 420:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 421:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 422:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Sets the input source for I2C \a channel.<br>
 423:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Defines the input stage for the corresponding input line.
 424:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 425:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @note After configuring the input source for corresponding channel, interrupt node pointer is se
 426:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 427:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 428:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 429:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 430:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 431:..//Libraries/XMCLib/inc/xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT
 432:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 433:..//Libraries/XMCLib/inc/xmc_i2c.h ****   channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX
 434:..//Libraries/XMCLib/inc/xmc_i2c.h ****   XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 435:..//Libraries/XMCLib/inc/xmc_i2c.h **** }
 436:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 437:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 438:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 439:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param address I2C slave address
 440:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 441:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 442:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 443:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Sets the I2C \a channel slave address.<br>
 444:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 445:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 446:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Address is set in PCR_IICMode register by checking if it is in 10-bit address group or 7-bit add
 447:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is 10-bit mode otherwis
 448:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @note A 7-bit address should include an additional bit at the LSB for read/write indication. For
 449:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * be provided as 0x0a. A 10-bit address should be provided with the identifier 0b11110xx at the mo
 450:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * address 0x305 should be provided as 0x7b05(bitwise OR with 0x7800).
 451:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 452:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 453:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_GetSlaveAddress()\n\n
 454:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 455:..//Libraries/XMCLib/inc/xmc_i2c.h **** void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address);
 456:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 457:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 458:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel handler of type @ref XMC_USIC_CH_t
 459:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return uint16_t Slave address<br>
 460:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 461:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 462:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Gets the I2C \a channel slave address.<br>
 463:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 464:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 465:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Returns the address using PCR_IICMode register by checking if it is in 10-bit address group or 7
 466:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is considered as 10-bit
 467:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @note A 7-bit address will include an additional bit at the LSB. For example, address 0x05 will 
 468:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * 10-bit address will not include the 10-bit address identifier 0b11110xx at the most signifcant b
 469:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 470:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 471:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_SetSlaveAddress()\n\n
 472:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 473:..//Libraries/XMCLib/inc/xmc_i2c.h **** uint16_t XMC_I2C_CH_GetSlaveAddress(const XMC_USIC_CH_t *const channel);
 474:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 475:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 476:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 477:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param addr I2C master address
 478:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param command read/write command
 479:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 480:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 481:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 482:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Starts the I2C master \a channel.<br>
 483:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 484:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 485:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Sends the Start condition with read/write command by updating IN/TBUF register based on FIFO/non
 486:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 487:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 488:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 489:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * followed by 1-bit field for read/write).
 490:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 491:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 492:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 493:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 494:..//Libraries/XMCLib/inc/xmc_i2c.h **** void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD
 495:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 496:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 497:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 498:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param addr I2C master address
 499:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param command read/write command
 500:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 501:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 502:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 503:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Sends the repeated start condition from I2C master \a channel.<br>
 504:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 505:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 506:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Sends the repeated start condition with read/write command by updating IN/TBUF register based on
 507:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 508:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 509:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 510:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * followed by 1-bit field for read/write).
 511:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 512:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 513:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 514:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 515:..//Libraries/XMCLib/inc/xmc_i2c.h **** void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2
 516:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 517:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 518:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 519:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 520:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 521:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 522:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Stops the I2C master \a channel.<br>
 523:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 524:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 525:..//Libraries/XMCLib/inc/xmc_i2c.h ****   * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on F
 526:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 527:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 528:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 529:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 530:..//Libraries/XMCLib/inc/xmc_i2c.h **** void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel);
 531:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 532:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 533:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 534:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 535:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 536:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 537:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 538:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Transmit the data from the I2C master \a channel.<br>
 539:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 540:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 541:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 542:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 543:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 544:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 545:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 546:..//Libraries/XMCLib/inc/xmc_i2c.h **** void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 547:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 548:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 549:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 550:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 551:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 552:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 553:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 554:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Transmit the data from the I2C slave \a channel.<br>
 555:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 556:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 557:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 558:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 559:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 560:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(),XMC_I2C_CH_ClearStatusFlag()\n\n
 561:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 562:..//Libraries/XMCLib/inc/xmc_i2c.h **** void XMC_I2C_CH_SlaveTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 563:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 564:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 565:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 566:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 567:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 568:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 569:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Sends the Ack request from I2C master \a channel.<br>
 570:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 571:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 572:..//Libraries/XMCLib/inc/xmc_i2c.h **** * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FIF
 573:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 574:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 575:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 576:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 577:..//Libraries/XMCLib/inc/xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel);
 578:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 579:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 580:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 581:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 582:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 583:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 584:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Sends the Nack request from I2C master \a channel.<br>
 585:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 586:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 587:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 588:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 589:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 590:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 591:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 592:..//Libraries/XMCLib/inc/xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel);
 593:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 594:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 595:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 596:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return uint8_t OUTR/RBUF register data<br>
 597:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 598:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 599:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Reads the data from I2C \a channel.<br>
 600:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 601:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par
 602:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Data is read by using OUTR/RBUF register based on FIFO/non-FIFO modes.
 603:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 604:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 605:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 606:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 607:..//Libraries/XMCLib/inc/xmc_i2c.h **** uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel);
 608:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 609:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 610:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 611:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return uint8_t Receiver status flag<br>
 612:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 613:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 614:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Gets the receiver status of I2C \a channel using RBUF register of bits 8-12 which gives informat
 615:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 616:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 617:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 618:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 619:..//Libraries/XMCLib/inc/xmc_i2c.h **** __STATIC_INLINE uint8_t XMC_I2C_CH_GetReceiverStatusFlag(XMC_USIC_CH_t *const channel)
 620:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 621:..//Libraries/XMCLib/inc/xmc_i2c.h ****   return((uint8_t)((channel->RBUF) >> 8U));
 622:..//Libraries/XMCLib/inc/xmc_i2c.h **** }
 623:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 624:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 625:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 626:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 627:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 628:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 629:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 630:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Enables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 631:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 632:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 633:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_DisableEvent()\n\n
 634:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 635:..//Libraries/XMCLib/inc/xmc_i2c.h **** void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 636:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 637:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 638:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 639:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 640:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 641:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 642:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 643:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Disables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 644:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 645:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 646:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent()\n\n
 647:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 648:..//Libraries/XMCLib/inc/xmc_i2c.h **** void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 649:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 650:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 651:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 652:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return uint32_t Status byte<br>
 653:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 654:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 655:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Retrieves the status byte of I2C \a channel using PSR_IICMode register.\n
 656:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 657:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 658:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_ClearStatusFlag()\n\n
 659:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 660:..//Libraries/XMCLib/inc/xmc_i2c.h **** __STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 661:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 662:..//Libraries/XMCLib/inc/xmc_i2c.h ****   return (channel->PSR_IICMode);
 663:..//Libraries/XMCLib/inc/xmc_i2c.h **** }
 664:..//Libraries/XMCLib/inc/xmc_i2c.h **** 
 665:..//Libraries/XMCLib/inc/xmc_i2c.h **** /**
 666:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 667:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @param flag Status flag
 668:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * @return None<br>
 669:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 670:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Description:</b><br>
 671:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * Clears the status flag of I2C \a channel by setting the input parameter \a flag in PSCR register
 672:..//Libraries/XMCLib/inc/xmc_i2c.h ****  *
 673:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 674:..//Libraries/XMCLib/inc/xmc_i2c.h ****  * XMC_I2C_CH_GetStatusFlag()\n\n
 675:..//Libraries/XMCLib/inc/xmc_i2c.h ****  */
 676:..//Libraries/XMCLib/inc/xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
 677:..//Libraries/XMCLib/inc/xmc_i2c.h **** {
 121              	 .loc 2 677 1
 122              	 .cfi_startproc
 123              	 
 124              	 
 125 0000 80B5     	 push {r7,lr}
 126              	.LCFI6:
 127              	 .cfi_def_cfa_offset 8
 128              	 .cfi_offset 7,-8
 129              	 .cfi_offset 14,-4
 130 0002 82B0     	 sub sp,sp,#8
 131              	.LCFI7:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI8:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 3960     	 str r1,[r7]
 678:..//Libraries/XMCLib/inc/xmc_i2c.h ****   channel->PSCR |= flag;
 138              	 .loc 2 678 17
 139 000a 7B68     	 ldr r3,[r7,#4]
 140 000c DA6C     	 ldr r2,[r3,#76]
 141 000e 3B68     	 ldr r3,[r7]
 142 0010 1A43     	 orrs r2,r3
 143 0012 7B68     	 ldr r3,[r7,#4]
 144 0014 DA64     	 str r2,[r3,#76]
 679:..//Libraries/XMCLib/inc/xmc_i2c.h **** }
 145              	 .loc 2 679 1
 146 0016 C046     	 nop
 147 0018 BD46     	 mov sp,r7
 148 001a 02B0     	 add sp,sp,#8
 149              	 
 150 001c 80BD     	 pop {r7,pc}
 151              	 .cfi_endproc
 152              	.LFE109:
 154              	 .section .text.XMC_I2C_CH_Init,"ax",%progbits
 155              	 .align 1
 156              	 .global XMC_I2C_CH_Init
 157              	 .syntax unified
 158              	 .code 16
 159              	 .thumb_func
 160              	 .fpu softvfp
 162              	XMC_I2C_CH_Init:
 163              	.LFB117:
 164              	 .file 3 "../Libraries/XMCLib/src/xmc_i2c.c"
   1:../Libraries/XMCLib/src/xmc_i2c.c **** /**
   2:../Libraries/XMCLib/src/xmc_i2c.c ****  * @file xmc_i2c.c
   3:../Libraries/XMCLib/src/xmc_i2c.c ****  * @date 2015-10-02
   4:../Libraries/XMCLib/src/xmc_i2c.c ****  *
   5:../Libraries/XMCLib/src/xmc_i2c.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_i2c.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_i2c.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_i2c.c ****  *
   9:../Libraries/XMCLib/src/xmc_i2c.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_i2c.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_i2c.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_i2c.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_i2c.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_i2c.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_i2c.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_i2c.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_i2c.c ****  * 
  18:../Libraries/XMCLib/src/xmc_i2c.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_i2c.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_i2c.c ****  * 
  21:../Libraries/XMCLib/src/xmc_i2c.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_i2c.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_i2c.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_i2c.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_i2c.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_i2c.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_i2c.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_i2c.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_i2c.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_i2c.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_i2c.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_i2c.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_i2c.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_i2c.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  36:../Libraries/XMCLib/src/xmc_i2c.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_i2c.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  39:../Libraries/XMCLib/src/xmc_i2c.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_i2c.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_i2c.c ****  *      
  42:../Libraries/XMCLib/src/xmc_i2c.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_i2c.c ****        - Modified XMC_I2C_CH_Stop() API for not setting to IDLE the channel if it is busy <br>
  44:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  45:../Libraries/XMCLib/src/xmc_i2c.c ****  * 2015-06-20:
  46:../Libraries/XMCLib/src/xmc_i2c.c ****  *     - Removed GetDriverVersion API <br>
  47:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  48:../Libraries/XMCLib/src/xmc_i2c.c ****  * 2015-08-14:
  49:../Libraries/XMCLib/src/xmc_i2c.c ****  *     - updated the XMC_I2C_CH_SetBaudrate API to support dynamic change from 400K to low frequenc
  50:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  51:../Libraries/XMCLib/src/xmc_i2c.c ****  * 2015-09-01:
  52:../Libraries/XMCLib/src/xmc_i2c.c ****  *     - Modified XMC_I2C_CH_EnableEvent() and XMC_I2C_CH_DisableEvent() for supporting multiple ev
  53:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  54:../Libraries/XMCLib/src/xmc_i2c.c ****  * 2015-10-02:
  55:../Libraries/XMCLib/src/xmc_i2c.c ****  *     - Fixed 10bit addressing
  56:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  57:../Libraries/XMCLib/src/xmc_i2c.c ****  * @endcond 
  58:../Libraries/XMCLib/src/xmc_i2c.c ****  *
  59:../Libraries/XMCLib/src/xmc_i2c.c ****  */
  60:../Libraries/XMCLib/src/xmc_i2c.c **** 
  61:../Libraries/XMCLib/src/xmc_i2c.c **** /**************************************************************************************************
  62:../Libraries/XMCLib/src/xmc_i2c.c ****  * HEADER FILES
  63:../Libraries/XMCLib/src/xmc_i2c.c ****  **************************************************************************************************
  64:../Libraries/XMCLib/src/xmc_i2c.c **** #include <xmc_i2c.h>
  65:../Libraries/XMCLib/src/xmc_i2c.c **** 
  66:../Libraries/XMCLib/src/xmc_i2c.c **** /**************************************************************************************************
  67:../Libraries/XMCLib/src/xmc_i2c.c ****  * MACROS
  68:../Libraries/XMCLib/src/xmc_i2c.c ****  **************************************************************************************************
  69:../Libraries/XMCLib/src/xmc_i2c.c **** #define XMC_I2C_7BIT_ADDR_Pos   (8U)		/**< 7-bit address position */
  70:../Libraries/XMCLib/src/xmc_i2c.c **** #define TRANSMISSION_MODE       (3U)		/**< The shift control signal is considered active
  71:../Libraries/XMCLib/src/xmc_i2c.c ****                                                  without referring to the actual signal level. Data
  72:../Libraries/XMCLib/src/xmc_i2c.c ****                                                  frame transfer is possible after each edge of the 
  73:../Libraries/XMCLib/src/xmc_i2c.c **** #define WORDLENGTH              (7U)        /**< Word length */
  74:../Libraries/XMCLib/src/xmc_i2c.c **** #define SET_TDV                 (1U)		/**< Transmission data valid */
  75:../Libraries/XMCLib/src/xmc_i2c.c **** #define XMC_I2C_10BIT_ADDR_MASK (0x7C00U)   /**< Address mask for 10-bit mode */
  76:../Libraries/XMCLib/src/xmc_i2c.c **** 
  77:../Libraries/XMCLib/src/xmc_i2c.c **** /**************************************************************************************************
  78:../Libraries/XMCLib/src/xmc_i2c.c ****  * ENUMS
  79:../Libraries/XMCLib/src/xmc_i2c.c ****  **************************************************************************************************
  80:../Libraries/XMCLib/src/xmc_i2c.c **** 
  81:../Libraries/XMCLib/src/xmc_i2c.c **** typedef enum XMC_I2C_CH_TDF
  82:../Libraries/XMCLib/src/xmc_i2c.c **** {
  83:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_SEND =         0U,
  84:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_SLAVE_SEND =          (uint32_t)1U << 8U,
  85:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK =  (uint32_t)2U << 8U,
  86:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK = (uint32_t)3U << 8U,
  87:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_START =        (uint32_t)4U << 8U,
  88:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_RESTART =      (uint32_t)5U << 8U,
  89:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_TDF_MASTER_STOP =         (uint32_t)6U << 8U
  90:../Libraries/XMCLib/src/xmc_i2c.c **** } XMC_I2C_CH_TDF_t;
  91:../Libraries/XMCLib/src/xmc_i2c.c **** 
  92:../Libraries/XMCLib/src/xmc_i2c.c **** typedef enum XMC_I2C_CH_MAX_SPEED
  93:../Libraries/XMCLib/src/xmc_i2c.c **** {
  94:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_MAX_SPEED_STANDARD = 100000U,
  95:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_MAX_SPEED_FAST = 400000U
  96:../Libraries/XMCLib/src/xmc_i2c.c **** } XMC_I2C_CH_MAX_SPEED_t;
  97:../Libraries/XMCLib/src/xmc_i2c.c **** 
  98:../Libraries/XMCLib/src/xmc_i2c.c **** typedef enum XMC_I2C_CH_CLOCK_OVERSAMPLING
  99:../Libraries/XMCLib/src/xmc_i2c.c **** {
 100:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD = 10U,
 101:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST     = 25U
 102:../Libraries/XMCLib/src/xmc_i2c.c **** } XMC_I2C_CH_CLOCK_OVERSAMPLINGS_t;
 103:../Libraries/XMCLib/src/xmc_i2c.c **** 
 104:../Libraries/XMCLib/src/xmc_i2c.c **** /**************************************************************************************************
 105:../Libraries/XMCLib/src/xmc_i2c.c ****  * API IMPLEMENTATION
 106:../Libraries/XMCLib/src/xmc_i2c.c ****  **************************************************************************************************
 107:../Libraries/XMCLib/src/xmc_i2c.c **** /* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffe
 108:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
 109:../Libraries/XMCLib/src/xmc_i2c.c **** {
 165              	 .loc 3 109 1
 166              	 .cfi_startproc
 167              	 
 168              	 
 169 0000 80B5     	 push {r7,lr}
 170              	.LCFI9:
 171              	 .cfi_def_cfa_offset 8
 172              	 .cfi_offset 7,-8
 173              	 .cfi_offset 14,-4
 174 0002 82B0     	 sub sp,sp,#8
 175              	.LCFI10:
 176              	 .cfi_def_cfa_offset 16
 177 0004 00AF     	 add r7,sp,#0
 178              	.LCFI11:
 179              	 .cfi_def_cfa_register 7
 180 0006 7860     	 str r0,[r7,#4]
 181 0008 3960     	 str r1,[r7]
 110:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_USIC_CH_Enable(channel);
 182              	 .loc 3 110 3
 183 000a 7B68     	 ldr r3,[r7,#4]
 184 000c 1800     	 movs r0,r3
 185 000e FFF7FEFF 	 bl XMC_USIC_CH_Enable
 111:../Libraries/XMCLib/src/xmc_i2c.c ****   
 112:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Data format configuration */
 113:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision 
 186              	 .loc 3 113 17
 187 0012 7B68     	 ldr r3,[r7,#4]
 188 0014 0F4A     	 ldr r2,.L6
 189 0016 5A63     	 str r2,[r3,#52]
 114:../Libraries/XMCLib/src/xmc_i2c.c ****                   ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
 115:../Libraries/XMCLib/src/xmc_i2c.c ****                   USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
 116:../Libraries/XMCLib/src/xmc_i2c.c ****                   USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
 117:../Libraries/XMCLib/src/xmc_i2c.c ****                   USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */
 118:../Libraries/XMCLib/src/xmc_i2c.c **** 
 119:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 190              	 .loc 3 119 3
 191 0018 3B68     	 ldr r3,[r7]
 192 001a 9A88     	 ldrh r2,[r3,#4]
 193 001c 7B68     	 ldr r3,[r7,#4]
 194 001e 1100     	 movs r1,r2
 195 0020 1800     	 movs r0,r3
 196 0022 FFF7FEFF 	 bl XMC_I2C_CH_SetSlaveAddress
 120:../Libraries/XMCLib/src/xmc_i2c.c ****   (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 197              	 .loc 3 120 9
 198 0026 3B68     	 ldr r3,[r7]
 199 0028 1A68     	 ldr r2,[r3]
 200 002a 7B68     	 ldr r3,[r7,#4]
 201 002c 1100     	 movs r1,r2
 202 002e 1800     	 movs r0,r3
 203 0030 FFF7FEFF 	 bl XMC_I2C_CH_SetBaudrate
 121:../Libraries/XMCLib/src/xmc_i2c.c ****     
 122:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Enable transfer buffer */
 123:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 204              	 .loc 3 123 17
 205 0034 7B68     	 ldr r3,[r7,#4]
 206 0036 A022     	 movs r2,#160
 207 0038 D200     	 lsls r2,r2,#3
 208 003a 9A63     	 str r2,[r3,#56]
 124:../Libraries/XMCLib/src/xmc_i2c.c **** 
 125:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Clear status flags */
 126:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->PSCR = 0xFFFFFFFFU;
 209              	 .loc 3 126 17
 210 003c 7B68     	 ldr r3,[r7,#4]
 211 003e 0122     	 movs r2,#1
 212 0040 5242     	 rsbs r2,r2,#0
 213 0042 DA64     	 str r2,[r3,#76]
 127:../Libraries/XMCLib/src/xmc_i2c.c **** 
 128:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Disable parity generation */
 129:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->CCR = 0x0U;
 214              	 .loc 3 129 16
 215 0044 7B68     	 ldr r3,[r7,#4]
 216 0046 0022     	 movs r2,#0
 217 0048 1A64     	 str r2,[r3,#64]
 130:../Libraries/XMCLib/src/xmc_i2c.c **** }
 218              	 .loc 3 130 1
 219 004a C046     	 nop
 220 004c BD46     	 mov sp,r7
 221 004e 02B0     	 add sp,sp,#8
 222              	 
 223 0050 80BD     	 pop {r7,pc}
 224              	.L7:
 225 0052 C046     	 .align 2
 226              	.L6:
 227 0054 03033F07 	 .word 121570051
 228              	 .cfi_endproc
 229              	.LFE117:
 231              	 .section .text.XMC_I2C_CH_SetSlaveAddress,"ax",%progbits
 232              	 .align 1
 233              	 .global XMC_I2C_CH_SetSlaveAddress
 234              	 .syntax unified
 235              	 .code 16
 236              	 .thumb_func
 237              	 .fpu softvfp
 239              	XMC_I2C_CH_SetSlaveAddress:
 240              	.LFB118:
 131:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sets the slave address */
 132:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
 133:../Libraries/XMCLib/src/xmc_i2c.c **** {
 241              	 .loc 3 133 1
 242              	 .cfi_startproc
 243              	 
 244              	 
 245 0000 80B5     	 push {r7,lr}
 246              	.LCFI12:
 247              	 .cfi_def_cfa_offset 8
 248              	 .cfi_offset 7,-8
 249              	 .cfi_offset 14,-4
 250 0002 82B0     	 sub sp,sp,#8
 251              	.LCFI13:
 252              	 .cfi_def_cfa_offset 16
 253 0004 00AF     	 add r7,sp,#0
 254              	.LCFI14:
 255              	 .cfi_def_cfa_register 7
 256 0006 7860     	 str r0,[r7,#4]
 257 0008 0A00     	 movs r2,r1
 258 000a BB1C     	 adds r3,r7,#2
 259 000c 1A80     	 strh r2,[r3]
 134:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 260              	 .loc 3 134 16
 261 000e BB1C     	 adds r3,r7,#2
 262 0010 1A88     	 ldrh r2,[r3]
 263 0012 F823     	 movs r3,#248
 264 0014 DB01     	 lsls r3,r3,#7
 265 0016 1A40     	 ands r2,r3
 266              	 .loc 3 134 6
 267 0018 F023     	 movs r3,#240
 268 001a DB01     	 lsls r3,r3,#7
 269 001c 9A42     	 cmp r2,r3
 270 001e 0ED1     	 bne .L9
 135:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 136:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 271              	 .loc 3 136 37
 272 0020 BB1C     	 adds r3,r7,#2
 273 0022 1B88     	 ldrh r3,[r3]
 274 0024 FF22     	 movs r2,#255
 275 0026 1A40     	 ands r2,r3
 276              	 .loc 3 136 58
 277 0028 BB1C     	 adds r3,r7,#2
 278 002a 1B88     	 ldrh r3,[r3]
 279 002c 5B00     	 lsls r3,r3,#1
 280 002e 1900     	 movs r1,r3
 281              	 .loc 3 136 64
 282 0030 FE23     	 movs r3,#254
 283 0032 1B02     	 lsls r3,r3,#8
 284 0034 0B40     	 ands r3,r1
 285              	 .loc 3 136 46
 286 0036 1A43     	 orrs r2,r3
 287              	 .loc 3 136 26
 288 0038 7B68     	 ldr r3,[r7,#4]
 289 003a DA63     	 str r2,[r3,#60]
 137:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 138:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 139:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 140:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 141:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 142:../Libraries/XMCLib/src/xmc_i2c.c **** }
 290              	 .loc 3 142 1
 291 003c 04E0     	 b .L11
 292              	.L9:
 140:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 293              	 .loc 3 140 29
 294 003e BB1C     	 adds r3,r7,#2
 295 0040 1B88     	 ldrh r3,[r3]
 140:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 296              	 .loc 3 140 48
 297 0042 1A02     	 lsls r2,r3,#8
 140:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 298              	 .loc 3 140 26
 299 0044 7B68     	 ldr r3,[r7,#4]
 300 0046 DA63     	 str r2,[r3,#60]
 301              	.L11:
 302              	 .loc 3 142 1
 303 0048 C046     	 nop
 304 004a BD46     	 mov sp,r7
 305 004c 02B0     	 add sp,sp,#8
 306              	 
 307 004e 80BD     	 pop {r7,pc}
 308              	 .cfi_endproc
 309              	.LFE118:
 311              	 .section .text.XMC_I2C_CH_GetSlaveAddress,"ax",%progbits
 312              	 .align 1
 313              	 .global XMC_I2C_CH_GetSlaveAddress
 314              	 .syntax unified
 315              	 .code 16
 316              	 .thumb_func
 317              	 .fpu softvfp
 319              	XMC_I2C_CH_GetSlaveAddress:
 320              	.LFB119:
 143:../Libraries/XMCLib/src/xmc_i2c.c **** /* Read the slave address */
 144:../Libraries/XMCLib/src/xmc_i2c.c **** uint16_t XMC_I2C_CH_GetSlaveAddress(const XMC_USIC_CH_t *const channel)
 145:../Libraries/XMCLib/src/xmc_i2c.c **** {
 321              	 .loc 3 145 1
 322              	 .cfi_startproc
 323              	 
 324              	 
 325 0000 80B5     	 push {r7,lr}
 326              	.LCFI15:
 327              	 .cfi_def_cfa_offset 8
 328              	 .cfi_offset 7,-8
 329              	 .cfi_offset 14,-4
 330 0002 84B0     	 sub sp,sp,#16
 331              	.LCFI16:
 332              	 .cfi_def_cfa_offset 24
 333 0004 00AF     	 add r7,sp,#0
 334              	.LCFI17:
 335              	 .cfi_def_cfa_register 7
 336 0006 7860     	 str r0,[r7,#4]
 146:../Libraries/XMCLib/src/xmc_i2c.c ****   uint32_t address = channel->PCR_IICMode & (uint32_t)USIC_CH_PCR_IICMode_SLAD_Msk;
 337              	 .loc 3 146 29
 338 0008 7B68     	 ldr r3,[r7,#4]
 339 000a DB6B     	 ldr r3,[r3,#60]
 340              	 .loc 3 146 12
 341 000c 1B04     	 lsls r3,r3,#16
 342 000e 1B0C     	 lsrs r3,r3,#16
 343 0010 FB60     	 str r3,[r7,#12]
 147:../Libraries/XMCLib/src/xmc_i2c.c ****   
 148:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((address & 0xffU) == 0U)
 344              	 .loc 3 148 16
 345 0012 FB68     	 ldr r3,[r7,#12]
 346 0014 FF22     	 movs r2,#255
 347 0016 1340     	 ands r3,r2
 348              	 .loc 3 148 6
 349 0018 03D1     	 bne .L13
 149:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 150:../Libraries/XMCLib/src/xmc_i2c.c ****     address = address >> XMC_I2C_7BIT_ADDR_Pos;
 350              	 .loc 3 150 13
 351 001a FB68     	 ldr r3,[r7,#12]
 352 001c 1B0A     	 lsrs r3,r3,#8
 353 001e FB60     	 str r3,[r7,#12]
 354 0020 09E0     	 b .L14
 355              	.L13:
 151:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 152:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 153:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 154:../Libraries/XMCLib/src/xmc_i2c.c ****     address = (address & 0xffU) | ((address >> 1) & 0x0300U);
 356              	 .loc 3 154 24
 357 0022 FB68     	 ldr r3,[r7,#12]
 358 0024 FF22     	 movs r2,#255
 359 0026 1A40     	 ands r2,r3
 360              	 .loc 3 154 45
 361 0028 FB68     	 ldr r3,[r7,#12]
 362 002a 5908     	 lsrs r1,r3,#1
 363              	 .loc 3 154 51
 364 002c C023     	 movs r3,#192
 365 002e 9B00     	 lsls r3,r3,#2
 366 0030 0B40     	 ands r3,r1
 367              	 .loc 3 154 13
 368 0032 1343     	 orrs r3,r2
 369 0034 FB60     	 str r3,[r7,#12]
 370              	.L14:
 155:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 156:../Libraries/XMCLib/src/xmc_i2c.c ****   
 157:../Libraries/XMCLib/src/xmc_i2c.c ****   return (uint16_t)address;
 371              	 .loc 3 157 10
 372 0036 FB68     	 ldr r3,[r7,#12]
 373 0038 9BB2     	 uxth r3,r3
 158:../Libraries/XMCLib/src/xmc_i2c.c **** }
 374              	 .loc 3 158 1
 375 003a 1800     	 movs r0,r3
 376 003c BD46     	 mov sp,r7
 377 003e 04B0     	 add sp,sp,#16
 378              	 
 379 0040 80BD     	 pop {r7,pc}
 380              	 .cfi_endproc
 381              	.LFE119:
 383              	 .section .text.XMC_I2C_CH_SetBaudrate,"ax",%progbits
 384              	 .align 1
 385              	 .global XMC_I2C_CH_SetBaudrate
 386              	 .syntax unified
 387              	 .code 16
 388              	 .thumb_func
 389              	 .fpu softvfp
 391              	XMC_I2C_CH_SetBaudrate:
 392              	.LFB120:
 159:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sets the baudrate and oversampling based on standard speed or fast speed */
 160:../Libraries/XMCLib/src/xmc_i2c.c **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
 161:../Libraries/XMCLib/src/xmc_i2c.c **** {
 393              	 .loc 3 161 1
 394              	 .cfi_startproc
 395              	 
 396              	 
 397 0000 90B5     	 push {r4,r7,lr}
 398              	.LCFI18:
 399              	 .cfi_def_cfa_offset 12
 400              	 .cfi_offset 4,-12
 401              	 .cfi_offset 7,-8
 402              	 .cfi_offset 14,-4
 403 0002 85B0     	 sub sp,sp,#20
 404              	.LCFI19:
 405              	 .cfi_def_cfa_offset 32
 406 0004 00AF     	 add r7,sp,#0
 407              	.LCFI20:
 408              	 .cfi_def_cfa_register 7
 409 0006 7860     	 str r0,[r7,#4]
 410 0008 3960     	 str r1,[r7]
 162:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_STATUS_t status;
 163:../Libraries/XMCLib/src/xmc_i2c.c ****   
 164:../Libraries/XMCLib/src/xmc_i2c.c ****   status = XMC_I2C_CH_STATUS_ERROR;
 411              	 .loc 3 164 10
 412 000a 0F24     	 movs r4,#15
 413 000c 3B19     	 adds r3,r7,r4
 414 000e 0122     	 movs r2,#1
 415 0010 1A70     	 strb r2,[r3]
 165:../Libraries/XMCLib/src/xmc_i2c.c ****   
 166:../Libraries/XMCLib/src/xmc_i2c.c ****   if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 416              	 .loc 3 166 6
 417 0012 3B68     	 ldr r3,[r7]
 418 0014 1B4A     	 ldr r2,.L21
 419 0016 9342     	 cmp r3,r2
 420 0018 11D8     	 bhi .L17
 167:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 168:../Libraries/XMCLib/src/xmc_i2c.c **** 		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 421              	 .loc 3 168 24
 422 001a 7B68     	 ldr r3,[r7,#4]
 423 001c DB6B     	 ldr r3,[r3,#60]
 424 001e 1A4A     	 ldr r2,.L21+4
 425 0020 1A40     	 ands r2,r3
 426 0022 7B68     	 ldr r3,[r7,#4]
 427 0024 DA63     	 str r2,[r3,#60]
 169:../Libraries/XMCLib/src/xmc_i2c.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) ==
 428              	 .loc 3 169 9
 429 0026 3968     	 ldr r1,[r7]
 430 0028 7B68     	 ldr r3,[r7,#4]
 431 002a 0A22     	 movs r2,#10
 432 002c 1800     	 movs r0,r3
 433 002e FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 434 0032 031E     	 subs r3,r0,#0
 435              	 .loc 3 169 8
 436 0034 1FD1     	 bne .L18
 170:../Libraries/XMCLib/src/xmc_i2c.c ****     {
 171:../Libraries/XMCLib/src/xmc_i2c.c ****       status = XMC_I2C_CH_STATUS_OK;
 437              	 .loc 3 171 14
 438 0036 3B19     	 adds r3,r7,r4
 439 0038 0022     	 movs r2,#0
 440 003a 1A70     	 strb r2,[r3]
 441 003c 1BE0     	 b .L18
 442              	.L17:
 172:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 173:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 174:../Libraries/XMCLib/src/xmc_i2c.c ****   else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 443              	 .loc 3 174 11
 444 003e 3B68     	 ldr r3,[r7]
 445 0040 124A     	 ldr r2,.L21+8
 446 0042 9342     	 cmp r3,r2
 447 0044 13D8     	 bhi .L19
 175:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 176:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 448              	 .loc 3 176 26
 449 0046 7B68     	 ldr r3,[r7,#4]
 450 0048 DB6B     	 ldr r3,[r3,#60]
 451 004a 8022     	 movs r2,#128
 452 004c 9202     	 lsls r2,r2,#10
 453 004e 1A43     	 orrs r2,r3
 454 0050 7B68     	 ldr r3,[r7,#4]
 455 0052 DA63     	 str r2,[r3,#60]
 177:../Libraries/XMCLib/src/xmc_i2c.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC
 456              	 .loc 3 177 9
 457 0054 3968     	 ldr r1,[r7]
 458 0056 7B68     	 ldr r3,[r7,#4]
 459 0058 1922     	 movs r2,#25
 460 005a 1800     	 movs r0,r3
 461 005c FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 462 0060 031E     	 subs r3,r0,#0
 463              	 .loc 3 177 8
 464 0062 08D1     	 bne .L18
 178:../Libraries/XMCLib/src/xmc_i2c.c ****     {
 179:../Libraries/XMCLib/src/xmc_i2c.c ****       status = XMC_I2C_CH_STATUS_OK;
 465              	 .loc 3 179 14
 466 0064 0F23     	 movs r3,#15
 467 0066 FB18     	 adds r3,r7,r3
 468 0068 0022     	 movs r2,#0
 469 006a 1A70     	 strb r2,[r3]
 470 006c 03E0     	 b .L18
 471              	.L19:
 180:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 181:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 182:../Libraries/XMCLib/src/xmc_i2c.c ****   else 
 183:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 184:../Libraries/XMCLib/src/xmc_i2c.c ****     status = XMC_I2C_CH_STATUS_ERROR;
 472              	 .loc 3 184 12
 473 006e 0F23     	 movs r3,#15
 474 0070 FB18     	 adds r3,r7,r3
 475 0072 0122     	 movs r2,#1
 476 0074 1A70     	 strb r2,[r3]
 477              	.L18:
 185:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 186:../Libraries/XMCLib/src/xmc_i2c.c ****   
 187:../Libraries/XMCLib/src/xmc_i2c.c ****   return status;
 478              	 .loc 3 187 10
 479 0076 0F23     	 movs r3,#15
 480 0078 FB18     	 adds r3,r7,r3
 481 007a 1B78     	 ldrb r3,[r3]
 188:../Libraries/XMCLib/src/xmc_i2c.c **** }
 482              	 .loc 3 188 1
 483 007c 1800     	 movs r0,r3
 484 007e BD46     	 mov sp,r7
 485 0080 05B0     	 add sp,sp,#20
 486              	 
 487 0082 90BD     	 pop {r4,r7,pc}
 488              	.L22:
 489              	 .align 2
 490              	.L21:
 491 0084 A0860100 	 .word 100000
 492 0088 FFFFFDFF 	 .word -131073
 493 008c 801A0600 	 .word 400000
 494              	 .cfi_endproc
 495              	.LFE120:
 497              	 .section .text.XMC_I2C_CH_MasterStart,"ax",%progbits
 498              	 .align 1
 499              	 .global XMC_I2C_CH_MasterStart
 500              	 .syntax unified
 501              	 .code 16
 502              	 .thumb_func
 503              	 .fpu softvfp
 505              	XMC_I2C_CH_MasterStart:
 506              	.LFB121:
 189:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non
 190:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD
 191:../Libraries/XMCLib/src/xmc_i2c.c **** {
 507              	 .loc 3 191 1
 508              	 .cfi_startproc
 509              	 
 510              	 
 511 0000 80B5     	 push {r7,lr}
 512              	.LCFI21:
 513              	 .cfi_def_cfa_offset 8
 514              	 .cfi_offset 7,-8
 515              	 .cfi_offset 14,-4
 516 0002 84B0     	 sub sp,sp,#16
 517              	.LCFI22:
 518              	 .cfi_def_cfa_offset 24
 519 0004 00AF     	 add r7,sp,#0
 520              	.LCFI23:
 521              	 .cfi_def_cfa_register 7
 522 0006 7860     	 str r0,[r7,#4]
 523 0008 0800     	 movs r0,r1
 524 000a 1100     	 movs r1,r2
 525 000c BB1C     	 adds r3,r7,#2
 526 000e 021C     	 adds r2,r0,#0
 527 0010 1A80     	 strh r2,[r3]
 528 0012 7B1C     	 adds r3,r7,#1
 529 0014 0A1C     	 adds r2,r1,#0
 530 0016 1A70     	 strb r2,[r3]
 192:../Libraries/XMCLib/src/xmc_i2c.c ****   uint32_t temp;
 193:../Libraries/XMCLib/src/xmc_i2c.c ****   
 194:../Libraries/XMCLib/src/xmc_i2c.c ****   temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 531              	 .loc 3 194 15
 532 0018 BB1C     	 adds r3,r7,#2
 533 001a 1B88     	 ldrh r3,[r3]
 534 001c 8022     	 movs r2,#128
 535 001e D200     	 lsls r2,r2,#3
 536 0020 1343     	 orrs r3,r2
 537 0022 9BB2     	 uxth r3,r3
 538              	 .loc 3 194 8
 539 0024 FB60     	 str r3,[r7,#12]
 195:../Libraries/XMCLib/src/xmc_i2c.c ****   if (command == XMC_I2C_CH_CMD_READ)
 540              	 .loc 3 195 6
 541 0026 7B1C     	 adds r3,r7,#1
 542 0028 1B78     	 ldrb r3,[r3]
 543 002a 012B     	 cmp r3,#1
 544 002c 03D1     	 bne .L24
 196:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 197:../Libraries/XMCLib/src/xmc_i2c.c ****     temp |= 0x1U;
 545              	 .loc 3 197 10
 546 002e FB68     	 ldr r3,[r7,#12]
 547 0030 0122     	 movs r2,#1
 548 0032 1343     	 orrs r3,r2
 549 0034 FB60     	 str r3,[r7,#12]
 550              	.L24:
 198:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 199:../Libraries/XMCLib/src/xmc_i2c.c **** 
 200:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 201:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 551              	 .loc 3 201 15
 552 0036 7A68     	 ldr r2,[r7,#4]
 553 0038 8423     	 movs r3,#132
 554 003a 5B00     	 lsls r3,r3,#1
 555 003c D258     	 ldr r2,[r2,r3]
 556              	 .loc 3 201 23
 557 003e E023     	 movs r3,#224
 558 0040 DB04     	 lsls r3,r3,#19
 559 0042 1340     	 ands r3,r2
 560              	 .loc 3 201 6
 561 0044 13D1     	 bne .L25
 202:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 203:../Libraries/XMCLib/src/xmc_i2c.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 562              	 .loc 3 203 11
 563 0046 C046     	 nop
 564              	.L26:
 565              	 .loc 3 203 12 discriminator 1
 566 0048 7B68     	 ldr r3,[r7,#4]
 567 004a 1800     	 movs r0,r3
 568 004c FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 569 0050 0300     	 movs r3,r0
 570              	 .loc 3 203 11 discriminator 1
 571 0052 802B     	 cmp r3,#128
 572 0054 F8D0     	 beq .L26
 204:../Libraries/XMCLib/src/xmc_i2c.c **** 	{
 205:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 206:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 207:../Libraries/XMCLib/src/xmc_i2c.c **** 
 208:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 209:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 573              	 .loc 3 209 5
 574 0056 8023     	 movs r3,#128
 575 0058 9A01     	 lsls r2,r3,#6
 576 005a 7B68     	 ldr r3,[r7,#4]
 577 005c 1100     	 movs r1,r2
 578 005e 1800     	 movs r0,r3
 579 0060 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 210:../Libraries/XMCLib/src/xmc_i2c.c **** 
 211:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = temp;
 580              	 .loc 3 211 22
 581 0064 7B68     	 ldr r3,[r7,#4]
 582 0066 8021     	 movs r1,#128
 583 0068 FA68     	 ldr r2,[r7,#12]
 584 006a 5A50     	 str r2,[r3,r1]
 212:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 213:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 214:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 215:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0U] = temp;
 216:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 217:../Libraries/XMCLib/src/xmc_i2c.c **** }
 585              	 .loc 3 217 1
 586 006c 04E0     	 b .L28
 587              	.L25:
 215:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 588              	 .loc 3 215 21
 589 006e 7A68     	 ldr r2,[r7,#4]
 590 0070 C023     	 movs r3,#192
 591 0072 5B00     	 lsls r3,r3,#1
 592 0074 F968     	 ldr r1,[r7,#12]
 593 0076 D150     	 str r1,[r2,r3]
 594              	.L28:
 595              	 .loc 3 217 1
 596 0078 C046     	 nop
 597 007a BD46     	 mov sp,r7
 598 007c 04B0     	 add sp,sp,#16
 599              	 
 600 007e 80BD     	 pop {r7,pc}
 601              	 .cfi_endproc
 602              	.LFE121:
 604              	 .section .text.XMC_I2C_CH_MasterRepeatedStart,"ax",%progbits
 605              	 .align 1
 606              	 .global XMC_I2C_CH_MasterRepeatedStart
 607              	 .syntax unified
 608              	 .code 16
 609              	 .thumb_func
 610              	 .fpu softvfp
 612              	XMC_I2C_CH_MasterRepeatedStart:
 613              	.LFB122:
 218:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends master repeated start condition along with read/write command to IN/TBUF register based on
 219:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2
 220:../Libraries/XMCLib/src/xmc_i2c.c **** {
 614              	 .loc 3 220 1
 615              	 .cfi_startproc
 616              	 
 617              	 
 618 0000 80B5     	 push {r7,lr}
 619              	.LCFI24:
 620              	 .cfi_def_cfa_offset 8
 621              	 .cfi_offset 7,-8
 622              	 .cfi_offset 14,-4
 623 0002 84B0     	 sub sp,sp,#16
 624              	.LCFI25:
 625              	 .cfi_def_cfa_offset 24
 626 0004 00AF     	 add r7,sp,#0
 627              	.LCFI26:
 628              	 .cfi_def_cfa_register 7
 629 0006 7860     	 str r0,[r7,#4]
 630 0008 0800     	 movs r0,r1
 631 000a 1100     	 movs r1,r2
 632 000c BB1C     	 adds r3,r7,#2
 633 000e 021C     	 adds r2,r0,#0
 634 0010 1A80     	 strh r2,[r3]
 635 0012 7B1C     	 adds r3,r7,#1
 636 0014 0A1C     	 adds r2,r1,#0
 637 0016 1A70     	 strb r2,[r3]
 221:../Libraries/XMCLib/src/xmc_i2c.c ****   uint32_t tmp;
 222:../Libraries/XMCLib/src/xmc_i2c.c ****   tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 638              	 .loc 3 222 14
 639 0018 BB1C     	 adds r3,r7,#2
 640 001a 1B88     	 ldrh r3,[r3]
 641 001c A022     	 movs r2,#160
 642 001e D200     	 lsls r2,r2,#3
 643 0020 1343     	 orrs r3,r2
 644 0022 9BB2     	 uxth r3,r3
 645              	 .loc 3 222 7
 646 0024 FB60     	 str r3,[r7,#12]
 223:../Libraries/XMCLib/src/xmc_i2c.c ****   if (command == XMC_I2C_CH_CMD_READ)
 647              	 .loc 3 223 6
 648 0026 7B1C     	 adds r3,r7,#1
 649 0028 1B78     	 ldrb r3,[r3]
 650 002a 012B     	 cmp r3,#1
 651 002c 03D1     	 bne .L30
 224:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 225:../Libraries/XMCLib/src/xmc_i2c.c ****     tmp |= 0x1U;
 652              	 .loc 3 225 9
 653 002e FB68     	 ldr r3,[r7,#12]
 654 0030 0122     	 movs r2,#1
 655 0032 1343     	 orrs r3,r2
 656 0034 FB60     	 str r3,[r7,#12]
 657              	.L30:
 226:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 227:../Libraries/XMCLib/src/xmc_i2c.c **** 
 228:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 229:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 658              	 .loc 3 229 15
 659 0036 7A68     	 ldr r2,[r7,#4]
 660 0038 8423     	 movs r3,#132
 661 003a 5B00     	 lsls r3,r3,#1
 662 003c D258     	 ldr r2,[r2,r3]
 663              	 .loc 3 229 23
 664 003e E023     	 movs r3,#224
 665 0040 DB04     	 lsls r3,r3,#19
 666 0042 1340     	 ands r3,r2
 667              	 .loc 3 229 6
 668 0044 13D1     	 bne .L31
 230:../Libraries/XMCLib/src/xmc_i2c.c ****   {  
 231:../Libraries/XMCLib/src/xmc_i2c.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 669              	 .loc 3 231 11
 670 0046 C046     	 nop
 671              	.L32:
 672              	 .loc 3 231 12 discriminator 1
 673 0048 7B68     	 ldr r3,[r7,#4]
 674 004a 1800     	 movs r0,r3
 675 004c FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 676 0050 0300     	 movs r3,r0
 677              	 .loc 3 231 11 discriminator 1
 678 0052 802B     	 cmp r3,#128
 679 0054 F8D0     	 beq .L32
 232:../Libraries/XMCLib/src/xmc_i2c.c **** 	{
 233:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 234:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 235:../Libraries/XMCLib/src/xmc_i2c.c **** 
 236:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 237:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 680              	 .loc 3 237 5
 681 0056 8023     	 movs r3,#128
 682 0058 9A01     	 lsls r2,r3,#6
 683 005a 7B68     	 ldr r3,[r7,#4]
 684 005c 1100     	 movs r1,r2
 685 005e 1800     	 movs r0,r3
 686 0060 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 238:../Libraries/XMCLib/src/xmc_i2c.c **** 
 239:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = tmp;
 687              	 .loc 3 239 22
 688 0064 7B68     	 ldr r3,[r7,#4]
 689 0066 8021     	 movs r1,#128
 690 0068 FA68     	 ldr r2,[r7,#12]
 691 006a 5A50     	 str r2,[r3,r1]
 240:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 241:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 242:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 243:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0U] = tmp;
 244:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 245:../Libraries/XMCLib/src/xmc_i2c.c **** }
 692              	 .loc 3 245 1
 693 006c 04E0     	 b .L34
 694              	.L31:
 243:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 695              	 .loc 3 243 21
 696 006e 7A68     	 ldr r2,[r7,#4]
 697 0070 C023     	 movs r3,#192
 698 0072 5B00     	 lsls r3,r3,#1
 699 0074 F968     	 ldr r1,[r7,#12]
 700 0076 D150     	 str r1,[r2,r3]
 701              	.L34:
 702              	 .loc 3 245 1
 703 0078 C046     	 nop
 704 007a BD46     	 mov sp,r7
 705 007c 04B0     	 add sp,sp,#16
 706              	 
 707 007e 80BD     	 pop {r7,pc}
 708              	 .cfi_endproc
 709              	.LFE122:
 711              	 .section .text.XMC_I2C_CH_MasterStop,"ax",%progbits
 712              	 .align 1
 713              	 .global XMC_I2C_CH_MasterStop
 714              	 .syntax unified
 715              	 .code 16
 716              	 .thumb_func
 717              	 .fpu softvfp
 719              	XMC_I2C_CH_MasterStop:
 720              	.LFB123:
 246:../Libraries/XMCLib/src/xmc_i2c.c **** 
 247:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
 248:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
 249:../Libraries/XMCLib/src/xmc_i2c.c **** {
 721              	 .loc 3 249 1
 722              	 .cfi_startproc
 723              	 
 724              	 
 725 0000 80B5     	 push {r7,lr}
 726              	.LCFI27:
 727              	 .cfi_def_cfa_offset 8
 728              	 .cfi_offset 7,-8
 729              	 .cfi_offset 14,-4
 730 0002 82B0     	 sub sp,sp,#8
 731              	.LCFI28:
 732              	 .cfi_def_cfa_offset 16
 733 0004 00AF     	 add r7,sp,#0
 734              	.LCFI29:
 735              	 .cfi_def_cfa_register 7
 736 0006 7860     	 str r0,[r7,#4]
 250:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 251:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 737              	 .loc 3 251 15
 738 0008 7A68     	 ldr r2,[r7,#4]
 739 000a 8423     	 movs r3,#132
 740 000c 5B00     	 lsls r3,r3,#1
 741 000e D258     	 ldr r2,[r2,r3]
 742              	 .loc 3 251 23
 743 0010 E023     	 movs r3,#224
 744 0012 DB04     	 lsls r3,r3,#19
 745 0014 1340     	 ands r3,r2
 746              	 .loc 3 251 6
 747 0016 14D1     	 bne .L36
 252:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 253:../Libraries/XMCLib/src/xmc_i2c.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 748              	 .loc 3 253 11
 749 0018 C046     	 nop
 750              	.L37:
 751              	 .loc 3 253 12 discriminator 1
 752 001a 7B68     	 ldr r3,[r7,#4]
 753 001c 1800     	 movs r0,r3
 754 001e FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 755 0022 0300     	 movs r3,r0
 756              	 .loc 3 253 11 discriminator 1
 757 0024 802B     	 cmp r3,#128
 758 0026 F8D0     	 beq .L37
 254:../Libraries/XMCLib/src/xmc_i2c.c ****     {
 255:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 256:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 257:../Libraries/XMCLib/src/xmc_i2c.c **** 
 258:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 259:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 759              	 .loc 3 259 5
 760 0028 8023     	 movs r3,#128
 761 002a 9A01     	 lsls r2,r3,#6
 762 002c 7B68     	 ldr r3,[r7,#4]
 763 002e 1100     	 movs r1,r2
 764 0030 1800     	 movs r0,r3
 765 0032 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 260:../Libraries/XMCLib/src/xmc_i2c.c **** 
 261:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 766              	 .loc 3 261 22
 767 0036 7B68     	 ldr r3,[r7,#4]
 768 0038 8021     	 movs r1,#128
 769 003a C022     	 movs r2,#192
 770 003c D200     	 lsls r2,r2,#3
 771 003e 5A50     	 str r2,[r3,r1]
 262:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 263:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 264:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 265:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 266:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 267:../Libraries/XMCLib/src/xmc_i2c.c **** }
 772              	 .loc 3 267 1
 773 0040 05E0     	 b .L39
 774              	.L36:
 265:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 775              	 .loc 3 265 21
 776 0042 7A68     	 ldr r2,[r7,#4]
 777 0044 C023     	 movs r3,#192
 778 0046 5B00     	 lsls r3,r3,#1
 779 0048 C021     	 movs r1,#192
 780 004a C900     	 lsls r1,r1,#3
 781 004c D150     	 str r1,[r2,r3]
 782              	.L39:
 783              	 .loc 3 267 1
 784 004e C046     	 nop
 785 0050 BD46     	 mov sp,r7
 786 0052 02B0     	 add sp,sp,#8
 787              	 
 788 0054 80BD     	 pop {r7,pc}
 789              	 .cfi_endproc
 790              	.LFE123:
 792              	 .section .text.XMC_I2C_CH_MasterTransmit,"ax",%progbits
 793              	 .align 1
 794              	 .global XMC_I2C_CH_MasterTransmit
 795              	 .syntax unified
 796              	 .code 16
 797              	 .thumb_func
 798              	 .fpu softvfp
 800              	XMC_I2C_CH_MasterTransmit:
 801              	.LFB124:
 268:../Libraries/XMCLib/src/xmc_i2c.c **** 
 269:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
 270:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
 271:../Libraries/XMCLib/src/xmc_i2c.c **** {
 802              	 .loc 3 271 1
 803              	 .cfi_startproc
 804              	 
 805              	 
 806 0000 80B5     	 push {r7,lr}
 807              	.LCFI30:
 808              	 .cfi_def_cfa_offset 8
 809              	 .cfi_offset 7,-8
 810              	 .cfi_offset 14,-4
 811 0002 82B0     	 sub sp,sp,#8
 812              	.LCFI31:
 813              	 .cfi_def_cfa_offset 16
 814 0004 00AF     	 add r7,sp,#0
 815              	.LCFI32:
 816              	 .cfi_def_cfa_register 7
 817 0006 7860     	 str r0,[r7,#4]
 818 0008 0A00     	 movs r2,r1
 819 000a FB1C     	 adds r3,r7,#3
 820 000c 1A70     	 strb r2,[r3]
 272:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 273:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 821              	 .loc 3 273 15
 822 000e 7A68     	 ldr r2,[r7,#4]
 823 0010 8423     	 movs r3,#132
 824 0012 5B00     	 lsls r3,r3,#1
 825 0014 D258     	 ldr r2,[r2,r3]
 826              	 .loc 3 273 23
 827 0016 E023     	 movs r3,#224
 828 0018 DB04     	 lsls r3,r3,#19
 829 001a 1340     	 ands r3,r2
 830              	 .loc 3 273 6
 831 001c 14D1     	 bne .L41
 274:../Libraries/XMCLib/src/xmc_i2c.c ****   {    
 275:../Libraries/XMCLib/src/xmc_i2c.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 832              	 .loc 3 275 11
 833 001e C046     	 nop
 834              	.L42:
 835              	 .loc 3 275 12 discriminator 1
 836 0020 7B68     	 ldr r3,[r7,#4]
 837 0022 1800     	 movs r0,r3
 838 0024 FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 839 0028 0300     	 movs r3,r0
 840              	 .loc 3 275 11 discriminator 1
 841 002a 802B     	 cmp r3,#128
 842 002c F8D0     	 beq .L42
 276:../Libraries/XMCLib/src/xmc_i2c.c **** 	{
 277:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 278:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 279:../Libraries/XMCLib/src/xmc_i2c.c **** 
 280:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 281:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 843              	 .loc 3 281 5
 844 002e 8023     	 movs r3,#128
 845 0030 9A01     	 lsls r2,r3,#6
 846 0032 7B68     	 ldr r3,[r7,#4]
 847 0034 1100     	 movs r1,r2
 848 0036 1800     	 movs r0,r3
 849 0038 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 282:../Libraries/XMCLib/src/xmc_i2c.c **** 
 283:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 850              	 .loc 3 283 61
 851 003c FB1C     	 adds r3,r7,#3
 852 003e 1A78     	 ldrb r2,[r3]
 853              	 .loc 3 283 22
 854 0040 7B68     	 ldr r3,[r7,#4]
 855 0042 8021     	 movs r1,#128
 856 0044 5A50     	 str r2,[r3,r1]
 284:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 285:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 286:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 287:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 288:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 289:../Libraries/XMCLib/src/xmc_i2c.c **** }
 857              	 .loc 3 289 1
 858 0046 05E0     	 b .L44
 859              	.L41:
 287:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 860              	 .loc 3 287 59
 861 0048 FB1C     	 adds r3,r7,#3
 862 004a 1978     	 ldrb r1,[r3]
 287:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 863              	 .loc 3 287 20
 864 004c 7A68     	 ldr r2,[r7,#4]
 865 004e C023     	 movs r3,#192
 866 0050 5B00     	 lsls r3,r3,#1
 867 0052 D150     	 str r1,[r2,r3]
 868              	.L44:
 869              	 .loc 3 289 1
 870 0054 C046     	 nop
 871 0056 BD46     	 mov sp,r7
 872 0058 02B0     	 add sp,sp,#8
 873              	 
 874 005a 80BD     	 pop {r7,pc}
 875              	 .cfi_endproc
 876              	.LFE124:
 878              	 .section .text.XMC_I2C_CH_SlaveTransmit,"ax",%progbits
 879              	 .align 1
 880              	 .global XMC_I2C_CH_SlaveTransmit
 881              	 .syntax unified
 882              	 .code 16
 883              	 .thumb_func
 884              	 .fpu softvfp
 886              	XMC_I2C_CH_SlaveTransmit:
 887              	.LFB125:
 290:../Libraries/XMCLib/src/xmc_i2c.c **** 
 291:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends slave send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
 292:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_SlaveTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
 293:../Libraries/XMCLib/src/xmc_i2c.c **** {
 888              	 .loc 3 293 1
 889              	 .cfi_startproc
 890              	 
 891              	 
 892 0000 80B5     	 push {r7,lr}
 893              	.LCFI33:
 894              	 .cfi_def_cfa_offset 8
 895              	 .cfi_offset 7,-8
 896              	 .cfi_offset 14,-4
 897 0002 82B0     	 sub sp,sp,#8
 898              	.LCFI34:
 899              	 .cfi_def_cfa_offset 16
 900 0004 00AF     	 add r7,sp,#0
 901              	.LCFI35:
 902              	 .cfi_def_cfa_register 7
 903 0006 7860     	 str r0,[r7,#4]
 904 0008 0A00     	 movs r2,r1
 905 000a FB1C     	 adds r3,r7,#3
 906 000c 1A70     	 strb r2,[r3]
 294:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 295:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 907              	 .loc 3 295 15
 908 000e 7A68     	 ldr r2,[r7,#4]
 909 0010 8423     	 movs r3,#132
 910 0012 5B00     	 lsls r3,r3,#1
 911 0014 D258     	 ldr r2,[r2,r3]
 912              	 .loc 3 295 23
 913 0016 E023     	 movs r3,#224
 914 0018 DB04     	 lsls r3,r3,#19
 915 001a 1340     	 ands r3,r2
 916              	 .loc 3 295 6
 917 001c 17D1     	 bne .L46
 296:../Libraries/XMCLib/src/xmc_i2c.c ****   {    
 297:../Libraries/XMCLib/src/xmc_i2c.c ****     while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 918              	 .loc 3 297 10
 919 001e C046     	 nop
 920              	.L47:
 921              	 .loc 3 297 11 discriminator 1
 922 0020 7B68     	 ldr r3,[r7,#4]
 923 0022 1800     	 movs r0,r3
 924 0024 FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 925 0028 0300     	 movs r3,r0
 926              	 .loc 3 297 10 discriminator 1
 927 002a 802B     	 cmp r3,#128
 928 002c F8D0     	 beq .L47
 298:../Libraries/XMCLib/src/xmc_i2c.c **** 	{
 299:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 300:../Libraries/XMCLib/src/xmc_i2c.c ****     }    
 301:../Libraries/XMCLib/src/xmc_i2c.c **** 
 302:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 303:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 929              	 .loc 3 303 5
 930 002e 8023     	 movs r3,#128
 931 0030 9A01     	 lsls r2,r3,#6
 932 0032 7B68     	 ldr r3,[r7,#4]
 933 0034 1100     	 movs r1,r2
 934 0036 1800     	 movs r0,r3
 935 0038 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 304:../Libraries/XMCLib/src/xmc_i2c.c **** 
 305:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_SLAVE_SEND | data;
 936              	 .loc 3 305 60
 937 003c FB1C     	 adds r3,r7,#3
 938 003e 1B78     	 ldrb r3,[r3]
 939 0040 8022     	 movs r2,#128
 940 0042 5200     	 lsls r2,r2,#1
 941 0044 1A43     	 orrs r2,r3
 942              	 .loc 3 305 22
 943 0046 7B68     	 ldr r3,[r7,#4]
 944 0048 8021     	 movs r1,#128
 945 004a 5A50     	 str r2,[r3,r1]
 306:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 307:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 308:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 309:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_SLAVE_SEND | data;
 310:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 311:../Libraries/XMCLib/src/xmc_i2c.c **** }
 946              	 .loc 3 311 1
 947 004c 09E0     	 b .L49
 948              	.L46:
 309:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 949              	 .loc 3 309 58
 950 004e FB1C     	 adds r3,r7,#3
 951 0050 1B78     	 ldrb r3,[r3]
 952 0052 8022     	 movs r2,#128
 953 0054 5200     	 lsls r2,r2,#1
 954 0056 1A43     	 orrs r2,r3
 955 0058 1100     	 movs r1,r2
 309:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 956              	 .loc 3 309 20
 957 005a 7A68     	 ldr r2,[r7,#4]
 958 005c C023     	 movs r3,#192
 959 005e 5B00     	 lsls r3,r3,#1
 960 0060 D150     	 str r1,[r2,r3]
 961              	.L49:
 962              	 .loc 3 311 1
 963 0062 C046     	 nop
 964 0064 BD46     	 mov sp,r7
 965 0066 02B0     	 add sp,sp,#8
 966              	 
 967 0068 80BD     	 pop {r7,pc}
 968              	 .cfi_endproc
 969              	.LFE125:
 971              	 .section .text.XMC_I2C_CH_MasterReceiveAck,"ax",%progbits
 972              	 .align 1
 973              	 .global XMC_I2C_CH_MasterReceiveAck
 974              	 .syntax unified
 975              	 .code 16
 976              	 .thumb_func
 977              	 .fpu softvfp
 979              	XMC_I2C_CH_MasterReceiveAck:
 980              	.LFB126:
 312:../Libraries/XMCLib/src/xmc_i2c.c **** 
 313:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
 314:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
 315:../Libraries/XMCLib/src/xmc_i2c.c **** {
 981              	 .loc 3 315 1
 982              	 .cfi_startproc
 983              	 
 984              	 
 985 0000 80B5     	 push {r7,lr}
 986              	.LCFI36:
 987              	 .cfi_def_cfa_offset 8
 988              	 .cfi_offset 7,-8
 989              	 .cfi_offset 14,-4
 990 0002 82B0     	 sub sp,sp,#8
 991              	.LCFI37:
 992              	 .cfi_def_cfa_offset 16
 993 0004 00AF     	 add r7,sp,#0
 994              	.LCFI38:
 995              	 .cfi_def_cfa_register 7
 996 0006 7860     	 str r0,[r7,#4]
 316:../Libraries/XMCLib/src/xmc_i2c.c **** /* Check FIFO size */
 317:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 997              	 .loc 3 317 15
 998 0008 7A68     	 ldr r2,[r7,#4]
 999 000a 8423     	 movs r3,#132
 1000 000c 5B00     	 lsls r3,r3,#1
 1001 000e D258     	 ldr r2,[r2,r3]
 1002              	 .loc 3 317 23
 1003 0010 E023     	 movs r3,#224
 1004 0012 DB04     	 lsls r3,r3,#19
 1005 0014 1340     	 ands r3,r2
 1006              	 .loc 3 317 6
 1007 0016 14D1     	 bne .L51
 318:../Libraries/XMCLib/src/xmc_i2c.c ****   {    
 319:../Libraries/XMCLib/src/xmc_i2c.c ****     while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 1008              	 .loc 3 319 10
 1009 0018 C046     	 nop
 1010              	.L52:
 1011              	 .loc 3 319 11 discriminator 1
 1012 001a 7B68     	 ldr r3,[r7,#4]
 1013 001c 1800     	 movs r0,r3
 1014 001e FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 1015 0022 0300     	 movs r3,r0
 1016              	 .loc 3 319 10 discriminator 1
 1017 0024 802B     	 cmp r3,#128
 1018 0026 F8D0     	 beq .L52
 320:../Libraries/XMCLib/src/xmc_i2c.c **** 	{
 321:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 322:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 323:../Libraries/XMCLib/src/xmc_i2c.c **** 
 324:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 325:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 1019              	 .loc 3 325 5
 1020 0028 8023     	 movs r3,#128
 1021 002a 9A01     	 lsls r2,r3,#6
 1022 002c 7B68     	 ldr r3,[r7,#4]
 1023 002e 1100     	 movs r1,r2
 1024 0030 1800     	 movs r0,r3
 1025 0032 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 326:../Libraries/XMCLib/src/xmc_i2c.c **** 
 327:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 1026              	 .loc 3 327 22
 1027 0036 7B68     	 ldr r3,[r7,#4]
 1028 0038 8021     	 movs r1,#128
 1029 003a 8022     	 movs r2,#128
 1030 003c 9200     	 lsls r2,r2,#2
 1031 003e 5A50     	 str r2,[r3,r1]
 328:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 329:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 330:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 331:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 332:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 333:../Libraries/XMCLib/src/xmc_i2c.c **** }
 1032              	 .loc 3 333 1
 1033 0040 05E0     	 b .L54
 1034              	.L51:
 331:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 1035              	 .loc 3 331 20
 1036 0042 7A68     	 ldr r2,[r7,#4]
 1037 0044 C023     	 movs r3,#192
 1038 0046 5B00     	 lsls r3,r3,#1
 1039 0048 8021     	 movs r1,#128
 1040 004a 8900     	 lsls r1,r1,#2
 1041 004c D150     	 str r1,[r2,r3]
 1042              	.L54:
 1043              	 .loc 3 333 1
 1044 004e C046     	 nop
 1045 0050 BD46     	 mov sp,r7
 1046 0052 02B0     	 add sp,sp,#8
 1047              	 
 1048 0054 80BD     	 pop {r7,pc}
 1049              	 .cfi_endproc
 1050              	.LFE126:
 1052              	 .section .text.XMC_I2C_CH_MasterReceiveNack,"ax",%progbits
 1053              	 .align 1
 1054              	 .global XMC_I2C_CH_MasterReceiveNack
 1055              	 .syntax unified
 1056              	 .code 16
 1057              	 .thumb_func
 1058              	 .fpu softvfp
 1060              	XMC_I2C_CH_MasterReceiveNack:
 1061              	.LFB127:
 334:../Libraries/XMCLib/src/xmc_i2c.c **** 
 335:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
 336:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
 337:../Libraries/XMCLib/src/xmc_i2c.c **** {
 1062              	 .loc 3 337 1
 1063              	 .cfi_startproc
 1064              	 
 1065              	 
 1066 0000 80B5     	 push {r7,lr}
 1067              	.LCFI39:
 1068              	 .cfi_def_cfa_offset 8
 1069              	 .cfi_offset 7,-8
 1070              	 .cfi_offset 14,-4
 1071 0002 82B0     	 sub sp,sp,#8
 1072              	.LCFI40:
 1073              	 .cfi_def_cfa_offset 16
 1074 0004 00AF     	 add r7,sp,#0
 1075              	.LCFI41:
 1076              	 .cfi_def_cfa_register 7
 1077 0006 7860     	 str r0,[r7,#4]
 338:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 339:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 1078              	 .loc 3 339 15
 1079 0008 7A68     	 ldr r2,[r7,#4]
 1080 000a 8423     	 movs r3,#132
 1081 000c 5B00     	 lsls r3,r3,#1
 1082 000e D258     	 ldr r2,[r2,r3]
 1083              	 .loc 3 339 23
 1084 0010 E023     	 movs r3,#224
 1085 0012 DB04     	 lsls r3,r3,#19
 1086 0014 1340     	 ands r3,r2
 1087              	 .loc 3 339 6
 1088 0016 14D1     	 bne .L56
 340:../Libraries/XMCLib/src/xmc_i2c.c ****   {    
 341:../Libraries/XMCLib/src/xmc_i2c.c ****     while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 1089              	 .loc 3 341 10
 1090 0018 C046     	 nop
 1091              	.L57:
 1092              	 .loc 3 341 11 discriminator 1
 1093 001a 7B68     	 ldr r3,[r7,#4]
 1094 001c 1800     	 movs r0,r3
 1095 001e FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 1096 0022 0300     	 movs r3,r0
 1097              	 .loc 3 341 10 discriminator 1
 1098 0024 802B     	 cmp r3,#128
 1099 0026 F8D0     	 beq .L57
 342:../Libraries/XMCLib/src/xmc_i2c.c **** 	{
 343:../Libraries/XMCLib/src/xmc_i2c.c ****       /* check TDV, wait until TBUF is ready */
 344:../Libraries/XMCLib/src/xmc_i2c.c ****     }
 345:../Libraries/XMCLib/src/xmc_i2c.c **** 
 346:../Libraries/XMCLib/src/xmc_i2c.c ****     /* clear PSR_TBIF */
 347:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 1100              	 .loc 3 347 5
 1101 0028 8023     	 movs r3,#128
 1102 002a 9A01     	 lsls r2,r3,#6
 1103 002c 7B68     	 ldr r3,[r7,#4]
 1104 002e 1100     	 movs r1,r2
 1105 0030 1800     	 movs r0,r3
 1106 0032 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 348:../Libraries/XMCLib/src/xmc_i2c.c **** 
 349:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 1107              	 .loc 3 349 22
 1108 0036 7B68     	 ldr r3,[r7,#4]
 1109 0038 8021     	 movs r1,#128
 1110 003a C022     	 movs r2,#192
 1111 003c 9200     	 lsls r2,r2,#2
 1112 003e 5A50     	 str r2,[r3,r1]
 350:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 351:../Libraries/XMCLib/src/xmc_i2c.c ****   else 
 352:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 353:../Libraries/XMCLib/src/xmc_i2c.c ****     channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 354:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 355:../Libraries/XMCLib/src/xmc_i2c.c **** }
 1113              	 .loc 3 355 1
 1114 0040 05E0     	 b .L59
 1115              	.L56:
 353:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 1116              	 .loc 3 353 20
 1117 0042 7A68     	 ldr r2,[r7,#4]
 1118 0044 C023     	 movs r3,#192
 1119 0046 5B00     	 lsls r3,r3,#1
 1120 0048 C021     	 movs r1,#192
 1121 004a 8900     	 lsls r1,r1,#2
 1122 004c D150     	 str r1,[r2,r3]
 1123              	.L59:
 1124              	 .loc 3 355 1
 1125 004e C046     	 nop
 1126 0050 BD46     	 mov sp,r7
 1127 0052 02B0     	 add sp,sp,#8
 1128              	 
 1129 0054 80BD     	 pop {r7,pc}
 1130              	 .cfi_endproc
 1131              	.LFE127:
 1133              	 .section .text.XMC_I2C_CH_GetReceivedData,"ax",%progbits
 1134              	 .align 1
 1135              	 .global XMC_I2C_CH_GetReceivedData
 1136              	 .syntax unified
 1137              	 .code 16
 1138              	 .thumb_func
 1139              	 .fpu softvfp
 1141              	XMC_I2C_CH_GetReceivedData:
 1142              	.LFB128:
 356:../Libraries/XMCLib/src/xmc_i2c.c **** 
 357:../Libraries/XMCLib/src/xmc_i2c.c **** /* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
 358:../Libraries/XMCLib/src/xmc_i2c.c **** uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
 359:../Libraries/XMCLib/src/xmc_i2c.c **** {
 1143              	 .loc 3 359 1
 1144              	 .cfi_startproc
 1145              	 
 1146              	 
 1147 0000 80B5     	 push {r7,lr}
 1148              	.LCFI42:
 1149              	 .cfi_def_cfa_offset 8
 1150              	 .cfi_offset 7,-8
 1151              	 .cfi_offset 14,-4
 1152 0002 84B0     	 sub sp,sp,#16
 1153              	.LCFI43:
 1154              	 .cfi_def_cfa_offset 24
 1155 0004 00AF     	 add r7,sp,#0
 1156              	.LCFI44:
 1157              	 .cfi_def_cfa_register 7
 1158 0006 7860     	 str r0,[r7,#4]
 360:../Libraries/XMCLib/src/xmc_i2c.c ****   uint8_t retval;
 361:../Libraries/XMCLib/src/xmc_i2c.c **** 
 362:../Libraries/XMCLib/src/xmc_i2c.c ****   /* Check FIFO size */
 363:../Libraries/XMCLib/src/xmc_i2c.c ****   if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 1159              	 .loc 3 363 15
 1160 0008 7A68     	 ldr r2,[r7,#4]
 1161 000a 8623     	 movs r3,#134
 1162 000c 5B00     	 lsls r3,r3,#1
 1163 000e D258     	 ldr r2,[r2,r3]
 1164              	 .loc 3 363 23
 1165 0010 E023     	 movs r3,#224
 1166 0012 DB04     	 lsls r3,r3,#19
 1167 0014 1340     	 ands r3,r2
 1168              	 .loc 3 363 6
 1169 0016 05D1     	 bne .L61
 364:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 365:../Libraries/XMCLib/src/xmc_i2c.c ****     retval = (uint8_t)channel->RBUF;
 1170              	 .loc 3 365 30
 1171 0018 7B68     	 ldr r3,[r7,#4]
 1172 001a 5A6D     	 ldr r2,[r3,#84]
 1173              	 .loc 3 365 12
 1174 001c 0F23     	 movs r3,#15
 1175 001e FB18     	 adds r3,r7,r3
 1176 0020 1A70     	 strb r2,[r3]
 1177 0022 06E0     	 b .L62
 1178              	.L61:
 366:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 367:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 368:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 369:../Libraries/XMCLib/src/xmc_i2c.c ****     retval = (uint8_t)channel->OUTR;
 1179              	 .loc 3 369 30
 1180 0024 7A68     	 ldr r2,[r7,#4]
 1181 0026 8E23     	 movs r3,#142
 1182 0028 5B00     	 lsls r3,r3,#1
 1183 002a D258     	 ldr r2,[r2,r3]
 1184              	 .loc 3 369 12
 1185 002c 0F23     	 movs r3,#15
 1186 002e FB18     	 adds r3,r7,r3
 1187 0030 1A70     	 strb r2,[r3]
 1188              	.L62:
 370:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 371:../Libraries/XMCLib/src/xmc_i2c.c **** 
 372:../Libraries/XMCLib/src/xmc_i2c.c ****   return retval;
 1189              	 .loc 3 372 10
 1190 0032 0F23     	 movs r3,#15
 1191 0034 FB18     	 adds r3,r7,r3
 1192 0036 1B78     	 ldrb r3,[r3]
 373:../Libraries/XMCLib/src/xmc_i2c.c **** }
 1193              	 .loc 3 373 1
 1194 0038 1800     	 movs r0,r3
 1195 003a BD46     	 mov sp,r7
 1196 003c 04B0     	 add sp,sp,#16
 1197              	 
 1198 003e 80BD     	 pop {r7,pc}
 1199              	 .cfi_endproc
 1200              	.LFE128:
 1202              	 .section .text.XMC_I2C_CH_Stop,"ax",%progbits
 1203              	 .align 1
 1204              	 .global XMC_I2C_CH_Stop
 1205              	 .syntax unified
 1206              	 .code 16
 1207              	 .thumb_func
 1208              	 .fpu softvfp
 1210              	XMC_I2C_CH_Stop:
 1211              	.LFB129:
 374:../Libraries/XMCLib/src/xmc_i2c.c **** 
 375:../Libraries/XMCLib/src/xmc_i2c.c **** /* Sets the operating mode of USIC to IDLE */
 376:../Libraries/XMCLib/src/xmc_i2c.c **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_Stop(XMC_USIC_CH_t *const channel)
 377:../Libraries/XMCLib/src/xmc_i2c.c **** {
 1212              	 .loc 3 377 1
 1213              	 .cfi_startproc
 1214              	 
 1215              	 
 1216 0000 90B5     	 push {r4,r7,lr}
 1217              	.LCFI45:
 1218              	 .cfi_def_cfa_offset 12
 1219              	 .cfi_offset 4,-12
 1220              	 .cfi_offset 7,-8
 1221              	 .cfi_offset 14,-4
 1222 0002 85B0     	 sub sp,sp,#20
 1223              	.LCFI46:
 1224              	 .cfi_def_cfa_offset 32
 1225 0004 00AF     	 add r7,sp,#0
 1226              	.LCFI47:
 1227              	 .cfi_def_cfa_register 7
 1228 0006 7860     	 str r0,[r7,#4]
 378:../Libraries/XMCLib/src/xmc_i2c.c ****   XMC_I2C_CH_STATUS_t status = XMC_I2C_CH_STATUS_OK;
 1229              	 .loc 3 378 23
 1230 0008 0F24     	 movs r4,#15
 1231 000a 3B19     	 adds r3,r7,r4
 1232 000c 0022     	 movs r2,#0
 1233 000e 1A70     	 strb r2,[r3]
 379:../Libraries/XMCLib/src/xmc_i2c.c **** 
 380:../Libraries/XMCLib/src/xmc_i2c.c ****   if (((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_B
 1234              	 .loc 3 380 18
 1235 0010 7B68     	 ldr r3,[r7,#4]
 1236 0012 1800     	 movs r0,r3
 1237 0014 FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 1238 0018 0300     	 movs r3,r0
 1239              	 .loc 3 380 105
 1240 001a 5BB2     	 sxtb r3,r3
 1241              	 .loc 3 380 6
 1242 001c 002B     	 cmp r3,#0
 1243 001e 03DA     	 bge .L65
 381:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 382:../Libraries/XMCLib/src/xmc_i2c.c ****     status = XMC_I2C_CH_STATUS_BUSY;
 1244              	 .loc 3 382 12
 1245 0020 3B19     	 adds r3,r7,r4
 1246 0022 0222     	 movs r2,#2
 1247 0024 1A70     	 strb r2,[r3]
 1248 0026 04E0     	 b .L66
 1249              	.L65:
 383:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 384:../Libraries/XMCLib/src/xmc_i2c.c ****   else
 385:../Libraries/XMCLib/src/xmc_i2c.c ****   {
 386:../Libraries/XMCLib/src/xmc_i2c.c ****     /* USIC channel in IDLE mode */
 387:../Libraries/XMCLib/src/xmc_i2c.c ****     XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 1250              	 .loc 3 387 5
 1251 0028 7B68     	 ldr r3,[r7,#4]
 1252 002a 0021     	 movs r1,#0
 1253 002c 1800     	 movs r0,r3
 1254 002e FFF7FEFF 	 bl XMC_USIC_CH_SetMode
 1255              	.L66:
 388:../Libraries/XMCLib/src/xmc_i2c.c ****   }
 389:../Libraries/XMCLib/src/xmc_i2c.c ****   return status;
 1256              	 .loc 3 389 10
 1257 0032 0F23     	 movs r3,#15
 1258 0034 FB18     	 adds r3,r7,r3
 1259 0036 1B78     	 ldrb r3,[r3]
 390:../Libraries/XMCLib/src/xmc_i2c.c **** }
 1260              	 .loc 3 390 1
 1261 0038 1800     	 movs r0,r3
 1262 003a BD46     	 mov sp,r7
 1263 003c 05B0     	 add sp,sp,#20
 1264              	 
 1265 003e 90BD     	 pop {r4,r7,pc}
 1266              	 .cfi_endproc
 1267              	.LFE129:
 1269              	 .section .text.XMC_I2C_CH_EnableEvent,"ax",%progbits
 1270              	 .align 1
 1271              	 .global XMC_I2C_CH_EnableEvent
 1272              	 .syntax unified
 1273              	 .code 16
 1274              	 .thumb_func
 1275              	 .fpu softvfp
 1277              	XMC_I2C_CH_EnableEvent:
 1278              	.LFB130:
 391:../Libraries/XMCLib/src/xmc_i2c.c **** 
 392:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 393:../Libraries/XMCLib/src/xmc_i2c.c **** {
 1279              	 .loc 3 393 1
 1280              	 .cfi_startproc
 1281              	 
 1282              	 
 1283 0000 80B5     	 push {r7,lr}
 1284              	.LCFI48:
 1285              	 .cfi_def_cfa_offset 8
 1286              	 .cfi_offset 7,-8
 1287              	 .cfi_offset 14,-4
 1288 0002 82B0     	 sub sp,sp,#8
 1289              	.LCFI49:
 1290              	 .cfi_def_cfa_offset 16
 1291 0004 00AF     	 add r7,sp,#0
 1292              	.LCFI50:
 1293              	 .cfi_def_cfa_register 7
 1294 0006 7860     	 str r0,[r7,#4]
 1295 0008 3960     	 str r1,[r7]
 394:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->CCR |= (event&0x1fc00U);
 1296              	 .loc 3 394 16
 1297 000a 7B68     	 ldr r3,[r7,#4]
 1298 000c 1A6C     	 ldr r2,[r3,#64]
 1299              	 .loc 3 394 25
 1300 000e 3968     	 ldr r1,[r7]
 1301 0010 FE23     	 movs r3,#254
 1302 0012 5B02     	 lsls r3,r3,#9
 1303 0014 0B40     	 ands r3,r1
 1304              	 .loc 3 394 16
 1305 0016 1A43     	 orrs r2,r3
 1306 0018 7B68     	 ldr r3,[r7,#4]
 1307 001a 1A64     	 str r2,[r3,#64]
 395:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 1308              	 .loc 3 395 24
 1309 001c 7B68     	 ldr r3,[r7,#4]
 1310 001e DA6B     	 ldr r2,[r3,#60]
 1311              	 .loc 3 395 36
 1312 0020 3B68     	 ldr r3,[r7]
 1313 0022 0449     	 ldr r1,.L69
 1314 0024 0B40     	 ands r3,r1
 1315              	 .loc 3 395 24
 1316 0026 1A43     	 orrs r2,r3
 1317 0028 7B68     	 ldr r3,[r7,#4]
 1318 002a DA63     	 str r2,[r3,#60]
 396:../Libraries/XMCLib/src/xmc_i2c.c **** }
 1319              	 .loc 3 396 1
 1320 002c C046     	 nop
 1321 002e BD46     	 mov sp,r7
 1322 0030 02B0     	 add sp,sp,#8
 1323              	 
 1324 0032 80BD     	 pop {r7,pc}
 1325              	.L70:
 1326              	 .align 2
 1327              	.L69:
 1328 0034 0000FC41 	 .word 1107034112
 1329              	 .cfi_endproc
 1330              	.LFE130:
 1332              	 .section .text.XMC_I2C_CH_DisableEvent,"ax",%progbits
 1333              	 .align 1
 1334              	 .global XMC_I2C_CH_DisableEvent
 1335              	 .syntax unified
 1336              	 .code 16
 1337              	 .thumb_func
 1338              	 .fpu softvfp
 1340              	XMC_I2C_CH_DisableEvent:
 1341              	.LFB131:
 397:../Libraries/XMCLib/src/xmc_i2c.c **** 
 398:../Libraries/XMCLib/src/xmc_i2c.c **** void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 399:../Libraries/XMCLib/src/xmc_i2c.c **** {
 1342              	 .loc 3 399 1
 1343              	 .cfi_startproc
 1344              	 
 1345              	 
 1346 0000 80B5     	 push {r7,lr}
 1347              	.LCFI51:
 1348              	 .cfi_def_cfa_offset 8
 1349              	 .cfi_offset 7,-8
 1350              	 .cfi_offset 14,-4
 1351 0002 82B0     	 sub sp,sp,#8
 1352              	.LCFI52:
 1353              	 .cfi_def_cfa_offset 16
 1354 0004 00AF     	 add r7,sp,#0
 1355              	.LCFI53:
 1356              	 .cfi_def_cfa_register 7
 1357 0006 7860     	 str r0,[r7,#4]
 1358 0008 3960     	 str r1,[r7]
 400:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->CCR &= (uint32_t)~(event&0x1fc00U);
 1359              	 .loc 3 400 16
 1360 000a 7B68     	 ldr r3,[r7,#4]
 1361 000c 1B6C     	 ldr r3,[r3,#64]
 1362              	 .loc 3 400 36
 1363 000e 3968     	 ldr r1,[r7]
 1364 0010 FE22     	 movs r2,#254
 1365 0012 5202     	 lsls r2,r2,#9
 1366 0014 0A40     	 ands r2,r1
 1367              	 .loc 3 400 19
 1368 0016 D243     	 mvns r2,r2
 1369              	 .loc 3 400 16
 1370 0018 1A40     	 ands r2,r3
 1371 001a 7B68     	 ldr r3,[r7,#4]
 1372 001c 1A64     	 str r2,[r3,#64]
 401:../Libraries/XMCLib/src/xmc_i2c.c ****   channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 1373              	 .loc 3 401 24
 1374 001e 7B68     	 ldr r3,[r7,#4]
 1375 0020 DB6B     	 ldr r3,[r3,#60]
 1376              	 .loc 3 401 47
 1377 0022 3A68     	 ldr r2,[r7]
 1378 0024 0449     	 ldr r1,.L72
 1379 0026 0A40     	 ands r2,r1
 1380              	 .loc 3 401 27
 1381 0028 D243     	 mvns r2,r2
 1382              	 .loc 3 401 24
 1383 002a 1A40     	 ands r2,r3
 1384 002c 7B68     	 ldr r3,[r7,#4]
 1385 002e DA63     	 str r2,[r3,#60]
 402:../Libraries/XMCLib/src/xmc_i2c.c **** }
 1386              	 .loc 3 402 1
 1387 0030 C046     	 nop
 1388 0032 BD46     	 mov sp,r7
 1389 0034 02B0     	 add sp,sp,#8
 1390              	 
 1391 0036 80BD     	 pop {r7,pc}
 1392              	.L73:
 1393              	 .align 2
 1394              	.L72:
 1395 0038 0000FC41 	 .word 1107034112
 1396              	 .cfi_endproc
 1397              	.LFE131:
 1399              	 .text
 1400              	.Letext0:
 1401              	 .file 4 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
 1402              	 .file 5 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1403              	 .file 6 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/lock.h"
 1404              	 .file 7 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h"
 1405              	 .file 8 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 1406              	 .file 9 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h"
 1407              	 .file 10 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 xmc_i2c.c
    {standard input}:16     .text.XMC_USIC_CH_GetTransmitBufferStatus:0000000000000000 $t
    {standard input}:23     .text.XMC_USIC_CH_GetTransmitBufferStatus:0000000000000000 XMC_USIC_CH_GetTransmitBufferStatus
    {standard input}:60     .text.XMC_USIC_CH_SetMode:0000000000000000 $t
    {standard input}:66     .text.XMC_USIC_CH_SetMode:0000000000000000 XMC_USIC_CH_SetMode
    {standard input}:112    .text.XMC_I2C_CH_ClearStatusFlag:0000000000000000 $t
    {standard input}:118    .text.XMC_I2C_CH_ClearStatusFlag:0000000000000000 XMC_I2C_CH_ClearStatusFlag
    {standard input}:155    .text.XMC_I2C_CH_Init:0000000000000000 $t
    {standard input}:162    .text.XMC_I2C_CH_Init:0000000000000000 XMC_I2C_CH_Init
    {standard input}:239    .text.XMC_I2C_CH_SetSlaveAddress:0000000000000000 XMC_I2C_CH_SetSlaveAddress
    {standard input}:391    .text.XMC_I2C_CH_SetBaudrate:0000000000000000 XMC_I2C_CH_SetBaudrate
    {standard input}:227    .text.XMC_I2C_CH_Init:0000000000000054 $d
    {standard input}:232    .text.XMC_I2C_CH_SetSlaveAddress:0000000000000000 $t
    {standard input}:312    .text.XMC_I2C_CH_GetSlaveAddress:0000000000000000 $t
    {standard input}:319    .text.XMC_I2C_CH_GetSlaveAddress:0000000000000000 XMC_I2C_CH_GetSlaveAddress
    {standard input}:384    .text.XMC_I2C_CH_SetBaudrate:0000000000000000 $t
    {standard input}:491    .text.XMC_I2C_CH_SetBaudrate:0000000000000084 $d
    {standard input}:498    .text.XMC_I2C_CH_MasterStart:0000000000000000 $t
    {standard input}:505    .text.XMC_I2C_CH_MasterStart:0000000000000000 XMC_I2C_CH_MasterStart
    {standard input}:605    .text.XMC_I2C_CH_MasterRepeatedStart:0000000000000000 $t
    {standard input}:612    .text.XMC_I2C_CH_MasterRepeatedStart:0000000000000000 XMC_I2C_CH_MasterRepeatedStart
    {standard input}:712    .text.XMC_I2C_CH_MasterStop:0000000000000000 $t
    {standard input}:719    .text.XMC_I2C_CH_MasterStop:0000000000000000 XMC_I2C_CH_MasterStop
    {standard input}:793    .text.XMC_I2C_CH_MasterTransmit:0000000000000000 $t
    {standard input}:800    .text.XMC_I2C_CH_MasterTransmit:0000000000000000 XMC_I2C_CH_MasterTransmit
    {standard input}:879    .text.XMC_I2C_CH_SlaveTransmit:0000000000000000 $t
    {standard input}:886    .text.XMC_I2C_CH_SlaveTransmit:0000000000000000 XMC_I2C_CH_SlaveTransmit
    {standard input}:972    .text.XMC_I2C_CH_MasterReceiveAck:0000000000000000 $t
    {standard input}:979    .text.XMC_I2C_CH_MasterReceiveAck:0000000000000000 XMC_I2C_CH_MasterReceiveAck
    {standard input}:1053   .text.XMC_I2C_CH_MasterReceiveNack:0000000000000000 $t
    {standard input}:1060   .text.XMC_I2C_CH_MasterReceiveNack:0000000000000000 XMC_I2C_CH_MasterReceiveNack
    {standard input}:1134   .text.XMC_I2C_CH_GetReceivedData:0000000000000000 $t
    {standard input}:1141   .text.XMC_I2C_CH_GetReceivedData:0000000000000000 XMC_I2C_CH_GetReceivedData
    {standard input}:1203   .text.XMC_I2C_CH_Stop:0000000000000000 $t
    {standard input}:1210   .text.XMC_I2C_CH_Stop:0000000000000000 XMC_I2C_CH_Stop
    {standard input}:1270   .text.XMC_I2C_CH_EnableEvent:0000000000000000 $t
    {standard input}:1277   .text.XMC_I2C_CH_EnableEvent:0000000000000000 XMC_I2C_CH_EnableEvent
    {standard input}:1328   .text.XMC_I2C_CH_EnableEvent:0000000000000034 $d
    {standard input}:1333   .text.XMC_I2C_CH_DisableEvent:0000000000000000 $t
    {standard input}:1340   .text.XMC_I2C_CH_DisableEvent:0000000000000000 XMC_I2C_CH_DisableEvent
    {standard input}:1395   .text.XMC_I2C_CH_DisableEvent:0000000000000038 $d

UNDEFINED SYMBOLS
XMC_USIC_CH_Enable
XMC_USIC_CH_SetBaudrate

   1              	 .cpu cortex-m0
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,0
  10              	 .eabi_attribute 18,4
  11              	 .file "xmc1_flash.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.XMC_FLASH_IsBusy,"ax",%progbits
  16              	 .align 1
  17              	 .arch armv6s-m
  18              	 .syntax unified
  19              	 .code 16
  20              	 .thumb_func
  21              	 .fpu softvfp
  23              	XMC_FLASH_IsBusy:
  24              	.LFB47:
  25              	 .file 1 "..//Libraries/XMCLib/inc/xmc_flash.h"
   1:..//Libraries/XMCLib/inc/xmc_flash.h **** /**
   2:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @file xmc_flash.h
   3:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @date 2015-06-20
   4:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
   5:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @cond
   6:..//Libraries/XMCLib/inc/xmc_flash.h ****  **************************************************************************************************
   7:..//Libraries/XMCLib/inc/xmc_flash.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
   9:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:..//Libraries/XMCLib/inc/xmc_flash.h ****  * All rights reserved.                        
  11:..//Libraries/XMCLib/inc/xmc_flash.h ****  *                                             
  12:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:..//Libraries/XMCLib/inc/xmc_flash.h ****  * following conditions are met:   
  14:..//Libraries/XMCLib/inc/xmc_flash.h ****  *                                                                              
  15:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:..//Libraries/XMCLib/inc/xmc_flash.h ****  * disclaimer.                        
  17:..//Libraries/XMCLib/inc/xmc_flash.h ****  * 
  18:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:..//Libraries/XMCLib/inc/xmc_flash.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:..//Libraries/XMCLib/inc/xmc_flash.h ****  * 
  21:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:..//Libraries/XMCLib/inc/xmc_flash.h ****  * products derived from this software without specific prior written permission.                  
  23:..//Libraries/XMCLib/inc/xmc_flash.h ****  *                                                                              
  24:..//Libraries/XMCLib/inc/xmc_flash.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:..//Libraries/XMCLib/inc/xmc_flash.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:..//Libraries/XMCLib/inc/xmc_flash.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:..//Libraries/XMCLib/inc/xmc_flash.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:..//Libraries/XMCLib/inc/xmc_flash.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:..//Libraries/XMCLib/inc/xmc_flash.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:..//Libraries/XMCLib/inc/xmc_flash.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:..//Libraries/XMCLib/inc/xmc_flash.h ****  *                                                                              
  32:..//Libraries/XMCLib/inc/xmc_flash.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:..//Libraries/XMCLib/inc/xmc_flash.h ****  **************************************************************************************************
  35:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
  36:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Change History
  37:..//Libraries/XMCLib/inc/xmc_flash.h ****  * --------------
  38:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
  39:..//Libraries/XMCLib/inc/xmc_flash.h ****  * 2014-12-10:
  40:..//Libraries/XMCLib/inc/xmc_flash.h ****  *     - Initial <br>
  41:..//Libraries/XMCLib/inc/xmc_flash.h ****  * 2015-02-20:
  42:..//Libraries/XMCLib/inc/xmc_flash.h ****  *     - Updated for Documentation related changes<br>
  43:..//Libraries/XMCLib/inc/xmc_flash.h ****  * 2015-06-20: 
  44:..//Libraries/XMCLib/inc/xmc_flash.h ****  *     - Removed version macros and declaration of GetDriverVersion API 
  45:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @endcond 
  46:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
  47:..//Libraries/XMCLib/inc/xmc_flash.h ****  */
  48:..//Libraries/XMCLib/inc/xmc_flash.h **** 
  49:..//Libraries/XMCLib/inc/xmc_flash.h **** 
  50:..//Libraries/XMCLib/inc/xmc_flash.h **** #ifndef XMC_FLASH_H
  51:..//Libraries/XMCLib/inc/xmc_flash.h **** #define XMC_FLASH_H
  52:..//Libraries/XMCLib/inc/xmc_flash.h **** 
  53:..//Libraries/XMCLib/inc/xmc_flash.h **** /**************************************************************************************************
  54:..//Libraries/XMCLib/inc/xmc_flash.h ****  * HEADER FILES
  55:..//Libraries/XMCLib/inc/xmc_flash.h ****  **************************************************************************************************
  56:..//Libraries/XMCLib/inc/xmc_flash.h **** 
  57:..//Libraries/XMCLib/inc/xmc_flash.h **** #include "xmc_common.h"
  58:..//Libraries/XMCLib/inc/xmc_flash.h **** 
  59:..//Libraries/XMCLib/inc/xmc_flash.h **** #if UC_FAMILY == XMC1
  60:..//Libraries/XMCLib/inc/xmc_flash.h ****  #include "xmc1_flash.h"
  61:..//Libraries/XMCLib/inc/xmc_flash.h **** #endif
  62:..//Libraries/XMCLib/inc/xmc_flash.h ****  
  63:..//Libraries/XMCLib/inc/xmc_flash.h **** #if UC_FAMILY == XMC4
  64:..//Libraries/XMCLib/inc/xmc_flash.h ****  #include "xmc4_flash.h"
  65:..//Libraries/XMCLib/inc/xmc_flash.h **** #endif
  66:..//Libraries/XMCLib/inc/xmc_flash.h **** 
  67:..//Libraries/XMCLib/inc/xmc_flash.h **** /**
  68:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @addtogroup XMClib XMC Peripheral Library
  69:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @{
  70:..//Libraries/XMCLib/inc/xmc_flash.h ****  */
  71:..//Libraries/XMCLib/inc/xmc_flash.h **** 
  72:..//Libraries/XMCLib/inc/xmc_flash.h **** /**
  73:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @addtogroup FLASH
  74:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @brief Flash driver for XMC microcontroller family.
  75:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
  76:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Flash is a non volatile memory module used to store instruction code or constant data.
  77:..//Libraries/XMCLib/inc/xmc_flash.h ****  * The flash low level driver provides support to the following functionalities of flash memory.<BR
  78:..//Libraries/XMCLib/inc/xmc_flash.h ****  * <OL>
  79:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \if XMC4
  80:..//Libraries/XMCLib/inc/xmc_flash.h ****  * <LI>Provides function to program a page. ( XMC_FLASH_ProgramPage() )</LI><BR>
  81:..//Libraries/XMCLib/inc/xmc_flash.h ****  * <LI>Provides functions to support read and write protection. ( XMC_FLASH_InstallProtection(), 
  82:..//Libraries/XMCLib/inc/xmc_flash.h ****  * XMC_FLASH_ConfirmProtection(), XMC_FLASH_VerifyReadProtection(), XMC_FLASH_VerifyWriteProtection
  83:..//Libraries/XMCLib/inc/xmc_flash.h ****  * <LI>Provides function to erase sector. ( XMC_FLASH_EraseSector() ) </LI><BR> 
  84:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \endif
  85:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \if XMC1
  86:..//Libraries/XMCLib/inc/xmc_flash.h ****  * <LI>Provides functions to program and verify pages. ( XMC_FLASH_ProgramPage(), XMC_FLASH_Program
  87:..//Libraries/XMCLib/inc/xmc_flash.h ****  *  XMC_FLASH_ProgramVerifyPage() )</LI><BR>
  88:..//Libraries/XMCLib/inc/xmc_flash.h ****  * <LI>Provides functions to write and verify blocks. ( XMC_FLASH_WriteBlocks(), XMC_FLASH_VerifyBl
  89:..//Libraries/XMCLib/inc/xmc_flash.h ****  * <LI>Provides functions to read data in terms of word and blocks. ( XMC_FLASH_ReadBlocks(), XMC_F
  90:..//Libraries/XMCLib/inc/xmc_flash.h ****  * </LI><BR> 
  91:..//Libraries/XMCLib/inc/xmc_flash.h ****  * <LI>Provides function to erase page. ( XMC_FLASH_ErasePage() ) </LI><BR> 
  92:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \endif
  93:..//Libraries/XMCLib/inc/xmc_flash.h ****  * </OL>
  94:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @{
  95:..//Libraries/XMCLib/inc/xmc_flash.h ****  */
  96:..//Libraries/XMCLib/inc/xmc_flash.h **** 
  97:..//Libraries/XMCLib/inc/xmc_flash.h **** /*******************************************************************************
  98:..//Libraries/XMCLib/inc/xmc_flash.h ****  * API PROTOTYPE
  99:..//Libraries/XMCLib/inc/xmc_flash.h ****  *******************************************************************************/
 100:..//Libraries/XMCLib/inc/xmc_flash.h **** #ifdef __cplusplus
 101:..//Libraries/XMCLib/inc/xmc_flash.h **** extern "C" {
 102:..//Libraries/XMCLib/inc/xmc_flash.h **** #endif
 103:..//Libraries/XMCLib/inc/xmc_flash.h **** 
 104:..//Libraries/XMCLib/inc/xmc_flash.h **** /**
 105:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 106:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @param None
 107:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 108:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @return None
 109:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 110:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Description:</b><br>
 111:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \if XMC1
 112:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Clears the previous error status by reseting the ECC and VERR error status bits of NVMSTATUS reg
 113:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Call this API before starting any flash programming / erase related APIs to ensure all previous 
 114:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \endif
 115:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \if XMC4
 116:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Clears the previous error status by reseting the FSR status register.\n\n  Call this API before 
 117:..//Libraries/XMCLib/inc/xmc_flash.h ****  * programming / erase related APIs to ensure all previous errors are cleared.
 118:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \endif
 119:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 120:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Related APIs:</b><BR>
 121:..//Libraries/XMCLib/inc/xmc_flash.h ****  * None 
 122:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 123:..//Libraries/XMCLib/inc/xmc_flash.h ****  */
 124:..//Libraries/XMCLib/inc/xmc_flash.h **** void XMC_FLASH_ClearStatus(void);
 125:..//Libraries/XMCLib/inc/xmc_flash.h **** 
 126:..//Libraries/XMCLib/inc/xmc_flash.h **** /**
 127:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 128:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @param None
 129:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 130:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @return uint32_t Status of the previous flash operation.
 131:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 132:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Description:</b><br>
 133:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \if XMC1
 134:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Informs the status of flash by reading the NVMSTATUS register.\n\n  It indicates the ECC, VERR(v
 135:..//Libraries/XMCLib/inc/xmc_flash.h ****  * WRPERR (Write protocol error) errors as well as the current flash state. After calling the flash
 136:..//Libraries/XMCLib/inc/xmc_flash.h ****  * operation related APIs, call this API to get the verification status. The return value of this A
 137:..//Libraries/XMCLib/inc/xmc_flash.h ****  * against the members of @ref XMC_FLASH_STATUS_t enumeration to get the relevant status.
 138:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \endif
 139:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \if XMC4
 140:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Informs the status of flash by reading the FSR register.\n\n  It indicates the error status such
 141:..//Libraries/XMCLib/inc/xmc_flash.h ****  * PROER, PFDBER, ORIER, VER errors as well as the current flash state. After calling the flash rea
 142:..//Libraries/XMCLib/inc/xmc_flash.h ****  * operation related APIs, call this API to verify flash status. The return value of this API shall
 143:..//Libraries/XMCLib/inc/xmc_flash.h ****  * the members of @ref XMC_FLASH_STATUS_t enumeration to get the relevant status.
 144:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \endif
 145:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 146:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Related APIs:</b><BR>
 147:..//Libraries/XMCLib/inc/xmc_flash.h ****  * None
 148:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 149:..//Libraries/XMCLib/inc/xmc_flash.h ****  */
 150:..//Libraries/XMCLib/inc/xmc_flash.h **** uint32_t XMC_FLASH_GetStatus(void);
 151:..//Libraries/XMCLib/inc/xmc_flash.h **** 
 152:..//Libraries/XMCLib/inc/xmc_flash.h **** /**
 153:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 154:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @param event_msk ORed values of @ref XMC_FLASH_EVENT_t enumeration
 155:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 156:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @return None
 157:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 158:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Description:</b><br>
 159:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Enables the particular flash events as specified in the input parameter.\n
 160:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 161:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Related APIs:</b><BR>
 162:..//Libraries/XMCLib/inc/xmc_flash.h ****  * XMC_FLASH_DisableEvent()\n\n\n
 163:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 164:..//Libraries/XMCLib/inc/xmc_flash.h ****  */
 165:..//Libraries/XMCLib/inc/xmc_flash.h **** void XMC_FLASH_EnableEvent(const uint32_t event_msk);
 166:..//Libraries/XMCLib/inc/xmc_flash.h **** 
 167:..//Libraries/XMCLib/inc/xmc_flash.h **** /**
 168:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 169:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @param event_msk ORed values of @ref XMC_FLASH_EVENT_t enumeration
 170:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 171:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @return None
 172:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 173:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Description:</b><br>
 174:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Disables the particular flash events as specified in the input parameter.\n
 175:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 176:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Related APIs:</b><BR>
 177:..//Libraries/XMCLib/inc/xmc_flash.h ****  * XMC_FLASH_EnableEvent()\n\n\n
 178:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 179:..//Libraries/XMCLib/inc/xmc_flash.h ****  */
 180:..//Libraries/XMCLib/inc/xmc_flash.h **** void XMC_FLASH_DisableEvent(const uint32_t event_msk);
 181:..//Libraries/XMCLib/inc/xmc_flash.h **** 
 182:..//Libraries/XMCLib/inc/xmc_flash.h **** /**
 183:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 184:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @param address    Pointer to the starting address of flash page from where the programming start
 185:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @param data       Pointer to the source address where targeted data is located.
 186:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 187:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @return None
 188:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 189:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Description:</b><br>
 190:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \if XMC1
 191:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Programs a single flash page associated with the specified \a address.\n\n XMC1000 Flash can be 
 192:..//Libraries/XMCLib/inc/xmc_flash.h ****  * page (256 bytes) using this API. It calls the Flash Firmware routine \a XMC1000_NvmProgVerify(un
 193:..//Libraries/XMCLib/inc/xmc_flash.h ****  * to perform the programming. Refer XMC1000 reference manual of for more details on flash firmware
 194:..//Libraries/XMCLib/inc/xmc_flash.h ****  * (Section 25.3). Call XMC_FLASH_GetStatus() API after calling this API, to verify the programming
 195:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \endif
 196:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \if XMC4
 197:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Programs a single flash page associated with the specified \a address.\n\n  XMC4000 flash can be
 198:..//Libraries/XMCLib/inc/xmc_flash.h ****  * granularity of 256 bytes page using this API. Before entering into page write process, it clears
 199:..//Libraries/XMCLib/inc/xmc_flash.h ****  * bits inside status register. It starts the write process by issuing the page mode command follow
 200:..//Libraries/XMCLib/inc/xmc_flash.h ****  * command which loads the targeted \a data blocks into internal assembly buffer. Finally, it issue
 201:..//Libraries/XMCLib/inc/xmc_flash.h ****  * command which programs the \a data into flash. Call XMC_FLASH_GetStatus() API after calling this
 202:..//Libraries/XMCLib/inc/xmc_flash.h ****  * programming operation.\n
 203:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \endif
 204:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 205:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Note:</b><br>
 206:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Flash will be busy state during write is ongoing, hence no operations allowed until it completes
 207:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 208:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Related APIs:</b><BR>
 209:..//Libraries/XMCLib/inc/xmc_flash.h ****  * None 
 210:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 211:..//Libraries/XMCLib/inc/xmc_flash.h ****  */
 212:..//Libraries/XMCLib/inc/xmc_flash.h **** void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data);
 213:..//Libraries/XMCLib/inc/xmc_flash.h **** 
 214:..//Libraries/XMCLib/inc/xmc_flash.h **** /**
 215:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 216:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @param address Pointer to the starting address of the page to be erased.
 217:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 218:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @return None
 219:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 220:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Description:</b><br>
 221:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \if XMC1
 222:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Erases a complete sector starting from the \a address specified.\n\n  XMC1000 Flash can be erase
 223:..//Libraries/XMCLib/inc/xmc_flash.h ****  * of one page = 16 blocks of 16 Bytes = 256 Bytes using this API. It internally calls XMC_FLASH_Er
 224:..//Libraries/XMCLib/inc/xmc_flash.h ****  * times starting from the first page of the sector.. Call XMC_FLASH_GetStatus() API after calling 
 225:..//Libraries/XMCLib/inc/xmc_flash.h ****  * to verify the erase operation.\n
 226:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \endif
 227:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 228:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \if XMC4
 229:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Erases a sector associated with the specified \a address.\n\n  Before erase, it clears the error
 230:..//Libraries/XMCLib/inc/xmc_flash.h ****  * FSR status register. Issues the erase sector command sequence with the specified starting \a add
 231:..//Libraries/XMCLib/inc/xmc_flash.h ****  * erase process. Call XMC_FLASH_GetStatus() API after calling this API, to verify the erase operat
 232:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \endif
 233:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \if XMC1
 234:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Related APIs:</b><BR>
 235:..//Libraries/XMCLib/inc/xmc_flash.h ****  * XMC_FLASH_ErasePages() \n\n\n
 236:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \endif
 237:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \if XMC4
 238:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Related APIs:</b><BR>
 239:..//Libraries/XMCLib/inc/xmc_flash.h ****  * None
 240:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \endif
 241:..//Libraries/XMCLib/inc/xmc_flash.h ****  */
 242:..//Libraries/XMCLib/inc/xmc_flash.h **** void XMC_FLASH_EraseSector(uint32_t *address);
 243:..//Libraries/XMCLib/inc/xmc_flash.h **** 
 244:..//Libraries/XMCLib/inc/xmc_flash.h **** /**
 245:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 246:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @param None
 247:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 248:..//Libraries/XMCLib/inc/xmc_flash.h ****  * @return true if flash is in busy state else returns \a false.
 249:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 250:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Description:</b><br>
 251:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Checks whether flash is in busy state or not.\n\n  It is checked by calling the XMC_FLASH_GetSta
 252:..//Libraries/XMCLib/inc/xmc_flash.h ****  * Refer XMC_FLASH_GetStatus() for more details.\n
 253:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 254:..//Libraries/XMCLib/inc/xmc_flash.h ****  * \par<b>Related APIs:</b><BR>
 255:..//Libraries/XMCLib/inc/xmc_flash.h ****  * XMC_FLASH_GetStatus()\n\n\n
 256:..//Libraries/XMCLib/inc/xmc_flash.h ****  *
 257:..//Libraries/XMCLib/inc/xmc_flash.h ****  */
 258:..//Libraries/XMCLib/inc/xmc_flash.h **** __STATIC_INLINE bool XMC_FLASH_IsBusy(void)
 259:..//Libraries/XMCLib/inc/xmc_flash.h **** {
  26              	 .loc 1 259 1
  27              	 .cfi_startproc
  28              	 
  29              	 
  30 0000 80B5     	 push {r7,lr}
  31              	.LCFI0:
  32              	 .cfi_def_cfa_offset 8
  33              	 .cfi_offset 7,-8
  34              	 .cfi_offset 14,-4
  35 0002 00AF     	 add r7,sp,#0
  36              	.LCFI1:
  37              	 .cfi_def_cfa_register 7
 260:..//Libraries/XMCLib/inc/xmc_flash.h ****   return (bool)(XMC_FLASH_GetStatus() & XMC_FLASH_STATUS_BUSY);
  38              	 .loc 1 260 17
  39 0004 FFF7FEFF 	 bl XMC_FLASH_GetStatus
  40 0008 0300     	 movs r3,r0
  41              	 .loc 1 260 39
  42 000a 0122     	 movs r2,#1
  43 000c 1340     	 ands r3,r2
  44              	 .loc 1 260 10
  45 000e 5A1E     	 subs r2,r3,#1
  46 0010 9341     	 sbcs r3,r3,r2
  47 0012 DBB2     	 uxtb r3,r3
 261:..//Libraries/XMCLib/inc/xmc_flash.h **** }
  48              	 .loc 1 261 1
  49 0014 1800     	 movs r0,r3
  50 0016 BD46     	 mov sp,r7
  51              	 
  52 0018 80BD     	 pop {r7,pc}
  53              	 .cfi_endproc
  54              	.LFE47:
  56              	 .section .text.XMC_FLASH_ClearStatus,"ax",%progbits
  57              	 .align 1
  58              	 .global XMC_FLASH_ClearStatus
  59              	 .syntax unified
  60              	 .code 16
  61              	 .thumb_func
  62              	 .fpu softvfp
  64              	XMC_FLASH_ClearStatus:
  65              	.LFB48:
  66              	 .file 2 "../Libraries/XMCLib/src/xmc1_flash.c"
   1:../Libraries/XMCLib/src/xmc1_flash.c **** /**
   2:../Libraries/XMCLib/src/xmc1_flash.c ****  * @file xmc1_flash.c
   3:../Libraries/XMCLib/src/xmc1_flash.c ****  * @date 2015-10-14
   4:../Libraries/XMCLib/src/xmc1_flash.c ****  *
   5:../Libraries/XMCLib/src/xmc1_flash.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc1_flash.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc1_flash.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc1_flash.c ****  *
   9:../Libraries/XMCLib/src/xmc1_flash.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc1_flash.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc1_flash.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc1_flash.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc1_flash.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc1_flash.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc1_flash.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc1_flash.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc1_flash.c ****  * 
  18:../Libraries/XMCLib/src/xmc1_flash.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc1_flash.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc1_flash.c ****  * 
  21:../Libraries/XMCLib/src/xmc1_flash.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc1_flash.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc1_flash.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc1_flash.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc1_flash.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc1_flash.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc1_flash.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc1_flash.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc1_flash.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc1_flash.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc1_flash.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc1_flash.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc1_flash.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc1_flash.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  36:../Libraries/XMCLib/src/xmc1_flash.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc1_flash.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  39:../Libraries/XMCLib/src/xmc1_flash.c ****  * 2015-02-10:
  40:../Libraries/XMCLib/src/xmc1_flash.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  42:../Libraries/XMCLib/src/xmc1_flash.c ****  * 2015-06-20: 
  43:../Libraries/XMCLib/src/xmc1_flash.c ****  *     - Removed definition of GetDriverVersion API 
  44:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  45:../Libraries/XMCLib/src/xmc1_flash.c ****  * 2015-10-14: 
  46:../Libraries/XMCLib/src/xmc1_flash.c ****  *     - Fixed defect in API XMC_FLASH_ErasePages, related to the errata NVM_CM.001
  47:../Libraries/XMCLib/src/xmc1_flash.c ****  *     - NVM ROM user routine XMC1000_NvmErasePage(address) used for erase page. 
  48:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  49:../Libraries/XMCLib/src/xmc1_flash.c ****  * @endcond 
  50:../Libraries/XMCLib/src/xmc1_flash.c ****  *
  51:../Libraries/XMCLib/src/xmc1_flash.c ****  */
  52:../Libraries/XMCLib/src/xmc1_flash.c **** 
  53:../Libraries/XMCLib/src/xmc1_flash.c **** #include "xmc_flash.h"
  54:../Libraries/XMCLib/src/xmc1_flash.c **** 
  55:../Libraries/XMCLib/src/xmc1_flash.c **** /**************************************************************************************************
  56:../Libraries/XMCLib/src/xmc1_flash.c ****  * MACROS
  57:../Libraries/XMCLib/src/xmc1_flash.c ****  **************************************************************************************************
  58:../Libraries/XMCLib/src/xmc1_flash.c **** #if UC_FAMILY == XMC1
  59:../Libraries/XMCLib/src/xmc1_flash.c **** 
  60:../Libraries/XMCLib/src/xmc1_flash.c **** /**************************************************************************************************
  61:../Libraries/XMCLib/src/xmc1_flash.c ****  * ENUMS
  62:../Libraries/XMCLib/src/xmc1_flash.c ****  **************************************************************************************************
  63:../Libraries/XMCLib/src/xmc1_flash.c **** /* FLASH programming / erase options */
  64:../Libraries/XMCLib/src/xmc1_flash.c **** typedef enum FLASH_ACTION
  65:../Libraries/XMCLib/src/xmc1_flash.c **** {
  66:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_IDLE                        =  (uint32_t)0x00,
  67:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_ONESHOT_WRITE_VERIFY        = ((uint32_t)0x51 << NVM_NVMPROG_ACTION_Pos),
  68:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_ONESHOT_WRITE               = ((uint32_t)0x91 << NVM_NVMPROG_ACTION_Pos),
  69:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_CONTINUOUS_WRITE_VERIFY     = ((uint32_t)0x61 << NVM_NVMPROG_ACTION_Pos),
  70:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_CONTINUOUS_WRITE            = ((uint32_t)0xa1 << NVM_NVMPROG_ACTION_Pos),
  71:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_ONESHOT_PAGE_ERASE          = ((uint32_t)0x92 << NVM_NVMPROG_ACTION_Pos),
  72:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_CONTINUOUS_PAGE_ERASE       = ((uint32_t)0xa2 << NVM_NVMPROG_ACTION_Pos),
  73:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_ONESHOT_VERIFY_ONLY         = ((uint32_t)0xd0 << NVM_NVMPROG_ACTION_Pos),
  74:../Libraries/XMCLib/src/xmc1_flash.c ****   FLASH_ACTION_CONTINUOUS_VERIFY_ONLY      = ((uint32_t)0xe0 << NVM_NVMPROG_ACTION_Pos)
  75:../Libraries/XMCLib/src/xmc1_flash.c **** } FLASH_ACTION_t;
  76:../Libraries/XMCLib/src/xmc1_flash.c **** 
  77:../Libraries/XMCLib/src/xmc1_flash.c **** 
  78:../Libraries/XMCLib/src/xmc1_flash.c **** /**************************************************************************************************
  79:../Libraries/XMCLib/src/xmc1_flash.c ****  * API IMPLEMENTATION
  80:../Libraries/XMCLib/src/xmc1_flash.c ****  **************************************************************************************************
  81:../Libraries/XMCLib/src/xmc1_flash.c **** 
  82:../Libraries/XMCLib/src/xmc1_flash.c **** /*
  83:../Libraries/XMCLib/src/xmc1_flash.c ****  * This API shall clear the ECC and VERIFICATION error status.
  84:../Libraries/XMCLib/src/xmc1_flash.c ****  */
  85:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_ClearStatus(void)
  86:../Libraries/XMCLib/src/xmc1_flash.c **** {
  67              	 .loc 2 86 1
  68              	 .cfi_startproc
  69              	 
  70              	 
  71 0000 80B5     	 push {r7,lr}
  72              	.LCFI2:
  73              	 .cfi_def_cfa_offset 8
  74              	 .cfi_offset 7,-8
  75              	 .cfi_offset 14,-4
  76 0002 00AF     	 add r7,sp,#0
  77              	.LCFI3:
  78              	 .cfi_def_cfa_register 7
  87:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG |= (uint16_t)((uint16_t)NVM_NVMPROG_RSTVERR_Msk | (uint16_t)NVM_NVMPROG_RSTECC_Msk);
  79              	 .loc 2 87 16
  80 0004 054B     	 ldr r3,.L4
  81 0006 9B88     	 ldrh r3,[r3,#4]
  82 0008 9BB2     	 uxth r3,r3
  83 000a 0449     	 ldr r1,.L4
  84 000c C022     	 movs r2,#192
  85 000e 9201     	 lsls r2,r2,#6
  86 0010 1343     	 orrs r3,r2
  87 0012 9BB2     	 uxth r3,r3
  88 0014 8B80     	 strh r3,[r1,#4]
  88:../Libraries/XMCLib/src/xmc1_flash.c **** }
  89              	 .loc 2 88 1
  90 0016 C046     	 nop
  91 0018 BD46     	 mov sp,r7
  92              	 
  93 001a 80BD     	 pop {r7,pc}
  94              	.L5:
  95              	 .align 2
  96              	.L4:
  97 001c 00000540 	 .word 1074069504
  98              	 .cfi_endproc
  99              	.LFE48:
 101              	 .section .text.XMC_FLASH_GetStatus,"ax",%progbits
 102              	 .align 1
 103              	 .global XMC_FLASH_GetStatus
 104              	 .syntax unified
 105              	 .code 16
 106              	 .thumb_func
 107              	 .fpu softvfp
 109              	XMC_FLASH_GetStatus:
 110              	.LFB49:
  89:../Libraries/XMCLib/src/xmc1_flash.c **** 
  90:../Libraries/XMCLib/src/xmc1_flash.c **** /*
  91:../Libraries/XMCLib/src/xmc1_flash.c ****  * This API shall return the status of NVM.
  92:../Libraries/XMCLib/src/xmc1_flash.c ****  */
  93:../Libraries/XMCLib/src/xmc1_flash.c **** uint32_t XMC_FLASH_GetStatus(void)
  94:../Libraries/XMCLib/src/xmc1_flash.c **** {
 111              	 .loc 2 94 1
 112              	 .cfi_startproc
 113              	 
 114              	 
 115 0000 80B5     	 push {r7,lr}
 116              	.LCFI4:
 117              	 .cfi_def_cfa_offset 8
 118              	 .cfi_offset 7,-8
 119              	 .cfi_offset 14,-4
 120 0002 00AF     	 add r7,sp,#0
 121              	.LCFI5:
 122              	 .cfi_def_cfa_register 7
  95:../Libraries/XMCLib/src/xmc1_flash.c ****   return NVM->NVMSTATUS;
 123              	 .loc 2 95 13
 124 0004 024B     	 ldr r3,.L8
 125 0006 1B88     	 ldrh r3,[r3]
 126 0008 9BB2     	 uxth r3,r3
  96:../Libraries/XMCLib/src/xmc1_flash.c **** }
 127              	 .loc 2 96 1
 128 000a 1800     	 movs r0,r3
 129 000c BD46     	 mov sp,r7
 130              	 
 131 000e 80BD     	 pop {r7,pc}
 132              	.L9:
 133              	 .align 2
 134              	.L8:
 135 0010 00000540 	 .word 1074069504
 136              	 .cfi_endproc
 137              	.LFE49:
 139              	 .section .text.XMC_FLASH_EnableEvent,"ax",%progbits
 140              	 .align 1
 141              	 .global XMC_FLASH_EnableEvent
 142              	 .syntax unified
 143              	 .code 16
 144              	 .thumb_func
 145              	 .fpu softvfp
 147              	XMC_FLASH_EnableEvent:
 148              	.LFB50:
  97:../Libraries/XMCLib/src/xmc1_flash.c **** 
  98:../Libraries/XMCLib/src/xmc1_flash.c **** /*
  99:../Libraries/XMCLib/src/xmc1_flash.c ****  * This API shall enable the the flash interrupt event.
 100:../Libraries/XMCLib/src/xmc1_flash.c ****  */
 101:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_EnableEvent(const uint32_t event_msk)
 102:../Libraries/XMCLib/src/xmc1_flash.c **** {
 149              	 .loc 2 102 1
 150              	 .cfi_startproc
 151              	 
 152              	 
 153 0000 80B5     	 push {r7,lr}
 154              	.LCFI6:
 155              	 .cfi_def_cfa_offset 8
 156              	 .cfi_offset 7,-8
 157              	 .cfi_offset 14,-4
 158 0002 82B0     	 sub sp,sp,#8
 159              	.LCFI7:
 160              	 .cfi_def_cfa_offset 16
 161 0004 00AF     	 add r7,sp,#0
 162              	.LCFI8:
 163              	 .cfi_def_cfa_register 7
 164 0006 7860     	 str r0,[r7,#4]
 103:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMCONF |= (uint16_t)event_msk;
 165              	 .loc 2 103 16
 166 0008 064B     	 ldr r3,.L11
 167 000a 1B89     	 ldrh r3,[r3,#8]
 168 000c 9AB2     	 uxth r2,r3
 169              	 .loc 2 103 19
 170 000e 7B68     	 ldr r3,[r7,#4]
 171 0010 9BB2     	 uxth r3,r3
 172              	 .loc 2 103 16
 173 0012 0449     	 ldr r1,.L11
 174 0014 1343     	 orrs r3,r2
 175 0016 9BB2     	 uxth r3,r3
 176 0018 0B81     	 strh r3,[r1,#8]
 104:../Libraries/XMCLib/src/xmc1_flash.c **** }
 177              	 .loc 2 104 1
 178 001a C046     	 nop
 179 001c BD46     	 mov sp,r7
 180 001e 02B0     	 add sp,sp,#8
 181              	 
 182 0020 80BD     	 pop {r7,pc}
 183              	.L12:
 184 0022 C046     	 .align 2
 185              	.L11:
 186 0024 00000540 	 .word 1074069504
 187              	 .cfi_endproc
 188              	.LFE50:
 190              	 .section .text.XMC_FLASH_DisableEvent,"ax",%progbits
 191              	 .align 1
 192              	 .global XMC_FLASH_DisableEvent
 193              	 .syntax unified
 194              	 .code 16
 195              	 .thumb_func
 196              	 .fpu softvfp
 198              	XMC_FLASH_DisableEvent:
 199              	.LFB51:
 105:../Libraries/XMCLib/src/xmc1_flash.c **** 
 106:../Libraries/XMCLib/src/xmc1_flash.c **** /*
 107:../Libraries/XMCLib/src/xmc1_flash.c ****  * This API shall disable the the flash interrupt event.
 108:../Libraries/XMCLib/src/xmc1_flash.c ****  */
 109:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_DisableEvent(const uint32_t event_msk)
 110:../Libraries/XMCLib/src/xmc1_flash.c **** {
 200              	 .loc 2 110 1
 201              	 .cfi_startproc
 202              	 
 203              	 
 204 0000 80B5     	 push {r7,lr}
 205              	.LCFI9:
 206              	 .cfi_def_cfa_offset 8
 207              	 .cfi_offset 7,-8
 208              	 .cfi_offset 14,-4
 209 0002 82B0     	 sub sp,sp,#8
 210              	.LCFI10:
 211              	 .cfi_def_cfa_offset 16
 212 0004 00AF     	 add r7,sp,#0
 213              	.LCFI11:
 214              	 .cfi_def_cfa_register 7
 215 0006 7860     	 str r0,[r7,#4]
 111:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMCONF &= (uint16_t)(~(uint16_t)event_msk);
 216              	 .loc 2 111 16
 217 0008 074B     	 ldr r3,.L14
 218 000a 1B89     	 ldrh r3,[r3,#8]
 219 000c 9BB2     	 uxth r3,r3
 220              	 .loc 2 111 31
 221 000e 7A68     	 ldr r2,[r7,#4]
 222 0010 92B2     	 uxth r2,r2
 223              	 .loc 2 111 19
 224 0012 D243     	 mvns r2,r2
 225 0014 92B2     	 uxth r2,r2
 226              	 .loc 2 111 16
 227 0016 0449     	 ldr r1,.L14
 228 0018 1340     	 ands r3,r2
 229 001a 9BB2     	 uxth r3,r3
 230 001c 0B81     	 strh r3,[r1,#8]
 112:../Libraries/XMCLib/src/xmc1_flash.c **** }
 231              	 .loc 2 112 1
 232 001e C046     	 nop
 233 0020 BD46     	 mov sp,r7
 234 0022 02B0     	 add sp,sp,#8
 235              	 
 236 0024 80BD     	 pop {r7,pc}
 237              	.L15:
 238 0026 C046     	 .align 2
 239              	.L14:
 240 0028 00000540 	 .word 1074069504
 241              	 .cfi_endproc
 242              	.LFE51:
 244              	 .section .text.XMC_FLASH_ErasePage,"ax",%progbits
 245              	 .align 1
 246              	 .global XMC_FLASH_ErasePage
 247              	 .syntax unified
 248              	 .code 16
 249              	 .thumb_func
 250              	 .fpu softvfp
 252              	XMC_FLASH_ErasePage:
 253              	.LFB52:
 113:../Libraries/XMCLib/src/xmc1_flash.c **** 
 114:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_ErasePage(uint32_t *address)
 115:../Libraries/XMCLib/src/xmc1_flash.c **** {
 254              	 .loc 2 115 1
 255              	 .cfi_startproc
 256              	 
 257              	 
 258 0000 80B5     	 push {r7,lr}
 259              	.LCFI12:
 260              	 .cfi_def_cfa_offset 8
 261              	 .cfi_offset 7,-8
 262              	 .cfi_offset 14,-4
 263 0002 82B0     	 sub sp,sp,#8
 264              	.LCFI13:
 265              	 .cfi_def_cfa_offset 16
 266 0004 00AF     	 add r7,sp,#0
 267              	.LCFI14:
 268              	 .cfi_def_cfa_register 7
 269 0006 7860     	 str r0,[r7,#4]
 116:../Libraries/XMCLib/src/xmc1_flash.c ****   (void)XMC1000_NvmErasePage(address);
 270              	 .loc 2 116 9
 271 0008 8023     	 movs r3,#128
 272 000a 5B00     	 lsls r3,r3,#1
 273 000c 1B68     	 ldr r3,[r3]
 274 000e 7A68     	 ldr r2,[r7,#4]
 275 0010 1000     	 movs r0,r2
 276 0012 9847     	 blx r3
 277              	.LVL0:
 117:../Libraries/XMCLib/src/xmc1_flash.c **** }
 278              	 .loc 2 117 1
 279 0014 C046     	 nop
 280 0016 BD46     	 mov sp,r7
 281 0018 02B0     	 add sp,sp,#8
 282              	 
 283 001a 80BD     	 pop {r7,pc}
 284              	 .cfi_endproc
 285              	.LFE52:
 287              	 .section .text.XMC_FLASH_ProgramVerifyPage,"ax",%progbits
 288              	 .align 1
 289              	 .global XMC_FLASH_ProgramVerifyPage
 290              	 .syntax unified
 291              	 .code 16
 292              	 .thumb_func
 293              	 .fpu softvfp
 295              	XMC_FLASH_ProgramVerifyPage:
 296              	.LFB53:
 118:../Libraries/XMCLib/src/xmc1_flash.c **** 
 119:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_ProgramVerifyPage(uint32_t *address, const uint32_t *data)
 120:../Libraries/XMCLib/src/xmc1_flash.c **** {
 297              	 .loc 2 120 1
 298              	 .cfi_startproc
 299              	 
 300              	 
 301 0000 80B5     	 push {r7,lr}
 302              	.LCFI15:
 303              	 .cfi_def_cfa_offset 8
 304              	 .cfi_offset 7,-8
 305              	 .cfi_offset 14,-4
 306 0002 82B0     	 sub sp,sp,#8
 307              	.LCFI16:
 308              	 .cfi_def_cfa_offset 16
 309 0004 00AF     	 add r7,sp,#0
 310              	.LCFI17:
 311              	 .cfi_def_cfa_register 7
 312 0006 7860     	 str r0,[r7,#4]
 313 0008 3960     	 str r1,[r7]
 121:../Libraries/XMCLib/src/xmc1_flash.c ****   (void)XMC1000_NvmProgVerify(data, address);
 314              	 .loc 2 121 9
 315 000a 8223     	 movs r3,#130
 316 000c 5B00     	 lsls r3,r3,#1
 317 000e 1B68     	 ldr r3,[r3]
 318 0010 7968     	 ldr r1,[r7,#4]
 319 0012 3A68     	 ldr r2,[r7]
 320 0014 1000     	 movs r0,r2
 321 0016 9847     	 blx r3
 322              	.LVL1:
 122:../Libraries/XMCLib/src/xmc1_flash.c **** }
 323              	 .loc 2 122 1
 324 0018 C046     	 nop
 325 001a BD46     	 mov sp,r7
 326 001c 02B0     	 add sp,sp,#8
 327              	 
 328 001e 80BD     	 pop {r7,pc}
 329              	 .cfi_endproc
 330              	.LFE53:
 332              	 .section .text.XMC_FLASH_WriteBlocks,"ax",%progbits
 333              	 .align 1
 334              	 .global XMC_FLASH_WriteBlocks
 335              	 .syntax unified
 336              	 .code 16
 337              	 .thumb_func
 338              	 .fpu softvfp
 340              	XMC_FLASH_WriteBlocks:
 341              	.LFB54:
 123:../Libraries/XMCLib/src/xmc1_flash.c **** 
 124:../Libraries/XMCLib/src/xmc1_flash.c **** /* Write blocks of data into flash*/
 125:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_WriteBlocks(uint32_t *address, const uint32_t *data, uint32_t num_blocks, bool verif
 126:../Libraries/XMCLib/src/xmc1_flash.c **** {
 342              	 .loc 2 126 1
 343              	 .cfi_startproc
 344              	 
 345              	 
 346 0000 80B5     	 push {r7,lr}
 347              	.LCFI18:
 348              	 .cfi_def_cfa_offset 8
 349              	 .cfi_offset 7,-8
 350              	 .cfi_offset 14,-4
 351 0002 86B0     	 sub sp,sp,#24
 352              	.LCFI19:
 353              	 .cfi_def_cfa_offset 32
 354 0004 00AF     	 add r7,sp,#0
 355              	.LCFI20:
 356              	 .cfi_def_cfa_register 7
 357 0006 F860     	 str r0,[r7,#12]
 358 0008 B960     	 str r1,[r7,#8]
 359 000a 7A60     	 str r2,[r7,#4]
 360 000c 1A00     	 movs r2,r3
 361 000e FB1C     	 adds r3,r7,#3
 362 0010 1A70     	 strb r2,[r3]
 127:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t word;
 128:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t block;
 129:../Libraries/XMCLib/src/xmc1_flash.c **** 
 130:../Libraries/XMCLib/src/xmc1_flash.c ****   XMC_ASSERT("XMC_FLASH_WriteBlocks: Starting address not aligned to Block",
 131:../Libraries/XMCLib/src/xmc1_flash.c ****                                                                    ((uint32_t)address & FLASH_BLOCK
 132:../Libraries/XMCLib/src/xmc1_flash.c **** 
 133:../Libraries/XMCLib/src/xmc1_flash.c ****   /* Configure the continuous Write option command and reset the NVM error / verification status*/
 134:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
 363              	 .loc 2 134 16
 364 0012 2A4B     	 ldr r3,.L26
 365 0014 9B88     	 ldrh r3,[r3,#4]
 366 0016 9BB2     	 uxth r3,r3
 367 0018 284A     	 ldr r2,.L26
 368 001a FF21     	 movs r1,#255
 369 001c 8B43     	 bics r3,r1
 370 001e 9BB2     	 uxth r3,r3
 371 0020 9380     	 strh r3,[r2,#4]
 135:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG |= (uint16_t)(NVM_NVMPROG_RSTVERR_Msk | NVM_NVMPROG_RSTECC_Msk);
 372              	 .loc 2 135 16
 373 0022 264B     	 ldr r3,.L26
 374 0024 9B88     	 ldrh r3,[r3,#4]
 375 0026 9BB2     	 uxth r3,r3
 376 0028 2449     	 ldr r1,.L26
 377 002a C022     	 movs r2,#192
 378 002c 9201     	 lsls r2,r2,#6
 379 002e 1343     	 orrs r3,r2
 380 0030 9BB2     	 uxth r3,r3
 381 0032 8B80     	 strh r3,[r1,#4]
 136:../Libraries/XMCLib/src/xmc1_flash.c **** 
 137:../Libraries/XMCLib/src/xmc1_flash.c ****   if (verify == true)
 382              	 .loc 2 137 6
 383 0034 FB1C     	 adds r3,r7,#3
 384 0036 1B78     	 ldrb r3,[r3]
 385 0038 002B     	 cmp r3,#0
 386 003a 08D0     	 beq .L19
 138:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 139:../Libraries/XMCLib/src/xmc1_flash.c ****     NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE_VERIFY;
 387              	 .loc 2 139 18
 388 003c 1F4B     	 ldr r3,.L26
 389 003e 9B88     	 ldrh r3,[r3,#4]
 390 0040 9BB2     	 uxth r3,r3
 391 0042 1E4A     	 ldr r2,.L26
 392 0044 6121     	 movs r1,#97
 393 0046 0B43     	 orrs r3,r1
 394 0048 9BB2     	 uxth r3,r3
 395 004a 9380     	 strh r3,[r2,#4]
 396 004c 07E0     	 b .L20
 397              	.L19:
 140:../Libraries/XMCLib/src/xmc1_flash.c ****   }
 141:../Libraries/XMCLib/src/xmc1_flash.c ****   else
 142:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 143:../Libraries/XMCLib/src/xmc1_flash.c ****     NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE;
 398              	 .loc 2 143 18
 399 004e 1B4B     	 ldr r3,.L26
 400 0050 9B88     	 ldrh r3,[r3,#4]
 401 0052 9BB2     	 uxth r3,r3
 402 0054 194A     	 ldr r2,.L26
 403 0056 A121     	 movs r1,#161
 404 0058 0B43     	 orrs r3,r1
 405 005a 9BB2     	 uxth r3,r3
 406 005c 9380     	 strh r3,[r2,#4]
 407              	.L20:
 144:../Libraries/XMCLib/src/xmc1_flash.c ****   }
 145:../Libraries/XMCLib/src/xmc1_flash.c **** 
 146:../Libraries/XMCLib/src/xmc1_flash.c ****   for (block = 0U; block < num_blocks; ++block)
 408              	 .loc 2 146 14
 409 005e 0023     	 movs r3,#0
 410 0060 3B61     	 str r3,[r7,#16]
 411              	 .loc 2 146 3
 412 0062 1AE0     	 b .L21
 413              	.L25:
 147:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 148:../Libraries/XMCLib/src/xmc1_flash.c ****     for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
 414              	 .loc 2 148 15
 415 0064 0023     	 movs r3,#0
 416 0066 7B61     	 str r3,[r7,#20]
 417              	 .loc 2 148 5
 418 0068 0CE0     	 b .L22
 419              	.L23:
 149:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 150:../Libraries/XMCLib/src/xmc1_flash.c ****       *address = *data;
 420              	 .loc 2 150 18 discriminator 3
 421 006a BB68     	 ldr r3,[r7,#8]
 422 006c 1A68     	 ldr r2,[r3]
 423              	 .loc 2 150 16 discriminator 3
 424 006e FB68     	 ldr r3,[r7,#12]
 425 0070 1A60     	 str r2,[r3]
 151:../Libraries/XMCLib/src/xmc1_flash.c ****       data++;
 426              	 .loc 2 151 11 discriminator 3
 427 0072 BB68     	 ldr r3,[r7,#8]
 428 0074 0433     	 adds r3,r3,#4
 429 0076 BB60     	 str r3,[r7,#8]
 152:../Libraries/XMCLib/src/xmc1_flash.c ****       address++;
 430              	 .loc 2 152 14 discriminator 3
 431 0078 FB68     	 ldr r3,[r7,#12]
 432 007a 0433     	 adds r3,r3,#4
 433 007c FB60     	 str r3,[r7,#12]
 148:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 434              	 .loc 2 148 55 discriminator 3
 435 007e 7B69     	 ldr r3,[r7,#20]
 436 0080 0133     	 adds r3,r3,#1
 437 0082 7B61     	 str r3,[r7,#20]
 438              	.L22:
 148:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 439              	 .loc 2 148 5 discriminator 1
 440 0084 7B69     	 ldr r3,[r7,#20]
 441 0086 032B     	 cmp r3,#3
 442 0088 EFD9     	 bls .L23
 153:../Libraries/XMCLib/src/xmc1_flash.c ****     }
 154:../Libraries/XMCLib/src/xmc1_flash.c ****       
 155:../Libraries/XMCLib/src/xmc1_flash.c ****     while (XMC_FLASH_IsBusy() == true)
 443              	 .loc 2 155 11
 444 008a C046     	 nop
 445              	.L24:
 446              	 .loc 2 155 12 discriminator 1
 447 008c FFF7FEFF 	 bl XMC_FLASH_IsBusy
 448 0090 031E     	 subs r3,r0,#0
 449              	 .loc 2 155 11 discriminator 1
 450 0092 FBD1     	 bne .L24
 146:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 451              	 .loc 2 146 40 discriminator 2
 452 0094 3B69     	 ldr r3,[r7,#16]
 453 0096 0133     	 adds r3,r3,#1
 454 0098 3B61     	 str r3,[r7,#16]
 455              	.L21:
 146:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 456              	 .loc 2 146 3 discriminator 1
 457 009a 3A69     	 ldr r2,[r7,#16]
 458 009c 7B68     	 ldr r3,[r7,#4]
 459 009e 9A42     	 cmp r2,r3
 460 00a0 E0D3     	 bcc .L25
 156:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 157:../Libraries/XMCLib/src/xmc1_flash.c ****     }
 158:../Libraries/XMCLib/src/xmc1_flash.c ****   }
 159:../Libraries/XMCLib/src/xmc1_flash.c **** 
 160:../Libraries/XMCLib/src/xmc1_flash.c ****   /* Stop continuous write operation */
 161:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
 461              	 .loc 2 161 16
 462 00a2 064B     	 ldr r3,.L26
 463 00a4 9B88     	 ldrh r3,[r3,#4]
 464 00a6 9BB2     	 uxth r3,r3
 465 00a8 044A     	 ldr r2,.L26
 466 00aa FF21     	 movs r1,#255
 467 00ac 8B43     	 bics r3,r1
 468 00ae 9BB2     	 uxth r3,r3
 469 00b0 9380     	 strh r3,[r2,#4]
 162:../Libraries/XMCLib/src/xmc1_flash.c **** }
 470              	 .loc 2 162 1
 471 00b2 C046     	 nop
 472 00b4 BD46     	 mov sp,r7
 473 00b6 06B0     	 add sp,sp,#24
 474              	 
 475 00b8 80BD     	 pop {r7,pc}
 476              	.L27:
 477 00ba C046     	 .align 2
 478              	.L26:
 479 00bc 00000540 	 .word 1074069504
 480              	 .cfi_endproc
 481              	.LFE54:
 483              	 .section .text.XMC_FLASH_ErasePages,"ax",%progbits
 484              	 .align 1
 485              	 .global XMC_FLASH_ErasePages
 486              	 .syntax unified
 487              	 .code 16
 488              	 .thumb_func
 489              	 .fpu softvfp
 491              	XMC_FLASH_ErasePages:
 492              	.LFB55:
 163:../Libraries/XMCLib/src/xmc1_flash.c **** 
 164:../Libraries/XMCLib/src/xmc1_flash.c **** /* Erase flash pages */
 165:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_ErasePages(uint32_t *address, uint32_t num_pages)
 166:../Libraries/XMCLib/src/xmc1_flash.c **** {
 493              	 .loc 2 166 1
 494              	 .cfi_startproc
 495              	 
 496              	 
 497 0000 80B5     	 push {r7,lr}
 498              	.LCFI21:
 499              	 .cfi_def_cfa_offset 8
 500              	 .cfi_offset 7,-8
 501              	 .cfi_offset 14,-4
 502 0002 84B0     	 sub sp,sp,#16
 503              	.LCFI22:
 504              	 .cfi_def_cfa_offset 24
 505 0004 00AF     	 add r7,sp,#0
 506              	.LCFI23:
 507              	 .cfi_def_cfa_register 7
 508 0006 7860     	 str r0,[r7,#4]
 509 0008 3960     	 str r1,[r7]
 167:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t page;
 168:../Libraries/XMCLib/src/xmc1_flash.c **** 
 169:../Libraries/XMCLib/src/xmc1_flash.c ****   XMC_ASSERT("XMC_FLASH_ErasePages: Starting address not aligned to Page",
 170:../Libraries/XMCLib/src/xmc1_flash.c ****                                                                     ((uint32_t)address & FLASH_PAGE
 171:../Libraries/XMCLib/src/xmc1_flash.c **** 
 172:../Libraries/XMCLib/src/xmc1_flash.c ****   for (page = 0U; page < num_pages; ++page)
 510              	 .loc 2 172 13
 511 000a 0023     	 movs r3,#0
 512 000c FB60     	 str r3,[r7,#12]
 513              	 .loc 2 172 3
 514 000e 11E0     	 b .L29
 515              	.L31:
 173:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 174:../Libraries/XMCLib/src/xmc1_flash.c ****     (void)XMC1000_NvmErasePage(address);
 516              	 .loc 2 174 11
 517 0010 8023     	 movs r3,#128
 518 0012 5B00     	 lsls r3,r3,#1
 519 0014 1B68     	 ldr r3,[r3]
 520 0016 7A68     	 ldr r2,[r7,#4]
 521 0018 1000     	 movs r0,r2
 522 001a 9847     	 blx r3
 523              	.LVL2:
 175:../Libraries/XMCLib/src/xmc1_flash.c **** 
 176:../Libraries/XMCLib/src/xmc1_flash.c ****     while (XMC_FLASH_IsBusy() == true)
 524              	 .loc 2 176 11
 525 001c C046     	 nop
 526              	.L30:
 527              	 .loc 2 176 12 discriminator 1
 528 001e FFF7FEFF 	 bl XMC_FLASH_IsBusy
 529 0022 031E     	 subs r3,r0,#0
 530              	 .loc 2 176 11 discriminator 1
 531 0024 FBD1     	 bne .L30
 177:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 178:../Libraries/XMCLib/src/xmc1_flash.c ****     }
 179:../Libraries/XMCLib/src/xmc1_flash.c **** 
 180:../Libraries/XMCLib/src/xmc1_flash.c ****     /* Increment the page address for the next erase */
 181:../Libraries/XMCLib/src/xmc1_flash.c ****     address += XMC_FLASH_WORDS_PER_PAGE;
 532              	 .loc 2 181 13 discriminator 2
 533 0026 7B68     	 ldr r3,[r7,#4]
 534 0028 0133     	 adds r3,r3,#1
 535 002a FF33     	 adds r3,r3,#255
 536 002c 7B60     	 str r3,[r7,#4]
 172:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 537              	 .loc 2 172 37 discriminator 2
 538 002e FB68     	 ldr r3,[r7,#12]
 539 0030 0133     	 adds r3,r3,#1
 540 0032 FB60     	 str r3,[r7,#12]
 541              	.L29:
 172:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 542              	 .loc 2 172 3 discriminator 1
 543 0034 FA68     	 ldr r2,[r7,#12]
 544 0036 3B68     	 ldr r3,[r7]
 545 0038 9A42     	 cmp r2,r3
 546 003a E9D3     	 bcc .L31
 182:../Libraries/XMCLib/src/xmc1_flash.c **** 
 183:../Libraries/XMCLib/src/xmc1_flash.c ****   }
 184:../Libraries/XMCLib/src/xmc1_flash.c **** 
 185:../Libraries/XMCLib/src/xmc1_flash.c **** }
 547              	 .loc 2 185 1
 548 003c C046     	 nop
 549 003e C046     	 nop
 550 0040 BD46     	 mov sp,r7
 551 0042 04B0     	 add sp,sp,#16
 552              	 
 553 0044 80BD     	 pop {r7,pc}
 554              	 .cfi_endproc
 555              	.LFE55:
 557              	 .section .text.XMC_FLASH_VerifyBlocks,"ax",%progbits
 558              	 .align 1
 559              	 .global XMC_FLASH_VerifyBlocks
 560              	 .syntax unified
 561              	 .code 16
 562              	 .thumb_func
 563              	 .fpu softvfp
 565              	XMC_FLASH_VerifyBlocks:
 566              	.LFB56:
 186:../Libraries/XMCLib/src/xmc1_flash.c **** 
 187:../Libraries/XMCLib/src/xmc1_flash.c **** /* Write multiple data blocks and verify the written data */
 188:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_VerifyBlocks(uint32_t *address, const uint32_t *data, uint32_t num_blocks)
 189:../Libraries/XMCLib/src/xmc1_flash.c **** {
 567              	 .loc 2 189 1
 568              	 .cfi_startproc
 569              	 
 570              	 
 571 0000 80B5     	 push {r7,lr}
 572              	.LCFI24:
 573              	 .cfi_def_cfa_offset 8
 574              	 .cfi_offset 7,-8
 575              	 .cfi_offset 14,-4
 576 0002 86B0     	 sub sp,sp,#24
 577              	.LCFI25:
 578              	 .cfi_def_cfa_offset 32
 579 0004 00AF     	 add r7,sp,#0
 580              	.LCFI26:
 581              	 .cfi_def_cfa_register 7
 582 0006 F860     	 str r0,[r7,#12]
 583 0008 B960     	 str r1,[r7,#8]
 584 000a 7A60     	 str r2,[r7,#4]
 190:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t word;
 191:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t block;
 192:../Libraries/XMCLib/src/xmc1_flash.c **** 
 193:../Libraries/XMCLib/src/xmc1_flash.c ****   XMC_ASSERT("XMC_FLASH_VerifyBlocks: Starting address not aligned to Block",
 194:../Libraries/XMCLib/src/xmc1_flash.c ****                                                                    ((uint32_t)address & FLASH_BLOCK
 195:../Libraries/XMCLib/src/xmc1_flash.c **** 
 196:../Libraries/XMCLib/src/xmc1_flash.c ****   /* Configure the Continuous write with verify option command and reset the NVM error / verificati
 197:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG &= (uint16_t)~NVM_NVMPROG_ACTION_Msk;
 585              	 .loc 2 197 16
 586 000c 1E4B     	 ldr r3,.L38
 587 000e 9B88     	 ldrh r3,[r3,#4]
 588 0010 9BB2     	 uxth r3,r3
 589 0012 1D4A     	 ldr r2,.L38
 590 0014 FF21     	 movs r1,#255
 591 0016 8B43     	 bics r3,r1
 592 0018 9BB2     	 uxth r3,r3
 593 001a 9380     	 strh r3,[r2,#4]
 198:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG |= (uint16_t)((uint16_t)NVM_NVMPROG_RSTVERR_Msk | 
 594              	 .loc 2 198 16
 595 001c 1A4B     	 ldr r3,.L38
 596 001e 9B88     	 ldrh r3,[r3,#4]
 597 0020 9BB2     	 uxth r3,r3
 598 0022 194A     	 ldr r2,.L38
 599 0024 1949     	 ldr r1,.L38+4
 600 0026 0B43     	 orrs r3,r1
 601 0028 9BB2     	 uxth r3,r3
 602 002a 9380     	 strh r3,[r2,#4]
 199:../Libraries/XMCLib/src/xmc1_flash.c ****                              (uint16_t)NVM_NVMPROG_RSTECC_Msk | 
 200:../Libraries/XMCLib/src/xmc1_flash.c ****                              (uint16_t)FLASH_ACTION_CONTINUOUS_VERIFY_ONLY);
 201:../Libraries/XMCLib/src/xmc1_flash.c **** 
 202:../Libraries/XMCLib/src/xmc1_flash.c ****   for (block = 0U; block < num_blocks; ++block)
 603              	 .loc 2 202 14
 604 002c 0023     	 movs r3,#0
 605 002e 3B61     	 str r3,[r7,#16]
 606              	 .loc 2 202 3
 607 0030 1AE0     	 b .L33
 608              	.L37:
 203:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 204:../Libraries/XMCLib/src/xmc1_flash.c ****     for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
 609              	 .loc 2 204 15
 610 0032 0023     	 movs r3,#0
 611 0034 7B61     	 str r3,[r7,#20]
 612              	 .loc 2 204 5
 613 0036 0CE0     	 b .L34
 614              	.L35:
 205:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 206:../Libraries/XMCLib/src/xmc1_flash.c ****       *address = *data;
 615              	 .loc 2 206 18 discriminator 3
 616 0038 BB68     	 ldr r3,[r7,#8]
 617 003a 1A68     	 ldr r2,[r3]
 618              	 .loc 2 206 16 discriminator 3
 619 003c FB68     	 ldr r3,[r7,#12]
 620 003e 1A60     	 str r2,[r3]
 207:../Libraries/XMCLib/src/xmc1_flash.c ****       data++;
 621              	 .loc 2 207 11 discriminator 3
 622 0040 BB68     	 ldr r3,[r7,#8]
 623 0042 0433     	 adds r3,r3,#4
 624 0044 BB60     	 str r3,[r7,#8]
 208:../Libraries/XMCLib/src/xmc1_flash.c ****       address++;
 625              	 .loc 2 208 14 discriminator 3
 626 0046 FB68     	 ldr r3,[r7,#12]
 627 0048 0433     	 adds r3,r3,#4
 628 004a FB60     	 str r3,[r7,#12]
 204:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 629              	 .loc 2 204 55 discriminator 3
 630 004c 7B69     	 ldr r3,[r7,#20]
 631 004e 0133     	 adds r3,r3,#1
 632 0050 7B61     	 str r3,[r7,#20]
 633              	.L34:
 204:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 634              	 .loc 2 204 5 discriminator 1
 635 0052 7B69     	 ldr r3,[r7,#20]
 636 0054 032B     	 cmp r3,#3
 637 0056 EFD9     	 bls .L35
 209:../Libraries/XMCLib/src/xmc1_flash.c ****     }
 210:../Libraries/XMCLib/src/xmc1_flash.c **** 
 211:../Libraries/XMCLib/src/xmc1_flash.c ****     while (XMC_FLASH_IsBusy() == true)
 638              	 .loc 2 211 11
 639 0058 C046     	 nop
 640              	.L36:
 641              	 .loc 2 211 12 discriminator 1
 642 005a FFF7FEFF 	 bl XMC_FLASH_IsBusy
 643 005e 031E     	 subs r3,r0,#0
 644              	 .loc 2 211 11 discriminator 1
 645 0060 FBD1     	 bne .L36
 202:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 646              	 .loc 2 202 40 discriminator 2
 647 0062 3B69     	 ldr r3,[r7,#16]
 648 0064 0133     	 adds r3,r3,#1
 649 0066 3B61     	 str r3,[r7,#16]
 650              	.L33:
 202:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 651              	 .loc 2 202 3 discriminator 1
 652 0068 3A69     	 ldr r2,[r7,#16]
 653 006a 7B68     	 ldr r3,[r7,#4]
 654 006c 9A42     	 cmp r2,r3
 655 006e E0D3     	 bcc .L37
 212:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 213:../Libraries/XMCLib/src/xmc1_flash.c ****     }
 214:../Libraries/XMCLib/src/xmc1_flash.c ****   }
 215:../Libraries/XMCLib/src/xmc1_flash.c **** 
 216:../Libraries/XMCLib/src/xmc1_flash.c ****   /* Stop continuous verify operation */
 217:../Libraries/XMCLib/src/xmc1_flash.c ****   NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
 656              	 .loc 2 217 16
 657 0070 054B     	 ldr r3,.L38
 658 0072 9B88     	 ldrh r3,[r3,#4]
 659 0074 9BB2     	 uxth r3,r3
 660 0076 044A     	 ldr r2,.L38
 661 0078 FF21     	 movs r1,#255
 662 007a 8B43     	 bics r3,r1
 663 007c 9BB2     	 uxth r3,r3
 664 007e 9380     	 strh r3,[r2,#4]
 218:../Libraries/XMCLib/src/xmc1_flash.c **** }
 665              	 .loc 2 218 1
 666 0080 C046     	 nop
 667 0082 BD46     	 mov sp,r7
 668 0084 06B0     	 add sp,sp,#24
 669              	 
 670 0086 80BD     	 pop {r7,pc}
 671              	.L39:
 672              	 .align 2
 673              	.L38:
 674 0088 00000540 	 .word 1074069504
 675 008c E0300000 	 .word 12512
 676              	 .cfi_endproc
 677              	.LFE56:
 679              	 .section .text.XMC_FLASH_ReadBlocks,"ax",%progbits
 680              	 .align 1
 681              	 .global XMC_FLASH_ReadBlocks
 682              	 .syntax unified
 683              	 .code 16
 684              	 .thumb_func
 685              	 .fpu softvfp
 687              	XMC_FLASH_ReadBlocks:
 688              	.LFB57:
 219:../Libraries/XMCLib/src/xmc1_flash.c **** 
 220:../Libraries/XMCLib/src/xmc1_flash.c **** /* Read data blocks from flash */
 221:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_ReadBlocks(uint32_t *address, uint32_t *data, uint32_t num_blocks)
 222:../Libraries/XMCLib/src/xmc1_flash.c **** {
 689              	 .loc 2 222 1
 690              	 .cfi_startproc
 691              	 
 692              	 
 693 0000 80B5     	 push {r7,lr}
 694              	.LCFI27:
 695              	 .cfi_def_cfa_offset 8
 696              	 .cfi_offset 7,-8
 697              	 .cfi_offset 14,-4
 698 0002 86B0     	 sub sp,sp,#24
 699              	.LCFI28:
 700              	 .cfi_def_cfa_offset 32
 701 0004 00AF     	 add r7,sp,#0
 702              	.LCFI29:
 703              	 .cfi_def_cfa_register 7
 704 0006 F860     	 str r0,[r7,#12]
 705 0008 B960     	 str r1,[r7,#8]
 706 000a 7A60     	 str r2,[r7,#4]
 223:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t word;
 224:../Libraries/XMCLib/src/xmc1_flash.c ****   uint32_t block;
 225:../Libraries/XMCLib/src/xmc1_flash.c **** 
 226:../Libraries/XMCLib/src/xmc1_flash.c ****   XMC_ASSERT("XMC_FLASH_ReadBlocks: Starting address not aligned to Block",
 227:../Libraries/XMCLib/src/xmc1_flash.c ****                                                                   ((uint32_t)address & FLASH_BLOCK_
 228:../Libraries/XMCLib/src/xmc1_flash.c **** 
 229:../Libraries/XMCLib/src/xmc1_flash.c ****   for (block = 0U; block < num_blocks; ++block)
 707              	 .loc 2 229 14
 708 000c 0023     	 movs r3,#0
 709 000e 3B61     	 str r3,[r7,#16]
 710              	 .loc 2 229 3
 711 0010 15E0     	 b .L41
 712              	.L44:
 230:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 231:../Libraries/XMCLib/src/xmc1_flash.c ****     for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
 713              	 .loc 2 231 15
 714 0012 0023     	 movs r3,#0
 715 0014 7B61     	 str r3,[r7,#20]
 716              	 .loc 2 231 5
 717 0016 0CE0     	 b .L42
 718              	.L43:
 232:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 233:../Libraries/XMCLib/src/xmc1_flash.c ****       *data = *address;
 719              	 .loc 2 233 15 discriminator 3
 720 0018 FB68     	 ldr r3,[r7,#12]
 721 001a 1A68     	 ldr r2,[r3]
 722              	 .loc 2 233 13 discriminator 3
 723 001c BB68     	 ldr r3,[r7,#8]
 724 001e 1A60     	 str r2,[r3]
 234:../Libraries/XMCLib/src/xmc1_flash.c ****       data++;
 725              	 .loc 2 234 11 discriminator 3
 726 0020 BB68     	 ldr r3,[r7,#8]
 727 0022 0433     	 adds r3,r3,#4
 728 0024 BB60     	 str r3,[r7,#8]
 235:../Libraries/XMCLib/src/xmc1_flash.c ****       address++;
 729              	 .loc 2 235 14 discriminator 3
 730 0026 FB68     	 ldr r3,[r7,#12]
 731 0028 0433     	 adds r3,r3,#4
 732 002a FB60     	 str r3,[r7,#12]
 231:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 733              	 .loc 2 231 55 discriminator 3
 734 002c 7B69     	 ldr r3,[r7,#20]
 735 002e 0133     	 adds r3,r3,#1
 736 0030 7B61     	 str r3,[r7,#20]
 737              	.L42:
 231:../Libraries/XMCLib/src/xmc1_flash.c ****     {
 738              	 .loc 2 231 5 discriminator 1
 739 0032 7B69     	 ldr r3,[r7,#20]
 740 0034 032B     	 cmp r3,#3
 741 0036 EFD9     	 bls .L43
 229:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 742              	 .loc 2 229 40 discriminator 2
 743 0038 3B69     	 ldr r3,[r7,#16]
 744 003a 0133     	 adds r3,r3,#1
 745 003c 3B61     	 str r3,[r7,#16]
 746              	.L41:
 229:../Libraries/XMCLib/src/xmc1_flash.c ****   {
 747              	 .loc 2 229 3 discriminator 1
 748 003e 3A69     	 ldr r2,[r7,#16]
 749 0040 7B68     	 ldr r3,[r7,#4]
 750 0042 9A42     	 cmp r2,r3
 751 0044 E5D3     	 bcc .L44
 236:../Libraries/XMCLib/src/xmc1_flash.c ****     }
 237:../Libraries/XMCLib/src/xmc1_flash.c ****   }
 238:../Libraries/XMCLib/src/xmc1_flash.c **** }
 752              	 .loc 2 238 1
 753 0046 C046     	 nop
 754 0048 C046     	 nop
 755 004a BD46     	 mov sp,r7
 756 004c 06B0     	 add sp,sp,#24
 757              	 
 758 004e 80BD     	 pop {r7,pc}
 759              	 .cfi_endproc
 760              	.LFE57:
 762              	 .section .text.XMC_FLASH_EraseSector,"ax",%progbits
 763              	 .align 1
 764              	 .global XMC_FLASH_EraseSector
 765              	 .syntax unified
 766              	 .code 16
 767              	 .thumb_func
 768              	 .fpu softvfp
 770              	XMC_FLASH_EraseSector:
 771              	.LFB58:
 239:../Libraries/XMCLib/src/xmc1_flash.c **** 
 240:../Libraries/XMCLib/src/xmc1_flash.c **** /* Erase single sector */
 241:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_EraseSector(uint32_t *address)
 242:../Libraries/XMCLib/src/xmc1_flash.c **** {
 772              	 .loc 2 242 1
 773              	 .cfi_startproc
 774              	 
 775              	 
 776 0000 80B5     	 push {r7,lr}
 777              	.LCFI30:
 778              	 .cfi_def_cfa_offset 8
 779              	 .cfi_offset 7,-8
 780              	 .cfi_offset 14,-4
 781 0002 82B0     	 sub sp,sp,#8
 782              	.LCFI31:
 783              	 .cfi_def_cfa_offset 16
 784 0004 00AF     	 add r7,sp,#0
 785              	.LCFI32:
 786              	 .cfi_def_cfa_register 7
 787 0006 7860     	 str r0,[r7,#4]
 243:../Libraries/XMCLib/src/xmc1_flash.c ****   XMC_ASSERT("XMC_FLASH_EraseSector: Starting address not aligned to Sector",
 244:../Libraries/XMCLib/src/xmc1_flash.c ****                                                                  ((uint32_t)address & FLASH_SECTOR_
 245:../Libraries/XMCLib/src/xmc1_flash.c ****   XMC_FLASH_ErasePages(address, XMC_FLASH_PAGES_PER_SECTOR);
 788              	 .loc 2 245 3
 789 0008 7B68     	 ldr r3,[r7,#4]
 790 000a 1021     	 movs r1,#16
 791 000c 1800     	 movs r0,r3
 792 000e FFF7FEFF 	 bl XMC_FLASH_ErasePages
 246:../Libraries/XMCLib/src/xmc1_flash.c **** }
 793              	 .loc 2 246 1
 794 0012 C046     	 nop
 795 0014 BD46     	 mov sp,r7
 796 0016 02B0     	 add sp,sp,#8
 797              	 
 798 0018 80BD     	 pop {r7,pc}
 799              	 .cfi_endproc
 800              	.LFE58:
 802              	 .section .text.XMC_FLASH_ProgramPage,"ax",%progbits
 803              	 .align 1
 804              	 .global XMC_FLASH_ProgramPage
 805              	 .syntax unified
 806              	 .code 16
 807              	 .thumb_func
 808              	 .fpu softvfp
 810              	XMC_FLASH_ProgramPage:
 811              	.LFB59:
 247:../Libraries/XMCLib/src/xmc1_flash.c **** 
 248:../Libraries/XMCLib/src/xmc1_flash.c **** /* Program single page */
 249:../Libraries/XMCLib/src/xmc1_flash.c **** void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
 250:../Libraries/XMCLib/src/xmc1_flash.c **** {
 812              	 .loc 2 250 1
 813              	 .cfi_startproc
 814              	 
 815              	 
 816 0000 80B5     	 push {r7,lr}
 817              	.LCFI33:
 818              	 .cfi_def_cfa_offset 8
 819              	 .cfi_offset 7,-8
 820              	 .cfi_offset 14,-4
 821 0002 82B0     	 sub sp,sp,#8
 822              	.LCFI34:
 823              	 .cfi_def_cfa_offset 16
 824 0004 00AF     	 add r7,sp,#0
 825              	.LCFI35:
 826              	 .cfi_def_cfa_register 7
 827 0006 7860     	 str r0,[r7,#4]
 828 0008 3960     	 str r1,[r7]
 251:../Libraries/XMCLib/src/xmc1_flash.c ****   XMC_FLASH_ProgramVerifyPage(address, data);
 829              	 .loc 2 251 3
 830 000a 3A68     	 ldr r2,[r7]
 831 000c 7B68     	 ldr r3,[r7,#4]
 832 000e 1100     	 movs r1,r2
 833 0010 1800     	 movs r0,r3
 834 0012 FFF7FEFF 	 bl XMC_FLASH_ProgramVerifyPage
 252:../Libraries/XMCLib/src/xmc1_flash.c **** }
 835              	 .loc 2 252 1
 836 0016 C046     	 nop
 837 0018 BD46     	 mov sp,r7
 838 001a 02B0     	 add sp,sp,#8
 839              	 
 840 001c 80BD     	 pop {r7,pc}
 841              	 .cfi_endproc
 842              	.LFE59:
 844              	 .text
 845              	.Letext0:
 846              	 .file 3 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
 847              	 .file 4 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 848              	 .file 5 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/lock.h"
 849              	 .file 6 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h"
 850              	 .file 7 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 851              	 .file 8 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h"
 852              	 .file 9 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
 853              	 .file 10 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 854              	 .file 11 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1000_RomFunctionTable.h"
 855              	 .file 12 "..//Libraries/XMCLib/inc/xmc1_flash.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 xmc1_flash.c
    {standard input}:16     .text.XMC_FLASH_IsBusy:0000000000000000 $t
    {standard input}:23     .text.XMC_FLASH_IsBusy:0000000000000000 XMC_FLASH_IsBusy
    {standard input}:109    .text.XMC_FLASH_GetStatus:0000000000000000 XMC_FLASH_GetStatus
    {standard input}:57     .text.XMC_FLASH_ClearStatus:0000000000000000 $t
    {standard input}:64     .text.XMC_FLASH_ClearStatus:0000000000000000 XMC_FLASH_ClearStatus
    {standard input}:97     .text.XMC_FLASH_ClearStatus:000000000000001c $d
    {standard input}:102    .text.XMC_FLASH_GetStatus:0000000000000000 $t
    {standard input}:135    .text.XMC_FLASH_GetStatus:0000000000000010 $d
    {standard input}:140    .text.XMC_FLASH_EnableEvent:0000000000000000 $t
    {standard input}:147    .text.XMC_FLASH_EnableEvent:0000000000000000 XMC_FLASH_EnableEvent
    {standard input}:186    .text.XMC_FLASH_EnableEvent:0000000000000024 $d
    {standard input}:191    .text.XMC_FLASH_DisableEvent:0000000000000000 $t
    {standard input}:198    .text.XMC_FLASH_DisableEvent:0000000000000000 XMC_FLASH_DisableEvent
    {standard input}:240    .text.XMC_FLASH_DisableEvent:0000000000000028 $d
    {standard input}:245    .text.XMC_FLASH_ErasePage:0000000000000000 $t
    {standard input}:252    .text.XMC_FLASH_ErasePage:0000000000000000 XMC_FLASH_ErasePage
    {standard input}:288    .text.XMC_FLASH_ProgramVerifyPage:0000000000000000 $t
    {standard input}:295    .text.XMC_FLASH_ProgramVerifyPage:0000000000000000 XMC_FLASH_ProgramVerifyPage
    {standard input}:333    .text.XMC_FLASH_WriteBlocks:0000000000000000 $t
    {standard input}:340    .text.XMC_FLASH_WriteBlocks:0000000000000000 XMC_FLASH_WriteBlocks
    {standard input}:479    .text.XMC_FLASH_WriteBlocks:00000000000000bc $d
    {standard input}:484    .text.XMC_FLASH_ErasePages:0000000000000000 $t
    {standard input}:491    .text.XMC_FLASH_ErasePages:0000000000000000 XMC_FLASH_ErasePages
    {standard input}:558    .text.XMC_FLASH_VerifyBlocks:0000000000000000 $t
    {standard input}:565    .text.XMC_FLASH_VerifyBlocks:0000000000000000 XMC_FLASH_VerifyBlocks
    {standard input}:674    .text.XMC_FLASH_VerifyBlocks:0000000000000088 $d
    {standard input}:680    .text.XMC_FLASH_ReadBlocks:0000000000000000 $t
    {standard input}:687    .text.XMC_FLASH_ReadBlocks:0000000000000000 XMC_FLASH_ReadBlocks
    {standard input}:763    .text.XMC_FLASH_EraseSector:0000000000000000 $t
    {standard input}:770    .text.XMC_FLASH_EraseSector:0000000000000000 XMC_FLASH_EraseSector
    {standard input}:803    .text.XMC_FLASH_ProgramPage:0000000000000000 $t
    {standard input}:810    .text.XMC_FLASH_ProgramPage:0000000000000000 XMC_FLASH_ProgramPage

NO UNDEFINED SYMBOLS

   1              	 .cpu cortex-m0
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,0
  10              	 .eabi_attribute 18,4
  11              	 .file "xmc_vadc.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.XMC_VADC_GROUP_ExternalMuxControlInit,"ax",%progbits
  16              	 .align 1
  17              	 .arch armv6s-m
  18              	 .syntax unified
  19              	 .code 16
  20              	 .thumb_func
  21              	 .fpu softvfp
  23              	XMC_VADC_GROUP_ExternalMuxControlInit:
  24              	.LFB82:
  25              	 .file 1 "..//Libraries/XMCLib/inc/xmc_vadc.h"
   1:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
   2:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @file xmc_vadc.h
   3:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @date 2017-08-14
   4:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
   5:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @cond
   6:..//Libraries/XMCLib/inc/xmc_vadc.h ****  **************************************************************************************************
   7:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
   9:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * All rights reserved.                        
  11:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                                             
  12:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * following conditions are met:   
  14:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                                                                              
  15:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * disclaimer.                        
  17:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 
  18:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 
  21:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                                                                              
  24:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                                                                              
  32:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:..//Libraries/XMCLib/inc/xmc_vadc.h ****  **************************************************************************************************
  35:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
  36:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Change History
  37:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * --------------
  38:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
  39:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2015-02-15:
  40:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Initial <br>
  41:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *      
  42:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2015-02-20:
  43:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *   
  45:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2015-04-27:
  46:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
  51:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2015-06-20:
  52:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2015-06-25:
  54:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
  56:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2015-07-28:
  57:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - New APIs Created.
  61:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
  70:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2015-12-01:
  71:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Added:
  72:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - XMC4300 device supported
  73:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
  74:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Fixed:
  75:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
  80:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2015-12-01:
  81:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - New APIs Created.
  82:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
  87:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2016-03-09:
  88:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Optimization of write only registers
  89:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
  90:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2016-03-18:
  91:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *       SHSCFG SFR. 
  93:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
  94:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2016-06-17:
  95:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
  96:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  97:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - New APIs added are:
  98:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  99:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 100:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 101:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 102:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 103:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 104:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 105:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
 106:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2017-02-06:
 107:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Added new functions to remove channels from background request source, XMC_VADC_GLOBAL_Bac
 108:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
 109:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2017-06-24:
 110:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Added new function XMC_VADC_GLOBAL_SHS_SetAnalogReference() for XMC1 family
 111:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
 112:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * 2017-08-14:
 113:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Added XMC_VADC_GLOBAL_DETAILED_RESULT_t
 114:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *       You can cast the return of XMC_VADC_GLOBAL_GetDetailedResult() to a varible of type XMC_VA
 115:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() to update AREF bitfield correctly
 116:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
 117:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @endcond 
 118:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
 119:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 120:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 121:..//Libraries/XMCLib/inc/xmc_vadc.h **** #ifndef XMC_VADC_H
 122:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_H
 123:..//Libraries/XMCLib/inc/xmc_vadc.h ****  
 124:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**************************************************************************************************
 125:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * HEADER FILES
 126:..//Libraries/XMCLib/inc/xmc_vadc.h ****  **************************************************************************************************
 127:..//Libraries/XMCLib/inc/xmc_vadc.h **** #include <xmc_common.h>
 128:..//Libraries/XMCLib/inc/xmc_vadc.h **** #include <xmc_scu.h>
 129:..//Libraries/XMCLib/inc/xmc_vadc.h **** #include <xmc_vadc_map.h>
 130:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 131:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 132:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 133:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @{
 134:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 135:..//Libraries/XMCLib/inc/xmc_vadc.h ****  
 136:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 137:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @addtogroup VADC
 138:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 139:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
 140:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 141:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 142:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * to discrete digital values.
 143:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \if XMC1
 144:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 145:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * converter.
 146:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \endif
 147:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
 148:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 149:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 150:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 151:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
 152:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 153:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 154:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 155:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * which together build separate groups.
 156:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
 157:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \if XMC4
 158:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 159:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \else
 160:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 161:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \endif
 162:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
 163:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 164:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 165:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <UL>
 166:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 167:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 168:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 169:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 170:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     one of its arguments.</LI>
 171:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 172:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 173:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 174:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 175:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * </UL><BR>
 176:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
 177:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <B>GROUP: </B><BR>
 178:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <UL>
 179:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 180:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 181:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 182:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 183:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 184:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 185:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 186:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 187:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     one of its arguments.</LI>
 188:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * </UL><BR>
 189:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @{
 190:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 191:..//Libraries/XMCLib/inc/xmc_vadc.h ****  
 192:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**************************************************************************************************
 193:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * MACROS
 194:..//Libraries/XMCLib/inc/xmc_vadc.h ****  **************************************************************************************************
 195:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 196:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 197:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 198:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 199:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 200:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 201:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     device*/
 202:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 203:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 204:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 205:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 206:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 207:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     operation for a particular device*/
 208:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 209:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 210:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 211:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 212:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 213:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 214:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 215:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 216:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 217:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 218:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 219:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     device*/
 220:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 221:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 222:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 223:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 224:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 225:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     operation for a particular device*/
 226:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 227:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 228:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 229:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 230:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 231:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 232:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (UC_SERIES == XMC45)
 233:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 234:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 235:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 236:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 237:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     device*/
 238:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 239:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 240:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 241:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 242:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 243:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     operation for a particular device*/
 244:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 245:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 246:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 247:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 248:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 249:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 250:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 251:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 252:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 253:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 254:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 255:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     device*/
 256:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 257:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 258:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 259:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 260:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 261:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     operation for a particular device*/
 262:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 263:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 264:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 265:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 266:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 267:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 268:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (UC_SERIES == XMC11)
 269:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 270:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 271:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 272:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 273:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     device*/
 274:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 275:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 276:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 277:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 278:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 279:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     XMC1100 devices */
 280:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 281:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 282:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 283:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     operation for a particular device*/
 284:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 285:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 286:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 287:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 288:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 289:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 290:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 291:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     as triggers and gating signals */
 292:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 293:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 294:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 295:..//Libraries/XMCLib/inc/xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 296:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 297:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**************************************************************************************************
 298:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * ENUMS
 299:..//Libraries/XMCLib/inc/xmc_vadc.h ****  **************************************************************************************************
 300:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 301:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 302:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                              type to VADC type*/
 303:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 304:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 305:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 306:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                              type to VADC Group type*/
 307:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 308:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 309:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 310:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 311:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 312:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 313:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 314:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 315:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 316:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 317:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 318:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 319:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_STATUS_t;
 320:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 321:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 322:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 323:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 324:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  enumeration.
 325:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 326:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_SR
 327:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 328:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 329:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 330:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 331:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 332:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 333:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 334:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 335:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 336:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_SR_t;
 337:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 338:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 339:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 340:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 341:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 342:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 343:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 344:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 345:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 346:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 347:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 348:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 349:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 350:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 351:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 352:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 353:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 354:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 355:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 356:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 357:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 358:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 359:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 360:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 361:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 362:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 363:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 364:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 365:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 366:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 367:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 368:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 369:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 370:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 371:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 372:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 373:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 374:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 375:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 376:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 377:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 378:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 379:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 380:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 381:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 382:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 383:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 384:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 385:..//Libraries/XMCLib/inc/xmc_vadc.h ****   
 386:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 387:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 388:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 389:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 390:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 391:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 392:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 393:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 394:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 395:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 396:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 397:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 398:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 399:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 400:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 401:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 402:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 403:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 404:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 405:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 406:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 407:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 408:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 409:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 410:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 411:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 412:..//Libraries/XMCLib/inc/xmc_vadc.h ****   
 413:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 414:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 415:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 416:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 417:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 418:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 419:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 420:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 421:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 422:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 423:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 424:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 425:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 426:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 427:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 428:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 429:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 430:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 431:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_DMM
 432:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 433:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 434:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 435:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 436:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 437:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_DMM_t;
 438:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 439:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 440:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 441:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 442:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 443:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 444:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 445:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 446:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 447:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 448:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 449:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 450:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 451:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 452:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  this enumeration.
 453:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 454:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 455:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 456:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 457:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 458:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 459:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 460:..//Libraries/XMCLib/inc/xmc_vadc.h ****  
 461:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 462:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 463:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 464:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 465:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 466:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 467:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 468:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 469:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 470:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 471:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 472:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 473:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 474:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 475:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 476:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 477:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                          awaiting conversion */
 478:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 479:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                          previous set */
 480:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 481:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 482:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 483:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 484:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 485:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 486:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 487:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 488:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 489:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 490:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 491:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 492:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 493:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 494:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 495:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 496:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 497:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 498:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 499:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 500:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 501:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 502:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 503:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 504:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 505:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 506:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 507:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 508:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 509:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 510:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 511:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 512:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 513:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 514:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 515:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 516:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 517:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 518:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 519:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 520:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 521:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 522:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 523:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 524:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 525:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 526:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 527:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 528:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 529:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 530:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 531:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 532:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 533:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 534:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 535:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 536:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 537:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 538:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 539:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 540:..//Libraries/XMCLib/inc/xmc_vadc.h ****  
 541:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 542:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 543:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * enumeration.
 544:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 545:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 546:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 547:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 548:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 549:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 550:..//Libraries/XMCLib/inc/xmc_vadc.h ****  
 551:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 552:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 553:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * enumeration.
 554:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 555:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 556:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 557:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 558:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 559:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 560:..//Libraries/XMCLib/inc/xmc_vadc.h ****  
 561:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 562:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 563:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 564:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 565:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 566:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 567:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 568:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 569:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 570:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 571:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 572:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 573:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 574:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 575:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 576:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 577:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 578:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 579:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 580:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 581:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 582:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 583:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  enumeration.
 584:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 585:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 586:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 587:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 588:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 589:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 590:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 591:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 592:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 593:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 594:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 595:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 596:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 597:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 598:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                           request sources */
 599:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 600:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 601:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 602:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 603:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 604:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 605:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 606:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 607:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 608:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 609:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 610:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 611:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 612:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 613:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 614:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 615:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 616:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 617:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 618:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 619:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 620:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 621:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 622:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 623:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 624:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 625:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 626:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 627:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 628:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 629:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 630:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 631:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 632:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 633:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 634:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 635:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 636:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 637:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 638:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 639:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 640:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 641:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 642:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 643:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 644:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 645:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 646:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 647:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 648:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 649:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 650:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 651:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 652:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 653:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 654:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 655:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 656:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 657:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 658:..//Libraries/XMCLib/inc/xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 659:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 660:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 661:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 662:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 663:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 664:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 665:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 666:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 667:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 668:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 669:..//Libraries/XMCLib/inc/xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 670:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 671:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 672:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 673:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 674:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 675:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 676:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 677:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 678:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 679:..//Libraries/XMCLib/inc/xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 680:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 681:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 682:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 683:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 684:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 685:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 686:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 687:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 688:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 689:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 690:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 691:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 692:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 693:..//Libraries/XMCLib/inc/xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 694:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 695:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 696:..//Libraries/XMCLib/inc/xmc_vadc.h **** * Defines channel alias.
 697:..//Libraries/XMCLib/inc/xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 698:..//Libraries/XMCLib/inc/xmc_vadc.h **** */
 699:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 700:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 701:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 702:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 703:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 704:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 705:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 706:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 707:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 708:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 709:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 710:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 711:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 712:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 713:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 714:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 715:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
 716:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 717:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_AREF
 718:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 719:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_EXTERNAL_VDD_UPPER_RANGE = 0 << SHS_SHSCFG_AREF_Pos, /**< External refer
 720:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_UPPER_RANGE = 2 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 721:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_LOWER_RANGE = 3 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 722:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_AREF_t;
 723:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 724:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 725:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 726:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the gain calibration selection.
 727:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 728:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 729:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 730:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 731:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 732:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 733:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 734:..//Libraries/XMCLib/inc/xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 735:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 736:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 737:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 738:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the Delta sigma loop.
 739:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 740:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 741:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 742:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 743:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 744:..//Libraries/XMCLib/inc/xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 745:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 746:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 747:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 748:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 749:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 750:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 751:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 752:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 753:..//Libraries/XMCLib/inc/xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 754:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 755:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 756:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 757:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 758:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 759:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 760:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 761:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 762:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 763:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 764:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 765:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 766:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 767:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 768:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 769:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 770:..//Libraries/XMCLib/inc/xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 771:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 772:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 773:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 774:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 775:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Defines the ready signal selection
 776:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 777:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 778:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 779:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 780:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 781:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 782:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 783:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 784:..//Libraries/XMCLib/inc/xmc_vadc.h **** }XMC_VADC_SYNCTR_EVAL_t;
 785:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 786:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**************************************************************************************************
 787:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * DATA STRUCTURES
 788:..//Libraries/XMCLib/inc/xmc_vadc.h ****  **************************************************************************************************
 789:..//Libraries/XMCLib/inc/xmc_vadc.h **** /*Anonymous structure/union guard start*/
 790:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if defined(__CC_ARM)
 791:..//Libraries/XMCLib/inc/xmc_vadc.h ****   #pragma push
 792:..//Libraries/XMCLib/inc/xmc_vadc.h ****   #pragma anon_unions
 793:..//Libraries/XMCLib/inc/xmc_vadc.h **** #elif defined(__TASKING__)
 794:..//Libraries/XMCLib/inc/xmc_vadc.h ****   #pragma warning 586
 795:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 796:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 797:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 798:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 799:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 800:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 801:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 802:..//Libraries/XMCLib/inc/xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 803:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                          group. This field determines how scan request source would
 804:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 805:..//Libraries/XMCLib/inc/xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 806:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 807:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 808:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
 809:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
 810:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
 811:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
 812:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 813:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 814:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 815:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     from each channel configuration, configure this
 816:..//Libraries/XMCLib/inc/xmc_vadc.h **** #else
 817:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 4;
 818:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 819:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 4;
 820:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 821:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 822:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 1;
 823:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 824:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 825:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 1;
 826:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 827:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 828:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 8;
 829:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 830:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       activated or not.*/
 831:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 3;
 832:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
 833:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t asctrl;
 834:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
 835:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
 836:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
 837:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
 838:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
 839:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                    : 2;
 840:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 841:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 842:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 843:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 844:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 845:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                    : 26;
 846:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
 847:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t asmr;
 848:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
 849:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 850:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 851:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 852:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 853:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                                  structure for background Request S
 854:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 855:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 856:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 857:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 858:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 859:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 860:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
 861:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
 862:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
 863:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
 864:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 865:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 866:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                            : 2;
 867:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 868:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 869:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 870:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 871:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 872:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 873:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 874:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 875:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 876:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                            : 4;
 877:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 878:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 879:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 880:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 881:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                            : 6;
 882:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 883:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 884:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 885:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
 886:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t chctr;
 887:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
 888:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
 889:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
 890:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
 891:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
 892:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                           : 8;
 893:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 894:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 895:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 896:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 897:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 898:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 899:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 900:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 901:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 902:..//Libraries/XMCLib/inc/xmc_vadc.h **** #else
 903:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                           : 4;
 904:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 905:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                           : 4;
 906:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 907:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 908:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 909:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 910:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 911:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 912:..//Libraries/XMCLib/inc/xmc_vadc.h **** #else
 913:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 914:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 915:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 916:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 917:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 918:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                           : 12;
 919:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
 920:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t bfl;
 921:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
 922:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 923:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
 924:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
 925:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
 926:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
 927:..//Libraries/XMCLib/inc/xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 928:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 929:..//Libraries/XMCLib/inc/xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 930:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 931:..//Libraries/XMCLib/inc/xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 932:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 933:..//Libraries/XMCLib/inc/xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 934:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 935:..//Libraries/XMCLib/inc/xmc_vadc.h ****          uint32_t                           : 16;
 936:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
 937:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t bflc;
 938:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
 939:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 940:..//Libraries/XMCLib/inc/xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 941:..//Libraries/XMCLib/inc/xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 942:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 943:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 944:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 945:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 946:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 947:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 948:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 949:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 950:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 951:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
 952:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
 953:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
 954:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
 955:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 956:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 957:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 958:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 959:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                    : 24;
 960:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 961:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
 962:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t qinr0;
 963:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
 964:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 965:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
 966:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
 967:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 968:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
 969:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 970:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 971:..//Libraries/XMCLib/inc/xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 972:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                          group. This field determines how queue request source woul
 973:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 974:..//Libraries/XMCLib/inc/xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 975:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
 976:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
 977:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
 978:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
 979:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 980:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 981:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 982:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                     from each channel configuration, configure this
 983:..//Libraries/XMCLib/inc/xmc_vadc.h **** #else
 984:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 4;
 985:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
 986:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 4;
 987:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 988:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 989:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 1;
 990:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 991:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 992:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 1;
 993:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 994:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 995:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 8;
 996:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
 997:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 3;
 998:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
 999:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t qctrl0;
1000:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1001:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
1002:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1003:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
1004:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
1005:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                   : 2;
1006:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
1007:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                   : 29;
1008:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
1009:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t qmr0;
1010:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1011:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
1012:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1013:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1014:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1015:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
1016:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  conversion Mode.
1017:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1018:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
1019:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1020:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
1021:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1022:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
1023:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
1024:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1025:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1026:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                                 : 3;
1027:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1028:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1029:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                                 : 5;
1030:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1031:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1032:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1033:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                                 : 3;
1034:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1035:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1036:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                                 : 5;
1037:..//Libraries/XMCLib/inc/xmc_vadc.h **** #else
1038:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                                 : 16;
1039:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1040:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
1041:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t globiclass;
1042:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1043:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1044:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1045:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1046:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1047:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1048:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1049:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1050:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1051:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
1052:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1053:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
1054:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
1055:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1056:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
1057:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                          : 2;
1058:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
1059:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1060:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                          : 5;
1061:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                          : 17;
1062:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
1063:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t globcfg;
1064:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1065:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1066:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1067:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1068:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1069:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1070:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1071:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1072:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1073:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1074:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
1075:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1076:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
1077:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
1078:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1079:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t            : 4;
1080:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1081:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t            : 4;
1082:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
1083:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t globbound;
1084:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1085:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1086:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1087:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1088:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1089:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1090:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
1091:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1092:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
1093:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
1094:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 16;
1095:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1096:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 4;
1097:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1098:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       result register until the previous value is r
1099:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 6;
1100:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1101:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
1102:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t globrcr;
1103:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1104:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
1105:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1106:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
1107:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
1108:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1109:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                             : 2;
1110:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1111:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                             : 28;
1112:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
1113:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t clc;
1114:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1115:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1116:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1117:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1118:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1119:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1120:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  conversion Mode.
1121:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1122:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1123:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1124:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
1125:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1126:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
1127:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
1128:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1129:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1130:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                                 : 3;
1131:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1132:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1133:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                                 : 5;
1134:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1135:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1136:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                                 : 3;
1137:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1138:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1139:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                                 : 5;
1140:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
1141:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t g_iclass0;
1142:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1143:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1144:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1145:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1146:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1147:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  EMUX related configuration structure.
1148:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1149:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1150:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1151:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
1152:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1153:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
1154:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
1155:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1156:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                         generate a control signal (needed to select
1157:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                         the analog multiplexer)*/
1158:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                           : 13;
1159:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1160:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1161:..//Libraries/XMCLib/inc/xmc_vadc.h **** #else
1162:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1163:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                           : 5;
1164:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1165:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1166:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1167:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1168:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1169:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1170:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1171:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1172:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                           : 1;
1173:..//Libraries/XMCLib/inc/xmc_vadc.h **** #else
1174:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                           : 2;
1175:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1176:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
1177:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t g_emuxctr;
1178:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1179:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1180:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1181:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1182:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1183:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *   Group Configuration Data Structures
1184:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1185:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1186:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1187:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1188:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1189:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1190:..//Libraries/XMCLib/inc/xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1191:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
1192:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1193:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
1194:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
1195:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1196:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t            : 4;
1197:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1198:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t            : 4;
1199:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
1200:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t g_bound;
1201:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1202:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
1203:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1204:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
1205:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
1206:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                          : 4;
1207:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1208:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                          : 1;
1209:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1210:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1211:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                          : 24;
1212:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
1213:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t g_arbcfg;
1214:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1215:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1216:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1217:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1218:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1219:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1220:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1221:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1222:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1223:..//Libraries/XMCLib/inc/xmc_vadc.h ****     union
1224:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1225:..//Libraries/XMCLib/inc/xmc_vadc.h ****        struct
1226:..//Libraries/XMCLib/inc/xmc_vadc.h ****        {
1227:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 16;
1228:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1229:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1230:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       For normal operation select
1231:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1232:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1233:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 2;
1234:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1235:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1236:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t                         : 4;
1237:..//Libraries/XMCLib/inc/xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1238:..//Libraries/XMCLib/inc/xmc_vadc.h ****        };
1239:..//Libraries/XMCLib/inc/xmc_vadc.h ****        uint32_t g_rcr;
1240:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1241:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1242:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1243:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1244:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1245:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1246:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1247:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1248:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1249:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1250:..//Libraries/XMCLib/inc/xmc_vadc.h ****   union
1251:..//Libraries/XMCLib/inc/xmc_vadc.h ****   {
1252:..//Libraries/XMCLib/inc/xmc_vadc.h ****     struct
1253:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1254:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1255:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1256:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1257:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1258:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1259:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1260:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1261:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1262:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1263:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1264:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1265:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1266:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1267:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1268:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1269:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1270:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1271:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1272:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1273:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1274:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1275:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1276:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1277:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1278:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1279:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1280:..//Libraries/XMCLib/inc/xmc_vadc.h ****     uint32_t stepcfg;
1281:..//Libraries/XMCLib/inc/xmc_vadc.h ****   };
1282:..//Libraries/XMCLib/inc/xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1283:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1284:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1285:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Sample and hold Initialization structure
1286:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1287:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1288:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1289:..//Libraries/XMCLib/inc/xmc_vadc.h ****   union
1290:..//Libraries/XMCLib/inc/xmc_vadc.h ****   {
1291:..//Libraries/XMCLib/inc/xmc_vadc.h ****     struct
1292:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1293:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1294:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1295:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t                          :6;
1296:..//Libraries/XMCLib/inc/xmc_vadc.h **** #else
1297:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t                          :10;
1298:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif      
1299:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1300:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t                          :20;
1301:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1302:..//Libraries/XMCLib/inc/xmc_vadc.h ****     uint32_t shscfg;
1303:..//Libraries/XMCLib/inc/xmc_vadc.h ****   };
1304:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1305:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1306:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1307:..//Libraries/XMCLib/inc/xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1308:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1309:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1310:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1311:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1312:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Detailed global result structure
1313:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1314:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_DETAILED_RESULT
1315:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1316:..//Libraries/XMCLib/inc/xmc_vadc.h ****   union
1317:..//Libraries/XMCLib/inc/xmc_vadc.h ****   {
1318:..//Libraries/XMCLib/inc/xmc_vadc.h ****     struct
1319:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1320:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1321:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t group_number             :4;   /**< Indicates the group to which the channel_number 
1322:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1323:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1324:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1325:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1326:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1327:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1328:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1329:..//Libraries/XMCLib/inc/xmc_vadc.h ****     uint32_t res;
1330:..//Libraries/XMCLib/inc/xmc_vadc.h ****   };
1331:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_GLOBAL_DETAILED_RESULT_t;
1332:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1333:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1334:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Detailed channel result structure
1335:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1336:..//Libraries/XMCLib/inc/xmc_vadc.h **** typedef struct XMC_VADC_DETAILED_RESULT
1337:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1338:..//Libraries/XMCLib/inc/xmc_vadc.h ****   union
1339:..//Libraries/XMCLib/inc/xmc_vadc.h ****   {
1340:..//Libraries/XMCLib/inc/xmc_vadc.h ****     struct
1341:..//Libraries/XMCLib/inc/xmc_vadc.h ****     {
1342:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1343:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1344:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1345:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1346:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1347:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1348:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1349:..//Libraries/XMCLib/inc/xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1350:..//Libraries/XMCLib/inc/xmc_vadc.h ****     };
1351:..//Libraries/XMCLib/inc/xmc_vadc.h ****     uint32_t res;
1352:..//Libraries/XMCLib/inc/xmc_vadc.h ****   };
1353:..//Libraries/XMCLib/inc/xmc_vadc.h **** } XMC_VADC_DETAILED_RESULT_t;
1354:..//Libraries/XMCLib/inc/xmc_vadc.h ****  
1355:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1356:..//Libraries/XMCLib/inc/xmc_vadc.h **** /*Anonymous structure/union guard end*/
1357:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if defined(__CC_ARM)
1358:..//Libraries/XMCLib/inc/xmc_vadc.h ****   #pragma pop
1359:..//Libraries/XMCLib/inc/xmc_vadc.h **** #elif defined(__TASKING__)
1360:..//Libraries/XMCLib/inc/xmc_vadc.h ****   #pragma warning restore
1361:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1362:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**************************************************************************************************
1363:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * static inline functions
1364:..//Libraries/XMCLib/inc/xmc_vadc.h ****  **************************************************************************************************
1365:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1366:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1367:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1368:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1369:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1370:..//Libraries/XMCLib/inc/xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1371:..//Libraries/XMCLib/inc/xmc_vadc.h **** #else
1372:..//Libraries/XMCLib/inc/xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1373:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1374:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
1375:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1376:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**************************************************************************************************
1377:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * API Prototypes
1378:..//Libraries/XMCLib/inc/xmc_vadc.h ****  **************************************************************************************************
1379:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1380:..//Libraries/XMCLib/inc/xmc_vadc.h **** #ifdef __cplusplus
1381:..//Libraries/XMCLib/inc/xmc_vadc.h **** extern "C" {
1382:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1383:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1384:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1385:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param None
1386:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1387:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1388:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1389:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1390:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1391:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1392:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1393:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1394:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1395:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1396:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1397:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1398:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1399:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1400:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1401:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1402:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param None
1403:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1404:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1405:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1406:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1407:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1408:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1409:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1410:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1411:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1412:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1413:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1414:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1415:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1416:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1417:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1418:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1419:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1420:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param config Pointer to initialization data structure
1421:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1422:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1423:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1424:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1425:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1426:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1427:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1428:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1429:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the configurations later in the program.
1430:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1431:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1432:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1433:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1434:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1435:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1436:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1437:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1438:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1439:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1440:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1441:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1442:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1443:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1444:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * register to enable.
1445:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1446:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1447:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1448:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1449:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1450:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1451:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1452:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1453:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1454:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
1455:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1456:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1457:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1458:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1459:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1460:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1461:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1462:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1463:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1464:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1465:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1466:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1467:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1468:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1469:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1470:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1471:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1472:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1473:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1474:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
1475:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1476:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1477:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1478:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1479:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1480:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1481:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1482:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1483:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1484:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1485:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1486:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1487:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1488:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1489:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1490:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1491:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1492:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1493:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
1494:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1495:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1496:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1497:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1498:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1499:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1500:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1501:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1502:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1503:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1504:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1505:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1506:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1507:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1508:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1509:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1510:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1511:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1512:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1513:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
1514:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1515:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1516:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1517:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1518:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1519:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1520:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1521:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1522:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1523:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1524:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1525:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1526:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1527:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1528:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1529:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1530:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1531:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1532:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1533:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1534:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1535:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1536:..//Libraries/XMCLib/inc/xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1537:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1538:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
1539:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1540:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1541:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1542:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1543:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1544:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param config  Conversion class parameter structure
1545:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1546:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1547:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                Range: [0x0, 0x1]
1548:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1549:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1550:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1551:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1552:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1553:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1554:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1555:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1556:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1557:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1558:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1559:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1560:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1561:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1562:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1563:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1564:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1565:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1566:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1567:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1568:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1569:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1570:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1571:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1572:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Initializes global result register.<BR>\n
1573:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1574:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1575:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1576:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1577:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1578:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1579:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1580:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1581:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1582:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1583:..//Libraries/XMCLib/inc/xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1584:..//Libraries/XMCLib/inc/xmc_vadc.h ****  {
1585:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1586:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1587:..//Libraries/XMCLib/inc/xmc_vadc.h ****   /* Configure GLOBRCR*/
1588:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1589:..//Libraries/XMCLib/inc/xmc_vadc.h ****  }
1590:..//Libraries/XMCLib/inc/xmc_vadc.h ****  
1591:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1592:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1593:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1594:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1595:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1596:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1597:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1598:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1599:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1600:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1601:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1602:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1603:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1604:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1605:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1606:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1607:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1608:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1609:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1610:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1611:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1612:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1613:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1614:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1615:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1616:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1617:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1618:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1619:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1620:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * calibration feature at runtime.
1621:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1622:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1623:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1624:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1625:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1626:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1627:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1628:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1629:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1630:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
1631:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1632:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1633:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1634:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1635:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1636:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1637:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1638:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1639:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1640:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1641:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1642:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1643:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1644:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1645:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1646:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1647:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1648:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1649:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1650:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1651:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1652:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1653:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1654:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1655:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1656:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1657:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1658:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1659:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
1660:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1661:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1662:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1663:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1664:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1665:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1666:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1667:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1668:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1669:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1670:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1671:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1672:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * can disable the calibration feature at runtime.
1673:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1674:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1675:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1676:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1677:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1678:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1679:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1680:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1681:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1682:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1683:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
1684:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1685:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1686:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1687:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1688:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1689:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1690:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1691:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1692:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1693:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1694:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1695:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1696:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1697:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1698:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1699:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1700:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1701:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1702:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1703:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1704:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1705:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1706:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1707:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1708:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1709:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1710:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1711:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1712:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1713:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1714:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1715:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1716:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1717:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1718:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1719:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * capability to a compare value.
1720:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1721:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1722:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1723:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1724:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1725:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1726:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1727:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                            const uint16_t boundary_value); 
1728:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1729:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1730:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1731:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1732:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1733:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1734:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1735:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1736:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1737:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1738:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1739:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1740:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1741:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1742:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1743:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \b emuxif.
1744:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1745:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1746:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1747:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1748:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1749:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1750:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1751:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1752:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1753:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1754:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1755:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1756:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1757:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1758:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1759:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1760:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1761:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1762:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @note You can cast the return to a varible of type XMC_VADC_GLOBAL_DETAILED_RESULT_t to easily a
1763:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1764:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1765:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1766:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1767:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1768:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1769:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1770:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1771:..//Libraries/XMCLib/inc/xmc_vadc.h ****  return(global_ptr->GLOBRES);
1772:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
1773:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1774:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1775:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1776:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1777:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1778:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1779:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1780:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1781:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1782:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1783:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1784:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1785:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1786:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1787:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1788:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1789:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1790:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1791:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1792:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1793:..//Libraries/XMCLib/inc/xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1794:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
1795:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1796:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1797:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1798:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1799:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1800:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1801:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1802:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1803:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1804:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1805:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1806:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1807:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1808:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1809:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1810:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1811:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1812:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1813:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1814:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1815:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1816:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1817:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1818:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1819:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1820:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1821:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1822:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1823:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1824:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1825:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1826:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1827:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1828:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1829:..//Libraries/XMCLib/inc/xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1830:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1831:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1832:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1833:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1834:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1835:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1836:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1837:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1838:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1839:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1840:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1841:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \a event_type.
1842:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1843:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1844:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1845:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1846:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1847:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1848:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1849:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1850:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1851:..//Libraries/XMCLib/inc/xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1852:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1853:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1854:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
1855:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1856:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1857:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1858:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1859:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1860:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1861:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1862:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1863:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1864:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1865:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1866:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1867:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1868:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1869:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
1870:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1871:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1872:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
1873:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1874:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1875:..//Libraries/XMCLib/inc/xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1876:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1877:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1878:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
1879:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1880:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1881:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1882:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1883:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1884:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1885:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1886:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1887:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1888:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1889:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1890:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1891:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1892:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1893:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1894:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1895:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1896:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1897:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1898:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1899:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1900:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1901:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1902:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1903:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1904:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1905:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1906:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * corresponding \a sr line.
1907:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1908:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1909:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1910:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1911:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1912:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1913:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1914:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1915:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1916:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1917:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1918:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1919:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1920:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1921:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1922:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1923:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1924:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1925:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1926:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None.
1927:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1928:..//Libraries/XMCLib/inc/xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1929:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1930:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
1931:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1932:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param aref    Analog reference used for conversions. Refer @ref XMC_VADC_GLOBAL_SHS_AREF_t enum
1933:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1934:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
1935:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1936:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
1937:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
1938:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
1939:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1940:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None.
1941:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
1942:..//Libraries/XMCLib/inc/xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1943:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                             const XMC_VADC_GLOBAL_SHS_AREF_t aref)
1944:..//Libraries/XMCLib/inc/xmc_vadc.h ****  {
1945:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1946:..//Libraries/XMCLib/inc/xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1947:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1948:..//Libraries/XMCLib/inc/xmc_vadc.h ****   shs_ptr->SHSCFG |=  (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref | SHS_SHS
1949:..//Libraries/XMCLib/inc/xmc_vadc.h ****  }
1950:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1951:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1952:..//Libraries/XMCLib/inc/xmc_vadc.h ****  /**
1953:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1954:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1955:..//Libraries/XMCLib/inc/xmc_vadc.h ****   *
1956:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * @return None
1957:..//Libraries/XMCLib/inc/xmc_vadc.h ****   *
1958:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * \par<b>Description:</b><br>
1959:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1960:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1961:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * The stepper sequence is configured using this API.
1962:..//Libraries/XMCLib/inc/xmc_vadc.h ****   *
1963:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1964:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * None.
1965:..//Libraries/XMCLib/inc/xmc_vadc.h ****   */
1966:..//Libraries/XMCLib/inc/xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1967:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1968:..//Libraries/XMCLib/inc/xmc_vadc.h ****  {
1969:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1970:..//Libraries/XMCLib/inc/xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1971:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1972:..//Libraries/XMCLib/inc/xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1973:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1974:..//Libraries/XMCLib/inc/xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1975:..//Libraries/XMCLib/inc/xmc_vadc.h ****  }
1976:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
1977:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1978:..//Libraries/XMCLib/inc/xmc_vadc.h ****  /**
1979:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1980:..//Libraries/XMCLib/inc/xmc_vadc.h ****   *
1981:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1982:..//Libraries/XMCLib/inc/xmc_vadc.h ****   *              returns false if the analog converter is powered down
1983:..//Libraries/XMCLib/inc/xmc_vadc.h ****   *
1984:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * \par<b>Description:</b><br>
1985:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * Returns the converter status.<BR>\n
1986:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1987:..//Libraries/XMCLib/inc/xmc_vadc.h ****   *
1988:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1989:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * None.
1990:..//Libraries/XMCLib/inc/xmc_vadc.h ****   */
1991:..//Libraries/XMCLib/inc/xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1992:..//Libraries/XMCLib/inc/xmc_vadc.h ****  {
1993:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1994:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1995:..//Libraries/XMCLib/inc/xmc_vadc.h ****   return((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
1996:..//Libraries/XMCLib/inc/xmc_vadc.h ****  }
1997:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
1998:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1999:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2000:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2001:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2002:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2003:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2004:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2005:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2006:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2007:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2008:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
2009:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2010:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2011:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2012:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None.
2013:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2014:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
2015:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2016:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2017:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2018:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
2019:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2020:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2021:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2022:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2023:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2024:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
2025:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2026:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2027:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2028:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None.
2029:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2030:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
2031:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2032:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2033:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2034:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2035:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
2036:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
2037:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2038:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2039:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2040:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2041:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
2042:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2043:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
2044:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
2045:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2046:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2047:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None.
2048:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2049:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2050:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
2051:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                             uint8_t sst_value);
2052:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2053:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
2054:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2055:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2056:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
2057:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
2058:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2059:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2060:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2061:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
2062:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
2063:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * of the Sample and hold converter.
2064:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2065:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2066:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None.
2067:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2068:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
2069:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2070:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
2071:..//Libraries/XMCLib/inc/xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2072:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
2073:..//Libraries/XMCLib/inc/xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
2074:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2075:..//Libraries/XMCLib/inc/xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
2076:..//Libraries/XMCLib/inc/xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
2077:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2078:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2079:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2080:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2081:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  gain_value gain value possible
2082:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
2083:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2084:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
2085:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2086:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2087:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2088:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
2089:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * API would set the gain factor for a selected channel.
2090:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2091:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2092:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None.
2093:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2094:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2095:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                        uint8_t gain_value,
2096:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
2097:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                        uint8_t ch_num);
2098:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2099:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2100:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2101:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2102:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  max_calibration_time calibration time
2103:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
2104:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2105:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2106:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2107:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
2108:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
2109:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
2110:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2111:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2112:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2113:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None.
2114:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2115:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2116:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                        uint32_t max_calibration_time)
2117:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2118:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2119:..//Libraries/XMCLib/inc/xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2120:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2121:..//Libraries/XMCLib/inc/xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2122:..//Libraries/XMCLib/inc/xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2123:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2124:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2125:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2126:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2127:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2128:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2129:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2130:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2131:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2132:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2133:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2134:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2135:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2136:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2137:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2138:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2139:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2140:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2141:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2142:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2143:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2144:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2145:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2146:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2147:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2148:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2149:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2150:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2151:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2152:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2153:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2154:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2155:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2156:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2157:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2158:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2159:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2160:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2161:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2162:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2163:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2164:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2165:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2166:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2167:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2168:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2169:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2170:..//Libraries/XMCLib/inc/xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2171:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2172:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2173:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2174:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2175:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2176:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2177:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2178:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2179:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2180:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2181:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2182:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2183:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2184:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2185:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2186:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2187:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2188:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2189:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2190:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2191:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2192:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
2193:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2194:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2195:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2196:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2197:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2198:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2199:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2200:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2201:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2202:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2203:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2204:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2205:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2206:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2207:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2208:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2209:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2210:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2211:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2212:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2213:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                            uint8_t ch_num);
2214:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2215:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2216:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2217:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2218:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2219:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2220:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2221:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2222:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2223:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2224:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2225:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2226:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2227:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2228:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2229:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2230:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2231:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2232:..//Libraries/XMCLib/inc/xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2233:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2234:..//Libraries/XMCLib/inc/xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2235:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2236:..//Libraries/XMCLib/inc/xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2237:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2238:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2239:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2240:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2241:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2242:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2243:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2244:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2245:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2246:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2247:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2248:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2249:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2250:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2251:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2252:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2253:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2254:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2255:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2256:..//Libraries/XMCLib/inc/xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2257:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2258:..//Libraries/XMCLib/inc/xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2259:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2260:..//Libraries/XMCLib/inc/xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2261:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2262:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2263:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2264:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
2265:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2266:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2267:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2268:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2269:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2270:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2271:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2272:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2273:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2274:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2275:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2276:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2277:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2278:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  program.
2279:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2280:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2281:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2282:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2283:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2284:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2285:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2286:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2287:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2288:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2289:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2290:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2291:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2292:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2293:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2294:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                Range[0x0, 0x1]
2295:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2296:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2297:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2298:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2299:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2300:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2301:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2302:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2303:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2304:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2305:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2306:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2307:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2308:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2309:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2310:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2311:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2312:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2313:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2314:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param master_grp The master group number<BR>
2315:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2316:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2317:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2318:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2319:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2320:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2321:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2322:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2323:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2324:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2325:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2326:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2327:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2328:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2329:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2330:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2331:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2332:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2333:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2334:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2335:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2336:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2337:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2338:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param power_mode  Desired power mode
2339:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2340:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2341:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2342:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2343:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2344:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * converter must be turned on.
2345:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2346:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2347:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
2348:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2349:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2350:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2351:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2352:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2353:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2354:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2355:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2356:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2357:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2358:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2359:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2360:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2361:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2362:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2363:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2364:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2365:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
2366:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2367:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2368:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2369:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2370:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2371:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2372:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2373:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2374:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2375:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2376:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2377:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2378:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2379:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2380:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2381:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2382:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2383:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2384:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2385:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2386:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2387:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2388:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2389:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2390:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2391:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2392:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2393:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2394:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2395:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2396:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2397:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2398:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2399:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2400:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2401:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2402:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * in these channels.
2403:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2404:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2405:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2406:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2407:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2408:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2409:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2410:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2411:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group waiting for ready signal
2412:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param eval_waiting_group  The VADC Group which expects a ready signal to start it's conversion.
2413:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param eval_origin_group  The VADC Group from which the eval_waiting_group will expect a ready s
2414:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2415:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2416:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2417:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Sets the ready signal in the eval_waiting_group .<BR>\n
2418:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * For Synchronized conversion all the slaves participating need to configure the ready signal.
2419:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A slave group will also need to configure the ready signals coming from the other slave groups.
2420:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the Sync.slave's EVAL Bits (GxSYNCTR.EVALy).
2421:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2422:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2423:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2424:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2425:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
2426:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                             uint32_t eval_waiting_group,
2427:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                             uint32_t eval_origin_group);
2428:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2429:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2430:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2431:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2432:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2433:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *         uint32_t EVAL bits for the group
2434:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2435:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2436:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Get the Eval bits of the group.<BR>\n
2437:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2438:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would return the Sync EVAL Bits (GxSYNCTR.EVALy) which can be used to set in 
2439:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2440:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2441:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2442:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2443:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr)
2444:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2445:..//Libraries/XMCLib/inc/xmc_vadc.h ****   uint32_t eval_mask;
2446:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2447:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2448:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2449:..//Libraries/XMCLib/inc/xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2450:..//Libraries/XMCLib/inc/xmc_vadc.h **** #else
2451:..//Libraries/XMCLib/inc/xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2452:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
2453:..//Libraries/XMCLib/inc/xmc_vadc.h ****   return( group_ptr->SYNCTR & eval_mask);
2454:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2455:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2456:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2457:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2458:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param eval_mask  mask to configure the eval bits
2459:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Use XMC_VADC_SYNCTR_EVAL_t to create the mask.
2460:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2461:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2462:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2463:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Set the Eval bits of the group.<BR>\n
2464:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2465:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the Sync EVAL Bits (GxSYNCTR.EVALy).
2466:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2467:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2468:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2469:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2470:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_SetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr, uint32_t 
2471:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2472:..//Libraries/XMCLib/inc/xmc_vadc.h ****   uint32_t eval_mask;
2473:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2474:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2475:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2476:..//Libraries/XMCLib/inc/xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2477:..//Libraries/XMCLib/inc/xmc_vadc.h **** #else
2478:..//Libraries/XMCLib/inc/xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2479:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
2480:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->SYNCTR &= ~(eval_mask);
2481:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->SYNCTR |= mask;
2482:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2483:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2484:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2485:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2486:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2487:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2488:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2489:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2490:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2491:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2492:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2493:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2494:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2495:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2496:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * of the slaves.
2497:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2498:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2499:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
2500:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2501:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2502:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2503:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2504:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2505:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2506:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2507:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2508:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2509:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2510:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2511:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2512:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2513:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2514:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
2515:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2516:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2517:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2518:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2519:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2520:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2521:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2522:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2523:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2524:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2525:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2526:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * sampling + converting.
2527:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2528:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2529:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
2530:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2531:..//Libraries/XMCLib/inc/xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2532:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2533:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2534:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2535:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2536:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2537:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2538:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2539:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2540:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2541:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2542:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2543:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2544:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2545:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2546:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2547:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2548:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2549:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2550:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2551:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
2552:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2553:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2554:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2555:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                   const uint32_t boundary0, 
2556:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                   const uint32_t boundary1);
2557:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2558:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2559:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2560:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2561:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2562:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2563:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2564:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2565:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2566:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2567:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2568:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * capability to a compare value.
2569:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2570:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2571:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None.
2572:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2573:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2574:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2575:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                           const uint16_t boundary_value); 
2576:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2577:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2578:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2579:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2580:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2581:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2582:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2583:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2584:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2585:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2586:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2587:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2588:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2589:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2590:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
2591:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2592:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2593:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                           const uint32_t sr_num, 
2594:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2595:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2596:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2597:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2598:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2599:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2600:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2601:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2602:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2603:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2604:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2605:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2606:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2607:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2608:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2609:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None
2610:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2611:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2612:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2613:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
  26              	 .loc 1 2613 1
  27              	 .cfi_startproc
  28              	 
  29              	 
  30 0000 80B5     	 push {r7,lr}
  31              	.LCFI0:
  32              	 .cfi_def_cfa_offset 8
  33              	 .cfi_offset 7,-8
  34              	 .cfi_offset 14,-4
  35 0002 84B0     	 sub sp,sp,#16
  36              	.LCFI1:
  37              	 .cfi_def_cfa_offset 24
  38 0004 00AF     	 add r7,sp,#0
  39              	.LCFI2:
  40              	 .cfi_def_cfa_register 7
  41 0006 7860     	 str r0,[r7,#4]
  42 0008 3960     	 str r1,[r7]
2614:..//Libraries/XMCLib/inc/xmc_vadc.h ****   uint32_t   emux_config;
2615:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2616:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2617:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2618:..//Libraries/XMCLib/inc/xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
  43              	 .loc 1 2618 36
  44 000a 3B00     	 movs r3,r7
  45 000c 1B78     	 ldrb r3,[r3]
  46 000e 5B07     	 lsls r3,r3,#29
  47 0010 5B0F     	 lsrs r3,r3,#29
  48 0012 DBB2     	 uxtb r3,r3
  49              	 .loc 1 2618 63
  50 0014 1A00     	 movs r2,r3
2619:..//Libraries/XMCLib/inc/xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  51              	 .loc 1 2619 34
  52 0016 BB1C     	 adds r3,r7,#2
  53 0018 1B88     	 ldrh r3,[r3]
  54 001a 9B05     	 lsls r3,r3,#22
  55 001c 9B0D     	 lsrs r3,r3,#22
  56 001e 9BB2     	 uxth r3,r3
  57              	 .loc 1 2619 53
  58 0020 1B04     	 lsls r3,r3,#16
2618:..//Libraries/XMCLib/inc/xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  59              	 .loc 1 2618 15
  60 0022 1343     	 orrs r3,r2
  61 0024 FB60     	 str r3,[r7,#12]
2620:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2621:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
  62              	 .loc 1 2621 23
  63 0026 7A68     	 ldr r2,[r7,#4]
  64 0028 F823     	 movs r3,#248
  65 002a 5B00     	 lsls r3,r3,#1
  66 002c F968     	 ldr r1,[r7,#12]
  67 002e D150     	 str r1,[r2,r3]
2622:..//Libraries/XMCLib/inc/xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  68              	 .loc 1 2622 36
  69 0030 FB1C     	 adds r3,r7,#3
  70 0032 1B78     	 ldrb r3,[r3]
  71 0034 DB06     	 lsls r3,r3,#27
  72 0036 DB0F     	 lsrs r3,r3,#31
  73 0038 DBB2     	 uxtb r3,r3
  74              	 .loc 1 2622 49
  75 003a 1A07     	 lsls r2,r3,#28
2623:..//Libraries/XMCLib/inc/xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
  76              	 .loc 1 2623 36
  77 003c FB1C     	 adds r3,r7,#3
  78 003e 1B78     	 ldrb r3,[r3]
  79 0040 1B07     	 lsls r3,r3,#28
  80 0042 9B0F     	 lsrs r3,r3,#30
  81 0044 DBB2     	 uxtb r3,r3
  82              	 .loc 1 2623 48
  83 0046 9B06     	 lsls r3,r3,#26
2622:..//Libraries/XMCLib/inc/xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  84              	 .loc 1 2622 90
  85 0048 1A43     	 orrs r2,r3
2624:..//Libraries/XMCLib/inc/xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
  86              	 .loc 1 2624 36
  87 004a FB1C     	 adds r3,r7,#3
  88 004c 1B78     	 ldrb r3,[r3]
  89 004e 9B06     	 lsls r3,r3,#26
  90 0050 DB0F     	 lsrs r3,r3,#31
  91 0052 DBB2     	 uxtb r3,r3
  92              	 .loc 1 2624 48
  93 0054 5B07     	 lsls r3,r3,#29
2622:..//Libraries/XMCLib/inc/xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  94              	 .loc 1 2622 15
  95 0056 1343     	 orrs r3,r2
  96 0058 FB60     	 str r3,[r7,#12]
2625:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2626:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2627:..//Libraries/XMCLib/inc/xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
  97              	 .loc 1 2627 37
  98 005a FB1C     	 adds r3,r7,#3
  99 005c 1B78     	 ldrb r3,[r3]
 100 005e 5B06     	 lsls r3,r3,#25
 101 0060 DB0F     	 lsrs r3,r3,#31
 102 0062 DBB2     	 uxtb r3,r3
 103              	 .loc 1 2627 64
 104 0064 9B07     	 lsls r3,r3,#30
 105              	 .loc 1 2627 15
 106 0066 FA68     	 ldr r2,[r7,#12]
 107 0068 1343     	 orrs r3,r2
 108 006a FB60     	 str r3,[r7,#12]
2628:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
2629:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 109              	 .loc 1 2629 23
 110 006c 7A68     	 ldr r2,[r7,#4]
 111 006e F823     	 movs r3,#248
 112 0070 5B00     	 lsls r3,r3,#1
 113 0072 D258     	 ldr r2,[r2,r3]
 114 0074 FB68     	 ldr r3,[r7,#12]
 115 0076 1343     	 orrs r3,r2
 116 0078 8022     	 movs r2,#128
 117 007a 1206     	 lsls r2,r2,#24
 118 007c 1A43     	 orrs r2,r3
 119 007e 1100     	 movs r1,r2
 120 0080 7A68     	 ldr r2,[r7,#4]
 121 0082 F823     	 movs r3,#248
 122 0084 5B00     	 lsls r3,r3,#1
 123 0086 D150     	 str r1,[r2,r3]
2630:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
 124              	 .loc 1 2630 1
 125 0088 C046     	 nop
 126 008a BD46     	 mov sp,r7
 127 008c 04B0     	 add sp,sp,#16
 128              	 
 129 008e 80BD     	 pop {r7,pc}
 130              	 .cfi_endproc
 131              	.LFE82:
 133              	 .section .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot,"ax",%progbits
 134              	 .align 1
 135              	 .syntax unified
 136              	 .code 16
 137              	 .thumb_func
 138              	 .fpu softvfp
 140              	XMC_VADC_GROUP_ScanEnableArbitrationSlot:
 141              	.LFB85:
2631:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2632:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2633:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2634:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2635:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2636:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2637:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2638:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param node    Service Request node Id
2639:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2640:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2641:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2642:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2643:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2644:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2645:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2646:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2647:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2648:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2649:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  None.
2650:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2651:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2652:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2653:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2654:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
2655:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2656:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2657:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2658:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2659:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2660:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2661:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2662:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2663:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2664:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2665:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  None.
2666:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2667:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2668:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2669:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2670:..//Libraries/XMCLib/inc/xmc_vadc.h ****   return (group_ptr->ALIAS);
2671:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2672:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2673:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2674:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2675:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2676:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2677:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2678:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2679:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2680:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Returns the input class configuration values.\n
2681:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2682:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2683:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2684:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2685:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  None.
2686:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2687:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2688:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2689:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2690:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2691:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2692:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2693:..//Libraries/XMCLib/inc/xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2694:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2695:..//Libraries/XMCLib/inc/xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2696:..//Libraries/XMCLib/inc/xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2697:..//Libraries/XMCLib/inc/xmc_vadc.h ****   {
2698:..//Libraries/XMCLib/inc/xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2699:..//Libraries/XMCLib/inc/xmc_vadc.h ****   }
2700:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2701:..//Libraries/XMCLib/inc/xmc_vadc.h ****   return (input_value);
2702:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2703:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
2704:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2705:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2706:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2707:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2708:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2709:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return None
2710:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2711:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2712:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2713:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2714:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2715:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2716:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2717:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2718:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2719:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2720:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2721:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2722:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2723:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2724:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2725:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2726:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2727:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2728:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2729:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2730:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2731:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2732:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2733:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2734:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2735:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2736:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2737:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2738:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2739:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2740:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2741:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2742:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 142              	 .loc 1 2742 1
 143              	 .cfi_startproc
 144              	 
 145              	 
 146 0000 80B5     	 push {r7,lr}
 147              	.LCFI3:
 148              	 .cfi_def_cfa_offset 8
 149              	 .cfi_offset 7,-8
 150              	 .cfi_offset 14,-4
 151 0002 82B0     	 sub sp,sp,#8
 152              	.LCFI4:
 153              	 .cfi_def_cfa_offset 16
 154 0004 00AF     	 add r7,sp,#0
 155              	.LCFI5:
 156              	 .cfi_def_cfa_register 7
 157 0006 7860     	 str r0,[r7,#4]
2743:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2744:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
 158              	 .loc 1 2744 20
 159 0008 7B68     	 ldr r3,[r7,#4]
 160 000a 8422     	 movs r2,#132
 161 000c 9B58     	 ldr r3,[r3,r2]
 162 000e 8022     	 movs r2,#128
 163 0010 9204     	 lsls r2,r2,#18
 164 0012 1A43     	 orrs r2,r3
 165 0014 7B68     	 ldr r3,[r7,#4]
 166 0016 8421     	 movs r1,#132
 167 0018 5A50     	 str r2,[r3,r1]
2745:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
 168              	 .loc 1 2745 1
 169 001a C046     	 nop
 170 001c BD46     	 mov sp,r7
 171 001e 02B0     	 add sp,sp,#8
 172              	 
 173 0020 80BD     	 pop {r7,pc}
 174              	 .cfi_endproc
 175              	.LFE85:
 177              	 .section .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot,"ax",%progbits
 178              	 .align 1
 179              	 .syntax unified
 180              	 .code 16
 181              	 .thumb_func
 182              	 .fpu softvfp
 184              	XMC_VADC_GROUP_ScanDisableArbitrationSlot:
 185              	.LFB86:
2746:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2747:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2748:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2749:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2750:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2751:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2752:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2753:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2754:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2755:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2756:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2757:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2758:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2759:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2760:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2761:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2762:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2763:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 186              	 .loc 1 2763 1
 187              	 .cfi_startproc
 188              	 
 189              	 
 190 0000 80B5     	 push {r7,lr}
 191              	.LCFI6:
 192              	 .cfi_def_cfa_offset 8
 193              	 .cfi_offset 7,-8
 194              	 .cfi_offset 14,-4
 195 0002 82B0     	 sub sp,sp,#8
 196              	.LCFI7:
 197              	 .cfi_def_cfa_offset 16
 198 0004 00AF     	 add r7,sp,#0
 199              	.LCFI8:
 200              	 .cfi_def_cfa_register 7
 201 0006 7860     	 str r0,[r7,#4]
2764:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2765:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 202              	 .loc 1 2765 20
 203 0008 7B68     	 ldr r3,[r7,#4]
 204 000a 8422     	 movs r2,#132
 205 000c 9B58     	 ldr r3,[r3,r2]
 206 000e 044A     	 ldr r2,.L4
 207 0010 1A40     	 ands r2,r3
 208 0012 7B68     	 ldr r3,[r7,#4]
 209 0014 8421     	 movs r1,#132
 210 0016 5A50     	 str r2,[r3,r1]
2766:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
 211              	 .loc 1 2766 1
 212 0018 C046     	 nop
 213 001a BD46     	 mov sp,r7
 214 001c 02B0     	 add sp,sp,#8
 215              	 
 216 001e 80BD     	 pop {r7,pc}
 217              	.L5:
 218              	 .align 2
 219              	.L4:
 220 0020 FFFFFFFD 	 .word -33554433
 221              	 .cfi_endproc
 222              	.LFE86:
 224              	 .section .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot,"ax",%progbits
 225              	 .align 1
 226              	 .syntax unified
 227              	 .code 16
 228              	 .thumb_func
 229              	 .fpu softvfp
 231              	XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:
 232              	.LFB102:
2767:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2768:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2769:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2770:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2771:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2772:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2773:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2774:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2775:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2776:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2777:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2778:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2779:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2780:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2781:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2782:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2783:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2784:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2785:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2786:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2787:..//Libraries/XMCLib/inc/xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2788:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2789:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2790:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2791:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2792:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2793:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2794:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2795:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2796:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2797:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2798:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2799:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2800:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2801:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2802:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2803:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2804:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2805:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2806:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2807:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2808:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2809:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2810:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2811:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2812:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2813:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2814:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2815:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2816:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2817:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2818:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2819:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2820:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2821:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2822:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2823:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2824:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2825:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2826:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2827:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2828:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2829:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2830:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2831:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2832:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2833:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2834:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2835:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2836:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2837:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2838:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2839:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2840:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2841:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2842:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2843:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2844:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2845:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2846:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2847:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2848:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2849:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2850:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2851:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2852:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2853:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2854:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2855:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2856:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2857:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2858:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2859:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2860:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2861:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2862:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2863:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2864:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2865:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2866:..//Libraries/XMCLib/inc/xmc_vadc.h ****   /* Clear the existing gate configuration */
2867:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2868:..//Libraries/XMCLib/inc/xmc_vadc.h ****   /* Set the new gating mode */
2869:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2870:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2871:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2872:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2873:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2874:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2875:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2876:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2877:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2878:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2879:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2880:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2881:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2882:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2883:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2884:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2885:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2886:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2887:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2888:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2889:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2890:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2891:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2892:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2893:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2894:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2895:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2896:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2897:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2898:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2899:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2900:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2901:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2902:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2903:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2904:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2905:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2906:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2907:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2908:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2909:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2910:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2911:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2912:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2913:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2914:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2915:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2916:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2917:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2918:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2919:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2920:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2921:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2922:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2923:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2924:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2925:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2926:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2927:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2928:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2929:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2930:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  None.
2931:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2932:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2933:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2934:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2935:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2936:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2937:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2938:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2939:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2940:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2941:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2942:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2943:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2944:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2945:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2946:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2947:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2948:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2949:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2950:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2951:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  None.
2952:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2953:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2954:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2955:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2956:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2957:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2958:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2959:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2960:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2961:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2962:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2963:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2964:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2965:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2966:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2967:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2968:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2969:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2970:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2971:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2972:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
2973:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2974:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2975:..//Libraries/XMCLib/inc/xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2976:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2977:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
2978:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
2979:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
2980:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2981:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2982:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2983:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2984:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2985:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2986:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
2987:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
2988:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2989:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
2990:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2991:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2992:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2993:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2994:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
2995:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2996:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
2997:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
2998:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
2999:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3000:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
3001:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
3002:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3003:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3004:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3005:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3006:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3007:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3008:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3009:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3010:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3011:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3012:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
3013:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3014:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3015:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3016:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
3017:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3018:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3019:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
3020:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3021:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
3022:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3023:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3024:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3025:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
3026:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3027:..//Libraries/XMCLib/inc/xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
3028:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3029:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3030:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3031:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
3032:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return  <BR>
3033:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3034:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
3035:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3036:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3037:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
3038:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3039:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3040:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3041:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
3042:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3043:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3044:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
3045:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3046:..//Libraries/XMCLib/inc/xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
3047:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3048:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3049:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3050:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3051:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3052:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3053:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3054:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3055:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
3056:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * service node pointer for the scan has been configured.
3057:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3058:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3059:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3060:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None.
3061:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3062:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3063:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3064:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3065:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
3066:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3067:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3068:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3069:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3070:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3071:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3072:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3073:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3074:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
3075:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3076:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3077:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3078:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3079:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
3080:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3081:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3082:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3083:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3084:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
3085:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3086:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3087:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3088:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3089:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3090:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3091:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *          returns false if the service request event was not raised.
3092:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3093:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3094:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3095:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
3096:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
3097:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3098:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3099:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  None.
3100:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3101:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
3102:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3103:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
3104:..//Libraries/XMCLib/inc/xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
3105:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3106:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3107:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3108:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3109:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param sr    Service Request Id
3110:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3111:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3112:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3113:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3114:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
3115:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
3116:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
3117:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
3118:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3119:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3120:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  None.
3121:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3122:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
3123:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3124:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3125:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3126:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3127:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3128:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3129:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3130:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
3131:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
3132:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
3133:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
3134:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3135:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3136:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
3137:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3138:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3139:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3140:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
3141:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3142:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
3143:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3144:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3145:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3146:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3147:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3148:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3149:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3150:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3151:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
3152:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
3153:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
3154:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
3155:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
3156:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3157:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3158:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
3159:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3160:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3161:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3162:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3163:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3164:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
3165:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3166:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3167:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3168:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3169:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
3170:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3171:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3172:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3173:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3174:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
3175:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
3176:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * The remaining channels will continue however they are.
3177:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
3178:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3179:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3180:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  None.
3181:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3182:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
3183:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3184:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3185:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3186:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3187:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3188:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3189:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3190:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables the scan request source event .<BR>
3191:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * By using this API the request source event will be activated for the scan request source.
3192:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3193:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3194:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3195:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3196:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3197:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3198:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableEvent(XMC_VADC_GROUP_t *const group_ptr)
3199:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3200:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
3201:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3202:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ASMR |= ((uint32_t)VADC_G_ASMR_ENSI_Msk);
3203:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3204:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3205:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3206:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3207:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3208:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3209:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3210:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3211:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disables the scan request source event .<BR>
3212:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * By using this API the request source event will be deactivated for the scan request source.
3213:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3214:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3215:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3216:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3217:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3218:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3219:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableEvent(XMC_VADC_GROUP_t *const group_ptr)
3220:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3221:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
3222:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3223:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENSI_Msk);
3224:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3225:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
3226:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3227:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3228:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3229:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3230:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3231:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3232:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3233:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3234:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3235:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3236:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3237:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3238:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3239:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3240:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3241:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3242:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3243:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3244:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3245:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3246:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3247:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                  conversion request from background request source
3248:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3249:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3250:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3251:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3252:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3253:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3254:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3255:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3256:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3257:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3258:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3259:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3260:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3261:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3262:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3263:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 233              	 .loc 1 3263 1
 234              	 .cfi_startproc
 235              	 
 236              	 
 237 0000 80B5     	 push {r7,lr}
 238              	.LCFI9:
 239              	 .cfi_def_cfa_offset 8
 240              	 .cfi_offset 7,-8
 241              	 .cfi_offset 14,-4
 242 0002 82B0     	 sub sp,sp,#8
 243              	.LCFI10:
 244              	 .cfi_def_cfa_offset 16
 245 0004 00AF     	 add r7,sp,#0
 246              	.LCFI11:
 247              	 .cfi_def_cfa_register 7
 248 0006 7860     	 str r0,[r7,#4]
3264:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3265:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 249              	 .loc 1 3265 20
 250 0008 7B68     	 ldr r3,[r7,#4]
 251 000a 8422     	 movs r2,#132
 252 000c 9B58     	 ldr r3,[r3,r2]
 253 000e 8022     	 movs r2,#128
 254 0010 D204     	 lsls r2,r2,#19
 255 0012 1A43     	 orrs r2,r3
 256 0014 7B68     	 ldr r3,[r7,#4]
 257 0016 8421     	 movs r1,#132
 258 0018 5A50     	 str r2,[r3,r1]
3266:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
 259              	 .loc 1 3266 1
 260 001a C046     	 nop
 261 001c BD46     	 mov sp,r7
 262 001e 02B0     	 add sp,sp,#8
 263              	 
 264 0020 80BD     	 pop {r7,pc}
 265              	 .cfi_endproc
 266              	.LFE102:
 268              	 .section .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot,"ax",%progbits
 269              	 .align 1
 270              	 .syntax unified
 271              	 .code 16
 272              	 .thumb_func
 273              	 .fpu softvfp
 275              	XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:
 276              	.LFB103:
3267:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3268:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3269:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3270:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                     from background request source
3271:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3272:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3273:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3274:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3275:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3276:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3277:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3278:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3279:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3280:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3281:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3282:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3283:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3284:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3285:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 277              	 .loc 1 3285 1
 278              	 .cfi_startproc
 279              	 
 280              	 
 281 0000 80B5     	 push {r7,lr}
 282              	.LCFI12:
 283              	 .cfi_def_cfa_offset 8
 284              	 .cfi_offset 7,-8
 285              	 .cfi_offset 14,-4
 286 0002 82B0     	 sub sp,sp,#8
 287              	.LCFI13:
 288              	 .cfi_def_cfa_offset 16
 289 0004 00AF     	 add r7,sp,#0
 290              	.LCFI14:
 291              	 .cfi_def_cfa_register 7
 292 0006 7860     	 str r0,[r7,#4]
3286:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3287:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 293              	 .loc 1 3287 20
 294 0008 7B68     	 ldr r3,[r7,#4]
 295 000a 8422     	 movs r2,#132
 296 000c 9B58     	 ldr r3,[r3,r2]
 297 000e 044A     	 ldr r2,.L8
 298 0010 1A40     	 ands r2,r3
 299 0012 7B68     	 ldr r3,[r7,#4]
 300 0014 8421     	 movs r1,#132
 301 0016 5A50     	 str r2,[r3,r1]
3288:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
 302              	 .loc 1 3288 1
 303 0018 C046     	 nop
 304 001a BD46     	 mov sp,r7
 305 001c 02B0     	 add sp,sp,#8
 306              	 
 307 001e 80BD     	 pop {r7,pc}
 308              	.L9:
 309              	 .align 2
 310              	.L8:
 311 0020 FFFFFFFB 	 .word -67108865
 312              	 .cfi_endproc
 313              	.LFE103:
 315              	 .section .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot,"ax",%progbits
 316              	 .align 1
 317              	 .syntax unified
 318              	 .code 16
 319              	 .thumb_func
 320              	 .fpu softvfp
 322              	XMC_VADC_GROUP_QueueEnableArbitrationSlot:
 323              	.LFB120:
3289:..//Libraries/XMCLib/inc/xmc_vadc.h **** #endif
3290:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3291:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3292:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3293:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3294:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3295:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3296:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3297:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3298:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3299:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3300:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3301:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3302:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3303:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3304:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3305:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3306:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3307:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3308:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3309:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3310:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3311:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3312:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3313:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3314:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3315:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3316:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3317:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3318:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3319:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3320:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3321:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3322:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3323:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3324:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3325:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3326:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3327:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3328:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3329:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3330:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3331:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3332:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3333:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3334:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3335:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3336:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3337:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3338:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3339:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3340:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3341:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3342:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3343:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3344:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3345:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3346:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3347:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3348:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3349:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3350:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3351:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3352:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3353:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3354:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3355:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <b>Details of function</b><br>
3356:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3357:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3358:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3359:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3360:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3361:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3362:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3363:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3364:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3365:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3366:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3367:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3368:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3369:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3370:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3371:..//Libraries/XMCLib/inc/xmc_vadc.h ****   /* Clear the existing gate configuration */
3372:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3373:..//Libraries/XMCLib/inc/xmc_vadc.h ****   /* Configure the new gating mode*/
3374:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3375:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3376:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3377:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3378:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3379:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3380:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3381:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3382:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3383:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3384:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3385:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3386:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3387:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3388:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3389:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3390:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3391:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3392:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3393:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3394:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3395:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3396:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3397:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3398:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3399:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3400:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3401:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3402:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3403:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3404:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3405:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3406:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3407:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3408:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3409:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3410:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3411:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3412:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3413:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3414:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3415:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3416:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3417:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3418:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3419:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3420:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3421:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3422:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3423:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3424:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3425:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3426:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3427:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3428:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3429:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3430:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3431:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3432:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3433:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3434:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3435:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3436:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  None.
3437:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3438:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3439:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3440:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3441:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3442:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3443:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3444:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3445:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3446:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3447:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3448:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3449:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3450:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3451:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3452:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3453:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3454:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3455:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * current scan sequence.
3456:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3457:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3458:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  None.
3459:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3460:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3461:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3462:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3463:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3464:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3465:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Request source
3466:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3467:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3468:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3469:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3470:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3471:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3472:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3473:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3474:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3475:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3476:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3477:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3478:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3479:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3480:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3481:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                                     const uint32_t grp_num,
3482:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                                     const uint32_t ch_num)
3483:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3484:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3485:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3486:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3487:..//Libraries/XMCLib/inc/xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3488:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3489:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3490:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3491:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3492:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3493:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3494:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3495:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3496:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3497:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3498:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3499:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3500:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3501:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3502:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3503:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3504:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3505:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3506:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3507:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3508:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3509:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3510:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3511:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3512:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3513:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                                 const uint32_t grp_num,
3514:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3515:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3516:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3517:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3518:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3519:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3520:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3521:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3522:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3523:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3524:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Request source
3525:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3526:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3527:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3528:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3529:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3530:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3531:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Removes a channel to the background scan sequence.<BR>\n
3532:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3533:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3534:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3535:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3536:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3537:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3538:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3539:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundRemoveChannelFromSequence(XMC_VADC_GLOBAL_t *const g
3540:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                                          const uint32_t grp_num,
3541:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                                          const uint32_t ch_num)
3542:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3543:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3544:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3545:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3546:..//Libraries/XMCLib/inc/xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3547:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3548:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~((uint32_t)1 << ch_num);
3549:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3550:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3551:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3552:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3553:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3554:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3555:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3556:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3557:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3558:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3559:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3560:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3561:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3562:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3563:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Removes multiple channels to the scan sequence.<BR>\n
3564:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3565:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3566:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3567:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3568:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3569:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3570:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3571:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndRemoveMultipleChannels(XMC_VADC_GLOBAL_t *const global_
3572:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                                    const uint32_t grp_num,
3573:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                                    const uint32_t ch_mask)
3574:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3575:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3576:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3577:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~ch_mask;
3578:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3579:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3580:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3581:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3582:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3583:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3584:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3585:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3586:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3587:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3588:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3589:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3590:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3591:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3592:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3593:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3594:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3595:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3596:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3597:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3598:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3599:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                                 const uint32_t grp_num,
3600:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                                                 const uint32_t ch_num)
3601:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3602:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3603:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3604:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3605:..//Libraries/XMCLib/inc/xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3606:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3607:..//Libraries/XMCLib/inc/xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3608:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3609:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3610:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3611:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3612:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * @return  <BR>
3613:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3614:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3615:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3616:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3617:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3618:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3619:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3620:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3621:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3622:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3623:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3624:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3625:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3626:..//Libraries/XMCLib/inc/xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3627:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3628:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3629:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3630:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3631:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3632:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3633:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3634:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3635:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3636:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * service node pointer for the scan has been configured.
3637:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3638:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3639:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3640:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * None.
3641:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3642:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3643:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3644:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3645:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3646:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3647:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3648:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3649:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3650:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3651:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3652:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3653:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3654:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3655:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3656:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3657:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3658:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3659:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3660:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3661:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3662:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3663:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3664:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3665:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3666:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3667:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3668:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3669:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3670:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3671:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *          returns false if the service request event was not raised.
3672:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3673:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3674:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3675:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3676:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3677:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3678:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3679:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3680:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  None.
3681:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3682:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3683:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3684:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3685:..//Libraries/XMCLib/inc/xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3686:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3687:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3688:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3689:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3690:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3691:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3692:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3693:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3694:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3695:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3696:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3697:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3698:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3699:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3700:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3701:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3702:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3703:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3704:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Module Pointer", (global_ptr ==
3705:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3706:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3707:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3708:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3709:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3710:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3711:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3712:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3713:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3714:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3715:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3716:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3717:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3718:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3719:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * bit field BRSMR.ENTR.
3720:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3721:..//Libraries/XMCLib/inc/xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3722:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3723:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3724:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3725:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3726:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Module Pointer", (global_ptr =
3727:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3728:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3729:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3730:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3731:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3732:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3733:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3734:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3735:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3736:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3737:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables the background scan request source event .<BR>
3738:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * By using this API the request source event will be activated for the background scan request sou
3739:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3740:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3741:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3742:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3743:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptN
3744:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3745:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3746:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3747:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableEvent:Wrong Module Pointer", (global_ptr == VADC))
3748:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3749:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->BRSMR |= ((uint32_t)VADC_BRSMR_ENSI_Msk);
3750:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3751:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3752:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3753:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param global_ptr     Pointer to the VADC module
3754:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3755:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3756:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3757:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3758:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disables the background scan request source event .<BR>
3759:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * By using this API the request source event will be deactivated for the background scan request s
3760:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3761:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3762:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3763:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3764:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNo
3765:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3766:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3767:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3768:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableEvent:Wrong Module Pointer", (global_ptr == VADC))
3769:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3770:..//Libraries/XMCLib/inc/xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENSI_Msk);
3771:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3772:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3773:..//Libraries/XMCLib/inc/xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3774:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3775:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3776:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3777:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3778:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3779:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3780:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3781:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3782:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3783:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3784:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3785:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3786:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3787:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3788:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * source.
3789:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3790:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3791:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3792:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3793:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3794:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3795:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3796:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3797:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3798:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3799:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3800:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3801:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3802:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3803:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3804:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3805:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3806:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3807:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3808:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3809:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3810:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3811:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3812:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 324              	 .loc 1 3812 1
 325              	 .cfi_startproc
 326              	 
 327              	 
 328 0000 80B5     	 push {r7,lr}
 329              	.LCFI15:
 330              	 .cfi_def_cfa_offset 8
 331              	 .cfi_offset 7,-8
 332              	 .cfi_offset 14,-4
 333 0002 82B0     	 sub sp,sp,#8
 334              	.LCFI16:
 335              	 .cfi_def_cfa_offset 16
 336 0004 00AF     	 add r7,sp,#0
 337              	.LCFI17:
 338              	 .cfi_def_cfa_register 7
 339 0006 7860     	 str r0,[r7,#4]
3813:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3814:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 340              	 .loc 1 3814 20
 341 0008 7B68     	 ldr r3,[r7,#4]
 342 000a 8422     	 movs r2,#132
 343 000c 9B58     	 ldr r3,[r3,r2]
 344 000e 8022     	 movs r2,#128
 345 0010 5204     	 lsls r2,r2,#17
 346 0012 1A43     	 orrs r2,r3
 347 0014 7B68     	 ldr r3,[r7,#4]
 348 0016 8421     	 movs r1,#132
 349 0018 5A50     	 str r2,[r3,r1]
3815:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
 350              	 .loc 1 3815 1
 351 001a C046     	 nop
 352 001c BD46     	 mov sp,r7
 353 001e 02B0     	 add sp,sp,#8
 354              	 
 355 0020 80BD     	 pop {r7,pc}
 356              	 .cfi_endproc
 357              	.LFE120:
 359              	 .section .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot,"ax",%progbits
 360              	 .align 1
 361              	 .syntax unified
 362              	 .code 16
 363              	 .thumb_func
 364              	 .fpu softvfp
 366              	XMC_VADC_GROUP_QueueDisableArbitrationSlot:
 367              	.LFB121:
3816:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3817:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3818:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3819:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3820:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3821:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3822:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3823:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3824:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3825:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3826:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3827:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3828:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3829:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3830:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3831:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3832:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3833:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 368              	 .loc 1 3833 1
 369              	 .cfi_startproc
 370              	 
 371              	 
 372 0000 80B5     	 push {r7,lr}
 373              	.LCFI18:
 374              	 .cfi_def_cfa_offset 8
 375              	 .cfi_offset 7,-8
 376              	 .cfi_offset 14,-4
 377 0002 82B0     	 sub sp,sp,#8
 378              	.LCFI19:
 379              	 .cfi_def_cfa_offset 16
 380 0004 00AF     	 add r7,sp,#0
 381              	.LCFI20:
 382              	 .cfi_def_cfa_register 7
 383 0006 7860     	 str r0,[r7,#4]
3834:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3835:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 384              	 .loc 1 3835 20
 385 0008 7B68     	 ldr r3,[r7,#4]
 386 000a 8422     	 movs r2,#132
 387 000c 9B58     	 ldr r3,[r3,r2]
 388 000e 044A     	 ldr r2,.L12
 389 0010 1A40     	 ands r2,r3
 390 0012 7B68     	 ldr r3,[r7,#4]
 391 0014 8421     	 movs r1,#132
 392 0016 5A50     	 str r2,[r3,r1]
3836:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
 393              	 .loc 1 3836 1
 394 0018 C046     	 nop
 395 001a BD46     	 mov sp,r7
 396 001c 02B0     	 add sp,sp,#8
 397              	 
 398 001e 80BD     	 pop {r7,pc}
 399              	.L13:
 400              	 .align 2
 401              	.L12:
 402 0020 FFFFFFFE 	 .word -16777217
 403              	 .cfi_endproc
 404              	.LFE121:
 406              	 .section .text.XMC_VADC_GROUP_QueueFlushEntries,"ax",%progbits
 407              	 .align 1
 408              	 .syntax unified
 409              	 .code 16
 410              	 .thumb_func
 411              	 .fpu softvfp
 413              	XMC_VADC_GROUP_QueueFlushEntries:
 414              	.LFB125:
3837:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3838:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3839:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3840:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3841:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3842:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3843:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3844:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3845:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3846:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3847:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3848:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3849:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3850:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3851:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3852:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3853:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3854:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3855:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3856:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3857:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3858:..//Libraries/XMCLib/inc/xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3859:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3860:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3861:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3862:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3863:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3864:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3865:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3866:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3867:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3868:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3869:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3870:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3871:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3872:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3873:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3874:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3875:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3876:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3877:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3878:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3879:..//Libraries/XMCLib/inc/xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3880:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3881:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3882:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3883:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3884:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3885:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3886:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3887:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3888:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3889:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3890:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3891:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3892:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3893:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3894:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3895:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3896:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3897:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3898:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3899:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3900:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3901:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3902:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3903:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3904:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3905:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3906:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3907:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3908:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3909:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3910:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3911:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3912:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3913:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3914:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3915:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3916:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3917:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3918:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3919:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3920:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3921:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3922:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3923:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3924:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <b>Details of function</b><br>
3925:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3926:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3927:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3928:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3929:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3930:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3931:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3932:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3933:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3934:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3935:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3936:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3937:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3938:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3939:..//Libraries/XMCLib/inc/xmc_vadc.h ****   /* Clear the existing gate configuration */
3940:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3941:..//Libraries/XMCLib/inc/xmc_vadc.h ****   /* Set the new gating mode */
3942:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3943:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3944:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3945:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3946:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3947:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3948:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3949:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3950:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3951:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3952:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3953:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3954:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3955:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3956:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3957:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Note:</b><br>
3958:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3959:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3960:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3961:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <ul>
3962:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3963:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
3964:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * </ul>
3965:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3966:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3967:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3968:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3969:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3970:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
3971:..//Libraries/XMCLib/inc/xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3972:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3973:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
3974:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3975:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3976:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3977:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3978:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3979:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3980:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3981:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
3982:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3983:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3984:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3985:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3986:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3987:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * to determine the queue length.
3988:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3989:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3990:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3991:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
3992:..//Libraries/XMCLib/inc/xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3993:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
3994:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
3995:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3996:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
3997:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
3998:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
3999:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
4000:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
4001:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
4002:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4003:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
4004:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * the queue sequence.
4005:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
4006:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4007:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
4008:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
4009:..//Libraries/XMCLib/inc/xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
4010:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
4011:..//Libraries/XMCLib/inc/xmc_vadc.h **** /**
4012:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4013:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * @return
4014:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *    None
4015:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
4016:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Description:</b><br>
4017:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
4018:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
4019:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4020:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
4021:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * all the entries are removed from the queue.
4022:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *
4023:..//Libraries/XMCLib/inc/xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4024:..//Libraries/XMCLib/inc/xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
4025:..//Libraries/XMCLib/inc/xmc_vadc.h ****  */
4026:..//Libraries/XMCLib/inc/xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
4027:..//Libraries/XMCLib/inc/xmc_vadc.h **** {
 415              	 .loc 1 4027 1
 416              	 .cfi_startproc
 417              	 
 418              	 
 419 0000 80B5     	 push {r7,lr}
 420              	.LCFI21:
 421              	 .cfi_def_cfa_offset 8
 422              	 .cfi_offset 7,-8
 423              	 .cfi_offset 14,-4
 424 0002 82B0     	 sub sp,sp,#8
 425              	.LCFI22:
 426              	 .cfi_def_cfa_offset 16
 427 0004 00AF     	 add r7,sp,#0
 428              	.LCFI23:
 429              	 .cfi_def_cfa_register 7
 430 0006 7860     	 str r0,[r7,#4]
4028:..//Libraries/XMCLib/inc/xmc_vadc.h ****   /* Initiate flushing of the queue */
4029:..//Libraries/XMCLib/inc/xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 431              	 .loc 1 4029 19
 432 0008 7A68     	 ldr r2,[r7,#4]
 433 000a 8223     	 movs r3,#130
 434 000c 5B00     	 lsls r3,r3,#1
 435 000e D358     	 ldr r3,[r2,r3]
 436 0010 8022     	 movs r2,#128
 437 0012 D200     	 lsls r2,r2,#3
 438 0014 1A43     	 orrs r2,r3
 439 0016 1100     	 movs r1,r2
 440 0018 7A68     	 ldr r2,[r7,#4]
 441 001a 8223     	 movs r3,#130
 442 001c 5B00     	 lsls r3,r3,#1
 443 001e D150     	 str r1,[r2,r3]
4030:..//Libraries/XMCLib/inc/xmc_vadc.h **** 
4031:..//Libraries/XMCLib/inc/xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 444              	 .loc 1 4031 8
 445 0020 C046     	 nop
 446              	.L15:
 447              	 .loc 1 4031 22 discriminator 1
 448 0022 7A68     	 ldr r2,[r7,#4]
 449 0024 8423     	 movs r3,#132
 450 0026 5B00     	 lsls r3,r3,#1
 451 0028 D358     	 ldr r3,[r2,r3]
 452              	 .loc 1 4031 29 discriminator 1
 453 002a 2022     	 movs r2,#32
 454 002c 1340     	 ands r3,r2
 455              	 .loc 1 4031 8 discriminator 1
 456 002e F8D0     	 beq .L15
4032:..//Libraries/XMCLib/inc/xmc_vadc.h ****   {
4033:..//Libraries/XMCLib/inc/xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
4034:..//Libraries/XMCLib/inc/xmc_vadc.h ****   }
4035:..//Libraries/XMCLib/inc/xmc_vadc.h **** }
 457              	 .loc 1 4035 1
 458 0030 C046     	 nop
 459 0032 C046     	 nop
 460 0034 BD46     	 mov sp,r7
 461 0036 02B0     	 add sp,sp,#8
 462              	 
 463 0038 80BD     	 pop {r7,pc}
 464              	 .cfi_endproc
 465              	.LFE125:
 467              	 .section .rodata.g_xmc_vadc_group_array,"a"
 468              	 .align 2
 471              	g_xmc_vadc_group_array:
 472 0000 00040348 	 .word 1208157184
 473 0004 00080348 	 .word 1208158208
 474              	 .section .text.XMC_VADC_GLOBAL_EnableModule,"ax",%progbits
 475              	 .align 1
 476              	 .global XMC_VADC_GLOBAL_EnableModule
 477              	 .syntax unified
 478              	 .code 16
 479              	 .thumb_func
 480              	 .fpu softvfp
 482              	XMC_VADC_GLOBAL_EnableModule:
 483              	.LFB147:
 484              	 .file 2 "../Libraries/XMCLib/src/xmc_vadc.c"
   1:../Libraries/XMCLib/src/xmc_vadc.c **** /**
   2:../Libraries/XMCLib/src/xmc_vadc.c ****  * @file xmc_vadc.c
   3:../Libraries/XMCLib/src/xmc_vadc.c ****  * @date 2016-06-17
   4:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   5:../Libraries/XMCLib/src/xmc_vadc.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_vadc.c ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   9:../Libraries/XMCLib/src/xmc_vadc.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_vadc.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_vadc.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  18:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  21:../Libraries/XMCLib/src/xmc_vadc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_vadc.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_vadc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_vadc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_vadc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_vadc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_vadc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_vadc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_vadc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_vadc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_vadc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  36:../Libraries/XMCLib/src/xmc_vadc.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_vadc.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  39:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-15:
  40:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_vadc.c ****  *      
  42:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-20:
  43:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised for XMC1201 device.<br>
  44:../Libraries/XMCLib/src/xmc_vadc.c ****  *   
  45:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-04-27:
  46:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for SHS.<br>
  47:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added New APIs for trigger edge selection.<BR>
  48:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  51:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  54:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-25:
  55:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - BFL configuration in channel initialization fixed.
  56:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  57:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-07-28:
  58:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  59:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  60:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  61:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs Created.
  62:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  63:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  64:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAlias
  65:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetInputClass
  66:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  67:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  68:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  69:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  70:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  71:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-12-01:
  72:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  73:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  74:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  75:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2016-06-17:
  76:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE 
  77:../Libraries/XMCLib/src/xmc_vadc.c ****  *       and XMC_VADC_SYNCTR_START_LOCATION
  78:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  79:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the EVAL configuration in API XMC_VADC_GROUP_CheckSlaveReadiness and XMC_VADC_GROUP_
  80:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs added are:
  81:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  82:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
  83:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
  84:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultRegPriority
  85:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
  86:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
  87:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetResultRegPriority
  88:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  89:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2017-01-11:
  90:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fix assertion in XMC_VADC_GROUP_CheckSlaveReadiness() and XMC_VADC_GROUP_IgnoreSlaveReadin
  91:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  92:../Libraries/XMCLib/src/xmc_vadc.c ****  * @endcond 
  93:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  94:../Libraries/XMCLib/src/xmc_vadc.c ****  */
  95:../Libraries/XMCLib/src/xmc_vadc.c **** 
  96:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  97:../Libraries/XMCLib/src/xmc_vadc.c ****  * HEADER FILES
  98:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  99:../Libraries/XMCLib/src/xmc_vadc.c **** #include <xmc_vadc.h>
 100:../Libraries/XMCLib/src/xmc_vadc.c **** 
 101:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 102:../Libraries/XMCLib/src/xmc_vadc.c ****  * MACROS
 103:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 104:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_MAX_ICLASS_SET          (2U)  /**< Defines the maximum number of conversion parame
 105:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_NUM_EMUX_INTERFACES     (2U)  /**< Defines the maximum number of external multiple
 106:../Libraries/XMCLib/src/xmc_vadc.c **** 
 107:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_RESULT_LEFT_ALIGN_10BIT (2U)  /**< Defines the 10 bit converted result register le
 108:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     is used in the XMC_VADC_GLOBAL_SetCompareValue(
 109:../Libraries/XMCLib/src/xmc_vadc.c **** 
 110:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_SYNCTR_START_LOCATION (3U)  /**< Defines the location in SYNCTR needed for calcula
 111:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 112:../Libraries/XMCLib/src/xmc_vadc.c ****  * ENUMS
 113:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 114:../Libraries/XMCLib/src/xmc_vadc.c **** 
 115:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 116:../Libraries/XMCLib/src/xmc_vadc.c ****  * DATA STRUCTURES
 117:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 118:../Libraries/XMCLib/src/xmc_vadc.c **** 
 119:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 120:../Libraries/XMCLib/src/xmc_vadc.c ****  * GLOBAL DATA
 121:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 122:../Libraries/XMCLib/src/xmc_vadc.c **** 
 123:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 124:../Libraries/XMCLib/src/xmc_vadc.c **** 
 125:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U) 
 126:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 127:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 128:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 129:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 130:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 131:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 132:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 133:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 134:../Libraries/XMCLib/src/xmc_vadc.c **** 
 135:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 136:../Libraries/XMCLib/src/xmc_vadc.c **** 
 137:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 138:../Libraries/XMCLib/src/xmc_vadc.c ****  * LOCAL ROUTINES
 139:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 140:../Libraries/XMCLib/src/xmc_vadc.c **** 
 141:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 142:../Libraries/XMCLib/src/xmc_vadc.c ****  * API IMPLEMENTATION
 143:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 144:../Libraries/XMCLib/src/xmc_vadc.c **** 
 145:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to enable the VADC Module*/
 146:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_EnableModule(void)
 147:../Libraries/XMCLib/src/xmc_vadc.c **** {
 485              	 .loc 2 147 1
 486              	 .cfi_startproc
 487              	 
 488              	 
 489 0000 80B5     	 push {r7,lr}
 490              	.LCFI24:
 491              	 .cfi_def_cfa_offset 8
 492              	 .cfi_offset 7,-8
 493              	 .cfi_offset 14,-4
 494 0002 00AF     	 add r7,sp,#0
 495              	.LCFI25:
 496              	 .cfi_def_cfa_register 7
 148:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
 149:../Libraries/XMCLib/src/xmc_vadc.c ****    * Enable Out of Range Comparator for ADC channels pins P2.2to P2.9. This hack is applicable only
 150:../Libraries/XMCLib/src/xmc_vadc.c ****    * and in particular the G11 step.
 151:../Libraries/XMCLib/src/xmc_vadc.c ****    *
 152:../Libraries/XMCLib/src/xmc_vadc.c ****    * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additona
 153:../Libraries/XMCLib/src/xmc_vadc.c ****    * function
 154:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 155:../Libraries/XMCLib/src/xmc_vadc.c **** 
 156:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined (COMPARATOR)
 157:../Libraries/XMCLib/src/xmc_vadc.c ****   COMPARATOR->ORCCTRL = (uint32_t)0xFF;
 497              	 .loc 2 157 13
 498 0004 044B     	 ldr r3,.L17
 499              	 .loc 2 157 23
 500 0006 FF22     	 movs r2,#255
 501 0008 1A60     	 str r2,[r3]
 158:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 159:../Libraries/XMCLib/src/xmc_vadc.c **** 
 160:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 161:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 502              	 .loc 2 161 5
 503 000a 0120     	 movs r0,#1
 504 000c FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 162:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 163:../Libraries/XMCLib/src/xmc_vadc.c **** 
 164:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 165:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 166:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC )
 167:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 168:../Libraries/XMCLib/src/xmc_vadc.c **** }
 505              	 .loc 2 168 1
 506 0010 C046     	 nop
 507 0012 BD46     	 mov sp,r7
 508              	 
 509 0014 80BD     	 pop {r7,pc}
 510              	.L18:
 511 0016 C046     	 .align 2
 512              	.L17:
 513 0018 00050140 	 .word 1073808640
 514              	 .cfi_endproc
 515              	.LFE147:
 517              	 .section .text.XMC_VADC_GLOBAL_DisableModule,"ax",%progbits
 518              	 .align 1
 519              	 .global XMC_VADC_GLOBAL_DisableModule
 520              	 .syntax unified
 521              	 .code 16
 522              	 .thumb_func
 523              	 .fpu softvfp
 525              	XMC_VADC_GLOBAL_DisableModule:
 526              	.LFB148:
 169:../Libraries/XMCLib/src/xmc_vadc.c **** 
 170:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to Disable the VADC Module*/
 171:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_DisableModule(void)
 172:../Libraries/XMCLib/src/xmc_vadc.c **** {
 527              	 .loc 2 172 1
 528              	 .cfi_startproc
 529              	 
 530              	 
 531 0000 80B5     	 push {r7,lr}
 532              	.LCFI26:
 533              	 .cfi_def_cfa_offset 8
 534              	 .cfi_offset 7,-8
 535              	 .cfi_offset 14,-4
 536 0002 00AF     	 add r7,sp,#0
 537              	.LCFI27:
 538              	 .cfi_def_cfa_register 7
 173:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 174:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 175:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_AssertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 176:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 177:../Libraries/XMCLib/src/xmc_vadc.c **** 
 178:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 179:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 539              	 .loc 2 179 3
 540 0004 0120     	 movs r0,#1
 541 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 180:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 181:../Libraries/XMCLib/src/xmc_vadc.c **** 
 182:../Libraries/XMCLib/src/xmc_vadc.c **** }
 542              	 .loc 2 182 1
 543 000a C046     	 nop
 544 000c BD46     	 mov sp,r7
 545              	 
 546 000e 80BD     	 pop {r7,pc}
 547              	 .cfi_endproc
 548              	.LFE148:
 550              	 .section .text.XMC_VADC_GLOBAL_Init,"ax",%progbits
 551              	 .align 1
 552              	 .global XMC_VADC_GLOBAL_Init
 553              	 .syntax unified
 554              	 .code 16
 555              	 .thumb_func
 556              	 .fpu softvfp
 558              	XMC_VADC_GLOBAL_Init:
 559              	.LFB149:
 183:../Libraries/XMCLib/src/xmc_vadc.c **** 
 184:../Libraries/XMCLib/src/xmc_vadc.c **** 
 185:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize global resources */
 186:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
 187:../Libraries/XMCLib/src/xmc_vadc.c **** {
 560              	 .loc 2 187 1
 561              	 .cfi_startproc
 562              	 
 563              	 
 564 0000 80B5     	 push {r7,lr}
 565              	.LCFI28:
 566              	 .cfi_def_cfa_offset 8
 567              	 .cfi_offset 7,-8
 568              	 .cfi_offset 14,-4
 569 0002 82B0     	 sub sp,sp,#8
 570              	.LCFI29:
 571              	 .cfi_def_cfa_offset 16
 572 0004 00AF     	 add r7,sp,#0
 573              	.LCFI30:
 574              	 .cfi_def_cfa_register 7
 575 0006 7860     	 str r0,[r7,#4]
 576 0008 3960     	 str r1,[r7]
 188:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 189:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
 190:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 191:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))
 192:../Libraries/XMCLib/src/xmc_vadc.c **** 
 193:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the VADC module*/
 194:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GLOBAL_EnableModule();
 577              	 .loc 2 194 3
 578 000a FFF7FEFF 	 bl XMC_VADC_GLOBAL_EnableModule
 195:../Libraries/XMCLib/src/xmc_vadc.c **** 
 196:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->CLC = (uint32_t)(config->clc);
 579              	 .loc 2 196 38
 580 000e 3B68     	 ldr r3,[r7]
 581 0010 5A69     	 ldr r2,[r3,#20]
 582              	 .loc 2 196 19
 583 0012 7B68     	 ldr r3,[r7,#4]
 584 0014 1A60     	 str r2,[r3]
 197:../Libraries/XMCLib/src/xmc_vadc.c **** 
 198:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Clock configuration */
 199:../Libraries/XMCLib/src/xmc_vadc.c **** 
 200:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 201:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Ms
 585              	 .loc 2 201 57
 586 0016 3B68     	 ldr r3,[r7]
 587 0018 5B68     	 ldr r3,[r3,#4]
 588              	 .loc 2 201 26
 589 001a 8022     	 movs r2,#128
 590 001c 1202     	 lsls r2,r2,#8
 591 001e 1A43     	 orrs r2,r3
 592              	 .loc 2 201 24
 593 0020 7B68     	 ldr r3,[r7,#4]
 594 0022 8021     	 movs r1,#128
 595 0024 5A50     	 str r2,[r3,r1]
 202:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 203:../Libraries/XMCLib/src/xmc_vadc.c **** 
 204:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-0 configuration */
 205:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 596              	 .loc 2 205 56
 597 0026 3B68     	 ldr r3,[r7]
 598 0028 9A68     	 ldr r2,[r3,#8]
 599              	 .loc 2 205 29
 600 002a 7B68     	 ldr r3,[r7,#4]
 601 002c A021     	 movs r1,#160
 602 002e 5A50     	 str r2,[r3,r1]
 206:../Libraries/XMCLib/src/xmc_vadc.c **** 
 207:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-1 configuration */
 208:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 603              	 .loc 2 208 56
 604 0030 3B68     	 ldr r3,[r7]
 605 0032 DA68     	 ldr r2,[r3,#12]
 606              	 .loc 2 208 29
 607 0034 7B68     	 ldr r3,[r7,#4]
 608 0036 A421     	 movs r1,#164
 609 0038 5A50     	 str r2,[r3,r1]
 209:../Libraries/XMCLib/src/xmc_vadc.c **** 
 210:../Libraries/XMCLib/src/xmc_vadc.c **** 
 211:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Result generation related configuration */
 212:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 610              	 .loc 2 212 42
 611 003a 3B68     	 ldr r3,[r7]
 612 003c 1969     	 ldr r1,[r3,#16]
 613              	 .loc 2 212 23
 614 003e 7A68     	 ldr r2,[r7,#4]
 615 0040 A023     	 movs r3,#160
 616 0042 9B00     	 lsls r3,r3,#2
 617 0044 D150     	 str r1,[r2,r3]
 213:../Libraries/XMCLib/src/xmc_vadc.c **** 
 214:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 215:../Libraries/XMCLib/src/xmc_vadc.c **** 
 216:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Boundaries */
 217:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 618              	 .loc 2 217 44
 619 0046 3B68     	 ldr r3,[r7]
 620 0048 1A68     	 ldr r2,[r3]
 621              	 .loc 2 217 25
 622 004a 7B68     	 ldr r3,[r7,#4]
 623 004c B821     	 movs r1,#184
 624 004e 5A50     	 str r2,[r3,r1]
 218:../Libraries/XMCLib/src/xmc_vadc.c **** 
 219:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 220:../Libraries/XMCLib/src/xmc_vadc.c **** 
 221:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Configure the SHS register that are needed for XMC11xx devices*/
 222:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 223:../Libraries/XMCLib/src/xmc_vadc.c **** 
 224:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enabling the Analog part of the converter*/
 225:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
 226:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(SHS_SHSCFG_ANOFF_Msk);
 227:../Libraries/XMCLib/src/xmc_vadc.c ****   SHS0->SHSCFG = reg;
 228:../Libraries/XMCLib/src/xmc_vadc.c **** 
 229:../Libraries/XMCLib/src/xmc_vadc.c ****   /* From the Errata sheet of XMC1100 V1.7*/
 230:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
 231:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 232:../Libraries/XMCLib/src/xmc_vadc.c **** 
 233:../Libraries/XMCLib/src/xmc_vadc.c **** }
 625              	 .loc 2 233 1
 626 0050 C046     	 nop
 627 0052 BD46     	 mov sp,r7
 628 0054 02B0     	 add sp,sp,#8
 629              	 
 630 0056 80BD     	 pop {r7,pc}
 631              	 .cfi_endproc
 632              	.LFE149:
 634              	 .section .text.XMC_VADC_GLOBAL_InputClassInit,"ax",%progbits
 635              	 .align 1
 636              	 .global XMC_VADC_GLOBAL_InputClassInit
 637              	 .syntax unified
 638              	 .code 16
 639              	 .thumb_func
 640              	 .fpu softvfp
 642              	XMC_VADC_GLOBAL_InputClassInit:
 643              	.LFB150:
 234:../Libraries/XMCLib/src/xmc_vadc.c **** 
 235:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Set the Global IClass registers*/
 236:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
 237:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 238:../Libraries/XMCLib/src/xmc_vadc.c **** {
 644              	 .loc 2 238 1
 645              	 .cfi_startproc
 646              	 
 647              	 
 648 0000 80B5     	 push {r7,lr}
 649              	.LCFI31:
 650              	 .cfi_def_cfa_offset 8
 651              	 .cfi_offset 7,-8
 652              	 .cfi_offset 14,-4
 653 0002 84B0     	 sub sp,sp,#16
 654              	.LCFI32:
 655              	 .cfi_def_cfa_offset 24
 656 0004 00AF     	 add r7,sp,#0
 657              	.LCFI33:
 658              	 .cfi_def_cfa_register 7
 659 0006 F860     	 str r0,[r7,#12]
 660 0008 B960     	 str r1,[r7,#8]
 661 000a 3B60     	 str r3,[r7]
 662 000c FB1D     	 adds r3,r7,#7
 663 000e 1A70     	 strb r2,[r3]
 239:../Libraries/XMCLib/src/xmc_vadc.c **** 
 240:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
 241:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP
 242:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLA
 243:../Libraries/XMCLib/src/xmc_vadc.c **** 
 244:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 245:../Libraries/XMCLib/src/xmc_vadc.c ****   if (conv_type == XMC_VADC_GROUP_CONV_STD )
 664              	 .loc 2 245 6
 665 0010 FB1D     	 adds r3,r7,#7
 666 0012 1B78     	 ldrb r3,[r3]
 667 0014 002B     	 cmp r3,#0
 668 0016 09D1     	 bne .L22
 246:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 247:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 248:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass &
 669              	 .loc 2 248 45
 670 0018 BB68     	 ldr r3,[r7,#8]
 671              	 .loc 2 248 57
 672 001a 0B4A     	 ldr r2,.L25
 673 001c 1340     	 ands r3,r2
 674 001e 1900     	 movs r1,r3
 675              	 .loc 2 248 37
 676 0020 FB68     	 ldr r3,[r7,#12]
 677 0022 3A68     	 ldr r2,[r7]
 678 0024 2832     	 adds r2,r2,#40
 679 0026 9200     	 lsls r2,r2,#2
 680 0028 D150     	 str r1,[r2,r3]
 249:../Libraries/XMCLib/src/xmc_vadc.c ****                                       (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk
 250:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 251:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 252:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 253:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 254:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC
 255:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 256:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 257:../Libraries/XMCLib/src/xmc_vadc.c **** }
 681              	 .loc 2 257 1
 682 002a 08E0     	 b .L24
 683              	.L22:
 254:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 684              	 .loc 2 254 45
 685 002c BB68     	 ldr r3,[r7,#8]
 254:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 686              	 .loc 2 254 57
 687 002e 074A     	 ldr r2,.L25+4
 688 0030 1340     	 ands r3,r2
 689 0032 1900     	 movs r1,r3
 254:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 690              	 .loc 2 254 37
 691 0034 FB68     	 ldr r3,[r7,#12]
 692 0036 3A68     	 ldr r2,[r7]
 693 0038 2832     	 adds r2,r2,#40
 694 003a 9200     	 lsls r2,r2,#2
 695 003c D150     	 str r1,[r2,r3]
 696              	.L24:
 697              	 .loc 2 257 1
 698 003e C046     	 nop
 699 0040 BD46     	 mov sp,r7
 700 0042 04B0     	 add sp,sp,#16
 701              	 
 702 0044 80BD     	 pop {r7,pc}
 703              	.L26:
 704 0046 C046     	 .align 2
 705              	.L25:
 706 0048 1F070000 	 .word 1823
 707 004c 00001F07 	 .word 119472128
 708              	 .cfi_endproc
 709              	.LFE150:
 711              	 .section .text.XMC_VADC_GLOBAL_StartupCalibration,"ax",%progbits
 712              	 .align 1
 713              	 .global XMC_VADC_GLOBAL_StartupCalibration
 714              	 .syntax unified
 715              	 .code 16
 716              	 .thumb_func
 717              	 .fpu softvfp
 719              	XMC_VADC_GLOBAL_StartupCalibration:
 720              	.LFB151:
 258:../Libraries/XMCLib/src/xmc_vadc.c **** 
 259:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable startup calibration feature */
 260:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
 261:../Libraries/XMCLib/src/xmc_vadc.c **** {
 721              	 .loc 2 261 1
 722              	 .cfi_startproc
 723              	 
 724              	 
 725 0000 80B5     	 push {r7,lr}
 726              	.LCFI34:
 727              	 .cfi_def_cfa_offset 8
 728              	 .cfi_offset 7,-8
 729              	 .cfi_offset 14,-4
 730 0002 84B0     	 sub sp,sp,#16
 731              	.LCFI35:
 732              	 .cfi_def_cfa_offset 24
 733 0004 00AF     	 add r7,sp,#0
 734              	.LCFI36:
 735              	 .cfi_def_cfa_register 7
 736 0006 7860     	 str r0,[r7,#4]
 262:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 263:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
 264:../Libraries/XMCLib/src/xmc_vadc.c ****   VADC_G_TypeDef *group_ptr;
 265:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 266:../Libraries/XMCLib/src/xmc_vadc.c ****   
 267:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))
 268:../Libraries/XMCLib/src/xmc_vadc.c **** 
 269:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 737              	 .loc 2 269 23
 738 0008 7B68     	 ldr r3,[r7,#4]
 739 000a 8022     	 movs r2,#128
 740 000c 9B58     	 ldr r3,[r3,r2]
 741 000e 8022     	 movs r2,#128
 742 0010 1206     	 lsls r2,r2,#24
 743 0012 1A43     	 orrs r2,r3
 744 0014 7B68     	 ldr r3,[r7,#4]
 745 0016 8021     	 movs r1,#128
 746 0018 5A50     	 str r2,[r3,r1]
 270:../Libraries/XMCLib/src/xmc_vadc.c **** 
 271:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 272:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until all active groups finish calibration */
 273:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 747              	 .loc 2 273 8
 748 001a 0F23     	 movs r3,#15
 749 001c FB18     	 adds r3,r7,r3
 750 001e 0022     	 movs r2,#0
 751 0020 1A70     	 strb r2,[r3]
 752              	 .loc 2 273 3
 753 0022 1BE0     	 b .L28
 754              	.L31:
 274:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 275:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr = g_xmc_vadc_group_array[i];
 755              	 .loc 2 275 39
 756 0024 0F23     	 movs r3,#15
 757 0026 FB18     	 adds r3,r7,r3
 758 0028 1A78     	 ldrb r2,[r3]
 759              	 .loc 2 275 15
 760 002a 114B     	 ldr r3,.L32
 761 002c 9200     	 lsls r2,r2,#2
 762 002e D358     	 ldr r3,[r2,r3]
 763 0030 BB60     	 str r3,[r7,#8]
 276:../Libraries/XMCLib/src/xmc_vadc.c ****     if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 764              	 .loc 2 276 20
 765 0032 BB68     	 ldr r3,[r7,#8]
 766 0034 8022     	 movs r2,#128
 767 0036 9A58     	 ldr r2,[r3,r2]
 768              	 .loc 2 276 30
 769 0038 C023     	 movs r3,#192
 770 003a 9B02     	 lsls r3,r3,#10
 771 003c 1340     	 ands r3,r2
 772              	 .loc 2 276 8
 773 003e 07D0     	 beq .L29
 277:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 278:../Libraries/XMCLib/src/xmc_vadc.c ****       /* This group is active. Loop until it finishes calibration */
 279:../Libraries/XMCLib/src/xmc_vadc.c ****       while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 774              	 .loc 2 279 12
 775 0040 C046     	 nop
 776              	.L30:
 777              	 .loc 2 279 23 discriminator 1
 778 0042 BB68     	 ldr r3,[r7,#8]
 779 0044 8022     	 movs r2,#128
 780 0046 9A58     	 ldr r2,[r3,r2]
 781              	 .loc 2 279 33 discriminator 1
 782 0048 8023     	 movs r3,#128
 783 004a 5B05     	 lsls r3,r3,#21
 784 004c 1340     	 ands r3,r2
 785              	 .loc 2 279 12 discriminator 1
 786 004e F8D1     	 bne .L30
 787              	.L29:
 273:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 788              	 .loc 2 273 45 discriminator 2
 789 0050 0F21     	 movs r1,#15
 790 0052 7B18     	 adds r3,r7,r1
 791 0054 1A78     	 ldrb r2,[r3]
 792 0056 7B18     	 adds r3,r7,r1
 793 0058 0132     	 adds r2,r2,#1
 794 005a 1A70     	 strb r2,[r3]
 795              	.L28:
 273:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 796              	 .loc 2 273 3 discriminator 1
 797 005c 0F23     	 movs r3,#15
 798 005e FB18     	 adds r3,r7,r3
 799 0060 1B78     	 ldrb r3,[r3]
 800 0062 012B     	 cmp r3,#1
 801 0064 DED9     	 bls .L31
 280:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 281:../Libraries/XMCLib/src/xmc_vadc.c ****         /* NOP */
 282:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 283:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 284:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 285:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 286:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until it finishes calibration */
 287:../Libraries/XMCLib/src/xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
 288:../Libraries/XMCLib/src/xmc_vadc.c ****          XMC_VADC_SHS_START_UP_CAL_ACTIVE )
 289:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 290:../Libraries/XMCLib/src/xmc_vadc.c ****     /* NOP */
 291:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 292:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 293:../Libraries/XMCLib/src/xmc_vadc.c **** }
 802              	 .loc 2 293 1
 803 0066 C046     	 nop
 804 0068 C046     	 nop
 805 006a BD46     	 mov sp,r7
 806 006c 04B0     	 add sp,sp,#16
 807              	 
 808 006e 80BD     	 pop {r7,pc}
 809              	.L33:
 810              	 .align 2
 811              	.L32:
 812 0070 00000000 	 .word g_xmc_vadc_group_array
 813              	 .cfi_endproc
 814              	.LFE151:
 816              	 .section .text.XMC_VADC_GLOBAL_SetBoundaries,"ax",%progbits
 817              	 .align 1
 818              	 .global XMC_VADC_GLOBAL_SetBoundaries
 819              	 .syntax unified
 820              	 .code 16
 821              	 .thumb_func
 822              	 .fpu softvfp
 824              	XMC_VADC_GLOBAL_SetBoundaries:
 825              	.LFB152:
 294:../Libraries/XMCLib/src/xmc_vadc.c **** 
 295:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boudaries for result of conversion. Should the boundaries be violated, interrupts are
 296:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 297:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr,
 298:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary0,
 299:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary1)
 300:../Libraries/XMCLib/src/xmc_vadc.c **** {
 826              	 .loc 2 300 1
 827              	 .cfi_startproc
 828              	 
 829              	 
 830 0000 80B5     	 push {r7,lr}
 831              	.LCFI37:
 832              	 .cfi_def_cfa_offset 8
 833              	 .cfi_offset 7,-8
 834              	 .cfi_offset 14,-4
 835 0002 86B0     	 sub sp,sp,#24
 836              	.LCFI38:
 837              	 .cfi_def_cfa_offset 32
 838 0004 00AF     	 add r7,sp,#0
 839              	.LCFI39:
 840              	 .cfi_def_cfa_register 7
 841 0006 F860     	 str r0,[r7,#12]
 842 0008 B960     	 str r1,[r7,#8]
 843 000a 7A60     	 str r2,[r7,#4]
 301:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 302:../Libraries/XMCLib/src/xmc_vadc.c **** 
 303:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 304:../Libraries/XMCLib/src/xmc_vadc.c **** 
 305:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = 0U;
 844              	 .loc 2 305 13
 845 000c 0023     	 movs r3,#0
 846 000e 7B61     	 str r3,[r7,#20]
 306:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary0 << VADC_GLOBBOUND_BOUNDARY0_Pos);
 847              	 .loc 2 306 13
 848 0010 7A69     	 ldr r2,[r7,#20]
 849 0012 BB68     	 ldr r3,[r7,#8]
 850 0014 1343     	 orrs r3,r2
 851 0016 7B61     	 str r3,[r7,#20]
 307:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary1 << VADC_GLOBBOUND_BOUNDARY1_Pos);
 852              	 .loc 2 307 38
 853 0018 7B68     	 ldr r3,[r7,#4]
 854 001a 1B04     	 lsls r3,r3,#16
 855              	 .loc 2 307 13
 856 001c 7A69     	 ldr r2,[r7,#20]
 857 001e 1343     	 orrs r3,r2
 858 0020 7B61     	 str r3,[r7,#20]
 308:../Libraries/XMCLib/src/xmc_vadc.c **** 
 309:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 859              	 .loc 2 309 25
 860 0022 FB68     	 ldr r3,[r7,#12]
 861 0024 B821     	 movs r1,#184
 862 0026 7A69     	 ldr r2,[r7,#20]
 863 0028 5A50     	 str r2,[r3,r1]
 310:../Libraries/XMCLib/src/xmc_vadc.c **** }
 864              	 .loc 2 310 1
 865 002a C046     	 nop
 866 002c BD46     	 mov sp,r7
 867 002e 06B0     	 add sp,sp,#24
 868              	 
 869 0030 80BD     	 pop {r7,pc}
 870              	 .cfi_endproc
 871              	.LFE152:
 873              	 .section .text.XMC_VADC_GLOBAL_SetIndividualBoundary,"ax",%progbits
 874              	 .align 1
 875              	 .global XMC_VADC_GLOBAL_SetIndividualBoundary
 876              	 .syntax unified
 877              	 .code 16
 878              	 .thumb_func
 879              	 .fpu softvfp
 881              	XMC_VADC_GLOBAL_SetIndividualBoundary:
 882              	.LFB153:
 311:../Libraries/XMCLib/src/xmc_vadc.c **** 
 312:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 313:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
 314:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 315:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint16_t boundary_value)
 316:../Libraries/XMCLib/src/xmc_vadc.c **** {
 883              	 .loc 2 316 1
 884              	 .cfi_startproc
 885              	 
 886              	 
 887 0000 80B5     	 push {r7,lr}
 888              	.LCFI40:
 889              	 .cfi_def_cfa_offset 8
 890              	 .cfi_offset 7,-8
 891              	 .cfi_offset 14,-4
 892 0002 84B0     	 sub sp,sp,#16
 893              	.LCFI41:
 894              	 .cfi_def_cfa_offset 24
 895 0004 00AF     	 add r7,sp,#0
 896              	.LCFI42:
 897              	 .cfi_def_cfa_register 7
 898 0006 7860     	 str r0,[r7,#4]
 899 0008 0800     	 movs r0,r1
 900 000a 1100     	 movs r1,r2
 901 000c FB1C     	 adds r3,r7,#3
 902 000e 021C     	 adds r2,r0,#0
 903 0010 1A70     	 strb r2,[r3]
 904 0012 3B00     	 movs r3,r7
 905 0014 0A1C     	 adds r2,r1,#0
 906 0016 1A80     	 strh r2,[r3]
 317:../Libraries/XMCLib/src/xmc_vadc.c **** 
 318:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 319:../Libraries/XMCLib/src/xmc_vadc.c **** 
 320:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 321:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Boundary Selection",
 322:../Libraries/XMCLib/src/xmc_vadc.c ****              ((XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection) ||
 323:../Libraries/XMCLib/src/xmc_vadc.c ****               (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)))
 324:../Libraries/XMCLib/src/xmc_vadc.c **** 
 325:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 326:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = global_ptr->GLOBBOUND;
 907              	 .loc 2 326 13
 908 0018 7B68     	 ldr r3,[r7,#4]
 909 001a B822     	 movs r2,#184
 910 001c 9B58     	 ldr r3,[r3,r2]
 911 001e FB60     	 str r3,[r7,#12]
 327:../Libraries/XMCLib/src/xmc_vadc.c **** 
 328:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection)
 912              	 .loc 2 328 6
 913 0020 FB1C     	 adds r3,r7,#3
 914 0022 1B78     	 ldrb r3,[r3]
 915 0024 022B     	 cmp r3,#2
 916 0026 09D1     	 bne .L36
 329:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 330:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY0_Msk);
 917              	 .loc 2 330 15
 918 0028 FB68     	 ldr r3,[r7,#12]
 919 002a 1B0B     	 lsrs r3,r3,#12
 920 002c 1B03     	 lsls r3,r3,#12
 921 002e FB60     	 str r3,[r7,#12]
 331:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 922              	 .loc 2 331 18
 923 0030 3B00     	 movs r3,r7
 924 0032 1B88     	 ldrh r3,[r3]
 925              	 .loc 2 331 15
 926 0034 FA68     	 ldr r2,[r7,#12]
 927 0036 1343     	 orrs r3,r2
 928 0038 FB60     	 str r3,[r7,#12]
 929 003a 0DE0     	 b .L37
 930              	.L36:
 332:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 333:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)
 931              	 .loc 2 333 11
 932 003c FB1C     	 adds r3,r7,#3
 933 003e 1B78     	 ldrb r3,[r3]
 934 0040 032B     	 cmp r3,#3
 935 0042 09D1     	 bne .L37
 334:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 335:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY1_Msk);
 936              	 .loc 2 335 15
 937 0044 FB68     	 ldr r3,[r7,#12]
 938 0046 084A     	 ldr r2,.L38
 939 0048 1340     	 ands r3,r2
 940 004a FB60     	 str r3,[r7,#12]
 336:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 941              	 .loc 2 336 30
 942 004c 3B00     	 movs r3,r7
 943 004e 1B88     	 ldrh r3,[r3]
 944              	 .loc 2 336 18
 945 0050 1B04     	 lsls r3,r3,#16
 946              	 .loc 2 336 15
 947 0052 FA68     	 ldr r2,[r7,#12]
 948 0054 1343     	 orrs r3,r2
 949 0056 FB60     	 str r3,[r7,#12]
 950              	.L37:
 337:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 338:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 339:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 340:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 341:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 342:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 951              	 .loc 2 342 25
 952 0058 7B68     	 ldr r3,[r7,#4]
 953 005a B821     	 movs r1,#184
 954 005c FA68     	 ldr r2,[r7,#12]
 955 005e 5A50     	 str r2,[r3,r1]
 343:../Libraries/XMCLib/src/xmc_vadc.c **** 
 344:../Libraries/XMCLib/src/xmc_vadc.c **** }
 956              	 .loc 2 344 1
 957 0060 C046     	 nop
 958 0062 BD46     	 mov sp,r7
 959 0064 04B0     	 add sp,sp,#16
 960              	 
 961 0066 80BD     	 pop {r7,pc}
 962              	.L39:
 963              	 .align 2
 964              	.L38:
 965 0068 FFFF00F0 	 .word -268369921
 966              	 .cfi_endproc
 967              	.LFE153:
 969              	 .section .text.XMC_VADC_GLOBAL_SetCompareValue,"ax",%progbits
 970              	 .align 1
 971              	 .global XMC_VADC_GLOBAL_SetCompareValue
 972              	 .syntax unified
 973              	 .code 16
 974              	 .thumb_func
 975              	 .fpu softvfp
 977              	XMC_VADC_GLOBAL_SetCompareValue:
 978              	.LFB154:
 345:../Libraries/XMCLib/src/xmc_vadc.c **** 
 346:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 347:../Libraries/XMCLib/src/xmc_vadc.c **** 
 348:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set compare value for the result register. Result of conversion is compared against this 
 349:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
 350:../Libraries/XMCLib/src/xmc_vadc.c **** {
 979              	 .loc 2 350 1
 980              	 .cfi_startproc
 981              	 
 982              	 
 983 0000 80B5     	 push {r7,lr}
 984              	.LCFI43:
 985              	 .cfi_def_cfa_offset 8
 986              	 .cfi_offset 7,-8
 987              	 .cfi_offset 14,-4
 988 0002 82B0     	 sub sp,sp,#8
 989              	.LCFI44:
 990              	 .cfi_def_cfa_offset 16
 991 0004 00AF     	 add r7,sp,#0
 992              	.LCFI45:
 993              	 .cfi_def_cfa_register 7
 994 0006 7860     	 str r0,[r7,#4]
 995 0008 0A00     	 movs r2,r1
 996 000a BB1C     	 adds r3,r7,#2
 997 000c 1A80     	 strh r2,[r3]
 351:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetCompareValue:Wrong Module Pointer", (global_ptr == VADC))
 352:../Libraries/XMCLib/src/xmc_vadc.c **** 
 353:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES &= ~((uint32_t)VADC_GLOBRES_RESULT_Msk);
 998              	 .loc 2 353 23
 999 000e 7A68     	 ldr r2,[r7,#4]
 1000 0010 C023     	 movs r3,#192
 1001 0012 9B00     	 lsls r3,r3,#2
 1002 0014 D358     	 ldr r3,[r2,r3]
 1003 0016 1B0C     	 lsrs r3,r3,#16
 1004 0018 1904     	 lsls r1,r3,#16
 1005 001a 7A68     	 ldr r2,[r7,#4]
 1006 001c C023     	 movs r3,#192
 1007 001e 9B00     	 lsls r3,r3,#2
 1008 0020 D150     	 str r1,[r2,r3]
 354:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 1009              	 .loc 2 354 23
 1010 0022 7A68     	 ldr r2,[r7,#4]
 1011 0024 C023     	 movs r3,#192
 1012 0026 9B00     	 lsls r3,r3,#2
 1013 0028 D258     	 ldr r2,[r2,r3]
 1014              	 .loc 2 354 37
 1015 002a BB1C     	 adds r3,r7,#2
 1016 002c 1B88     	 ldrh r3,[r3]
 1017              	 .loc 2 354 26
 1018 002e 9B00     	 lsls r3,r3,#2
 1019              	 .loc 2 354 23
 1020 0030 1A43     	 orrs r2,r3
 1021 0032 1100     	 movs r1,r2
 1022 0034 7A68     	 ldr r2,[r7,#4]
 1023 0036 C023     	 movs r3,#192
 1024 0038 9B00     	 lsls r3,r3,#2
 1025 003a D150     	 str r1,[r2,r3]
 355:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1026              	 .loc 2 355 1
 1027 003c C046     	 nop
 1028 003e BD46     	 mov sp,r7
 1029 0040 02B0     	 add sp,sp,#8
 1030              	 
 1031 0042 80BD     	 pop {r7,pc}
 1032              	 .cfi_endproc
 1033              	.LFE154:
 1035              	 .section .text.XMC_VADC_GLOBAL_GetCompareResult,"ax",%progbits
 1036              	 .align 1
 1037              	 .global XMC_VADC_GLOBAL_GetCompareResult
 1038              	 .syntax unified
 1039              	 .code 16
 1040              	 .thumb_func
 1041              	 .fpu softvfp
 1043              	XMC_VADC_GLOBAL_GetCompareResult:
 1044              	.LFB155:
 356:../Libraries/XMCLib/src/xmc_vadc.c **** 
 357:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of comparison */
 358:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr)
 359:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1045              	 .loc 2 359 1
 1046              	 .cfi_startproc
 1047              	 
 1048              	 
 1049 0000 80B5     	 push {r7,lr}
 1050              	.LCFI46:
 1051              	 .cfi_def_cfa_offset 8
 1052              	 .cfi_offset 7,-8
 1053              	 .cfi_offset 14,-4
 1054 0002 84B0     	 sub sp,sp,#16
 1055              	.LCFI47:
 1056              	 .cfi_def_cfa_offset 24
 1057 0004 00AF     	 add r7,sp,#0
 1058              	.LCFI48:
 1059              	 .cfi_def_cfa_register 7
 1060 0006 7860     	 str r0,[r7,#4]
 360:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
 361:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
 362:../Libraries/XMCLib/src/xmc_vadc.c **** 
 363:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetCompareResult:Wrong Module Pointer", (global_ptr == VADC))
 364:../Libraries/XMCLib/src/xmc_vadc.c **** 
 365:../Libraries/XMCLib/src/xmc_vadc.c ****   res = global_ptr->GLOBRES;
 1061              	 .loc 2 365 7
 1062 0008 7A68     	 ldr r2,[r7,#4]
 1063 000a C023     	 movs r3,#192
 1064 000c 9B00     	 lsls r3,r3,#2
 1065 000e D358     	 ldr r3,[r2,r3]
 1066 0010 BB60     	 str r3,[r7,#8]
 366:../Libraries/XMCLib/src/xmc_vadc.c **** 
 367:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_GLOBRES_VF_Msk)
 1067              	 .loc 2 367 7
 1068 0012 BB68     	 ldr r3,[r7,#8]
 1069              	 .loc 2 367 6
 1070 0014 002B     	 cmp r3,#0
 1071 0016 08DA     	 bge .L42
 368:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 369:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_GLOBRES_FCR_Pos) & (uint32_
 1072              	 .loc 2 369 55
 1073 0018 BB68     	 ldr r3,[r7,#8]
 1074 001a 9B0F     	 lsrs r3,r3,#30
 1075              	 .loc 2 369 14
 1076 001c DAB2     	 uxtb r2,r3
 1077              	 .loc 2 369 12
 1078 001e 0F23     	 movs r3,#15
 1079 0020 FB18     	 adds r3,r7,r3
 1080 0022 0121     	 movs r1,#1
 1081 0024 0A40     	 ands r2,r1
 1082 0026 1A70     	 strb r2,[r3]
 1083 0028 03E0     	 b .L43
 1084              	.L42:
 370:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 371:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 372:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 373:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 1085              	 .loc 2 373 12
 1086 002a 0F23     	 movs r3,#15
 1087 002c FB18     	 adds r3,r7,r3
 1088 002e 0222     	 movs r2,#2
 1089 0030 1A70     	 strb r2,[r3]
 1090              	.L43:
 374:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 375:../Libraries/XMCLib/src/xmc_vadc.c **** 
 376:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 1091              	 .loc 2 376 10
 1092 0032 0F23     	 movs r3,#15
 1093 0034 FB18     	 adds r3,r7,r3
 1094 0036 1B78     	 ldrb r3,[r3]
 377:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1095              	 .loc 2 377 1
 1096 0038 1800     	 movs r0,r3
 1097 003a BD46     	 mov sp,r7
 1098 003c 04B0     	 add sp,sp,#16
 1099              	 
 1100 003e 80BD     	 pop {r7,pc}
 1101              	 .cfi_endproc
 1102              	.LFE155:
 1104              	 .section .text.XMC_VADC_GLOBAL_BindGroupToEMux,"ax",%progbits
 1105              	 .align 1
 1106              	 .global XMC_VADC_GLOBAL_BindGroupToEMux
 1107              	 .syntax unified
 1108              	 .code 16
 1109              	 .thumb_func
 1110              	 .fpu softvfp
 1112              	XMC_VADC_GLOBAL_BindGroupToEMux:
 1113              	.LFB156:
 378:../Libraries/XMCLib/src/xmc_vadc.c **** 
 379:../Libraries/XMCLib/src/xmc_vadc.c **** /* Bind one of the four groups to one of the two EMUX interfaces */
 380:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_EMUX_AVAILABLE == 1U)
 381:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
 382:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1114              	 .loc 2 382 1
 1115              	 .cfi_startproc
 1116              	 
 1117              	 
 1118 0000 80B5     	 push {r7,lr}
 1119              	.LCFI49:
 1120              	 .cfi_def_cfa_offset 8
 1121              	 .cfi_offset 7,-8
 1122              	 .cfi_offset 14,-4
 1123 0002 86B0     	 sub sp,sp,#24
 1124              	.LCFI50:
 1125              	 .cfi_def_cfa_offset 32
 1126 0004 00AF     	 add r7,sp,#0
 1127              	.LCFI51:
 1128              	 .cfi_def_cfa_register 7
 1129 0006 F860     	 str r0,[r7,#12]
 1130 0008 B960     	 str r1,[r7,#8]
 1131 000a 7A60     	 str r2,[r7,#4]
 383:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
 384:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
 385:../Libraries/XMCLib/src/xmc_vadc.c **** 
 386:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong Module Pointer", (global_ptr == VADC))
 387:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong EMUX Group", (emuxif < XMC_VADC_NUM_EMUX_INTERF
 388:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong VADC Group", (group < XMC_VADC_MAXIMUM_NUM_GROU
 389:../Libraries/XMCLib/src/xmc_vadc.c **** 
 390:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == emuxif)
 1132              	 .loc 2 390 6
 1133 000c BB68     	 ldr r3,[r7,#8]
 1134 000e 002B     	 cmp r3,#0
 1135 0010 04D1     	 bne .L46
 391:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 392:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Pos;
 1136              	 .loc 2 392 10
 1137 0012 0023     	 movs r3,#0
 1138 0014 3B61     	 str r3,[r7,#16]
 393:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Msk;
 1139              	 .loc 2 393 10
 1140 0016 0F23     	 movs r3,#15
 1141 0018 7B61     	 str r3,[r7,#20]
 1142 001a 03E0     	 b .L47
 1143              	.L46:
 394:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 395:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 396:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 397:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Pos;
 1144              	 .loc 2 397 10
 1145 001c 0423     	 movs r3,#4
 1146 001e 3B61     	 str r3,[r7,#16]
 398:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Msk;
 1147              	 .loc 2 398 10
 1148 0020 F023     	 movs r3,#240
 1149 0022 7B61     	 str r3,[r7,#20]
 1150              	.L47:
 399:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 400:../Libraries/XMCLib/src/xmc_vadc.c **** 
 401:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL &= ~(mask);
 1151              	 .loc 2 401 23
 1152 0024 FA68     	 ldr r2,[r7,#12]
 1153 0026 FC23     	 movs r3,#252
 1154 0028 9B00     	 lsls r3,r3,#2
 1155 002a D358     	 ldr r3,[r2,r3]
 1156              	 .loc 2 401 26
 1157 002c 7A69     	 ldr r2,[r7,#20]
 1158 002e D243     	 mvns r2,r2
 1159              	 .loc 2 401 23
 1160 0030 1A40     	 ands r2,r3
 1161 0032 1100     	 movs r1,r2
 1162 0034 FA68     	 ldr r2,[r7,#12]
 1163 0036 FC23     	 movs r3,#252
 1164 0038 9B00     	 lsls r3,r3,#2
 1165 003a D150     	 str r1,[r2,r3]
 402:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 1166              	 .loc 2 402 23
 1167 003c FA68     	 ldr r2,[r7,#12]
 1168 003e FC23     	 movs r3,#252
 1169 0040 9B00     	 lsls r3,r3,#2
 1170 0042 D258     	 ldr r2,[r2,r3]
 1171              	 .loc 2 402 44
 1172 0044 7968     	 ldr r1,[r7,#4]
 1173 0046 3B69     	 ldr r3,[r7,#16]
 1174 0048 9940     	 lsls r1,r1,r3
 1175 004a 0B00     	 movs r3,r1
 1176              	 .loc 2 402 23
 1177 004c 1A43     	 orrs r2,r3
 1178 004e 1100     	 movs r1,r2
 1179 0050 FA68     	 ldr r2,[r7,#12]
 1180 0052 FC23     	 movs r3,#252
 1181 0054 9B00     	 lsls r3,r3,#2
 1182 0056 D150     	 str r1,[r2,r3]
 403:../Libraries/XMCLib/src/xmc_vadc.c **** 
 404:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1183              	 .loc 2 404 1
 1184 0058 C046     	 nop
 1185 005a BD46     	 mov sp,r7
 1186 005c 06B0     	 add sp,sp,#24
 1187              	 
 1188 005e 80BD     	 pop {r7,pc}
 1189              	 .cfi_endproc
 1190              	.LFE156:
 1192              	 .section .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode,"ax",%progbits
 1193              	 .align 1
 1194              	 .global XMC_VADC_GLOBAL_SetResultEventInterruptNode
 1195              	 .syntax unified
 1196              	 .code 16
 1197              	 .thumb_func
 1198              	 .fpu softvfp
 1200              	XMC_VADC_GLOBAL_SetResultEventInterruptNode:
 1201              	.LFB157:
 405:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 406:../Libraries/XMCLib/src/xmc_vadc.c **** 
 407:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind result event with a service request line */
 408:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
 409:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1202              	 .loc 2 409 1
 1203              	 .cfi_startproc
 1204              	 
 1205              	 
 1206 0000 80B5     	 push {r7,lr}
 1207              	.LCFI52:
 1208              	 .cfi_def_cfa_offset 8
 1209              	 .cfi_offset 7,-8
 1210              	 .cfi_offset 14,-4
 1211 0002 84B0     	 sub sp,sp,#16
 1212              	.LCFI53:
 1213              	 .cfi_def_cfa_offset 24
 1214 0004 00AF     	 add r7,sp,#0
 1215              	.LCFI54:
 1216              	 .cfi_def_cfa_register 7
 1217 0006 7860     	 str r0,[r7,#4]
 1218 0008 0A00     	 movs r2,r1
 1219 000a FB1C     	 adds r3,r7,#3
 1220 000c 1A70     	 strb r2,[r3]
 410:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 411:../Libraries/XMCLib/src/xmc_vadc.c ****   
 412:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VAD
 413:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHAR
 414:../Libraries/XMCLib/src/xmc_vadc.c **** 
 415:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1221              	 .loc 2 415 6
 1222 000e FB1C     	 adds r3,r7,#3
 1223 0010 1B78     	 ldrb r3,[r3]
 1224 0012 032B     	 cmp r3,#3
 1225 0014 04D9     	 bls .L49
 416:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 417:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1226              	 .loc 2 417 12
 1227 0016 FB1C     	 adds r3,r7,#3
 1228 0018 1B78     	 ldrb r3,[r3]
 1229              	 .loc 2 417 10
 1230 001a 043B     	 subs r3,r3,#4
 1231 001c FB60     	 str r3,[r7,#12]
 1232 001e 02E0     	 b .L50
 1233              	.L49:
 418:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 419:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 420:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 421:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1234              	 .loc 2 421 10
 1235 0020 FB1C     	 adds r3,r7,#3
 1236 0022 1B78     	 ldrb r3,[r3]
 1237 0024 FB60     	 str r3,[r7,#12]
 1238              	.L50:
 422:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 423:../Libraries/XMCLib/src/xmc_vadc.c **** 
 424:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
 1239              	 .loc 2 424 24
 1240 0026 7A68     	 ldr r2,[r7,#4]
 1241 0028 A023     	 movs r3,#160
 1242 002a 5B00     	 lsls r3,r3,#1
 1243 002c D358     	 ldr r3,[r2,r3]
 1244 002e 0B4A     	 ldr r2,.L51
 1245 0030 1340     	 ands r3,r2
 1246 0032 1900     	 movs r1,r3
 1247 0034 7A68     	 ldr r2,[r7,#4]
 1248 0036 A023     	 movs r3,#160
 1249 0038 5B00     	 lsls r3,r3,#1
 1250 003a D150     	 str r1,[r2,r3]
 425:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 1251              	 .loc 2 425 24
 1252 003c 7A68     	 ldr r2,[r7,#4]
 1253 003e A023     	 movs r3,#160
 1254 0040 5B00     	 lsls r3,r3,#1
 1255 0042 D258     	 ldr r2,[r2,r3]
 1256              	 .loc 2 425 43
 1257 0044 FB68     	 ldr r3,[r7,#12]
 1258 0046 1B04     	 lsls r3,r3,#16
 1259              	 .loc 2 425 24
 1260 0048 1A43     	 orrs r2,r3
 1261 004a 1100     	 movs r1,r2
 1262 004c 7A68     	 ldr r2,[r7,#4]
 1263 004e A023     	 movs r3,#160
 1264 0050 5B00     	 lsls r3,r3,#1
 1265 0052 D150     	 str r1,[r2,r3]
 426:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1266              	 .loc 2 426 1
 1267 0054 C046     	 nop
 1268 0056 BD46     	 mov sp,r7
 1269 0058 04B0     	 add sp,sp,#16
 1270              	 
 1271 005a 80BD     	 pop {r7,pc}
 1272              	.L52:
 1273              	 .align 2
 1274              	.L51:
 1275 005c FFFFF0FF 	 .word -983041
 1276              	 .cfi_endproc
 1277              	.LFE157:
 1279              	 .section .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode,"ax",%progbits
 1280              	 .align 1
 1281              	 .global XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 1282              	 .syntax unified
 1283              	 .code 16
 1284              	 .thumb_func
 1285              	 .fpu softvfp
 1287              	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:
 1288              	.LFB158:
 427:../Libraries/XMCLib/src/xmc_vadc.c **** 
 428:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind request source event with a service request line */
 429:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
 430:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1289              	 .loc 2 430 1
 1290              	 .cfi_startproc
 1291              	 
 1292              	 
 1293 0000 80B5     	 push {r7,lr}
 1294              	.LCFI55:
 1295              	 .cfi_def_cfa_offset 8
 1296              	 .cfi_offset 7,-8
 1297              	 .cfi_offset 14,-4
 1298 0002 84B0     	 sub sp,sp,#16
 1299              	.LCFI56:
 1300              	 .cfi_def_cfa_offset 24
 1301 0004 00AF     	 add r7,sp,#0
 1302              	.LCFI57:
 1303              	 .cfi_def_cfa_register 7
 1304 0006 7860     	 str r0,[r7,#4]
 1305 0008 0A00     	 movs r2,r1
 1306 000a FB1C     	 adds r3,r7,#3
 1307 000c 1A70     	 strb r2,[r3]
 431:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 432:../Libraries/XMCLib/src/xmc_vadc.c ****   
 433:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_
 434:../Libraries/XMCLib/src/xmc_vadc.c **** 
 435:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1308              	 .loc 2 435 6
 1309 000e FB1C     	 adds r3,r7,#3
 1310 0010 1B78     	 ldrb r3,[r3]
 1311 0012 032B     	 cmp r3,#3
 1312 0014 04D9     	 bls .L54
 436:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 437:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1313              	 .loc 2 437 12
 1314 0016 FB1C     	 adds r3,r7,#3
 1315 0018 1B78     	 ldrb r3,[r3]
 1316              	 .loc 2 437 10
 1317 001a 043B     	 subs r3,r3,#4
 1318 001c FB60     	 str r3,[r7,#12]
 1319 001e 02E0     	 b .L55
 1320              	.L54:
 438:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 439:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 440:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 441:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1321              	 .loc 2 441 10
 1322 0020 FB1C     	 adds r3,r7,#3
 1323 0022 1B78     	 ldrb r3,[r3]
 1324 0024 FB60     	 str r3,[r7,#12]
 1325              	.L55:
 442:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 443:../Libraries/XMCLib/src/xmc_vadc.c **** 
 444:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 1326              	 .loc 2 444 24
 1327 0026 7A68     	 ldr r2,[r7,#4]
 1328 0028 A023     	 movs r3,#160
 1329 002a 5B00     	 lsls r3,r3,#1
 1330 002c D358     	 ldr r3,[r2,r3]
 1331 002e 0F22     	 movs r2,#15
 1332 0030 9343     	 bics r3,r2
 1333 0032 1900     	 movs r1,r3
 1334 0034 7A68     	 ldr r2,[r7,#4]
 1335 0036 A023     	 movs r3,#160
 1336 0038 5B00     	 lsls r3,r3,#1
 1337 003a D150     	 str r1,[r2,r3]
 445:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 1338              	 .loc 2 445 24
 1339 003c 7A68     	 ldr r2,[r7,#4]
 1340 003e A023     	 movs r3,#160
 1341 0040 5B00     	 lsls r3,r3,#1
 1342 0042 D258     	 ldr r2,[r2,r3]
 1343 0044 FB68     	 ldr r3,[r7,#12]
 1344 0046 1A43     	 orrs r2,r3
 1345 0048 1100     	 movs r1,r2
 1346 004a 7A68     	 ldr r2,[r7,#4]
 1347 004c A023     	 movs r3,#160
 1348 004e 5B00     	 lsls r3,r3,#1
 1349 0050 D150     	 str r1,[r2,r3]
 446:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1350              	 .loc 2 446 1
 1351 0052 C046     	 nop
 1352 0054 BD46     	 mov sp,r7
 1353 0056 04B0     	 add sp,sp,#16
 1354              	 
 1355 0058 80BD     	 pop {r7,pc}
 1356              	 .cfi_endproc
 1357              	.LFE158:
 1359              	 .section .text.XMC_VADC_GROUP_Init,"ax",%progbits
 1360              	 .align 1
 1361              	 .global XMC_VADC_GROUP_Init
 1362              	 .syntax unified
 1363              	 .code 16
 1364              	 .thumb_func
 1365              	 .fpu softvfp
 1367              	XMC_VADC_GROUP_Init:
 1368              	.LFB159:
 447:../Libraries/XMCLib/src/xmc_vadc.c **** 
 448:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize an instance of group of VADC hardware */
 449:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)  
 450:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
 451:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1369              	 .loc 2 451 1
 1370              	 .cfi_startproc
 1371              	 
 1372              	 
 1373 0000 80B5     	 push {r7,lr}
 1374              	.LCFI58:
 1375              	 .cfi_def_cfa_offset 8
 1376              	 .cfi_offset 7,-8
 1377              	 .cfi_offset 14,-4
 1378 0002 82B0     	 sub sp,sp,#8
 1379              	.LCFI59:
 1380              	 .cfi_def_cfa_offset 16
 1381 0004 00AF     	 add r7,sp,#0
 1382              	.LCFI60:
 1383              	 .cfi_def_cfa_register 7
 1384 0006 7860     	 str r0,[r7,#4]
 1385 0008 3960     	 str r1,[r7]
 452:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 453:../Libraries/XMCLib/src/xmc_vadc.c **** 
 454:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the input classes */
 455:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 1386              	 .loc 2 455 3
 1387 000a 3B68     	 ldr r3,[r7]
 1388 000c 5968     	 ldr r1,[r3,#4]
 1389 000e 7868     	 ldr r0,[r7,#4]
 1390 0010 0023     	 movs r3,#0
 1391 0012 0022     	 movs r2,#0
 1392 0014 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 456:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 1393              	 .loc 2 456 3
 1394 0018 3B68     	 ldr r3,[r7]
 1395 001a 5968     	 ldr r1,[r3,#4]
 1396 001c 7868     	 ldr r0,[r7,#4]
 1397 001e 0023     	 movs r3,#0
 1398 0020 0122     	 movs r2,#1
 1399 0022 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 457:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 1400              	 .loc 2 457 3
 1401 0026 3B68     	 ldr r3,[r7]
 1402 0028 9968     	 ldr r1,[r3,#8]
 1403 002a 7868     	 ldr r0,[r7,#4]
 1404 002c 0123     	 movs r3,#1
 1405 002e 0022     	 movs r2,#0
 1406 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 458:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 1407              	 .loc 2 458 3
 1408 0034 3B68     	 ldr r3,[r7]
 1409 0036 9968     	 ldr r1,[r3,#8]
 1410 0038 7868     	 ldr r0,[r7,#4]
 1411 003a 0123     	 movs r3,#1
 1412 003c 0122     	 movs r2,#1
 1413 003e FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 459:../Libraries/XMCLib/src/xmc_vadc.c **** 
 460:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = config->g_arbcfg;
 1414              	 .loc 2 460 29
 1415 0042 3B68     	 ldr r3,[r7]
 1416 0044 1A69     	 ldr r2,[r3,#16]
 1417              	 .loc 2 460 21
 1418 0046 7B68     	 ldr r3,[r7,#4]
 1419 0048 8021     	 movs r1,#128
 1420 004a 5A50     	 str r2,[r3,r1]
 461:../Libraries/XMCLib/src/xmc_vadc.c **** 
 462:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = config->g_bound;
 1421              	 .loc 2 462 28
 1422 004c 3B68     	 ldr r3,[r7]
 1423 004e DA68     	 ldr r2,[r3,#12]
 1424              	 .loc 2 462 20
 1425 0050 7B68     	 ldr r3,[r7,#4]
 1426 0052 B821     	 movs r1,#184
 1427 0054 5A50     	 str r2,[r3,r1]
 463:../Libraries/XMCLib/src/xmc_vadc.c **** 
 464:../Libraries/XMCLib/src/xmc_vadc.c ****   /* External mux configuration */
 465:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 1428              	 .loc 2 465 3
 1429 0056 3B68     	 ldr r3,[r7]
 1430 0058 1A68     	 ldr r2,[r3]
 1431 005a 7B68     	 ldr r3,[r7,#4]
 1432 005c 1100     	 movs r1,r2
 1433 005e 1800     	 movs r0,r3
 1434 0060 FFF7FEFF 	 bl XMC_VADC_GROUP_ExternalMuxControlInit
 466:../Libraries/XMCLib/src/xmc_vadc.c **** 
 467:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1435              	 .loc 2 467 1
 1436 0064 C046     	 nop
 1437 0066 BD46     	 mov sp,r7
 1438 0068 02B0     	 add sp,sp,#8
 1439              	 
 1440 006a 80BD     	 pop {r7,pc}
 1441              	 .cfi_endproc
 1442              	.LFE159:
 1444              	 .section .text.XMC_VADC_GROUP_InputClassInit,"ax",%progbits
 1445              	 .align 1
 1446              	 .global XMC_VADC_GROUP_InputClassInit
 1447              	 .syntax unified
 1448              	 .code 16
 1449              	 .thumb_func
 1450              	 .fpu softvfp
 1452              	XMC_VADC_GROUP_InputClassInit:
 1453              	.LFB160:
 468:../Libraries/XMCLib/src/xmc_vadc.c **** 
 469:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to program conversion characteristics */
 470:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
 471:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 472:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1454              	 .loc 2 472 1
 1455              	 .cfi_startproc
 1456              	 
 1457              	 
 1458 0000 80B5     	 push {r7,lr}
 1459              	.LCFI61:
 1460              	 .cfi_def_cfa_offset 8
 1461              	 .cfi_offset 7,-8
 1462              	 .cfi_offset 14,-4
 1463 0002 8CB0     	 sub sp,sp,#48
 1464              	.LCFI62:
 1465              	 .cfi_def_cfa_offset 56
 1466 0004 00AF     	 add r7,sp,#0
 1467              	.LCFI63:
 1468              	 .cfi_def_cfa_register 7
 1469 0006 F860     	 str r0,[r7,#12]
 1470 0008 B960     	 str r1,[r7,#8]
 1471 000a 3B60     	 str r3,[r7]
 1472 000c FB1D     	 adds r3,r7,#7
 1473 000e 1A70     	 strb r2,[r3]
 473:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_class;
 474:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_pos;
 475:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_pos;
 476:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_mask;
 477:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_mask;
 478:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time;
 479:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONVMODE_t conv_mode;
 480:../Libraries/XMCLib/src/xmc_vadc.c **** 
 481:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
 482:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_
 483:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLAS
 484:../Libraries/XMCLib/src/xmc_vadc.c **** 
 485:../Libraries/XMCLib/src/xmc_vadc.c ****   /* 
 486:../Libraries/XMCLib/src/xmc_vadc.c ****    * Obtain the mask and position macros of the parameters based on what is being requested - Stand
 487:../Libraries/XMCLib/src/xmc_vadc.c ****    * external mux channels.
 488:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 489:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_CONV_STD == conv_type)
 1474              	 .loc 2 489 6
 1475 0010 FB1D     	 adds r3,r7,#7
 1476 0012 1B78     	 ldrb r3,[r3]
 1477 0014 002B     	 cmp r3,#0
 1478 0016 19D1     	 bne .L58
 490:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 491:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 1479              	 .loc 2 491 22
 1480 0018 0823     	 movs r3,#8
 1481 001a FB62     	 str r3,[r7,#44]
 492:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 1482              	 .loc 2 492 22
 1483 001c E023     	 movs r3,#224
 1484 001e DB00     	 lsls r3,r3,#3
 1485 0020 7B62     	 str r3,[r7,#36]
 493:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 1486              	 .loc 2 493 22
 1487 0022 0023     	 movs r3,#0
 1488 0024 BB62     	 str r3,[r7,#40]
 494:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 1489              	 .loc 2 494 22
 1490 0026 1F23     	 movs r3,#31
 1491 0028 3B62     	 str r3,[r7,#32]
 495:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sample_time_std_conv;
 1492              	 .loc 2 495 41
 1493 002a 0823     	 movs r3,#8
 1494 002c FB18     	 adds r3,r7,r3
 1495 002e 1B78     	 ldrb r3,[r3]
 1496 0030 DB06     	 lsls r3,r3,#27
 1497 0032 DB0E     	 lsrs r3,r3,#27
 1498 0034 DBB2     	 uxtb r3,r3
 1499              	 .loc 2 495 22
 1500 0036 FB61     	 str r3,[r7,#28]
 496:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 1501              	 .loc 2 496 51
 1502 0038 0923     	 movs r3,#9
 1503 003a FB18     	 adds r3,r7,r3
 1504 003c 1B78     	 ldrb r3,[r3]
 1505 003e 5B07     	 lsls r3,r3,#29
 1506 0040 5B0F     	 lsrs r3,r3,#29
 1507 0042 DAB2     	 uxtb r2,r3
 1508              	 .loc 2 496 22
 1509 0044 1B23     	 movs r3,#27
 1510 0046 FB18     	 adds r3,r7,r3
 1511 0048 1A70     	 strb r2,[r3]
 1512 004a 19E0     	 b .L59
 1513              	.L58:
 497:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 498:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 499:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 500:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 1514              	 .loc 2 500 22
 1515 004c 1823     	 movs r3,#24
 1516 004e FB62     	 str r3,[r7,#44]
 501:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 1517              	 .loc 2 501 22
 1518 0050 E023     	 movs r3,#224
 1519 0052 DB04     	 lsls r3,r3,#19
 1520 0054 7B62     	 str r3,[r7,#36]
 502:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 1521              	 .loc 2 502 22
 1522 0056 1023     	 movs r3,#16
 1523 0058 BB62     	 str r3,[r7,#40]
 503:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 1524              	 .loc 2 503 22
 1525 005a F823     	 movs r3,#248
 1526 005c 5B03     	 lsls r3,r3,#13
 1527 005e 3B62     	 str r3,[r7,#32]
 504:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 1528              	 .loc 2 504 41
 1529 0060 0A23     	 movs r3,#10
 1530 0062 FB18     	 adds r3,r7,r3
 1531 0064 1B78     	 ldrb r3,[r3]
 1532 0066 DB06     	 lsls r3,r3,#27
 1533 0068 DB0E     	 lsrs r3,r3,#27
 1534 006a DBB2     	 uxtb r3,r3
 1535              	 .loc 2 504 22
 1536 006c FB61     	 str r3,[r7,#28]
 505:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 1537              	 .loc 2 505 51
 1538 006e 0B23     	 movs r3,#11
 1539 0070 FB18     	 adds r3,r7,r3
 1540 0072 1B78     	 ldrb r3,[r3]
 1541 0074 5B07     	 lsls r3,r3,#29
 1542 0076 5B0F     	 lsrs r3,r3,#29
 1543 0078 DAB2     	 uxtb r2,r3
 1544              	 .loc 2 505 22
 1545 007a 1B23     	 movs r3,#27
 1546 007c FB18     	 adds r3,r7,r3
 1547 007e 1A70     	 strb r2,[r3]
 1548              	.L59:
 506:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 507:../Libraries/XMCLib/src/xmc_vadc.c **** 
 508:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the class */
 509:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class  = group_ptr->ICLASS[set_num];
 1549              	 .loc 2 509 15
 1550 0080 FB68     	 ldr r3,[r7,#12]
 1551 0082 3A68     	 ldr r2,[r7]
 1552 0084 2832     	 adds r2,r2,#40
 1553 0086 9200     	 lsls r2,r2,#2
 1554 0088 D358     	 ldr r3,[r2,r3]
 1555 008a 7B61     	 str r3,[r7,#20]
 510:../Libraries/XMCLib/src/xmc_vadc.c **** 
 511:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the class register */
 512:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(conv_mode_mask);
 1556              	 .loc 2 512 17
 1557 008c 7B6A     	 ldr r3,[r7,#36]
 1558 008e DA43     	 mvns r2,r3
 1559              	 .loc 2 512 14
 1560 0090 7B69     	 ldr r3,[r7,#20]
 1561 0092 1340     	 ands r3,r2
 1562 0094 7B61     	 str r3,[r7,#20]
 513:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 1563              	 .loc 2 513 28
 1564 0096 1B23     	 movs r3,#27
 1565 0098 FB18     	 adds r3,r7,r3
 1566 009a 1A78     	 ldrb r2,[r3]
 1567              	 .loc 2 513 17
 1568 009c FB6A     	 ldr r3,[r7,#44]
 1569 009e 9A40     	 lsls r2,r2,r3
 1570 00a0 1300     	 movs r3,r2
 1571              	 .loc 2 513 14
 1572 00a2 7A69     	 ldr r2,[r7,#20]
 1573 00a4 1343     	 orrs r3,r2
 1574 00a6 7B61     	 str r3,[r7,#20]
 514:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 1575              	 .loc 2 514 17
 1576 00a8 3B6A     	 ldr r3,[r7,#32]
 1577 00aa DA43     	 mvns r2,r3
 1578              	 .loc 2 514 14
 1579 00ac 7B69     	 ldr r3,[r7,#20]
 1580 00ae 1340     	 ands r3,r2
 1581 00b0 7B61     	 str r3,[r7,#20]
 515:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 1582              	 .loc 2 515 40
 1583 00b2 FA69     	 ldr r2,[r7,#28]
 1584 00b4 BB6A     	 ldr r3,[r7,#40]
 1585 00b6 9A40     	 lsls r2,r2,r3
 1586 00b8 1300     	 movs r3,r2
 1587              	 .loc 2 515 14
 1588 00ba 7A69     	 ldr r2,[r7,#20]
 1589 00bc 1343     	 orrs r3,r2
 1590 00be 7B61     	 str r3,[r7,#20]
 516:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 1591              	 .loc 2 516 30
 1592 00c0 FB68     	 ldr r3,[r7,#12]
 1593 00c2 3A68     	 ldr r2,[r7]
 1594 00c4 2832     	 adds r2,r2,#40
 1595 00c6 9200     	 lsls r2,r2,#2
 1596 00c8 7969     	 ldr r1,[r7,#20]
 1597 00ca D150     	 str r1,[r2,r3]
 517:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1598              	 .loc 2 517 1
 1599 00cc C046     	 nop
 1600 00ce BD46     	 mov sp,r7
 1601 00d0 0CB0     	 add sp,sp,#48
 1602              	 
 1603 00d2 80BD     	 pop {r7,pc}
 1604              	 .cfi_endproc
 1605              	.LFE160:
 1607              	 .section .text.XMC_VADC_GROUP_SetPowerMode,"ax",%progbits
 1608              	 .align 1
 1609              	 .global XMC_VADC_GROUP_SetPowerMode
 1610              	 .syntax unified
 1611              	 .code 16
 1612              	 .thumb_func
 1613              	 .fpu softvfp
 1615              	XMC_VADC_GROUP_SetPowerMode:
 1616              	.LFB161:
 518:../Libraries/XMCLib/src/xmc_vadc.c **** 
 519:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which sets the power mode of analog converter of a VADC group */
 520:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
 521:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1617              	 .loc 2 521 1
 1618              	 .cfi_startproc
 1619              	 
 1620              	 
 1621 0000 80B5     	 push {r7,lr}
 1622              	.LCFI64:
 1623              	 .cfi_def_cfa_offset 8
 1624              	 .cfi_offset 7,-8
 1625              	 .cfi_offset 14,-4
 1626 0002 84B0     	 sub sp,sp,#16
 1627              	.LCFI65:
 1628              	 .cfi_def_cfa_offset 24
 1629 0004 00AF     	 add r7,sp,#0
 1630              	.LCFI66:
 1631              	 .cfi_def_cfa_register 7
 1632 0006 7860     	 str r0,[r7,#4]
 1633 0008 0A00     	 movs r2,r1
 1634 000a FB1C     	 adds r3,r7,#3
 1635 000c 1A70     	 strb r2,[r3]
 522:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t arbcfg;
 523:../Libraries/XMCLib/src/xmc_vadc.c **** 
 524:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 525:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMOD
 526:../Libraries/XMCLib/src/xmc_vadc.c **** 
 527:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = group_ptr->ARBCFG;
 1636              	 .loc 2 527 10
 1637 000e 7B68     	 ldr r3,[r7,#4]
 1638 0010 8022     	 movs r2,#128
 1639 0012 9B58     	 ldr r3,[r3,r2]
 1640 0014 FB60     	 str r3,[r7,#12]
 528:../Libraries/XMCLib/src/xmc_vadc.c **** 
 529:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 1641              	 .loc 2 529 10
 1642 0016 FB68     	 ldr r3,[r7,#12]
 1643 0018 0322     	 movs r2,#3
 1644 001a 9343     	 bics r3,r2
 1645 001c FB60     	 str r3,[r7,#12]
 530:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 1646              	 .loc 2 530 13
 1647 001e FB1C     	 adds r3,r7,#3
 1648 0020 1B78     	 ldrb r3,[r3]
 1649              	 .loc 2 530 10
 1650 0022 FA68     	 ldr r2,[r7,#12]
 1651 0024 1343     	 orrs r3,r2
 1652 0026 FB60     	 str r3,[r7,#12]
 531:../Libraries/XMCLib/src/xmc_vadc.c **** 
 532:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = arbcfg;
 1653              	 .loc 2 532 21
 1654 0028 7B68     	 ldr r3,[r7,#4]
 1655 002a 8021     	 movs r1,#128
 1656 002c FA68     	 ldr r2,[r7,#12]
 1657 002e 5A50     	 str r2,[r3,r1]
 533:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1658              	 .loc 2 533 1
 1659 0030 C046     	 nop
 1660 0032 BD46     	 mov sp,r7
 1661 0034 04B0     	 add sp,sp,#16
 1662              	 
 1663 0036 80BD     	 pop {r7,pc}
 1664              	 .cfi_endproc
 1665              	.LFE161:
 1667              	 .section .text.XMC_VADC_GROUP_SetSyncSlave,"ax",%progbits
 1668              	 .align 1
 1669              	 .global XMC_VADC_GROUP_SetSyncSlave
 1670              	 .syntax unified
 1671              	 .code 16
 1672              	 .thumb_func
 1673              	 .fpu softvfp
 1675              	XMC_VADC_GROUP_SetSyncSlave:
 1676              	.LFB162:
 534:../Libraries/XMCLib/src/xmc_vadc.c **** 
 535:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a slave group during sync conversions */
 536:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
 537:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1677              	 .loc 2 537 1
 1678              	 .cfi_startproc
 1679              	 
 1680              	 
 1681 0000 80B5     	 push {r7,lr}
 1682              	.LCFI67:
 1683              	 .cfi_def_cfa_offset 8
 1684              	 .cfi_offset 7,-8
 1685              	 .cfi_offset 14,-4
 1686 0002 86B0     	 sub sp,sp,#24
 1687              	.LCFI68:
 1688              	 .cfi_def_cfa_offset 32
 1689 0004 00AF     	 add r7,sp,#0
 1690              	.LCFI69:
 1691              	 .cfi_def_cfa_register 7
 1692 0006 F860     	 str r0,[r7,#12]
 1693 0008 B960     	 str r1,[r7,#8]
 1694 000a 7A60     	 str r2,[r7,#4]
 538:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 539:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 540:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 541:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 542:../Libraries/XMCLib/src/xmc_vadc.c ****   
 543:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 544:../Libraries/XMCLib/src/xmc_vadc.c **** 
 545:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the coding of SYNCTR */
 546:../Libraries/XMCLib/src/xmc_vadc.c ****   if (slave_grp > master_grp)
 1695              	 .loc 2 546 6
 1696 000c 7A68     	 ldr r2,[r7,#4]
 1697 000e BB68     	 ldr r3,[r7,#8]
 1698 0010 9A42     	 cmp r2,r3
 1699 0012 02D9     	 bls .L62
 547:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 548:../Libraries/XMCLib/src/xmc_vadc.c ****     master_grp = master_grp + 1U;
 1700              	 .loc 2 548 16
 1701 0014 BB68     	 ldr r3,[r7,#8]
 1702 0016 0133     	 adds r3,r3,#1
 1703 0018 BB60     	 str r3,[r7,#8]
 1704              	.L62:
 549:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 550:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 551:../Libraries/XMCLib/src/xmc_vadc.c ****   
 552:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program SYNCTR */
 553:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1705              	 .loc 2 553 10
 1706 001a FB68     	 ldr r3,[r7,#12]
 1707 001c C022     	 movs r2,#192
 1708 001e 9B58     	 ldr r3,[r3,r2]
 1709 0020 7B61     	 str r3,[r7,#20]
 554:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1710              	 .loc 2 554 12
 1711 0022 7B69     	 ldr r3,[r7,#20]
 1712 0024 0322     	 movs r2,#3
 1713 0026 9343     	 bics r3,r2
 1714 0028 7B61     	 str r3,[r7,#20]
 555:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   |= master_grp;
 1715              	 .loc 2 555 12
 1716 002a 7A69     	 ldr r2,[r7,#20]
 1717 002c BB68     	 ldr r3,[r7,#8]
 1718 002e 1343     	 orrs r3,r2
 1719 0030 7B61     	 str r3,[r7,#20]
 556:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1720              	 .loc 2 556 21
 1721 0032 FB68     	 ldr r3,[r7,#12]
 1722 0034 C021     	 movs r1,#192
 1723 0036 7A69     	 ldr r2,[r7,#20]
 1724 0038 5A50     	 str r2,[r3,r1]
 557:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1725              	 .loc 2 557 1
 1726 003a C046     	 nop
 1727 003c BD46     	 mov sp,r7
 1728 003e 06B0     	 add sp,sp,#24
 1729              	 
 1730 0040 80BD     	 pop {r7,pc}
 1731              	 .cfi_endproc
 1732              	.LFE162:
 1734              	 .section .text.XMC_VADC_GROUP_SetSyncMaster,"ax",%progbits
 1735              	 .align 1
 1736              	 .global XMC_VADC_GROUP_SetSyncMaster
 1737              	 .syntax unified
 1738              	 .code 16
 1739              	 .thumb_func
 1740              	 .fpu softvfp
 1742              	XMC_VADC_GROUP_SetSyncMaster:
 1743              	.LFB163:
 558:../Libraries/XMCLib/src/xmc_vadc.c **** 
 559:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a master group during sync conversions */
 560:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
 561:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1744              	 .loc 2 561 1
 1745              	 .cfi_startproc
 1746              	 
 1747              	 
 1748 0000 80B5     	 push {r7,lr}
 1749              	.LCFI70:
 1750              	 .cfi_def_cfa_offset 8
 1751              	 .cfi_offset 7,-8
 1752              	 .cfi_offset 14,-4
 1753 0002 84B0     	 sub sp,sp,#16
 1754              	.LCFI71:
 1755              	 .cfi_def_cfa_offset 24
 1756 0004 00AF     	 add r7,sp,#0
 1757              	.LCFI72:
 1758              	 .cfi_def_cfa_register 7
 1759 0006 7860     	 str r0,[r7,#4]
 562:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 563:../Libraries/XMCLib/src/xmc_vadc.c **** 
 564:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 565:../Libraries/XMCLib/src/xmc_vadc.c **** 
 566:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1760              	 .loc 2 566 10
 1761 0008 7B68     	 ldr r3,[r7,#4]
 1762 000a C022     	 movs r2,#192
 1763 000c 9B58     	 ldr r3,[r3,r2]
 1764 000e FB60     	 str r3,[r7,#12]
 567:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1765              	 .loc 2 567 12
 1766 0010 FB68     	 ldr r3,[r7,#12]
 1767 0012 0322     	 movs r2,#3
 1768 0014 9343     	 bics r3,r2
 1769 0016 FB60     	 str r3,[r7,#12]
 568:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1770              	 .loc 2 568 21
 1771 0018 7B68     	 ldr r3,[r7,#4]
 1772 001a C021     	 movs r1,#192
 1773 001c FA68     	 ldr r2,[r7,#12]
 1774 001e 5A50     	 str r2,[r3,r1]
 569:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1775              	 .loc 2 569 1
 1776 0020 C046     	 nop
 1777 0022 BD46     	 mov sp,r7
 1778 0024 04B0     	 add sp,sp,#16
 1779              	 
 1780 0026 80BD     	 pop {r7,pc}
 1781              	 .cfi_endproc
 1782              	.LFE163:
 1784              	 .section .text.XMC_VADC_GROUP_CheckSlaveReadiness,"ax",%progbits
 1785              	 .align 1
 1786              	 .global XMC_VADC_GROUP_CheckSlaveReadiness
 1787              	 .syntax unified
 1788              	 .code 16
 1789              	 .thumb_func
 1790              	 .fpu softvfp
 1792              	XMC_VADC_GROUP_CheckSlaveReadiness:
 1793              	.LFB164:
 570:../Libraries/XMCLib/src/xmc_vadc.c **** 
 571:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable checking of readiness of slaves before a synchronous conversion request is issued 
 572:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 573:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1794              	 .loc 2 573 1
 1795              	 .cfi_startproc
 1796              	 
 1797              	 
 1798 0000 80B5     	 push {r7,lr}
 1799              	.LCFI73:
 1800              	 .cfi_def_cfa_offset 8
 1801              	 .cfi_offset 7,-8
 1802              	 .cfi_offset 14,-4
 1803 0002 84B0     	 sub sp,sp,#16
 1804              	.LCFI74:
 1805              	 .cfi_def_cfa_offset 24
 1806 0004 00AF     	 add r7,sp,#0
 1807              	.LCFI75:
 1808              	 .cfi_def_cfa_register 7
 1809 0006 7860     	 str r0,[r7,#4]
 1810 0008 3960     	 str r1,[r7]
 574:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i,master_grp_num;
 575:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
 576:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave_
 577:../Libraries/XMCLib/src/xmc_vadc.c **** 
 578:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num =0;
 1811              	 .loc 2 578 18
 1812 000a 0023     	 movs r3,#0
 1813 000c BB60     	 str r3,[r7,#8]
 579:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1814              	 .loc 2 579 8
 1815 000e 0023     	 movs r3,#0
 1816 0010 FB60     	 str r3,[r7,#12]
 1817              	 .loc 2 579 3
 1818 0012 0BE0     	 b .L65
 1819              	.L67:
 580:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 581:../Libraries/XMCLib/src/xmc_vadc.c ****     if(g_xmc_vadc_group_array[i] == group_ptr)
 1820              	 .loc 2 581 30
 1821 0014 124B     	 ldr r3,.L69
 1822 0016 FA68     	 ldr r2,[r7,#12]
 1823 0018 9200     	 lsls r2,r2,#2
 1824 001a D358     	 ldr r3,[r2,r3]
 1825              	 .loc 2 581 7
 1826 001c 7A68     	 ldr r2,[r7,#4]
 1827 001e 9A42     	 cmp r2,r3
 1828 0020 01D1     	 bne .L66
 582:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 583:../Libraries/XMCLib/src/xmc_vadc.c ****       master_grp_num = i;
 1829              	 .loc 2 583 22
 1830 0022 FB68     	 ldr r3,[r7,#12]
 1831 0024 BB60     	 str r3,[r7,#8]
 1832              	.L66:
 579:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1833              	 .loc 2 579 44 discriminator 2
 1834 0026 FB68     	 ldr r3,[r7,#12]
 1835 0028 0133     	 adds r3,r3,#1
 1836 002a FB60     	 str r3,[r7,#12]
 1837              	.L65:
 579:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1838              	 .loc 2 579 3 discriminator 1
 1839 002c FB68     	 ldr r3,[r7,#12]
 1840 002e 012B     	 cmp r3,#1
 1841 0030 F0D9     	 bls .L67
 584:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 585:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 586:../Libraries/XMCLib/src/xmc_vadc.c **** 
 587:../Libraries/XMCLib/src/xmc_vadc.c **** 
 588:../Libraries/XMCLib/src/xmc_vadc.c ****   if(slave_group < master_grp_num)
 1842              	 .loc 2 588 5
 1843 0032 3A68     	 ldr r2,[r7]
 1844 0034 BB68     	 ldr r3,[r7,#8]
 1845 0036 9A42     	 cmp r2,r3
 1846 0038 02D2     	 bcs .L68
 589:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 590:../Libraries/XMCLib/src/xmc_vadc.c ****     slave_group++;
 1847              	 .loc 2 590 16
 1848 003a 3B68     	 ldr r3,[r7]
 1849 003c 0133     	 adds r3,r3,#1
 1850 003e 3B60     	 str r3,[r7]
 1851              	.L68:
 591:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 592:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1852              	 .loc 2 592 21
 1853 0040 7B68     	 ldr r3,[r7,#4]
 1854 0042 C022     	 movs r2,#192
 1855 0044 9A58     	 ldr r2,[r3,r2]
 1856              	 .loc 2 592 44
 1857 0046 3B68     	 ldr r3,[r7]
 1858 0048 0333     	 adds r3,r3,#3
 1859              	 .loc 2 592 28
 1860 004a 0121     	 movs r1,#1
 1861 004c 9940     	 lsls r1,r1,r3
 1862 004e 0B00     	 movs r3,r1
 1863              	 .loc 2 592 21
 1864 0050 1A43     	 orrs r2,r3
 1865 0052 7B68     	 ldr r3,[r7,#4]
 1866 0054 C021     	 movs r1,#192
 1867 0056 5A50     	 str r2,[r3,r1]
 593:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1868              	 .loc 2 593 1
 1869 0058 C046     	 nop
 1870 005a BD46     	 mov sp,r7
 1871 005c 04B0     	 add sp,sp,#16
 1872              	 
 1873 005e 80BD     	 pop {r7,pc}
 1874              	.L70:
 1875              	 .align 2
 1876              	.L69:
 1877 0060 00000000 	 .word g_xmc_vadc_group_array
 1878              	 .cfi_endproc
 1879              	.LFE164:
 1881              	 .section .text.XMC_VADC_GROUP_IgnoreSlaveReadiness,"ax",%progbits
 1882              	 .align 1
 1883              	 .global XMC_VADC_GROUP_IgnoreSlaveReadiness
 1884              	 .syntax unified
 1885              	 .code 16
 1886              	 .thumb_func
 1887              	 .fpu softvfp
 1889              	XMC_VADC_GROUP_IgnoreSlaveReadiness:
 1890              	.LFB165:
 594:../Libraries/XMCLib/src/xmc_vadc.c **** 
 595:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable checking of readiness of slaves during synchronous conversions */
 596:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 597:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1891              	 .loc 2 597 1
 1892              	 .cfi_startproc
 1893              	 
 1894              	 
 1895 0000 80B5     	 push {r7,lr}
 1896              	.LCFI76:
 1897              	 .cfi_def_cfa_offset 8
 1898              	 .cfi_offset 7,-8
 1899              	 .cfi_offset 14,-4
 1900 0002 84B0     	 sub sp,sp,#16
 1901              	.LCFI77:
 1902              	 .cfi_def_cfa_offset 24
 1903 0004 00AF     	 add r7,sp,#0
 1904              	.LCFI78:
 1905              	 .cfi_def_cfa_register 7
 1906 0006 7860     	 str r0,[r7,#4]
 1907 0008 3960     	 str r1,[r7]
 598:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i,master_grp_num;
 599:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
 600:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave
 601:../Libraries/XMCLib/src/xmc_vadc.c **** 
 602:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num =0;
 1908              	 .loc 2 602 18
 1909 000a 0023     	 movs r3,#0
 1910 000c BB60     	 str r3,[r7,#8]
 603:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1911              	 .loc 2 603 8
 1912 000e 0023     	 movs r3,#0
 1913 0010 FB60     	 str r3,[r7,#12]
 1914              	 .loc 2 603 3
 1915 0012 0BE0     	 b .L72
 1916              	.L74:
 604:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 605:../Libraries/XMCLib/src/xmc_vadc.c **** 	  if(g_xmc_vadc_group_array[i] == group_ptr)
 1917              	 .loc 2 605 29
 1918 0014 134B     	 ldr r3,.L76
 1919 0016 FA68     	 ldr r2,[r7,#12]
 1920 0018 9200     	 lsls r2,r2,#2
 1921 001a D358     	 ldr r3,[r2,r3]
 1922              	 .loc 2 605 6
 1923 001c 7A68     	 ldr r2,[r7,#4]
 1924 001e 9A42     	 cmp r2,r3
 1925 0020 01D1     	 bne .L73
 606:../Libraries/XMCLib/src/xmc_vadc.c **** 	  {
 607:../Libraries/XMCLib/src/xmc_vadc.c **** 	    master_grp_num = i;
 1926              	 .loc 2 607 21
 1927 0022 FB68     	 ldr r3,[r7,#12]
 1928 0024 BB60     	 str r3,[r7,#8]
 1929              	.L73:
 603:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1930              	 .loc 2 603 44 discriminator 2
 1931 0026 FB68     	 ldr r3,[r7,#12]
 1932 0028 0133     	 adds r3,r3,#1
 1933 002a FB60     	 str r3,[r7,#12]
 1934              	.L72:
 603:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1935              	 .loc 2 603 3 discriminator 1
 1936 002c FB68     	 ldr r3,[r7,#12]
 1937 002e 012B     	 cmp r3,#1
 1938 0030 F0D9     	 bls .L74
 608:../Libraries/XMCLib/src/xmc_vadc.c **** 	  }
 609:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 610:../Libraries/XMCLib/src/xmc_vadc.c **** 
 611:../Libraries/XMCLib/src/xmc_vadc.c ****   if(slave_group < master_grp_num)
 1939              	 .loc 2 611 5
 1940 0032 3A68     	 ldr r2,[r7]
 1941 0034 BB68     	 ldr r3,[r7,#8]
 1942 0036 9A42     	 cmp r2,r3
 1943 0038 02D2     	 bcs .L75
 612:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 613:../Libraries/XMCLib/src/xmc_vadc.c **** 	  slave_group++;
 1944              	 .loc 2 613 15
 1945 003a 3B68     	 ldr r3,[r7]
 1946 003c 0133     	 adds r3,r3,#1
 1947 003e 3B60     	 str r3,[r7]
 1948              	.L75:
 614:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 615:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~(1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1949              	 .loc 2 615 21
 1950 0040 7B68     	 ldr r3,[r7,#4]
 1951 0042 C022     	 movs r2,#192
 1952 0044 9B58     	 ldr r3,[r3,r2]
 1953              	 .loc 2 615 45
 1954 0046 3A68     	 ldr r2,[r7]
 1955 0048 0332     	 adds r2,r2,#3
 1956              	 .loc 2 615 29
 1957 004a 0121     	 movs r1,#1
 1958 004c 9140     	 lsls r1,r1,r2
 1959 004e 0A00     	 movs r2,r1
 1960              	 .loc 2 615 24
 1961 0050 D243     	 mvns r2,r2
 1962              	 .loc 2 615 21
 1963 0052 1A40     	 ands r2,r3
 1964 0054 7B68     	 ldr r3,[r7,#4]
 1965 0056 C021     	 movs r1,#192
 1966 0058 5A50     	 str r2,[r3,r1]
 616:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1967              	 .loc 2 616 1
 1968 005a C046     	 nop
 1969 005c BD46     	 mov sp,r7
 1970 005e 04B0     	 add sp,sp,#16
 1971              	 
 1972 0060 80BD     	 pop {r7,pc}
 1973              	.L77:
 1974 0062 C046     	 .align 2
 1975              	.L76:
 1976 0064 00000000 	 .word g_xmc_vadc_group_array
 1977              	 .cfi_endproc
 1978              	.LFE165:
 1980              	 .section .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal,"ax",%progbits
 1981              	 .align 1
 1982              	 .global XMC_VADC_GROUP_SetSyncSlaveReadySignal
 1983              	 .syntax unified
 1984              	 .code 16
 1985              	 .thumb_func
 1986              	 .fpu softvfp
 1988              	XMC_VADC_GROUP_SetSyncSlaveReadySignal:
 1989              	.LFB166:
 617:../Libraries/XMCLib/src/xmc_vadc.c **** 
 618:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure EVAL bit in the slave groups*/
 619:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
 620:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint32_t eval_waiting_group,
 621:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint32_t eval_origin_group)
 622:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1990              	 .loc 2 622 1
 1991              	 .cfi_startproc
 1992              	 
 1993              	 
 1994 0000 80B5     	 push {r7,lr}
 1995              	.LCFI79:
 1996              	 .cfi_def_cfa_offset 8
 1997              	 .cfi_offset 7,-8
 1998              	 .cfi_offset 14,-4
 1999 0002 84B0     	 sub sp,sp,#16
 2000              	.LCFI80:
 2001              	 .cfi_def_cfa_offset 24
 2002 0004 00AF     	 add r7,sp,#0
 2003              	.LCFI81:
 2004              	 .cfi_def_cfa_register 7
 2005 0006 F860     	 str r0,[r7,#12]
 2006 0008 B960     	 str r1,[r7,#8]
 2007 000a 7A60     	 str r2,[r7,#4]
 623:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
 624:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group numbers", (eval_waiting_group == e
 625:../Libraries/XMCLib/src/xmc_vadc.c **** 
 626:../Libraries/XMCLib/src/xmc_vadc.c ****   if(eval_origin_group < eval_waiting_group)
 2008              	 .loc 2 626 5
 2009 000c 7A68     	 ldr r2,[r7,#4]
 2010 000e BB68     	 ldr r3,[r7,#8]
 2011 0010 9A42     	 cmp r2,r3
 2012 0012 02D2     	 bcs .L79
 627:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 628:../Libraries/XMCLib/src/xmc_vadc.c **** 	  eval_origin_group++;
 2013              	 .loc 2 628 21
 2014 0014 7B68     	 ldr r3,[r7,#4]
 2015 0016 0133     	 adds r3,r3,#1
 2016 0018 7B60     	 str r3,[r7,#4]
 2017              	.L79:
 629:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 630:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (eval_origin_group + XMC_VADC_SYNCTR_START_LOCATION));
 2018              	 .loc 2 630 21
 2019 001a FB68     	 ldr r3,[r7,#12]
 2020 001c C022     	 movs r2,#192
 2021 001e 9A58     	 ldr r2,[r3,r2]
 2022              	 .loc 2 630 50
 2023 0020 7B68     	 ldr r3,[r7,#4]
 2024 0022 0333     	 adds r3,r3,#3
 2025              	 .loc 2 630 28
 2026 0024 0121     	 movs r1,#1
 2027 0026 9940     	 lsls r1,r1,r3
 2028 0028 0B00     	 movs r3,r1
 2029              	 .loc 2 630 21
 2030 002a 1A43     	 orrs r2,r3
 2031 002c FB68     	 ldr r3,[r7,#12]
 2032 002e C021     	 movs r1,#192
 2033 0030 5A50     	 str r2,[r3,r1]
 631:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2034              	 .loc 2 631 1
 2035 0032 C046     	 nop
 2036 0034 BD46     	 mov sp,r7
 2037 0036 04B0     	 add sp,sp,#16
 2038              	 
 2039 0038 80BD     	 pop {r7,pc}
 2040              	 .cfi_endproc
 2041              	.LFE166:
 2043              	 .section .text.XMC_VADC_GROUP_EnableChannelSyncRequest,"ax",%progbits
 2044              	 .align 1
 2045              	 .global XMC_VADC_GROUP_EnableChannelSyncRequest
 2046              	 .syntax unified
 2047              	 .code 16
 2048              	 .thumb_func
 2049              	 .fpu softvfp
 2051              	XMC_VADC_GROUP_EnableChannelSyncRequest:
 2052              	.LFB167:
 632:../Libraries/XMCLib/src/xmc_vadc.c **** 
 633:../Libraries/XMCLib/src/xmc_vadc.c **** 
 634:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the synchronous conversion feature - Applicable only to kernel configured as maste
 635:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
 636:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2053              	 .loc 2 636 1
 2054              	 .cfi_startproc
 2055              	 
 2056              	 
 2057 0000 80B5     	 push {r7,lr}
 2058              	.LCFI82:
 2059              	 .cfi_def_cfa_offset 8
 2060              	 .cfi_offset 7,-8
 2061              	 .cfi_offset 14,-4
 2062 0002 84B0     	 sub sp,sp,#16
 2063              	.LCFI83:
 2064              	 .cfi_def_cfa_offset 24
 2065 0004 00AF     	 add r7,sp,#0
 2066              	.LCFI84:
 2067              	 .cfi_def_cfa_register 7
 2068 0006 7860     	 str r0,[r7,#4]
 2069 0008 3960     	 str r1,[r7]
 637:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 638:../Libraries/XMCLib/src/xmc_vadc.c **** 
 639:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
 640:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Channel Number",
 641:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 642:../Libraries/XMCLib/src/xmc_vadc.c **** 
 643:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 2070              	 .loc 2 643 11
 2071 000a 7B68     	 ldr r3,[r7,#4]
 2072 000c C022     	 movs r2,#192
 2073 000e 9B58     	 ldr r3,[r3,r2]
 2074 0010 FB60     	 str r3,[r7,#12]
 644:../Libraries/XMCLib/src/xmc_vadc.c **** 
 645:../Libraries/XMCLib/src/xmc_vadc.c ****   if (!(synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk))
 2075              	 .loc 2 645 16
 2076 0012 FB68     	 ldr r3,[r7,#12]
 2077 0014 0322     	 movs r2,#3
 2078 0016 1340     	 ands r3,r2
 2079              	 .loc 2 645 6
 2080 0018 0DD1     	 bne .L82
 646:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 647:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] |= (uint32_t)((uint32_t)1 << VADC_G_CHCTR_SYNC_Pos);
 2081              	 .loc 2 647 30
 2082 001a 7B68     	 ldr r3,[r7,#4]
 2083 001c 3A68     	 ldr r2,[r7]
 2084 001e 8032     	 adds r2,r2,#128
 2085 0020 9200     	 lsls r2,r2,#2
 2086 0022 D358     	 ldr r3,[r2,r3]
 2087 0024 8022     	 movs r2,#128
 2088 0026 D200     	 lsls r2,r2,#3
 2089 0028 1A43     	 orrs r2,r3
 2090 002a 1100     	 movs r1,r2
 2091 002c 7B68     	 ldr r3,[r7,#4]
 2092 002e 3A68     	 ldr r2,[r7]
 2093 0030 8032     	 adds r2,r2,#128
 2094 0032 9200     	 lsls r2,r2,#2
 2095 0034 D150     	 str r1,[r2,r3]
 2096              	.L82:
 648:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 649:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2097              	 .loc 2 649 1
 2098 0036 C046     	 nop
 2099 0038 BD46     	 mov sp,r7
 2100 003a 04B0     	 add sp,sp,#16
 2101              	 
 2102 003c 80BD     	 pop {r7,pc}
 2103              	 .cfi_endproc
 2104              	.LFE167:
 2106              	 .section .text.XMC_VADC_GROUP_DisableChannelSyncRequest,"ax",%progbits
 2107              	 .align 1
 2108              	 .global XMC_VADC_GROUP_DisableChannelSyncRequest
 2109              	 .syntax unified
 2110              	 .code 16
 2111              	 .thumb_func
 2112              	 .fpu softvfp
 2114              	XMC_VADC_GROUP_DisableChannelSyncRequest:
 2115              	.LFB168:
 650:../Libraries/XMCLib/src/xmc_vadc.c **** 
 651:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable synchronous conversion feature */
 652:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
 653:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2116              	 .loc 2 653 1
 2117              	 .cfi_startproc
 2118              	 
 2119              	 
 2120 0000 80B5     	 push {r7,lr}
 2121              	.LCFI85:
 2122              	 .cfi_def_cfa_offset 8
 2123              	 .cfi_offset 7,-8
 2124              	 .cfi_offset 14,-4
 2125 0002 84B0     	 sub sp,sp,#16
 2126              	.LCFI86:
 2127              	 .cfi_def_cfa_offset 24
 2128 0004 00AF     	 add r7,sp,#0
 2129              	.LCFI87:
 2130              	 .cfi_def_cfa_register 7
 2131 0006 7860     	 str r0,[r7,#4]
 2132 0008 3960     	 str r1,[r7]
 654:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    synctr;
 655:../Libraries/XMCLib/src/xmc_vadc.c **** 
 656:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
 657:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Channel Number",
 658:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 659:../Libraries/XMCLib/src/xmc_vadc.c **** 
 660:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 2133              	 .loc 2 660 11
 2134 000a 7B68     	 ldr r3,[r7,#4]
 2135 000c C022     	 movs r2,#192
 2136 000e 9B58     	 ldr r3,[r3,r2]
 2137 0010 FB60     	 str r3,[r7,#12]
 661:../Libraries/XMCLib/src/xmc_vadc.c **** 
 662:../Libraries/XMCLib/src/xmc_vadc.c ****   if (synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk)
 2138              	 .loc 2 662 14
 2139 0012 FB68     	 ldr r3,[r7,#12]
 2140 0014 0322     	 movs r2,#3
 2141 0016 1340     	 ands r3,r2
 2142              	 .loc 2 662 6
 2143 0018 0CD0     	 beq .L85
 663:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 664:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_SYNC_Msk);
 2144              	 .loc 2 664 30
 2145 001a 7B68     	 ldr r3,[r7,#4]
 2146 001c 3A68     	 ldr r2,[r7]
 2147 001e 8032     	 adds r2,r2,#128
 2148 0020 9200     	 lsls r2,r2,#2
 2149 0022 D358     	 ldr r3,[r2,r3]
 2150 0024 054A     	 ldr r2,.L86
 2151 0026 1340     	 ands r3,r2
 2152 0028 1900     	 movs r1,r3
 2153 002a 7B68     	 ldr r3,[r7,#4]
 2154 002c 3A68     	 ldr r2,[r7]
 2155 002e 8032     	 adds r2,r2,#128
 2156 0030 9200     	 lsls r2,r2,#2
 2157 0032 D150     	 str r1,[r2,r3]
 2158              	.L85:
 665:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 666:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2159              	 .loc 2 666 1
 2160 0034 C046     	 nop
 2161 0036 BD46     	 mov sp,r7
 2162 0038 04B0     	 add sp,sp,#16
 2163              	 
 2164 003a 80BD     	 pop {r7,pc}
 2165              	.L87:
 2166              	 .align 2
 2167              	.L86:
 2168 003c FFFBFFFF 	 .word -1025
 2169              	 .cfi_endproc
 2170              	.LFE168:
 2172              	 .section .text.XMC_VADC_GROUP_IsConverterBusy,"ax",%progbits
 2173              	 .align 1
 2174              	 .global XMC_VADC_GROUP_IsConverterBusy
 2175              	 .syntax unified
 2176              	 .code 16
 2177              	 .thumb_func
 2178              	 .fpu softvfp
 2180              	XMC_VADC_GROUP_IsConverterBusy:
 2181              	.LFB169:
 667:../Libraries/XMCLib/src/xmc_vadc.c **** 
 668:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the converter state - Idle vs Busy */ 
 669:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr)
 670:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2182              	 .loc 2 670 1
 2183              	 .cfi_startproc
 2184              	 
 2185              	 
 2186 0000 80B5     	 push {r7,lr}
 2187              	.LCFI88:
 2188              	 .cfi_def_cfa_offset 8
 2189              	 .cfi_offset 7,-8
 2190              	 .cfi_offset 14,-4
 2191 0002 84B0     	 sub sp,sp,#16
 2192              	.LCFI89:
 2193              	 .cfi_def_cfa_offset 24
 2194 0004 00AF     	 add r7,sp,#0
 2195              	.LCFI90:
 2196              	 .cfi_def_cfa_register 7
 2197 0006 7860     	 str r0,[r7,#4]
 671:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      arbcfg;
 672:../Libraries/XMCLib/src/xmc_vadc.c **** 
 673:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsConverterBusy:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
 674:../Libraries/XMCLib/src/xmc_vadc.c **** 
 675:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg  = group_ptr->ARBCFG;
 2198              	 .loc 2 675 11
 2199 0008 7B68     	 ldr r3,[r7,#4]
 2200 000a 8022     	 movs r2,#128
 2201 000c 9B58     	 ldr r3,[r3,r2]
 2202 000e FB60     	 str r3,[r7,#12]
 676:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 2203              	 .loc 2 676 10
 2204 0010 FA68     	 ldr r2,[r7,#12]
 2205 0012 8023     	 movs r3,#128
 2206 0014 DB05     	 lsls r3,r3,#23
 2207 0016 1340     	 ands r3,r2
 2208 0018 FB60     	 str r3,[r7,#12]
 677:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = arbcfg >> VADC_G_ARBCFG_BUSY_Pos;
 2209              	 .loc 2 677 10
 2210 001a FB68     	 ldr r3,[r7,#12]
 2211 001c 9B0F     	 lsrs r3,r3,#30
 2212 001e FB60     	 str r3,[r7,#12]
 678:../Libraries/XMCLib/src/xmc_vadc.c **** 
 679:../Libraries/XMCLib/src/xmc_vadc.c ****   return( (XMC_VADC_GROUP_STATE_t)arbcfg);
 2213              	 .loc 2 679 11
 2214 0020 FB68     	 ldr r3,[r7,#12]
 2215 0022 DBB2     	 uxtb r3,r3
 680:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2216              	 .loc 2 680 1
 2217 0024 1800     	 movs r0,r3
 2218 0026 BD46     	 mov sp,r7
 2219 0028 04B0     	 add sp,sp,#16
 2220              	 
 2221 002a 80BD     	 pop {r7,pc}
 2222              	 .cfi_endproc
 2223              	.LFE169:
 2225              	 .section .text.XMC_VADC_GROUP_SetBoundaries,"ax",%progbits
 2226              	 .align 1
 2227              	 .global XMC_VADC_GROUP_SetBoundaries
 2228              	 .syntax unified
 2229              	 .code 16
 2230              	 .thumb_func
 2231              	 .fpu softvfp
 2233              	XMC_VADC_GROUP_SetBoundaries:
 2234              	.LFB170:
 681:../Libraries/XMCLib/src/xmc_vadc.c **** 
 682:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boundaries for conversion results */
 683:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, cons
 684:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2235              	 .loc 2 684 1
 2236              	 .cfi_startproc
 2237              	 
 2238              	 
 2239 0000 80B5     	 push {r7,lr}
 2240              	.LCFI91:
 2241              	 .cfi_def_cfa_offset 8
 2242              	 .cfi_offset 7,-8
 2243              	 .cfi_offset 14,-4
 2244 0002 86B0     	 sub sp,sp,#24
 2245              	.LCFI92:
 2246              	 .cfi_def_cfa_offset 32
 2247 0004 00AF     	 add r7,sp,#0
 2248              	.LCFI93:
 2249              	 .cfi_def_cfa_register 7
 2250 0006 F860     	 str r0,[r7,#12]
 2251 0008 B960     	 str r1,[r7,#8]
 2252 000a 7A60     	 str r2,[r7,#4]
 685:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 686:../Libraries/XMCLib/src/xmc_vadc.c **** 
 687:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaries:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 688:../Libraries/XMCLib/src/xmc_vadc.c **** 
 689:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 690:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2253              	 .loc 2 690 10
 2254 000c FB68     	 ldr r3,[r7,#12]
 2255 000e B822     	 movs r2,#184
 2256 0010 9B58     	 ldr r3,[r3,r2]
 2257 0012 7B61     	 str r3,[r7,#20]
 691:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2258              	 .loc 2 691 9
 2259 0014 7B69     	 ldr r3,[r7,#20]
 2260 0016 1B0B     	 lsrs r3,r3,#12
 2261 0018 1B03     	 lsls r3,r3,#12
 2262 001a 7B61     	 str r3,[r7,#20]
 692:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2263              	 .loc 2 692 9
 2264 001c 7B69     	 ldr r3,[r7,#20]
 2265 001e 0A4A     	 ldr r2,.L91
 2266 0020 1340     	 ands r3,r2
 2267 0022 7B61     	 str r3,[r7,#20]
 693:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 2268              	 .loc 2 693 9
 2269 0024 7A69     	 ldr r2,[r7,#20]
 2270 0026 BB68     	 ldr r3,[r7,#8]
 2271 0028 1343     	 orrs r3,r2
 2272 002a 7B61     	 str r3,[r7,#20]
 694:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary1 << VADC_G_BOUND_BOUNDARY1_Pos);
 2273              	 .loc 2 694 12
 2274 002c 7B68     	 ldr r3,[r7,#4]
 2275 002e 1B04     	 lsls r3,r3,#16
 2276              	 .loc 2 694 9
 2277 0030 7A69     	 ldr r2,[r7,#20]
 2278 0032 1343     	 orrs r3,r2
 2279 0034 7B61     	 str r3,[r7,#20]
 695:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2280              	 .loc 2 695 20
 2281 0036 FB68     	 ldr r3,[r7,#12]
 2282 0038 B821     	 movs r1,#184
 2283 003a 7A69     	 ldr r2,[r7,#20]
 2284 003c 5A50     	 str r2,[r3,r1]
 696:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2285              	 .loc 2 696 1
 2286 003e C046     	 nop
 2287 0040 BD46     	 mov sp,r7
 2288 0042 06B0     	 add sp,sp,#24
 2289              	 
 2290 0044 80BD     	 pop {r7,pc}
 2291              	.L92:
 2292 0046 C046     	 .align 2
 2293              	.L91:
 2294 0048 FFFF00F0 	 .word -268369921
 2295              	 .cfi_endproc
 2296              	.LFE170:
 2298              	 .section .text.XMC_VADC_GROUP_SetIndividualBoundary,"ax",%progbits
 2299              	 .align 1
 2300              	 .global XMC_VADC_GROUP_SetIndividualBoundary
 2301              	 .syntax unified
 2302              	 .code 16
 2303              	 .thumb_func
 2304              	 .fpu softvfp
 2306              	XMC_VADC_GROUP_SetIndividualBoundary:
 2307              	.LFB171:
 697:../Libraries/XMCLib/src/xmc_vadc.c **** 
 698:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 699:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
 700:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 701:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint16_t boundary_value)
 702:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2308              	 .loc 2 702 1
 2309              	 .cfi_startproc
 2310              	 
 2311              	 
 2312 0000 80B5     	 push {r7,lr}
 2313              	.LCFI94:
 2314              	 .cfi_def_cfa_offset 8
 2315              	 .cfi_offset 7,-8
 2316              	 .cfi_offset 14,-4
 2317 0002 84B0     	 sub sp,sp,#16
 2318              	.LCFI95:
 2319              	 .cfi_def_cfa_offset 24
 2320 0004 00AF     	 add r7,sp,#0
 2321              	.LCFI96:
 2322              	 .cfi_def_cfa_register 7
 2323 0006 7860     	 str r0,[r7,#4]
 2324 0008 0800     	 movs r0,r1
 2325 000a 1100     	 movs r1,r2
 2326 000c FB1C     	 adds r3,r7,#3
 2327 000e 021C     	 adds r2,r0,#0
 2328 0010 1A70     	 strb r2,[r3]
 2329 0012 3B00     	 movs r3,r7
 2330 0014 0A1C     	 adds r2,r1,#0
 2331 0016 1A80     	 strh r2,[r3]
 703:../Libraries/XMCLib/src/xmc_vadc.c **** 
 704:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 705:../Libraries/XMCLib/src/xmc_vadc.c **** 
 706:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 707:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Boundary Selection",
 708:../Libraries/XMCLib/src/xmc_vadc.c ****                ((XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection) ||
 709:../Libraries/XMCLib/src/xmc_vadc.c ****                 (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)))
 710:../Libraries/XMCLib/src/xmc_vadc.c **** 
 711:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 712:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2332              	 .loc 2 712 10
 2333 0018 7B68     	 ldr r3,[r7,#4]
 2334 001a B822     	 movs r2,#184
 2335 001c 9B58     	 ldr r3,[r3,r2]
 2336 001e FB60     	 str r3,[r7,#12]
 713:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection)
 2337              	 .loc 2 713 6
 2338 0020 FB1C     	 adds r3,r7,#3
 2339 0022 1B78     	 ldrb r3,[r3]
 2340 0024 002B     	 cmp r3,#0
 2341 0026 09D1     	 bne .L94
 714:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 715:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2342              	 .loc 2 715 11
 2343 0028 FB68     	 ldr r3,[r7,#12]
 2344 002a 1B0B     	 lsrs r3,r3,#12
 2345 002c 1B03     	 lsls r3,r3,#12
 2346 002e FB60     	 str r3,[r7,#12]
 716:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 2347              	 .loc 2 716 14
 2348 0030 3B00     	 movs r3,r7
 2349 0032 1B88     	 ldrh r3,[r3]
 2350              	 .loc 2 716 11
 2351 0034 FA68     	 ldr r2,[r7,#12]
 2352 0036 1343     	 orrs r3,r2
 2353 0038 FB60     	 str r3,[r7,#12]
 2354 003a 0DE0     	 b .L95
 2355              	.L94:
 717:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 718:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)
 2356              	 .loc 2 718 11
 2357 003c FB1C     	 adds r3,r7,#3
 2358 003e 1B78     	 ldrb r3,[r3]
 2359 0040 012B     	 cmp r3,#1
 2360 0042 09D1     	 bne .L95
 719:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 720:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2361              	 .loc 2 720 11
 2362 0044 FB68     	 ldr r3,[r7,#12]
 2363 0046 084A     	 ldr r2,.L96
 2364 0048 1340     	 ands r3,r2
 2365 004a FB60     	 str r3,[r7,#12]
 721:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 2366              	 .loc 2 721 26
 2367 004c 3B00     	 movs r3,r7
 2368 004e 1B88     	 ldrh r3,[r3]
 2369              	 .loc 2 721 14
 2370 0050 1B04     	 lsls r3,r3,#16
 2371              	 .loc 2 721 11
 2372 0052 FA68     	 ldr r2,[r7,#12]
 2373 0054 1343     	 orrs r3,r2
 2374 0056 FB60     	 str r3,[r7,#12]
 2375              	.L95:
 722:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 723:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 724:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 725:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 726:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 727:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2376              	 .loc 2 727 20
 2377 0058 7B68     	 ldr r3,[r7,#4]
 2378 005a B821     	 movs r1,#184
 2379 005c FA68     	 ldr r2,[r7,#12]
 2380 005e 5A50     	 str r2,[r3,r1]
 728:../Libraries/XMCLib/src/xmc_vadc.c **** 
 729:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2381              	 .loc 2 729 1
 2382 0060 C046     	 nop
 2383 0062 BD46     	 mov sp,r7
 2384 0064 04B0     	 add sp,sp,#16
 2385              	 
 2386 0066 80BD     	 pop {r7,pc}
 2387              	.L97:
 2388              	 .align 2
 2389              	.L96:
 2390 0068 FFFF00F0 	 .word -268369921
 2391              	 .cfi_endproc
 2392              	.LFE171:
 2394              	 .section .text.XMC_VADC_GROUP_TriggerServiceRequest,"ax",%progbits
 2395              	 .align 1
 2396              	 .global XMC_VADC_GROUP_TriggerServiceRequest
 2397              	 .syntax unified
 2398              	 .code 16
 2399              	 .thumb_func
 2400              	 .fpu softvfp
 2402              	XMC_VADC_GROUP_TriggerServiceRequest:
 2403              	.LFB172:
 730:../Libraries/XMCLib/src/xmc_vadc.c **** 
 731:../Libraries/XMCLib/src/xmc_vadc.c **** /* Manually assert service request (Interrupt) to NVIC */
 732:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
 733:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint32_t sr_num,
 734:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_IRQ_t type)
 735:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2404              	 .loc 2 735 1
 2405              	 .cfi_startproc
 2406              	 
 2407              	 
 2408 0000 80B5     	 push {r7,lr}
 2409              	.LCFI97:
 2410              	 .cfi_def_cfa_offset 8
 2411              	 .cfi_offset 7,-8
 2412              	 .cfi_offset 14,-4
 2413 0002 86B0     	 sub sp,sp,#24
 2414              	.LCFI98:
 2415              	 .cfi_def_cfa_offset 32
 2416 0004 00AF     	 add r7,sp,#0
 2417              	.LCFI99:
 2418              	 .cfi_def_cfa_register 7
 2419 0006 F860     	 str r0,[r7,#12]
 2420 0008 B960     	 str r1,[r7,#8]
 2421 000a FB1D     	 adds r3,r7,#7
 2422 000c 1A70     	 strb r2,[r3]
 736:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sract;
 737:../Libraries/XMCLib/src/xmc_vadc.c **** 
 738:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 739:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR number", (sr_num <= XMC_VADC_SR_SHARED_
 740:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR type", ((type)<= XMC_VADC_GROUP_IRQ_SHA
 741:../Libraries/XMCLib/src/xmc_vadc.c **** 
 742:../Libraries/XMCLib/src/xmc_vadc.c ****   sract = group_ptr->SRACT;
 2423              	 .loc 2 742 9
 2424 000e FA68     	 ldr r2,[r7,#12]
 2425 0010 E423     	 movs r3,#228
 2426 0012 5B00     	 lsls r3,r3,#1
 2427 0014 D358     	 ldr r3,[r2,r3]
 2428 0016 7B61     	 str r3,[r7,#20]
 743:../Libraries/XMCLib/src/xmc_vadc.c **** 
 744:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_IRQ_KERNEL == type)
 2429              	 .loc 2 744 6
 2430 0018 FB1D     	 adds r3,r7,#7
 2431 001a 1B78     	 ldrb r3,[r3]
 2432 001c 002B     	 cmp r3,#0
 2433 001e 07D1     	 bne .L99
 745:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 746:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << sr_num);
 2434              	 .loc 2 746 14
 2435 0020 0122     	 movs r2,#1
 2436 0022 BB68     	 ldr r3,[r7,#8]
 2437 0024 9A40     	 lsls r2,r2,r3
 2438 0026 1300     	 movs r3,r2
 2439              	 .loc 2 746 11
 2440 0028 7A69     	 ldr r2,[r7,#20]
 2441 002a 1343     	 orrs r3,r2
 2442 002c 7B61     	 str r3,[r7,#20]
 2443 002e 07E0     	 b .L100
 2444              	.L99:
 747:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 748:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 749:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 750:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << (sr_num + (uint32_t)8));
 2445              	 .loc 2 750 48
 2446 0030 BB68     	 ldr r3,[r7,#8]
 2447 0032 0833     	 adds r3,r3,#8
 2448              	 .loc 2 750 14
 2449 0034 0122     	 movs r2,#1
 2450 0036 9A40     	 lsls r2,r2,r3
 2451 0038 1300     	 movs r3,r2
 2452              	 .loc 2 750 11
 2453 003a 7A69     	 ldr r2,[r7,#20]
 2454 003c 1343     	 orrs r3,r2
 2455 003e 7B61     	 str r3,[r7,#20]
 2456              	.L100:
 751:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 752:../Libraries/XMCLib/src/xmc_vadc.c **** 
 753:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SRACT = sract;
 2457              	 .loc 2 753 20
 2458 0040 FA68     	 ldr r2,[r7,#12]
 2459 0042 E423     	 movs r3,#228
 2460 0044 5B00     	 lsls r3,r3,#1
 2461 0046 7969     	 ldr r1,[r7,#20]
 2462 0048 D150     	 str r1,[r2,r3]
 754:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2463              	 .loc 2 754 1
 2464 004a C046     	 nop
 2465 004c BD46     	 mov sp,r7
 2466 004e 06B0     	 add sp,sp,#24
 2467              	 
 2468 0050 80BD     	 pop {r7,pc}
 2469              	 .cfi_endproc
 2470              	.LFE172:
 2472              	 .section .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode,"ax",%progbits
 2473              	 .align 1
 2474              	 .global XMC_VADC_GROUP_SetBoundaryEventInterruptNode
 2475              	 .syntax unified
 2476              	 .code 16
 2477              	 .thumb_func
 2478              	 .fpu softvfp
 2480              	XMC_VADC_GROUP_SetBoundaryEventInterruptNode:
 2481              	.LFB173:
 755:../Libraries/XMCLib/src/xmc_vadc.c **** 
 756:../Libraries/XMCLib/src/xmc_vadc.c **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
 757:../Libraries/XMCLib/src/xmc_vadc.c **** 
 758:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the SR line for the Boundary flag node pointer*/
 759:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
 760:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const uint8_t boundary_flag_num,
 761:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const XMC_VADC_BOUNDARY_NODE_t sr
 762:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2482              	 .loc 2 762 1
 2483              	 .cfi_startproc
 2484              	 
 2485              	 
 2486 0000 80B5     	 push {r7,lr}
 2487              	.LCFI100:
 2488              	 .cfi_def_cfa_offset 8
 2489              	 .cfi_offset 7,-8
 2490              	 .cfi_offset 14,-4
 2491 0002 84B0     	 sub sp,sp,#16
 2492              	.LCFI101:
 2493              	 .cfi_def_cfa_offset 24
 2494 0004 00AF     	 add r7,sp,#0
 2495              	.LCFI102:
 2496              	 .cfi_def_cfa_register 7
 2497 0006 7860     	 str r0,[r7,#4]
 2498 0008 0800     	 movs r0,r1
 2499 000a 1100     	 movs r1,r2
 2500 000c FB1C     	 adds r3,r7,#3
 2501 000e 021C     	 adds r2,r0,#0
 2502 0010 1A70     	 strb r2,[r3]
 2503 0012 BB1C     	 adds r3,r7,#2
 2504 0014 0A1C     	 adds r2,r1,#0
 2505 0016 1A70     	 strb r2,[r3]
 763:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t flag_pos;
 764:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaryEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GRO
 765:../Libraries/XMCLib/src/xmc_vadc.c **** 
 766:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the GxBFLNP */
 767:../Libraries/XMCLib/src/xmc_vadc.c ****   flag_pos = (uint32_t)boundary_flag_num << (uint32_t)2;
 2506              	 .loc 2 767 14
 2507 0018 FB1C     	 adds r3,r7,#3
 2508 001a 1B78     	 ldrb r3,[r3]
 2509              	 .loc 2 767 12
 2510 001c 9B00     	 lsls r3,r3,#2
 2511 001e FB60     	 str r3,[r7,#12]
 768:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP &= ~((uint32_t)VADC_G_BFLNP_BFL0NP_Msk << flag_pos);
 2512              	 .loc 2 768 20
 2513 0020 7B68     	 ldr r3,[r7,#4]
 2514 0022 D422     	 movs r2,#212
 2515 0024 9B58     	 ldr r3,[r3,r2]
 2516              	 .loc 2 768 59
 2517 0026 0F21     	 movs r1,#15
 2518 0028 FA68     	 ldr r2,[r7,#12]
 2519 002a 9140     	 lsls r1,r1,r2
 2520 002c 0A00     	 movs r2,r1
 2521              	 .loc 2 768 23
 2522 002e D243     	 mvns r2,r2
 2523              	 .loc 2 768 20
 2524 0030 1A40     	 ands r2,r3
 2525 0032 7B68     	 ldr r3,[r7,#4]
 2526 0034 D421     	 movs r1,#212
 2527 0036 5A50     	 str r2,[r3,r1]
 769:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 2528              	 .loc 2 769 20
 2529 0038 7B68     	 ldr r3,[r7,#4]
 2530 003a D422     	 movs r2,#212
 2531 003c 9A58     	 ldr r2,[r3,r2]
 2532              	 .loc 2 769 23
 2533 003e BB1C     	 adds r3,r7,#2
 2534 0040 1978     	 ldrb r1,[r3]
 2535              	 .loc 2 769 36
 2536 0042 FB68     	 ldr r3,[r7,#12]
 2537 0044 9940     	 lsls r1,r1,r3
 2538 0046 0B00     	 movs r3,r1
 2539              	 .loc 2 769 20
 2540 0048 1A43     	 orrs r2,r3
 2541 004a 7B68     	 ldr r3,[r7,#4]
 2542 004c D421     	 movs r1,#212
 2543 004e 5A50     	 str r2,[r3,r1]
 770:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2544              	 .loc 2 770 1
 2545 0050 C046     	 nop
 2546 0052 BD46     	 mov sp,r7
 2547 0054 04B0     	 add sp,sp,#16
 2548              	 
 2549 0056 80BD     	 pop {r7,pc}
 2550              	 .cfi_endproc
 2551              	.LFE173:
 2553              	 .section .text.XMC_VADC_GLOBAL_SHS_Init,"ax",%progbits
 2554              	 .align 1
 2555              	 .global XMC_VADC_GLOBAL_SHS_Init
 2556              	 .syntax unified
 2557              	 .code 16
 2558              	 .thumb_func
 2559              	 .fpu softvfp
 2561              	XMC_VADC_GLOBAL_SHS_Init:
 2562              	.LFB174:
 771:../Libraries/XMCLib/src/xmc_vadc.c **** 
 772:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 773:../Libraries/XMCLib/src/xmc_vadc.c **** 
 774:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 775:../Libraries/XMCLib/src/xmc_vadc.c **** 
 776:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 777:../Libraries/XMCLib/src/xmc_vadc.c **** 
 778:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Initialize the Sample and hold features*/
 779:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
 780:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2563              	 .loc 2 780 1
 2564              	 .cfi_startproc
 2565              	 
 2566              	 
 2567 0000 80B5     	 push {r7,lr}
 2568              	.LCFI103:
 2569              	 .cfi_def_cfa_offset 8
 2570              	 .cfi_offset 7,-8
 2571              	 .cfi_offset 14,-4
 2572 0002 82B0     	 sub sp,sp,#8
 2573              	.LCFI104:
 2574              	 .cfi_def_cfa_offset 16
 2575 0004 00AF     	 add r7,sp,#0
 2576              	.LCFI105:
 2577              	 .cfi_def_cfa_register 7
 2578 0006 7860     	 str r0,[r7,#4]
 2579 0008 3960     	 str r1,[r7]
 781:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(voi
 782:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong Index number",(config == (XMC_VADC_GLOBAL_SHS_CONFIG_t
 783:../Libraries/XMCLib/src/xmc_vadc.c **** 
 784:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Initialize the SHS Configuration register*/
 785:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->SHSCFG = (uint32_t)((uint32_t)config->shscfg | (uint32_t)SHS_SHSCFG_SCWC_Msk);
 2580              	 .loc 2 785 48
 2581 000a 3B68     	 ldr r3,[r7]
 2582 000c 1B68     	 ldr r3,[r3]
 2583              	 .loc 2 785 21
 2584 000e 8022     	 movs r2,#128
 2585 0010 1202     	 lsls r2,r2,#8
 2586 0012 1A43     	 orrs r2,r3
 2587              	 .loc 2 785 19
 2588 0014 7B68     	 ldr r3,[r7,#4]
 2589 0016 1A64     	 str r2,[r3,#64]
 786:../Libraries/XMCLib/src/xmc_vadc.c **** 
 787:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 788:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Select the Calibration order*/
 789:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALORD_Msk);
 2590              	 .loc 2 789 19
 2591 0018 7B68     	 ldr r3,[r7,#4]
 2592 001a BC22     	 movs r2,#188
 2593 001c 9B58     	 ldr r3,[r3,r2]
 2594 001e 0122     	 movs r2,#1
 2595 0020 9343     	 bics r3,r2
 2596 0022 1A00     	 movs r2,r3
 2597 0024 7B68     	 ldr r3,[r7,#4]
 2598 0026 BC21     	 movs r1,#188
 2599 0028 5A50     	 str r2,[r3,r1]
 790:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 2600              	 .loc 2 790 19
 2601 002a 7B68     	 ldr r3,[r7,#4]
 2602 002c BC22     	 movs r2,#188
 2603 002e 9B58     	 ldr r3,[r3,r2]
 2604              	 .loc 2 790 51
 2605 0030 3A68     	 ldr r2,[r7]
 2606 0032 1279     	 ldrb r2,[r2,#4]
 2607              	 .loc 2 790 19
 2608 0034 1A43     	 orrs r2,r3
 2609 0036 7B68     	 ldr r3,[r7,#4]
 2610 0038 BC21     	 movs r1,#188
 2611 003a 5A50     	 str r2,[r3,r1]
 791:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 792:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2612              	 .loc 2 792 1
 2613 003c C046     	 nop
 2614 003e BD46     	 mov sp,r7
 2615 0040 02B0     	 add sp,sp,#8
 2616              	 
 2617 0042 80BD     	 pop {r7,pc}
 2618              	 .cfi_endproc
 2619              	.LFE174:
 2621              	 .section .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode,"ax",%progbits
 2622              	 .align 1
 2623              	 .global XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
 2624              	 .syntax unified
 2625              	 .code 16
 2626              	 .thumb_func
 2627              	 .fpu softvfp
 2629              	XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:
 2630              	.LFB175:
 793:../Libraries/XMCLib/src/xmc_vadc.c **** 
 794:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 795:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the accelerated mode of conversion */
 796:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
 797:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2631              	 .loc 2 797 1
 2632              	 .cfi_startproc
 2633              	 
 2634              	 
 2635 0000 80B5     	 push {r7,lr}
 2636              	.LCFI106:
 2637              	 .cfi_def_cfa_offset 8
 2638              	 .cfi_offset 7,-8
 2639              	 .cfi_offset 14,-4
 2640 0002 82B0     	 sub sp,sp,#8
 2641              	.LCFI107:
 2642              	 .cfi_def_cfa_offset 16
 2643 0004 00AF     	 add r7,sp,#0
 2644              	.LCFI108:
 2645              	 .cfi_def_cfa_register 7
 2646 0006 7860     	 str r0,[r7,#4]
 2647 0008 0A00     	 movs r2,r1
 2648 000a FB1C     	 adds r3,r7,#3
 2649 000c 1A70     	 strb r2,[r3]
 798:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
 799:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 800:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_
 801:../Libraries/XMCLib/src/xmc_vadc.c **** 
 802:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 803:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2650              	 .loc 2 803 6
 2651 000e FB1C     	 adds r3,r7,#3
 2652 0010 1B78     	 ldrb r3,[r3]
 2653 0012 002B     	 cmp r3,#0
 2654 0014 08D1     	 bne .L104
 804:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 805:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
 2655              	 .loc 2 805 22
 2656 0016 7B68     	 ldr r3,[r7,#4]
 2657 0018 8022     	 movs r2,#128
 2658 001a 9B58     	 ldr r3,[r3,r2]
 2659 001c 0122     	 movs r2,#1
 2660 001e 1A43     	 orrs r2,r3
 2661 0020 7B68     	 ldr r3,[r7,#4]
 2662 0022 8021     	 movs r1,#128
 2663 0024 5A50     	 str r2,[r3,r1]
 806:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 807:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 808:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 809:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
 810:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 811:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 812:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 813:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 814:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 815:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2664              	 .loc 2 815 1
 2665 0026 0BE0     	 b .L106
 2666              	.L104:
 807:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2667              	 .loc 2 807 11
 2668 0028 FB1C     	 adds r3,r7,#3
 2669 002a 1B78     	 ldrb r3,[r3]
 2670 002c 012B     	 cmp r3,#1
 2671 002e 07D1     	 bne .L106
 809:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 2672              	 .loc 2 809 22
 2673 0030 7B68     	 ldr r3,[r7,#4]
 2674 0032 8422     	 movs r2,#132
 2675 0034 9B58     	 ldr r3,[r3,r2]
 2676 0036 0122     	 movs r2,#1
 2677 0038 1A43     	 orrs r2,r3
 2678 003a 7B68     	 ldr r3,[r7,#4]
 2679 003c 8421     	 movs r1,#132
 2680 003e 5A50     	 str r2,[r3,r1]
 2681              	.L106:
 2682              	 .loc 2 815 1
 2683 0040 C046     	 nop
 2684 0042 BD46     	 mov sp,r7
 2685 0044 02B0     	 add sp,sp,#8
 2686              	 
 2687 0046 80BD     	 pop {r7,pc}
 2688              	 .cfi_endproc
 2689              	.LFE175:
 2691              	 .section .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode,"ax",%progbits
 2692              	 .align 1
 2693              	 .global XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
 2694              	 .syntax unified
 2695              	 .code 16
 2696              	 .thumb_func
 2697              	 .fpu softvfp
 2699              	XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:
 2700              	.LFB176:
 816:../Libraries/XMCLib/src/xmc_vadc.c **** 
 817:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable the accelerated mode of conversion */
 818:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
 819:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2701              	 .loc 2 819 1
 2702              	 .cfi_startproc
 2703              	 
 2704              	 
 2705 0000 80B5     	 push {r7,lr}
 2706              	.LCFI109:
 2707              	 .cfi_def_cfa_offset 8
 2708              	 .cfi_offset 7,-8
 2709              	 .cfi_offset 14,-4
 2710 0002 82B0     	 sub sp,sp,#8
 2711              	.LCFI110:
 2712              	 .cfi_def_cfa_offset 16
 2713 0004 00AF     	 add r7,sp,#0
 2714              	.LCFI111:
 2715              	 .cfi_def_cfa_register 7
 2716 0006 7860     	 str r0,[r7,#4]
 2717 0008 0A00     	 movs r2,r1
 2718 000a FB1C     	 adds r3,r7,#3
 2719 000c 1A70     	 strb r2,[r3]
 820:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong SHS Pointer",
 821:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 822:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC
 823:../Libraries/XMCLib/src/xmc_vadc.c **** 
 824:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 825:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2720              	 .loc 2 825 6
 2721 000e FB1C     	 adds r3,r7,#3
 2722 0010 1B78     	 ldrb r3,[r3]
 2723 0012 002B     	 cmp r3,#0
 2724 0014 09D1     	 bne .L108
 826:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 827:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~(uint32_t)SHS_TIMCFG0_AT_Msk;
 2725              	 .loc 2 827 22
 2726 0016 7B68     	 ldr r3,[r7,#4]
 2727 0018 8022     	 movs r2,#128
 2728 001a 9B58     	 ldr r3,[r3,r2]
 2729 001c 0122     	 movs r2,#1
 2730 001e 9343     	 bics r3,r2
 2731 0020 1A00     	 movs r2,r3
 2732 0022 7B68     	 ldr r3,[r7,#4]
 2733 0024 8021     	 movs r1,#128
 2734 0026 5A50     	 str r2,[r3,r1]
 828:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 829:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 830:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 831:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~(uint32_t)SHS_TIMCFG1_AT_Msk;
 832:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 833:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 834:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 835:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 836:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 837:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2735              	 .loc 2 837 1
 2736 0028 0CE0     	 b .L110
 2737              	.L108:
 829:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2738              	 .loc 2 829 11
 2739 002a FB1C     	 adds r3,r7,#3
 2740 002c 1B78     	 ldrb r3,[r3]
 2741 002e 012B     	 cmp r3,#1
 2742 0030 08D1     	 bne .L110
 831:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 2743              	 .loc 2 831 22
 2744 0032 7B68     	 ldr r3,[r7,#4]
 2745 0034 8422     	 movs r2,#132
 2746 0036 9B58     	 ldr r3,[r3,r2]
 2747 0038 0122     	 movs r2,#1
 2748 003a 9343     	 bics r3,r2
 2749 003c 1A00     	 movs r2,r3
 2750 003e 7B68     	 ldr r3,[r7,#4]
 2751 0040 8421     	 movs r1,#132
 2752 0042 5A50     	 str r2,[r3,r1]
 2753              	.L110:
 2754              	 .loc 2 837 1
 2755 0044 C046     	 nop
 2756 0046 BD46     	 mov sp,r7
 2757 0048 02B0     	 add sp,sp,#8
 2758              	 
 2759 004a 80BD     	 pop {r7,pc}
 2760              	 .cfi_endproc
 2761              	.LFE176:
 2763              	 .section .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime,"ax",%progbits
 2764              	 .align 1
 2765              	 .global XMC_VADC_GLOBAL_SHS_SetShortSampleTime
 2766              	 .syntax unified
 2767              	 .code 16
 2768              	 .thumb_func
 2769              	 .fpu softvfp
 2771              	XMC_VADC_GLOBAL_SHS_SetShortSampleTime:
 2772              	.LFB177:
 838:../Libraries/XMCLib/src/xmc_vadc.c **** 
 839:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the Short sample time of the Sample and hold module*/
 840:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 841:../Libraries/XMCLib/src/xmc_vadc.c ****                                             XMC_VADC_GROUP_INDEX_t group_num,
 842:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint8_t sst_value)
 843:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2773              	 .loc 2 843 1
 2774              	 .cfi_startproc
 2775              	 
 2776              	 
 2777 0000 80B5     	 push {r7,lr}
 2778              	.LCFI112:
 2779              	 .cfi_def_cfa_offset 8
 2780              	 .cfi_offset 7,-8
 2781              	 .cfi_offset 14,-4
 2782 0002 82B0     	 sub sp,sp,#8
 2783              	.LCFI113:
 2784              	 .cfi_def_cfa_offset 16
 2785 0004 00AF     	 add r7,sp,#0
 2786              	.LCFI114:
 2787              	 .cfi_def_cfa_register 7
 2788 0006 7860     	 str r0,[r7,#4]
 2789 0008 0800     	 movs r0,r1
 2790 000a 1100     	 movs r1,r2
 2791 000c FB1C     	 adds r3,r7,#3
 2792 000e 021C     	 adds r2,r0,#0
 2793 0010 1A70     	 strb r2,[r3]
 2794 0012 BB1C     	 adds r3,r7,#2
 2795 0014 0A1C     	 adds r2,r1,#0
 2796 0016 1A70     	 strb r2,[r3]
 844:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SHS Pointer",
 845:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 846:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong Index number",(group_num <= XMC_VADC_GRO
 847:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SST value",(sst_value < 64U))
 848:../Libraries/XMCLib/src/xmc_vadc.c **** 
 849:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the short sample time for the Accelerated mode of operation*/
 850:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2797              	 .loc 2 850 6
 2798 0018 FB1C     	 adds r3,r7,#3
 2799 001a 1B78     	 ldrb r3,[r3]
 2800 001c 002B     	 cmp r3,#0
 2801 001e 12D1     	 bne .L112
 851:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 852:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~((uint32_t)SHS_TIMCFG0_SST_Msk);
 2802              	 .loc 2 852 22
 2803 0020 7B68     	 ldr r3,[r7,#4]
 2804 0022 8022     	 movs r2,#128
 2805 0024 9B58     	 ldr r3,[r3,r2]
 2806 0026 154A     	 ldr r2,.L115
 2807 0028 1A40     	 ands r2,r3
 2808 002a 7B68     	 ldr r3,[r7,#4]
 2809 002c 8021     	 movs r1,#128
 2810 002e 5A50     	 str r2,[r3,r1]
 853:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG0_SST_Pos );
 2811              	 .loc 2 853 22
 2812 0030 7B68     	 ldr r3,[r7,#4]
 2813 0032 8022     	 movs r2,#128
 2814 0034 9A58     	 ldr r2,[r3,r2]
 2815              	 .loc 2 853 36
 2816 0036 BB1C     	 adds r3,r7,#2
 2817 0038 1B78     	 ldrb r3,[r3]
 2818              	 .loc 2 853 25
 2819 003a 1B02     	 lsls r3,r3,#8
 2820              	 .loc 2 853 22
 2821 003c 1A43     	 orrs r2,r3
 2822 003e 7B68     	 ldr r3,[r7,#4]
 2823 0040 8021     	 movs r1,#128
 2824 0042 5A50     	 str r2,[r3,r1]
 854:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 855:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 856:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 857:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~((uint32_t)SHS_TIMCFG1_SST_Msk);
 858:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 859:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 860:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 861:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 862:../Libraries/XMCLib/src/xmc_vadc.c ****   /* for MISRA*/
 863:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 864:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2825              	 .loc 2 864 1
 2826 0044 15E0     	 b .L114
 2827              	.L112:
 855:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2828              	 .loc 2 855 11
 2829 0046 FB1C     	 adds r3,r7,#3
 2830 0048 1B78     	 ldrb r3,[r3]
 2831 004a 012B     	 cmp r3,#1
 2832 004c 11D1     	 bne .L114
 857:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 2833              	 .loc 2 857 22
 2834 004e 7B68     	 ldr r3,[r7,#4]
 2835 0050 8422     	 movs r2,#132
 2836 0052 9B58     	 ldr r3,[r3,r2]
 2837 0054 094A     	 ldr r2,.L115
 2838 0056 1A40     	 ands r2,r3
 2839 0058 7B68     	 ldr r3,[r7,#4]
 2840 005a 8421     	 movs r1,#132
 2841 005c 5A50     	 str r2,[r3,r1]
 858:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 2842              	 .loc 2 858 22
 2843 005e 7B68     	 ldr r3,[r7,#4]
 2844 0060 8422     	 movs r2,#132
 2845 0062 9A58     	 ldr r2,[r3,r2]
 858:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 2846              	 .loc 2 858 36
 2847 0064 BB1C     	 adds r3,r7,#2
 2848 0066 1B78     	 ldrb r3,[r3]
 858:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 2849              	 .loc 2 858 25
 2850 0068 1B02     	 lsls r3,r3,#8
 858:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 2851              	 .loc 2 858 22
 2852 006a 1A43     	 orrs r2,r3
 2853 006c 7B68     	 ldr r3,[r7,#4]
 2854 006e 8421     	 movs r1,#132
 2855 0070 5A50     	 str r2,[r3,r1]
 2856              	.L114:
 2857              	 .loc 2 864 1
 2858 0072 C046     	 nop
 2859 0074 BD46     	 mov sp,r7
 2860 0076 02B0     	 add sp,sp,#8
 2861              	 
 2862 0078 80BD     	 pop {r7,pc}
 2863              	.L116:
 2864 007a C046     	 .align 2
 2865              	.L115:
 2866 007c FFC0FFFF 	 .word -16129
 2867              	 .cfi_endproc
 2868              	.LFE177:
 2870              	 .section .text.XMC_VADC_GLOBAL_SHS_SetGainFactor,"ax",%progbits
 2871              	 .align 1
 2872              	 .global XMC_VADC_GLOBAL_SHS_SetGainFactor
 2873              	 .syntax unified
 2874              	 .code 16
 2875              	 .thumb_func
 2876              	 .fpu softvfp
 2878              	XMC_VADC_GLOBAL_SHS_SetGainFactor:
 2879              	.LFB178:
 865:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 866:../Libraries/XMCLib/src/xmc_vadc.c **** 
 867:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the gain factor of the Sample and hold module*/
 868:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 869:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t gain_value,
 870:../Libraries/XMCLib/src/xmc_vadc.c ****                                        XMC_VADC_GROUP_INDEX_t group_num,
 871:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t ch_num)
 872:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2880              	 .loc 2 872 1
 2881              	 .cfi_startproc
 2882              	 
 2883              	 
 2884 0000 90B5     	 push {r4,r7,lr}
 2885              	.LCFI115:
 2886              	 .cfi_def_cfa_offset 12
 2887              	 .cfi_offset 4,-12
 2888              	 .cfi_offset 7,-8
 2889              	 .cfi_offset 14,-4
 2890 0002 85B0     	 sub sp,sp,#20
 2891              	.LCFI116:
 2892              	 .cfi_def_cfa_offset 32
 2893 0004 00AF     	 add r7,sp,#0
 2894              	.LCFI117:
 2895              	 .cfi_def_cfa_register 7
 2896 0006 7860     	 str r0,[r7,#4]
 2897 0008 0C00     	 movs r4,r1
 2898 000a 1000     	 movs r0,r2
 2899 000c 1900     	 movs r1,r3
 2900 000e FB1C     	 adds r3,r7,#3
 2901 0010 221C     	 adds r2,r4,#0
 2902 0012 1A70     	 strb r2,[r3]
 2903 0014 BB1C     	 adds r3,r7,#2
 2904 0016 021C     	 adds r2,r0,#0
 2905 0018 1A70     	 strb r2,[r3]
 2906 001a 7B1C     	 adds r3,r7,#1
 2907 001c 0A1C     	 adds r2,r1,#0
 2908 001e 1A70     	 strb r2,[r3]
 873:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_mask;
 874:../Libraries/XMCLib/src/xmc_vadc.c **** 
 875:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SH
 876:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong Index number",(group_num <= XMC_VADC_GROUP_IN
 877:../Libraries/XMCLib/src/xmc_vadc.c **** 
 878:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Calculate location of channel bit-field*/
 879:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_mask = ((uint32_t)ch_num << (uint32_t)2);
 2909              	 .loc 2 879 14
 2910 0020 7B1C     	 adds r3,r7,#1
 2911 0022 1B78     	 ldrb r3,[r3]
 2912              	 .loc 2 879 11
 2913 0024 9B00     	 lsls r3,r3,#2
 2914 0026 FB60     	 str r3,[r7,#12]
 880:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2915              	 .loc 2 880 6
 2916 0028 BB1C     	 adds r3,r7,#2
 2917 002a 1B78     	 ldrb r3,[r3]
 2918 002c 002B     	 cmp r3,#0
 2919 002e 1ED1     	 bne .L118
 881:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 882:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 &= ~((uint32_t)SHS_GNCTR00_GAIN0_Msk << ch_mask) ;
 2920              	 .loc 2 882 22
 2921 0030 7A68     	 ldr r2,[r7,#4]
 2922 0032 C023     	 movs r3,#192
 2923 0034 5B00     	 lsls r3,r3,#1
 2924 0036 D358     	 ldr r3,[r2,r3]
 2925              	 .loc 2 882 59
 2926 0038 0F21     	 movs r1,#15
 2927 003a FA68     	 ldr r2,[r7,#12]
 2928 003c 9140     	 lsls r1,r1,r2
 2929 003e 0A00     	 movs r2,r1
 2930              	 .loc 2 882 25
 2931 0040 D243     	 mvns r2,r2
 2932              	 .loc 2 882 22
 2933 0042 1A40     	 ands r2,r3
 2934 0044 1100     	 movs r1,r2
 2935 0046 7A68     	 ldr r2,[r7,#4]
 2936 0048 C023     	 movs r3,#192
 2937 004a 5B00     	 lsls r3,r3,#1
 2938 004c D150     	 str r1,[r2,r3]
 883:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 |=  ((uint32_t)gain_value << ch_mask);
 2939              	 .loc 2 883 22
 2940 004e 7A68     	 ldr r2,[r7,#4]
 2941 0050 C023     	 movs r3,#192
 2942 0052 5B00     	 lsls r3,r3,#1
 2943 0054 D258     	 ldr r2,[r2,r3]
 2944              	 .loc 2 883 27
 2945 0056 FB1C     	 adds r3,r7,#3
 2946 0058 1978     	 ldrb r1,[r3]
 2947              	 .loc 2 883 48
 2948 005a FB68     	 ldr r3,[r7,#12]
 2949 005c 9940     	 lsls r1,r1,r3
 2950 005e 0B00     	 movs r3,r1
 2951              	 .loc 2 883 22
 2952 0060 1A43     	 orrs r2,r3
 2953 0062 1100     	 movs r1,r2
 2954 0064 7A68     	 ldr r2,[r7,#4]
 2955 0066 C023     	 movs r3,#192
 2956 0068 5B00     	 lsls r3,r3,#1
 2957 006a D150     	 str r1,[r2,r3]
 884:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 885:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 886:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 887:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 &= ~((uint32_t)SHS_GNCTR10_GAIN0_Msk << ch_mask);
 888:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 889:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 890:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 891:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 892:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 893:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 894:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2958              	 .loc 2 894 1
 2959 006c 21E0     	 b .L120
 2960              	.L118:
 885:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2961              	 .loc 2 885 11
 2962 006e BB1C     	 adds r3,r7,#2
 2963 0070 1B78     	 ldrb r3,[r3]
 2964 0072 012B     	 cmp r3,#1
 2965 0074 1DD1     	 bne .L120
 887:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 2966              	 .loc 2 887 22
 2967 0076 7A68     	 ldr r2,[r7,#4]
 2968 0078 C823     	 movs r3,#200
 2969 007a 5B00     	 lsls r3,r3,#1
 2970 007c D358     	 ldr r3,[r2,r3]
 887:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 2971              	 .loc 2 887 59
 2972 007e 0F21     	 movs r1,#15
 2973 0080 FA68     	 ldr r2,[r7,#12]
 2974 0082 9140     	 lsls r1,r1,r2
 2975 0084 0A00     	 movs r2,r1
 887:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 2976              	 .loc 2 887 25
 2977 0086 D243     	 mvns r2,r2
 887:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 2978              	 .loc 2 887 22
 2979 0088 1A40     	 ands r2,r3
 2980 008a 1100     	 movs r1,r2
 2981 008c 7A68     	 ldr r2,[r7,#4]
 2982 008e C823     	 movs r3,#200
 2983 0090 5B00     	 lsls r3,r3,#1
 2984 0092 D150     	 str r1,[r2,r3]
 888:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 2985              	 .loc 2 888 22
 2986 0094 7A68     	 ldr r2,[r7,#4]
 2987 0096 C823     	 movs r3,#200
 2988 0098 5B00     	 lsls r3,r3,#1
 2989 009a D258     	 ldr r2,[r2,r3]
 888:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 2990              	 .loc 2 888 27
 2991 009c FB1C     	 adds r3,r7,#3
 2992 009e 1978     	 ldrb r1,[r3]
 888:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 2993              	 .loc 2 888 48
 2994 00a0 FB68     	 ldr r3,[r7,#12]
 2995 00a2 9940     	 lsls r1,r1,r3
 2996 00a4 0B00     	 movs r3,r1
 888:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 2997              	 .loc 2 888 22
 2998 00a6 1A43     	 orrs r2,r3
 2999 00a8 1100     	 movs r1,r2
 3000 00aa 7A68     	 ldr r2,[r7,#4]
 3001 00ac C823     	 movs r3,#200
 3002 00ae 5B00     	 lsls r3,r3,#1
 3003 00b0 D150     	 str r1,[r2,r3]
 3004              	.L120:
 3005              	 .loc 2 894 1
 3006 00b2 C046     	 nop
 3007 00b4 BD46     	 mov sp,r7
 3008 00b6 05B0     	 add sp,sp,#20
 3009              	 
 3010 00b8 90BD     	 pop {r4,r7,pc}
 3011              	 .cfi_endproc
 3012              	.LFE178:
 3014              	 .section .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations,"ax",%progbits
 3015              	 .align 1
 3016              	 .global XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
 3017              	 .syntax unified
 3018              	 .code 16
 3019              	 .thumb_func
 3020              	 .fpu softvfp
 3022              	XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:
 3023              	.LFB179:
 895:../Libraries/XMCLib/src/xmc_vadc.c **** 
 896:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 897:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 898:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 899:../Libraries/XMCLib/src/xmc_vadc.c ****                                                          XMC_VADC_GROUP_INDEX_t group_num)
 900:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3024              	 .loc 2 900 1
 3025              	 .cfi_startproc
 3026              	 
 3027              	 
 3028 0000 80B5     	 push {r7,lr}
 3029              	.LCFI118:
 3030              	 .cfi_def_cfa_offset 8
 3031              	 .cfi_offset 7,-8
 3032              	 .cfi_offset 14,-4
 3033 0002 82B0     	 sub sp,sp,#8
 3034              	.LCFI119:
 3035              	 .cfi_def_cfa_offset 16
 3036 0004 00AF     	 add r7,sp,#0
 3037              	.LCFI120:
 3038              	 .cfi_def_cfa_register 7
 3039 0006 7860     	 str r0,[r7,#4]
 3040 0008 0A00     	 movs r2,r1
 3041 000a FB1C     	 adds r3,r7,#3
 3042 000c 1A70     	 strb r2,[r3]
 901:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong SHS Pointer",
 902:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 903:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong group selected",
 904:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 905:../Libraries/XMCLib/src/xmc_vadc.c **** 
 906:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable gain and offset calibration*/
 907:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 3043              	 .loc 2 907 6
 3044 000e FB1C     	 adds r3,r7,#3
 3045 0010 1B78     	 ldrb r3,[r3]
 3046 0012 002B     	 cmp r3,#0
 3047 0014 08D1     	 bne .L122
 908:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 909:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 &= ~((uint32_t)SHS_CALOC0_DISCAL_Msk);
 3048              	 .loc 2 909 21
 3049 0016 7B68     	 ldr r3,[r7,#4]
 3050 0018 E022     	 movs r2,#224
 3051 001a 9B58     	 ldr r3,[r3,r2]
 3052 001c 5B00     	 lsls r3,r3,#1
 3053 001e 5A08     	 lsrs r2,r3,#1
 3054 0020 7B68     	 ldr r3,[r7,#4]
 3055 0022 E021     	 movs r1,#224
 3056 0024 5A50     	 str r2,[r3,r1]
 910:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 911:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 912:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 913:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 &= ~((uint32_t)SHS_CALOC1_DISCAL_Msk);
 914:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 915:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 916:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 917:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 918:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 919:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3057              	 .loc 2 919 1
 3058 0026 0BE0     	 b .L124
 3059              	.L122:
 911:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3060              	 .loc 2 911 11
 3061 0028 FB1C     	 adds r3,r7,#3
 3062 002a 1B78     	 ldrb r3,[r3]
 3063 002c 012B     	 cmp r3,#1
 3064 002e 07D1     	 bne .L124
 913:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3065              	 .loc 2 913 21
 3066 0030 7B68     	 ldr r3,[r7,#4]
 3067 0032 E422     	 movs r2,#228
 3068 0034 9B58     	 ldr r3,[r3,r2]
 3069 0036 5B00     	 lsls r3,r3,#1
 3070 0038 5A08     	 lsrs r2,r3,#1
 3071 003a 7B68     	 ldr r3,[r7,#4]
 3072 003c E421     	 movs r1,#228
 3073 003e 5A50     	 str r2,[r3,r1]
 3074              	.L124:
 3075              	 .loc 2 919 1
 3076 0040 C046     	 nop
 3077 0042 BD46     	 mov sp,r7
 3078 0044 02B0     	 add sp,sp,#8
 3079              	 
 3080 0046 80BD     	 pop {r7,pc}
 3081              	 .cfi_endproc
 3082              	.LFE179:
 3084              	 .section .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations,"ax",%progbits
 3085              	 .align 1
 3086              	 .global XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
 3087              	 .syntax unified
 3088              	 .code 16
 3089              	 .thumb_func
 3090              	 .fpu softvfp
 3092              	XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:
 3093              	.LFB180:
 920:../Libraries/XMCLib/src/xmc_vadc.c **** 
 921:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 922:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 923:../Libraries/XMCLib/src/xmc_vadc.c ****                                                           XMC_VADC_GROUP_INDEX_t group_num)
 924:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3094              	 .loc 2 924 1
 3095              	 .cfi_startproc
 3096              	 
 3097              	 
 3098 0000 80B5     	 push {r7,lr}
 3099              	.LCFI121:
 3100              	 .cfi_def_cfa_offset 8
 3101              	 .cfi_offset 7,-8
 3102              	 .cfi_offset 14,-4
 3103 0002 82B0     	 sub sp,sp,#8
 3104              	.LCFI122:
 3105              	 .cfi_def_cfa_offset 16
 3106 0004 00AF     	 add r7,sp,#0
 3107              	.LCFI123:
 3108              	 .cfi_def_cfa_register 7
 3109 0006 7860     	 str r0,[r7,#4]
 3110 0008 0A00     	 movs r2,r1
 3111 000a FB1C     	 adds r3,r7,#3
 3112 000c 1A70     	 strb r2,[r3]
 925:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong SHS Pointer",
 926:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 927:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong group selected",
 928:../Libraries/XMCLib/src/xmc_vadc.c ****             (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 929:../Libraries/XMCLib/src/xmc_vadc.c **** 
 930:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 3113              	 .loc 2 930 6
 3114 000e FB1C     	 adds r3,r7,#3
 3115 0010 1B78     	 ldrb r3,[r3]
 3116 0012 002B     	 cmp r3,#0
 3117 0014 09D1     	 bne .L126
 931:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 932:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |= (uint32_t)SHS_CALOC0_DISCAL_Msk;
 3118              	 .loc 2 932 21
 3119 0016 7B68     	 ldr r3,[r7,#4]
 3120 0018 E022     	 movs r2,#224
 3121 001a 9B58     	 ldr r3,[r3,r2]
 3122 001c 8022     	 movs r2,#128
 3123 001e 1206     	 lsls r2,r2,#24
 3124 0020 1A43     	 orrs r2,r3
 3125 0022 7B68     	 ldr r3,[r7,#4]
 3126 0024 E021     	 movs r1,#224
 3127 0026 5A50     	 str r2,[r3,r1]
 933:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 934:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 935:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 936:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |= (uint32_t)SHS_CALOC1_DISCAL_Msk;
 937:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 938:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 939:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 940:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 941:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 942:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3128              	 .loc 2 942 1
 3129 0028 0CE0     	 b .L128
 3130              	.L126:
 934:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3131              	 .loc 2 934 11
 3132 002a FB1C     	 adds r3,r7,#3
 3133 002c 1B78     	 ldrb r3,[r3]
 3134 002e 012B     	 cmp r3,#1
 3135 0030 08D1     	 bne .L128
 936:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3136              	 .loc 2 936 21
 3137 0032 7B68     	 ldr r3,[r7,#4]
 3138 0034 E422     	 movs r2,#228
 3139 0036 9B58     	 ldr r3,[r3,r2]
 3140 0038 8022     	 movs r2,#128
 3141 003a 1206     	 lsls r2,r2,#24
 3142 003c 1A43     	 orrs r2,r3
 3143 003e 7B68     	 ldr r3,[r7,#4]
 3144 0040 E421     	 movs r1,#228
 3145 0042 5A50     	 str r2,[r3,r1]
 3146              	.L128:
 3147              	 .loc 2 942 1
 3148 0044 C046     	 nop
 3149 0046 BD46     	 mov sp,r7
 3150 0048 02B0     	 add sp,sp,#8
 3151              	 
 3152 004a 80BD     	 pop {r7,pc}
 3153              	 .cfi_endproc
 3154              	.LFE180:
 3156              	 .section .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue,"ax",%progbits
 3157              	 .align 1
 3158              	 .global XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
 3159              	 .syntax unified
 3160              	 .code 16
 3161              	 .thumb_func
 3162              	 .fpu softvfp
 3164              	XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:
 3165              	.LFB181:
 943:../Libraries/XMCLib/src/xmc_vadc.c **** 
 944:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to get the offset calibration value of the Sample and hold module*/
 945:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 946:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
 947:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level)
 948:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3166              	 .loc 2 948 1
 3167              	 .cfi_startproc
 3168              	 
 3169              	 
 3170 0000 80B5     	 push {r7,lr}
 3171              	.LCFI124:
 3172              	 .cfi_def_cfa_offset 8
 3173              	 .cfi_offset 7,-8
 3174              	 .cfi_offset 14,-4
 3175 0002 84B0     	 sub sp,sp,#16
 3176              	.LCFI125:
 3177              	 .cfi_def_cfa_offset 24
 3178 0004 00AF     	 add r7,sp,#0
 3179              	.LCFI126:
 3180              	 .cfi_def_cfa_register 7
 3181 0006 7860     	 str r0,[r7,#4]
 3182 0008 0800     	 movs r0,r1
 3183 000a 1100     	 movs r1,r2
 3184 000c FB1C     	 adds r3,r7,#3
 3185 000e 021C     	 adds r2,r0,#0
 3186 0010 1A70     	 strb r2,[r3]
 3187 0012 BB1C     	 adds r3,r7,#2
 3188 0014 0A1C     	 adds r2,r1,#0
 3189 0016 1A70     	 strb r2,[r3]
 949:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t calibration_value;
 950:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong SHS Pointer",
 951:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 952:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong Group number selected",
 953:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 954:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong gain level selected",
 955:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 956:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 957:../Libraries/XMCLib/src/xmc_vadc.c **** 
 958:../Libraries/XMCLib/src/xmc_vadc.c ****   calibration_value = 0U;
 3190              	 .loc 2 958 21
 3191 0018 0023     	 movs r3,#0
 3192 001a FB60     	 str r3,[r7,#12]
 959:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 3193              	 .loc 2 959 6
 3194 001c FB1C     	 adds r3,r7,#3
 3195 001e 1B78     	 ldrb r3,[r3]
 3196 0020 002B     	 cmp r3,#0
 3197 0022 0AD1     	 bne .L130
 960:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 961:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC0 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC0_CALOFFVAL0
 3198              	 .loc 2 961 33
 3199 0024 7B68     	 ldr r3,[r7,#4]
 3200 0026 E022     	 movs r2,#224
 3201 0028 9A58     	 ldr r2,[r3,r2]
 3202              	 .loc 2 961 45
 3203 002a BB1C     	 adds r3,r7,#2
 3204 002c 1B78     	 ldrb r3,[r3]
 3205              	 .loc 2 961 42
 3206 002e DA40     	 lsrs r2,r2,r3
 3207 0030 1300     	 movs r3,r2
 3208              	 .loc 2 961 23
 3209 0032 7F22     	 movs r2,#127
 3210 0034 1340     	 ands r3,r2
 3211 0036 FB60     	 str r3,[r7,#12]
 3212 0038 0DE0     	 b .L131
 3213              	.L130:
 962:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 963:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 3214              	 .loc 2 963 11
 3215 003a FB1C     	 adds r3,r7,#3
 3216 003c 1B78     	 ldrb r3,[r3]
 3217 003e 012B     	 cmp r3,#1
 3218 0040 09D1     	 bne .L131
 964:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 965:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC1 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC1_CALOFFVAL0
 3219              	 .loc 2 965 33
 3220 0042 7B68     	 ldr r3,[r7,#4]
 3221 0044 E422     	 movs r2,#228
 3222 0046 9A58     	 ldr r2,[r3,r2]
 3223              	 .loc 2 965 45
 3224 0048 BB1C     	 adds r3,r7,#2
 3225 004a 1B78     	 ldrb r3,[r3]
 3226              	 .loc 2 965 42
 3227 004c DA40     	 lsrs r2,r2,r3
 3228 004e 1300     	 movs r3,r2
 3229              	 .loc 2 965 23
 3230 0050 7F22     	 movs r2,#127
 3231 0052 1340     	 ands r3,r2
 3232 0054 FB60     	 str r3,[r7,#12]
 3233              	.L131:
 966:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 967:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 968:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 969:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 970:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 971:../Libraries/XMCLib/src/xmc_vadc.c ****   return ((uint8_t)calibration_value);
 3234              	 .loc 2 971 11
 3235 0056 FB68     	 ldr r3,[r7,#12]
 3236 0058 DBB2     	 uxtb r3,r3
 972:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3237              	 .loc 2 972 1
 3238 005a 1800     	 movs r0,r3
 3239 005c BD46     	 mov sp,r7
 3240 005e 04B0     	 add sp,sp,#16
 3241              	 
 3242 0060 80BD     	 pop {r7,pc}
 3243              	 .cfi_endproc
 3244              	.LFE181:
 3246              	 .section .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue,"ax",%progbits
 3247              	 .align 1
 3248              	 .global XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
 3249              	 .syntax unified
 3250              	 .code 16
 3251              	 .thumb_func
 3252              	 .fpu softvfp
 3254              	XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:
 3255              	.LFB182:
 973:../Libraries/XMCLib/src/xmc_vadc.c **** 
 974:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the offset calibration value of the Sample and hold module*/
 975:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 976:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
 977:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
 978:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    uint8_t offset_calibration_value)
 979:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3256              	 .loc 2 979 1
 3257              	 .cfi_startproc
 3258              	 
 3259              	 
 3260 0000 90B5     	 push {r4,r7,lr}
 3261              	.LCFI127:
 3262              	 .cfi_def_cfa_offset 12
 3263              	 .cfi_offset 4,-12
 3264              	 .cfi_offset 7,-8
 3265              	 .cfi_offset 14,-4
 3266 0002 83B0     	 sub sp,sp,#12
 3267              	.LCFI128:
 3268              	 .cfi_def_cfa_offset 24
 3269 0004 00AF     	 add r7,sp,#0
 3270              	.LCFI129:
 3271              	 .cfi_def_cfa_register 7
 3272 0006 7860     	 str r0,[r7,#4]
 3273 0008 0C00     	 movs r4,r1
 3274 000a 1000     	 movs r0,r2
 3275 000c 1900     	 movs r1,r3
 3276 000e FB1C     	 adds r3,r7,#3
 3277 0010 221C     	 adds r2,r4,#0
 3278 0012 1A70     	 strb r2,[r3]
 3279 0014 BB1C     	 adds r3,r7,#2
 3280 0016 021C     	 adds r2,r0,#0
 3281 0018 1A70     	 strb r2,[r3]
 3282 001a 7B1C     	 adds r3,r7,#1
 3283 001c 0A1C     	 adds r2,r1,#0
 3284 001e 1A70     	 strb r2,[r3]
 980:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong SHS Pointer",
 981:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 982:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong Group number selected",
 983:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 984:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong gain level selected",
 985:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 986:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 987:../Libraries/XMCLib/src/xmc_vadc.c **** 
 988:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 3285              	 .loc 2 988 6
 3286 0020 FB1C     	 adds r3,r7,#3
 3287 0022 1B78     	 ldrb r3,[r3]
 3288 0024 002B     	 cmp r3,#0
 3289 0026 20D1     	 bne .L134
 989:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 990:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 = (shs_ptr->CALOC0  & ~((uint32_t)SHS_CALOC0_CALOFFVAL0_Msk << (uint32_t)gain_l
 3290              	 .loc 2 990 31
 3291 0028 7B68     	 ldr r3,[r7,#4]
 3292 002a E022     	 movs r2,#224
 3293 002c 9B58     	 ldr r3,[r3,r2]
 3294              	 .loc 2 990 84
 3295 002e BA1C     	 adds r2,r7,#2
 3296 0030 1278     	 ldrb r2,[r2]
 3297              	 .loc 2 990 81
 3298 0032 7F21     	 movs r1,#127
 3299 0034 9140     	 lsls r1,r1,r2
 3300 0036 0A00     	 movs r2,r1
 3301              	 .loc 2 990 43
 3302 0038 D243     	 mvns r2,r2
 3303              	 .loc 2 990 41
 3304 003a 1340     	 ands r3,r2
 3305              	 .loc 2 990 107
 3306 003c 8022     	 movs r2,#128
 3307 003e 1202     	 lsls r2,r2,#8
 3308 0040 1A43     	 orrs r2,r3
 3309              	 .loc 2 990 21
 3310 0042 7B68     	 ldr r3,[r7,#4]
 3311 0044 E021     	 movs r1,#224
 3312 0046 5A50     	 str r2,[r3,r1]
 991:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC0_OFFWC_Msk;
 992:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 3313              	 .loc 2 992 21
 3314 0048 7B68     	 ldr r3,[r7,#4]
 3315 004a E022     	 movs r2,#224
 3316 004c 9A58     	 ldr r2,[r3,r2]
 3317              	 .loc 2 992 26
 3318 004e 7B1C     	 adds r3,r7,#1
 3319 0050 1978     	 ldrb r1,[r3]
 3320              	 .loc 2 992 64
 3321 0052 BB1C     	 adds r3,r7,#2
 3322 0054 1B78     	 ldrb r3,[r3]
 3323              	 .loc 2 992 61
 3324 0056 9940     	 lsls r1,r1,r3
 3325 0058 0B00     	 movs r3,r1
 3326              	 .loc 2 992 21
 3327 005a 1343     	 orrs r3,r2
 3328 005c 8022     	 movs r2,#128
 3329 005e 1202     	 lsls r2,r2,#8
 3330 0060 1A43     	 orrs r2,r3
 3331 0062 7B68     	 ldr r3,[r7,#4]
 3332 0064 E021     	 movs r1,#224
 3333 0066 5A50     	 str r2,[r3,r1]
 993:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 994:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 995:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 996:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 = (shs_ptr->CALOC1 & ~((uint32_t)SHS_CALOC1_CALOFFVAL0_Msk << (uint32_t)gain_le
 997:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 998:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 999:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1000:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1001:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1002:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
1003:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1004:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3334              	 .loc 2 1004 1
 3335 0068 23E0     	 b .L136
 3336              	.L134:
 994:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3337              	 .loc 2 994 11
 3338 006a FB1C     	 adds r3,r7,#3
 3339 006c 1B78     	 ldrb r3,[r3]
 3340 006e 012B     	 cmp r3,#1
 3341 0070 1FD1     	 bne .L136
 996:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 3342              	 .loc 2 996 31
 3343 0072 7B68     	 ldr r3,[r7,#4]
 3344 0074 E422     	 movs r2,#228
 3345 0076 9B58     	 ldr r3,[r3,r2]
 996:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 3346              	 .loc 2 996 83
 3347 0078 BA1C     	 adds r2,r7,#2
 3348 007a 1278     	 ldrb r2,[r2]
 996:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 3349              	 .loc 2 996 80
 3350 007c 7F21     	 movs r1,#127
 3351 007e 9140     	 lsls r1,r1,r2
 3352 0080 0A00     	 movs r2,r1
 996:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 3353              	 .loc 2 996 42
 3354 0082 D243     	 mvns r2,r2
 996:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 3355              	 .loc 2 996 40
 3356 0084 1340     	 ands r3,r2
 996:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 3357              	 .loc 2 996 106
 3358 0086 8022     	 movs r2,#128
 3359 0088 1202     	 lsls r2,r2,#8
 3360 008a 1A43     	 orrs r2,r3
 996:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 3361              	 .loc 2 996 21
 3362 008c 7B68     	 ldr r3,[r7,#4]
 3363 008e E421     	 movs r1,#228
 3364 0090 5A50     	 str r2,[r3,r1]
 998:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3365              	 .loc 2 998 21
 3366 0092 7B68     	 ldr r3,[r7,#4]
 3367 0094 E422     	 movs r2,#228
 3368 0096 9A58     	 ldr r2,[r3,r2]
 998:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3369              	 .loc 2 998 26
 3370 0098 7B1C     	 adds r3,r7,#1
 3371 009a 1978     	 ldrb r1,[r3]
 998:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3372              	 .loc 2 998 64
 3373 009c BB1C     	 adds r3,r7,#2
 3374 009e 1B78     	 ldrb r3,[r3]
 998:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3375              	 .loc 2 998 61
 3376 00a0 9940     	 lsls r1,r1,r3
 3377 00a2 0B00     	 movs r3,r1
 998:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 3378              	 .loc 2 998 21
 3379 00a4 1343     	 orrs r3,r2
 3380 00a6 8022     	 movs r2,#128
 3381 00a8 1202     	 lsls r2,r2,#8
 3382 00aa 1A43     	 orrs r2,r3
 3383 00ac 7B68     	 ldr r3,[r7,#4]
 3384 00ae E421     	 movs r1,#228
 3385 00b0 5A50     	 str r2,[r3,r1]
 3386              	.L136:
 3387              	 .loc 2 1004 1
 3388 00b2 C046     	 nop
 3389 00b4 BD46     	 mov sp,r7
 3390 00b6 03B0     	 add sp,sp,#12
 3391              	 
 3392 00b8 90BD     	 pop {r4,r7,pc}
 3393              	 .cfi_endproc
 3394              	.LFE182:
 3396              	 .section .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop,"ax",%progbits
 3397              	 .align 1
 3398              	 .global XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
 3399              	 .syntax unified
 3400              	 .code 16
 3401              	 .thumb_func
 3402              	 .fpu softvfp
 3404              	XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:
 3405              	.LFB183:
1005:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1006:../Libraries/XMCLib/src/xmc_vadc.c **** 
1007:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the values of sigma delta loop of the Sample and hold module*/
1008:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1009:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_GROUP_INDEX_t group_num,
1010:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
1011:../Libraries/XMCLib/src/xmc_vadc.c ****                                            uint8_t ch_num)
1012:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3406              	 .loc 2 1012 1
 3407              	 .cfi_startproc
 3408              	 
 3409              	 
 3410 0000 90B5     	 push {r4,r7,lr}
 3411              	.LCFI130:
 3412              	 .cfi_def_cfa_offset 12
 3413              	 .cfi_offset 4,-12
 3414              	 .cfi_offset 7,-8
 3415              	 .cfi_offset 14,-4
 3416 0002 83B0     	 sub sp,sp,#12
 3417              	.LCFI131:
 3418              	 .cfi_def_cfa_offset 24
 3419 0004 00AF     	 add r7,sp,#0
 3420              	.LCFI132:
 3421              	 .cfi_def_cfa_register 7
 3422 0006 7860     	 str r0,[r7,#4]
 3423 0008 0C00     	 movs r4,r1
 3424 000a 1000     	 movs r0,r2
 3425 000c 1900     	 movs r1,r3
 3426 000e FB1C     	 adds r3,r7,#3
 3427 0010 221C     	 adds r2,r4,#0
 3428 0012 1A70     	 strb r2,[r3]
 3429 0014 BB1C     	 adds r3,r7,#2
 3430 0016 021C     	 adds r2,r0,#0
 3431 0018 1A70     	 strb r2,[r3]
 3432 001a 7B1C     	 adds r3,r7,#1
 3433 001c 0A1C     	 adds r2,r1,#0
 3434 001e 1A70     	 strb r2,[r3]
1013:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong SHS Pointer",
1014:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1015:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Group number selected",
1016:../Libraries/XMCLib/src/xmc_vadc.c ****                (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
1017:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Delta sigma loop selected",
1018:../Libraries/XMCLib/src/xmc_vadc.c ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
1019:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Channel Number",
1020:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1021:../Libraries/XMCLib/src/xmc_vadc.c **** 
1022:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP &= ~(((uint32_t)SHS_LOOP_LPCH0_Msk | (uint32_t)SHS_LOOP_LPSH0_Msk | (uint32_t)SHS_L
 3435              	 .loc 2 1022 17
 3436 0020 7B68     	 ldr r3,[r7,#4]
 3437 0022 1B6D     	 ldr r3,[r3,#80]
1023:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 3438              	 .loc 2 1023 25
 3439 0024 BA1C     	 adds r2,r7,#2
 3440 0026 1278     	 ldrb r2,[r2]
 3441              	 .loc 2 1023 22
 3442 0028 0C49     	 ldr r1,.L138
 3443 002a 9140     	 lsls r1,r1,r2
 3444 002c 0A00     	 movs r2,r1
1022:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 3445              	 .loc 2 1022 20
 3446 002e D243     	 mvns r2,r2
1022:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 3447              	 .loc 2 1022 17
 3448 0030 1A40     	 ands r2,r3
 3449 0032 7B68     	 ldr r3,[r7,#4]
 3450 0034 1A65     	 str r2,[r3,#80]
1024:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP |= ((uint32_t)ch_num | ((uint32_t)group_num << (uint32_t)SHS_LOOP_LPSH0_Pos)) << (u
 3451              	 .loc 2 1024 17
 3452 0036 7B68     	 ldr r3,[r7,#4]
 3453 0038 1A6D     	 ldr r2,[r3,#80]
 3454              	 .loc 2 1024 21
 3455 003a 7B1C     	 adds r3,r7,#1
 3456 003c 1978     	 ldrb r1,[r3]
 3457              	 .loc 2 1024 41
 3458 003e FB1C     	 adds r3,r7,#3
 3459 0040 1B78     	 ldrb r3,[r3]
 3460              	 .loc 2 1024 61
 3461 0042 1B02     	 lsls r3,r3,#8
 3462              	 .loc 2 1024 38
 3463 0044 1943     	 orrs r1,r3
 3464              	 .loc 2 1024 98
 3465 0046 BB1C     	 adds r3,r7,#2
 3466 0048 1B78     	 ldrb r3,[r3]
 3467              	 .loc 2 1024 95
 3468 004a 9940     	 lsls r1,r1,r3
 3469 004c 0B00     	 movs r3,r1
 3470              	 .loc 2 1024 17
 3471 004e 1A43     	 orrs r2,r3
 3472 0050 7B68     	 ldr r3,[r7,#4]
 3473 0052 1A65     	 str r2,[r3,#80]
1025:../Libraries/XMCLib/src/xmc_vadc.c **** 
1026:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3474              	 .loc 2 1026 1
 3475 0054 C046     	 nop
 3476 0056 BD46     	 mov sp,r7
 3477 0058 03B0     	 add sp,sp,#12
 3478              	 
 3479 005a 90BD     	 pop {r4,r7,pc}
 3480              	.L139:
 3481              	 .align 2
 3482              	.L138:
 3483 005c 1F810000 	 .word 33055
 3484              	 .cfi_endproc
 3485              	.LFE183:
 3487              	 .section .text.XMC_VADC_GROUP_ScanInit,"ax",%progbits
 3488              	 .align 1
 3489              	 .global XMC_VADC_GROUP_ScanInit
 3490              	 .syntax unified
 3491              	 .code 16
 3492              	 .thumb_func
 3493              	 .fpu softvfp
 3495              	XMC_VADC_GROUP_ScanInit:
 3496              	.LFB184:
1027:../Libraries/XMCLib/src/xmc_vadc.c **** 
1028:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1029:../Libraries/XMCLib/src/xmc_vadc.c **** 
1030:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)   
1031:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize the group scan hardware of a kernel */
1032:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
1033:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3497              	 .loc 2 1033 1
 3498              	 .cfi_startproc
 3499              	 
 3500              	 
 3501 0000 80B5     	 push {r7,lr}
 3502              	.LCFI133:
 3503              	 .cfi_def_cfa_offset 8
 3504              	 .cfi_offset 7,-8
 3505              	 .cfi_offset 14,-4
 3506 0002 84B0     	 sub sp,sp,#16
 3507              	.LCFI134:
 3508              	 .cfi_def_cfa_offset 24
 3509 0004 00AF     	 add r7,sp,#0
 3510              	.LCFI135:
 3511              	 .cfi_def_cfa_register 7
 3512 0006 7860     	 str r0,[r7,#4]
 3513 0008 3960     	 str r1,[r7]
1034:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      reg;
1035:../Libraries/XMCLib/src/xmc_vadc.c **** 
1036:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1037:../Libraries/XMCLib/src/xmc_vadc.c **** 
1038:../Libraries/XMCLib/src/xmc_vadc.c ****   /* All configurations have to be performed with the arbitration slot disabled */
1039:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 3514              	 .loc 2 1039 3
 3515 000a 7B68     	 ldr r3,[r7,#4]
 3516 000c 1800     	 movs r0,r3
 3517 000e FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1040:../Libraries/XMCLib/src/xmc_vadc.c ****   
1041:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Read in the existing contents of arbitration priority register */
1042:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 3518              	 .loc 2 1042 7
 3519 0012 7B68     	 ldr r3,[r7,#4]
 3520 0014 8422     	 movs r2,#132
 3521 0016 9B58     	 ldr r3,[r3,r2]
 3522 0018 FB60     	 str r3,[r7,#12]
1043:../Libraries/XMCLib/src/xmc_vadc.c **** 
1044:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the priority of the request source */
1045:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
 3523              	 .loc 2 1045 7
 3524 001a FB68     	 ldr r3,[r7,#12]
 3525 001c 3022     	 movs r2,#48
 3526 001e 9343     	 bics r3,r2
 3527 0020 FB60     	 str r3,[r7,#12]
1046:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 3528              	 .loc 2 1046 37
 3529 0022 3B68     	 ldr r3,[r7]
 3530 0024 1B78     	 ldrb r3,[r3]
 3531 0026 1B07     	 lsls r3,r3,#28
 3532 0028 9B0F     	 lsrs r3,r3,#30
 3533 002a DBB2     	 uxtb r3,r3
 3534              	 .loc 2 1046 10
 3535 002c 1B01     	 lsls r3,r3,#4
 3536              	 .loc 2 1046 7
 3537 002e FA68     	 ldr r2,[r7,#12]
 3538 0030 1343     	 orrs r3,r2
 3539 0032 FB60     	 str r3,[r7,#12]
1047:../Libraries/XMCLib/src/xmc_vadc.c ****   
1048:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the start mode */
1049:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3540              	 .loc 2 1049 30
 3541 0034 3B68     	 ldr r3,[r7]
 3542 0036 1B78     	 ldrb r3,[r3]
 3543 0038 0322     	 movs r2,#3
 3544 003a 1340     	 ands r3,r2
 3545 003c DBB2     	 uxtb r3,r3
 3546              	 .loc 2 1049 6
 3547 003e 002B     	 cmp r3,#0
 3548 0040 03D0     	 beq .L141
1050:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1051:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 3549              	 .loc 2 1051 9
 3550 0042 FB68     	 ldr r3,[r7,#12]
 3551 0044 8022     	 movs r2,#128
 3552 0046 1343     	 orrs r3,r2
 3553 0048 FB60     	 str r3,[r7,#12]
 3554              	.L141:
1052:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1053:../Libraries/XMCLib/src/xmc_vadc.c **** 
1054:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 3555              	 .loc 2 1054 20
 3556 004a 7B68     	 ldr r3,[r7,#4]
 3557 004c 8421     	 movs r1,#132
 3558 004e FA68     	 ldr r2,[r7,#12]
 3559 0050 5A50     	 str r2,[r3,r1]
1055:../Libraries/XMCLib/src/xmc_vadc.c **** 
1056:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL = (uint32_t)(config->asctrl |(VADC_G_ASCTRL_XTWC_Msk) |(VADC_G_ASCTRL_GTWC_Msk)
 3560              	 .loc 2 1056 40
 3561 0052 3B68     	 ldr r3,[r7]
 3562 0054 5B68     	 ldr r3,[r3,#4]
 3563              	 .loc 2 1056 23
 3564 0056 154A     	 ldr r2,.L143
 3565 0058 1A43     	 orrs r2,r3
 3566 005a 1100     	 movs r1,r2
 3567              	 .loc 2 1056 21
 3568 005c 7A68     	 ldr r2,[r7,#4]
 3569 005e 9023     	 movs r3,#144
 3570 0060 5B00     	 lsls r3,r3,#1
 3571 0062 D150     	 str r1,[r2,r3]
1057:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  (VADC_G_ASCTRL_TMWC_Msk));
1058:../Libraries/XMCLib/src/xmc_vadc.c **** 
1059:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR  = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 3572              	 .loc 2 1059 40
 3573 0064 3B68     	 ldr r3,[r7]
 3574 0066 9B68     	 ldr r3,[r3,#8]
 3575              	 .loc 2 1059 22
 3576 0068 0122     	 movs r2,#1
 3577 006a 1A43     	 orrs r2,r3
 3578 006c 1100     	 movs r1,r2
 3579              	 .loc 2 1059 20
 3580 006e 7A68     	 ldr r2,[r7,#4]
 3581 0070 9223     	 movs r3,#146
 3582 0072 5B00     	 lsls r3,r3,#1
 3583 0074 D150     	 str r1,[r2,r3]
1060:../Libraries/XMCLib/src/xmc_vadc.c ****   
1061:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3584              	 .loc 2 1061 30
 3585 0076 3B68     	 ldr r3,[r7]
 3586 0078 1B78     	 ldrb r3,[r3]
 3587 007a 0322     	 movs r2,#3
 3588 007c 1340     	 ands r3,r2
 3589 007e DBB2     	 uxtb r3,r3
 3590              	 .loc 2 1061 6
 3591 0080 022B     	 cmp r3,#2
 3592 0082 0BD1     	 bne .L142
1062:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1063:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 3593              	 .loc 2 1063 21
 3594 0084 7A68     	 ldr r2,[r7,#4]
 3595 0086 9223     	 movs r3,#146
 3596 0088 5B00     	 lsls r3,r3,#1
 3597 008a D358     	 ldr r3,[r2,r3]
 3598 008c 8022     	 movs r2,#128
 3599 008e 5202     	 lsls r2,r2,#9
 3600 0090 1A43     	 orrs r2,r3
 3601 0092 1100     	 movs r1,r2
 3602 0094 7A68     	 ldr r2,[r7,#4]
 3603 0096 9223     	 movs r3,#146
 3604 0098 5B00     	 lsls r3,r3,#1
 3605 009a D150     	 str r1,[r2,r3]
 3606              	.L142:
1064:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1065:../Libraries/XMCLib/src/xmc_vadc.c ****   
1066:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot now */
1067:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
 3607              	 .loc 2 1067 3
 3608 009c 7B68     	 ldr r3,[r7,#4]
 3609 009e 1800     	 movs r0,r3
 3610 00a0 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanEnableArbitrationSlot
1068:../Libraries/XMCLib/src/xmc_vadc.c ****   
1069:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3611              	 .loc 2 1069 1
 3612 00a4 C046     	 nop
 3613 00a6 BD46     	 mov sp,r7
 3614 00a8 04B0     	 add sp,sp,#16
 3615              	 
 3616 00aa 80BD     	 pop {r7,pc}
 3617              	.L144:
 3618              	 .align 2
 3619              	.L143:
 3620 00ac 00808080 	 .word -2139062272
 3621              	 .cfi_endproc
 3622              	.LFE184:
 3624              	 .section .text.XMC_VADC_GROUP_ScanSelectTrigger,"ax",%progbits
 3625              	 .align 1
 3626              	 .global XMC_VADC_GROUP_ScanSelectTrigger
 3627              	 .syntax unified
 3628              	 .code 16
 3629              	 .thumb_func
 3630              	 .fpu softvfp
 3632              	XMC_VADC_GROUP_ScanSelectTrigger:
 3633              	.LFB185:
1070:../Libraries/XMCLib/src/xmc_vadc.c **** 
1071:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger input for Group Scan request source */
1072:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
1073:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3634              	 .loc 2 1073 1
 3635              	 .cfi_startproc
 3636              	 
 3637              	 
 3638 0000 80B5     	 push {r7,lr}
 3639              	.LCFI136:
 3640              	 .cfi_def_cfa_offset 8
 3641              	 .cfi_offset 7,-8
 3642              	 .cfi_offset 14,-4
 3643 0002 84B0     	 sub sp,sp,#16
 3644              	.LCFI137:
 3645              	 .cfi_def_cfa_offset 24
 3646 0004 00AF     	 add r7,sp,#0
 3647              	.LCFI138:
 3648              	 .cfi_def_cfa_register 7
 3649 0006 7860     	 str r0,[r7,#4]
 3650 0008 0A00     	 movs r2,r1
 3651 000a FB1C     	 adds r3,r7,#3
 3652 000c 1A70     	 strb r2,[r3]
1074:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1075:../Libraries/XMCLib/src/xmc_vadc.c **** 
1076:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1077:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Trigger Port", ((trigger_input)< XMC_VADC_NUM_
1078:../Libraries/XMCLib/src/xmc_vadc.c **** 
1079:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3653              	 .loc 2 1079 17
 3654 000e 7A68     	 ldr r2,[r7,#4]
 3655 0010 9023     	 movs r3,#144
 3656 0012 5B00     	 lsls r3,r3,#1
 3657 0014 D358     	 ldr r3,[r2,r3]
 3658 0016 FB60     	 str r3,[r7,#12]
1080:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 3659              	 .loc 2 1080 16
 3660 0018 FB68     	 ldr r3,[r7,#12]
 3661 001a 8022     	 movs r2,#128
 3662 001c 1202     	 lsls r2,r2,#8
 3663 001e 1343     	 orrs r3,r2
 3664 0020 FB60     	 str r3,[r7,#12]
1081:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTSEL_Msk);
 3665              	 .loc 2 1081 16
 3666 0022 FB68     	 ldr r3,[r7,#12]
 3667 0024 084A     	 ldr r2,.L146
 3668 0026 1340     	 ands r3,r2
 3669 0028 FB60     	 str r3,[r7,#12]
1082:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 3670              	 .loc 2 1082 30
 3671 002a FB1C     	 adds r3,r7,#3
 3672 002c 1B78     	 ldrb r3,[r3]
 3673              	 .loc 2 1082 19
 3674 002e 1B02     	 lsls r3,r3,#8
 3675              	 .loc 2 1082 16
 3676 0030 FA68     	 ldr r2,[r7,#12]
 3677 0032 1343     	 orrs r3,r2
 3678 0034 FB60     	 str r3,[r7,#12]
1083:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3679              	 .loc 2 1083 22
 3680 0036 7A68     	 ldr r2,[r7,#4]
 3681 0038 9023     	 movs r3,#144
 3682 003a 5B00     	 lsls r3,r3,#1
 3683 003c F968     	 ldr r1,[r7,#12]
 3684 003e D150     	 str r1,[r2,r3]
1084:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3685              	 .loc 2 1084 1
 3686 0040 C046     	 nop
 3687 0042 BD46     	 mov sp,r7
 3688 0044 04B0     	 add sp,sp,#16
 3689              	 
 3690 0046 80BD     	 pop {r7,pc}
 3691              	.L147:
 3692              	 .align 2
 3693              	.L146:
 3694 0048 FFF0FFFF 	 .word -3841
 3695              	 .cfi_endproc
 3696              	.LFE185:
 3698              	 .section .text.XMC_VADC_GROUP_ScanSelectTriggerEdge,"ax",%progbits
 3699              	 .align 1
 3700              	 .global XMC_VADC_GROUP_ScanSelectTriggerEdge
 3701              	 .syntax unified
 3702              	 .code 16
 3703              	 .thumb_func
 3704              	 .fpu softvfp
 3706              	XMC_VADC_GROUP_ScanSelectTriggerEdge:
 3707              	.LFB186:
1085:../Libraries/XMCLib/src/xmc_vadc.c **** 
1086:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1087:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
1088:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3708              	 .loc 2 1088 1
 3709              	 .cfi_startproc
 3710              	 
 3711              	 
 3712 0000 80B5     	 push {r7,lr}
 3713              	.LCFI139:
 3714              	 .cfi_def_cfa_offset 8
 3715              	 .cfi_offset 7,-8
 3716              	 .cfi_offset 14,-4
 3717 0002 84B0     	 sub sp,sp,#16
 3718              	.LCFI140:
 3719              	 .cfi_def_cfa_offset 24
 3720 0004 00AF     	 add r7,sp,#0
 3721              	.LCFI141:
 3722              	 .cfi_def_cfa_register 7
 3723 0006 7860     	 str r0,[r7,#4]
 3724 0008 0A00     	 movs r2,r1
 3725 000a FB1C     	 adds r3,r7,#3
 3726 000c 1A70     	 strb r2,[r3]
1089:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1090:../Libraries/XMCLib/src/xmc_vadc.c **** 
1091:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
1092:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Trigger Port", ((trigger_edge)<= XMC_VADC_
1093:../Libraries/XMCLib/src/xmc_vadc.c **** 
1094:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3727              	 .loc 2 1094 17
 3728 000e 7A68     	 ldr r2,[r7,#4]
 3729 0010 9023     	 movs r3,#144
 3730 0012 5B00     	 lsls r3,r3,#1
 3731 0014 D358     	 ldr r3,[r2,r3]
 3732 0016 FB60     	 str r3,[r7,#12]
1095:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 3733              	 .loc 2 1095 16
 3734 0018 FB68     	 ldr r3,[r7,#12]
 3735 001a 8022     	 movs r2,#128
 3736 001c 1202     	 lsls r2,r2,#8
 3737 001e 1343     	 orrs r3,r2
 3738 0020 FB60     	 str r3,[r7,#12]
1096:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTMODE_Msk);
 3739              	 .loc 2 1096 16
 3740 0022 FB68     	 ldr r3,[r7,#12]
 3741 0024 084A     	 ldr r2,.L149
 3742 0026 1340     	 ands r3,r2
 3743 0028 FB60     	 str r3,[r7,#12]
1097:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 3744              	 .loc 2 1097 30
 3745 002a FB1C     	 adds r3,r7,#3
 3746 002c 1B78     	 ldrb r3,[r3]
 3747              	 .loc 2 1097 19
 3748 002e 5B03     	 lsls r3,r3,#13
 3749              	 .loc 2 1097 16
 3750 0030 FA68     	 ldr r2,[r7,#12]
 3751 0032 1343     	 orrs r3,r2
 3752 0034 FB60     	 str r3,[r7,#12]
1098:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3753              	 .loc 2 1098 22
 3754 0036 7A68     	 ldr r2,[r7,#4]
 3755 0038 9023     	 movs r3,#144
 3756 003a 5B00     	 lsls r3,r3,#1
 3757 003c F968     	 ldr r1,[r7,#12]
 3758 003e D150     	 str r1,[r2,r3]
1099:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3759              	 .loc 2 1099 1
 3760 0040 C046     	 nop
 3761 0042 BD46     	 mov sp,r7
 3762 0044 04B0     	 add sp,sp,#16
 3763              	 
 3764 0046 80BD     	 pop {r7,pc}
 3765              	.L150:
 3766              	 .align 2
 3767              	.L149:
 3768 0048 FF9FFFFF 	 .word -24577
 3769              	 .cfi_endproc
 3770              	.LFE186:
 3772              	 .section .text.XMC_VADC_GROUP_ScanSelectGating,"ax",%progbits
 3773              	 .align 1
 3774              	 .global XMC_VADC_GROUP_ScanSelectGating
 3775              	 .syntax unified
 3776              	 .code 16
 3777              	 .thumb_func
 3778              	 .fpu softvfp
 3780              	XMC_VADC_GROUP_ScanSelectGating:
 3781              	.LFB187:
1100:../Libraries/XMCLib/src/xmc_vadc.c **** 
1101:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gating input for Group Scan request source */
1102:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
1103:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3782              	 .loc 2 1103 1
 3783              	 .cfi_startproc
 3784              	 
 3785              	 
 3786 0000 80B5     	 push {r7,lr}
 3787              	.LCFI142:
 3788              	 .cfi_def_cfa_offset 8
 3789              	 .cfi_offset 7,-8
 3790              	 .cfi_offset 14,-4
 3791 0002 84B0     	 sub sp,sp,#16
 3792              	.LCFI143:
 3793              	 .cfi_def_cfa_offset 24
 3794 0004 00AF     	 add r7,sp,#0
 3795              	.LCFI144:
 3796              	 .cfi_def_cfa_register 7
 3797 0006 7860     	 str r0,[r7,#4]
 3798 0008 0A00     	 movs r2,r1
 3799 000a FB1C     	 adds r3,r7,#3
 3800 000c 1A70     	 strb r2,[r3]
1104:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1105:../Libraries/XMCLib/src/xmc_vadc.c **** 
1106:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1107:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Gating Port", ((gating_input)< XMC_VADC_NUM_POR
1108:../Libraries/XMCLib/src/xmc_vadc.c **** 
1109:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3801              	 .loc 2 1109 17
 3802 000e 7A68     	 ldr r2,[r7,#4]
 3803 0010 9023     	 movs r3,#144
 3804 0012 5B00     	 lsls r3,r3,#1
 3805 0014 D358     	 ldr r3,[r2,r3]
 3806 0016 FB60     	 str r3,[r7,#12]
1110:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
 3807              	 .loc 2 1110 16
 3808 0018 FB68     	 ldr r3,[r7,#12]
 3809 001a 8022     	 movs r2,#128
 3810 001c 1204     	 lsls r2,r2,#16
 3811 001e 1343     	 orrs r3,r2
 3812 0020 FB60     	 str r3,[r7,#12]
1111:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_GTSEL_Msk);
 3813              	 .loc 2 1111 16
 3814 0022 FB68     	 ldr r3,[r7,#12]
 3815 0024 084A     	 ldr r2,.L152
 3816 0026 1340     	 ands r3,r2
 3817 0028 FB60     	 str r3,[r7,#12]
1112:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 3818              	 .loc 2 1112 30
 3819 002a FB1C     	 adds r3,r7,#3
 3820 002c 1B78     	 ldrb r3,[r3]
 3821              	 .loc 2 1112 19
 3822 002e 1B04     	 lsls r3,r3,#16
 3823              	 .loc 2 1112 16
 3824 0030 FA68     	 ldr r2,[r7,#12]
 3825 0032 1343     	 orrs r3,r2
 3826 0034 FB60     	 str r3,[r7,#12]
1113:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3827              	 .loc 2 1113 22
 3828 0036 7A68     	 ldr r2,[r7,#4]
 3829 0038 9023     	 movs r3,#144
 3830 003a 5B00     	 lsls r3,r3,#1
 3831 003c F968     	 ldr r1,[r7,#12]
 3832 003e D150     	 str r1,[r2,r3]
1114:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3833              	 .loc 2 1114 1
 3834 0040 C046     	 nop
 3835 0042 BD46     	 mov sp,r7
 3836 0044 04B0     	 add sp,sp,#16
 3837              	 
 3838 0046 80BD     	 pop {r7,pc}
 3839              	.L153:
 3840              	 .align 2
 3841              	.L152:
 3842 0048 FFFFF0FF 	 .word -983041
 3843              	 .cfi_endproc
 3844              	.LFE187:
 3846              	 .section .text.XMC_VADC_GROUP_ScanSequenceAbort,"ax",%progbits
 3847              	 .align 1
 3848              	 .global XMC_VADC_GROUP_ScanSequenceAbort
 3849              	 .syntax unified
 3850              	 .code 16
 3851              	 .thumb_func
 3852              	 .fpu softvfp
 3854              	XMC_VADC_GROUP_ScanSequenceAbort:
 3855              	.LFB188:
1115:../Libraries/XMCLib/src/xmc_vadc.c **** 
1116:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to stop an ongoing conversion of a sequence */
1117:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr)
1118:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3856              	 .loc 2 1118 1
 3857              	 .cfi_startproc
 3858              	 
 3859              	 
 3860 0000 90B5     	 push {r4,r7,lr}
 3861              	.LCFI145:
 3862              	 .cfi_def_cfa_offset 12
 3863              	 .cfi_offset 4,-12
 3864              	 .cfi_offset 7,-8
 3865              	 .cfi_offset 14,-4
 3866 0002 85B0     	 sub sp,sp,#20
 3867              	.LCFI146:
 3868              	 .cfi_def_cfa_offset 32
 3869 0004 00AF     	 add r7,sp,#0
 3870              	.LCFI147:
 3871              	 .cfi_def_cfa_register 7
 3872 0006 7860     	 str r0,[r7,#4]
1119:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t asctrl;
1120:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1121:../Libraries/XMCLib/src/xmc_vadc.c **** 
1122:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSequenceAbort:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1123:../Libraries/XMCLib/src/xmc_vadc.c **** 
1124:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1125:../Libraries/XMCLib/src/xmc_vadc.c ****   asctrl = group_ptr->ASCTRL;
 3873              	 .loc 2 1125 10
 3874 0008 7A68     	 ldr r2,[r7,#4]
 3875 000a 9023     	 movs r3,#144
 3876 000c 5B00     	 lsls r3,r3,#1
 3877 000e D358     	 ldr r3,[r2,r3]
 3878 0010 FB60     	 str r3,[r7,#12]
1126:../Libraries/XMCLib/src/xmc_vadc.c **** 
1127:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(0U | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
 3879              	 .loc 2 1127 21
 3880 0012 7A68     	 ldr r2,[r7,#4]
 3881 0014 9023     	 movs r3,#144
 3882 0016 5B00     	 lsls r3,r3,#1
 3883 0018 1E49     	 ldr r1,.L155
 3884 001a D150     	 str r1,[r2,r3]
1128:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
1129:../Libraries/XMCLib/src/xmc_vadc.c **** 
1130:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable Arbitration before abort*/
1131:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN1_Pos) & 1U);
 3885              	 .loc 2 1131 51
 3886 001c 7B68     	 ldr r3,[r7,#4]
 3887 001e 8422     	 movs r2,#132
 3888 0020 9B58     	 ldr r3,[r3,r2]
 3889              	 .loc 2 1131 59
 3890 0022 5B0E     	 lsrs r3,r3,#25
 3891              	 .loc 2 1131 86
 3892 0024 0122     	 movs r2,#1
 3893 0026 1A40     	 ands r2,r3
 3894              	 .loc 2 1131 22
 3895 0028 0B24     	 movs r4,#11
 3896 002a 3B19     	 adds r3,r7,r4
 3897 002c 511E     	 subs r1,r2,#1
 3898 002e 8A41     	 sbcs r2,r2,r1
 3899 0030 1A70     	 strb r2,[r3]
1132:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 3900              	 .loc 2 1132 3
 3901 0032 7B68     	 ldr r3,[r7,#4]
 3902 0034 1800     	 movs r0,r3
 3903 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1133:../Libraries/XMCLib/src/xmc_vadc.c **** 
1134:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENGT_Msk);
 3904              	 .loc 2 1134 19
 3905 003a 7A68     	 ldr r2,[r7,#4]
 3906 003c 9223     	 movs r3,#146
 3907 003e 5B00     	 lsls r3,r3,#1
 3908 0040 D358     	 ldr r3,[r2,r3]
 3909 0042 0322     	 movs r2,#3
 3910 0044 9343     	 bics r3,r2
 3911 0046 1900     	 movs r1,r3
 3912 0048 7A68     	 ldr r2,[r7,#4]
 3913 004a 9223     	 movs r3,#146
 3914 004c 5B00     	 lsls r3,r3,#1
 3915 004e D150     	 str r1,[r2,r3]
1135:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 3916              	 .loc 2 1135 19
 3917 0050 7A68     	 ldr r2,[r7,#4]
 3918 0052 9223     	 movs r3,#146
 3919 0054 5B00     	 lsls r3,r3,#1
 3920 0056 D358     	 ldr r3,[r2,r3]
 3921 0058 8022     	 movs r2,#128
 3922 005a 5200     	 lsls r2,r2,#1
 3923 005c 1A43     	 orrs r2,r3
 3924 005e 1100     	 movs r1,r2
 3925 0060 7A68     	 ldr r2,[r7,#4]
 3926 0062 9223     	 movs r3,#146
 3927 0064 5B00     	 lsls r3,r3,#1
 3928 0066 D150     	 str r1,[r2,r3]
1136:../Libraries/XMCLib/src/xmc_vadc.c **** 
1137:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Enable the arbitration slot 1*/
1138:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);
 3929              	 .loc 2 1138 20
 3930 0068 7B68     	 ldr r3,[r7,#4]
 3931 006a 8422     	 movs r2,#132
 3932 006c 9A58     	 ldr r2,[r3,r2]
 3933              	 .loc 2 1138 34
 3934 006e 3B19     	 adds r3,r7,r4
 3935 0070 1B78     	 ldrb r3,[r3]
 3936              	 .loc 2 1138 23
 3937 0072 5B06     	 lsls r3,r3,#25
 3938              	 .loc 2 1138 20
 3939 0074 1A43     	 orrs r2,r3
 3940 0076 7B68     	 ldr r3,[r7,#4]
 3941 0078 8421     	 movs r1,#132
 3942 007a 5A50     	 str r2,[r3,r1]
1139:../Libraries/XMCLib/src/xmc_vadc.c **** 
1140:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1141:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
1142:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 3943              	 .loc 2 1142 68
 3944 007c FB68     	 ldr r3,[r7,#12]
 3945 007e 054A     	 ldr r2,.L155
 3946 0080 1A43     	 orrs r2,r3
 3947 0082 1100     	 movs r1,r2
1141:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 3948              	 .loc 2 1141 21
 3949 0084 7A68     	 ldr r2,[r7,#4]
 3950 0086 9023     	 movs r3,#144
 3951 0088 5B00     	 lsls r3,r3,#1
 3952 008a D150     	 str r1,[r2,r3]
1143:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3953              	 .loc 2 1143 1
 3954 008c C046     	 nop
 3955 008e BD46     	 mov sp,r7
 3956 0090 05B0     	 add sp,sp,#20
 3957              	 
 3958 0092 90BD     	 pop {r4,r7,pc}
 3959              	.L156:
 3960              	 .align 2
 3961              	.L155:
 3962 0094 00808080 	 .word -2139062272
 3963              	 .cfi_endproc
 3964              	.LFE188:
 3966              	 .section .text.XMC_VADC_GROUP_ScanGetNumChannelsPending,"ax",%progbits
 3967              	 .align 1
 3968              	 .global XMC_VADC_GROUP_ScanGetNumChannelsPending
 3969              	 .syntax unified
 3970              	 .code 16
 3971              	 .thumb_func
 3972              	 .fpu softvfp
 3974              	XMC_VADC_GROUP_ScanGetNumChannelsPending:
 3975              	.LFB189:
1144:../Libraries/XMCLib/src/xmc_vadc.c **** 
1145:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to find out number of channels awaiting conversion */
1146:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr)
1147:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3976              	 .loc 2 1147 1
 3977              	 .cfi_startproc
 3978              	 
 3979              	 
 3980 0000 80B5     	 push {r7,lr}
 3981              	.LCFI148:
 3982              	 .cfi_def_cfa_offset 8
 3983              	 .cfi_offset 7,-8
 3984              	 .cfi_offset 14,-4
 3985 0002 86B0     	 sub sp,sp,#24
 3986              	.LCFI149:
 3987              	 .cfi_def_cfa_offset 32
 3988 0004 00AF     	 add r7,sp,#0
 3989              	.LCFI150:
 3990              	 .cfi_def_cfa_register 7
 3991 0006 7860     	 str r0,[r7,#4]
1148:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1149:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1150:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1151:../Libraries/XMCLib/src/xmc_vadc.c **** 
1152:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanGetNumChannelsPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1153:../Libraries/XMCLib/src/xmc_vadc.c **** 
1154:../Libraries/XMCLib/src/xmc_vadc.c **** 
1155:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 3992              	 .loc 2 1155 9
 3993 0008 0023     	 movs r3,#0
 3994 000a FB60     	 str r3,[r7,#12]
1156:../Libraries/XMCLib/src/xmc_vadc.c **** 
1157:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_ptr->ASPND)
 3995              	 .loc 2 1157 16
 3996 000c 7A68     	 ldr r2,[r7,#4]
 3997 000e 9623     	 movs r3,#150
 3998 0010 5B00     	 lsls r3,r3,#1
 3999 0012 D358     	 ldr r3,[r2,r3]
 4000              	 .loc 2 1157 6
 4001 0014 002B     	 cmp r3,#0
 4002 0016 17D0     	 beq .L158
1158:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1159:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = group_ptr->ASPND;
 4003              	 .loc 2 1159 9
 4004 0018 7A68     	 ldr r2,[r7,#4]
 4005 001a 9623     	 movs r3,#150
 4006 001c 5B00     	 lsls r3,r3,#1
 4007 001e D358     	 ldr r3,[r2,r3]
 4008 0020 7B61     	 str r3,[r7,#20]
1160:../Libraries/XMCLib/src/xmc_vadc.c **** 
1161:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i=0U;i<XMC_VADC_NUM_CHANNELS_PER_GROUP;i++)
 4009              	 .loc 2 1161 10
 4010 0022 0023     	 movs r3,#0
 4011 0024 3B61     	 str r3,[r7,#16]
 4012              	 .loc 2 1161 5
 4013 0026 0CE0     	 b .L159
 4014              	.L161:
1162:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1163:../Libraries/XMCLib/src/xmc_vadc.c ****       if (reg & 1U)
 4015              	 .loc 2 1163 15
 4016 0028 7B69     	 ldr r3,[r7,#20]
 4017 002a 0122     	 movs r2,#1
 4018 002c 1340     	 ands r3,r2
 4019              	 .loc 2 1163 10
 4020 002e 02D0     	 beq .L160
1164:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1165:../Libraries/XMCLib/src/xmc_vadc.c ****         count++;
 4021              	 .loc 2 1165 14
 4022 0030 FB68     	 ldr r3,[r7,#12]
 4023 0032 0133     	 adds r3,r3,#1
 4024 0034 FB60     	 str r3,[r7,#12]
 4025              	.L160:
1166:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1167:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = (uint32_t)(reg >> (uint32_t)1);
 4026              	 .loc 2 1167 11 discriminator 2
 4027 0036 7B69     	 ldr r3,[r7,#20]
 4028 0038 5B08     	 lsrs r3,r3,#1
 4029 003a 7B61     	 str r3,[r7,#20]
1161:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 4030              	 .loc 2 1161 49 discriminator 2
 4031 003c 3B69     	 ldr r3,[r7,#16]
 4032 003e 0133     	 adds r3,r3,#1
 4033 0040 3B61     	 str r3,[r7,#16]
 4034              	.L159:
1161:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 4035              	 .loc 2 1161 5 discriminator 1
 4036 0042 3B69     	 ldr r3,[r7,#16]
 4037 0044 072B     	 cmp r3,#7
 4038 0046 EFD9     	 bls .L161
 4039              	.L158:
1168:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1169:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1170:../Libraries/XMCLib/src/xmc_vadc.c **** 
1171:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 4040              	 .loc 2 1171 10
 4041 0048 FB68     	 ldr r3,[r7,#12]
1172:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4042              	 .loc 2 1172 1
 4043 004a 1800     	 movs r0,r3
 4044 004c BD46     	 mov sp,r7
 4045 004e 06B0     	 add sp,sp,#24
 4046              	 
 4047 0050 80BD     	 pop {r7,pc}
 4048              	 .cfi_endproc
 4049              	.LFE189:
 4051              	 .section .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode,"ax",%progbits
 4052              	 .align 1
 4053              	 .global XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
 4054              	 .syntax unified
 4055              	 .code 16
 4056              	 .thumb_func
 4057              	 .fpu softvfp
 4059              	XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:
 4060              	.LFB190:
1173:../Libraries/XMCLib/src/xmc_vadc.c **** 
1174:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for request source event */
1175:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
1176:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4061              	 .loc 2 1176 1
 4062              	 .cfi_startproc
 4063              	 
 4064              	 
 4065 0000 80B5     	 push {r7,lr}
 4066              	.LCFI151:
 4067              	 .cfi_def_cfa_offset 8
 4068              	 .cfi_offset 7,-8
 4069              	 .cfi_offset 14,-4
 4070 0002 84B0     	 sub sp,sp,#16
 4071              	.LCFI152:
 4072              	 .cfi_def_cfa_offset 24
 4073 0004 00AF     	 add r7,sp,#0
 4074              	.LCFI153:
 4075              	 .cfi_def_cfa_register 7
 4076 0006 7860     	 str r0,[r7,#4]
 4077 0008 0A00     	 movs r2,r1
 4078 000a FB1C     	 adds r3,r7,#3
 4079 000c 1A70     	 strb r2,[r3]
1177:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1178:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 4080              	 .loc 2 1178 9
 4081 000e 7A68     	 ldr r2,[r7,#4]
 4082 0010 E023     	 movs r3,#224
 4083 0012 5B00     	 lsls r3,r3,#1
 4084 0014 D358     	 ldr r3,[r2,r3]
 4085 0016 FB60     	 str r3,[r7,#12]
1179:../Libraries/XMCLib/src/xmc_vadc.c **** 
1180:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_G
1181:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_
1182:../Libraries/XMCLib/src/xmc_vadc.c **** 
1183:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 4086              	 .loc 2 1183 9
 4087 0018 FB68     	 ldr r3,[r7,#12]
 4088 001a F022     	 movs r2,#240
 4089 001c 9343     	 bics r3,r2
 4090 001e FB60     	 str r3,[r7,#12]
1184:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 4091              	 .loc 2 1184 23
 4092 0020 FB1C     	 adds r3,r7,#3
 4093 0022 1B78     	 ldrb r3,[r3]
 4094              	 .loc 2 1184 12
 4095 0024 1B01     	 lsls r3,r3,#4
 4096              	 .loc 2 1184 9
 4097 0026 FA68     	 ldr r2,[r7,#12]
 4098 0028 1343     	 orrs r3,r2
 4099 002a FB60     	 str r3,[r7,#12]
1185:../Libraries/XMCLib/src/xmc_vadc.c **** 
1186:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 4100              	 .loc 2 1186 20
 4101 002c 7A68     	 ldr r2,[r7,#4]
 4102 002e E023     	 movs r3,#224
 4103 0030 5B00     	 lsls r3,r3,#1
 4104 0032 F968     	 ldr r1,[r7,#12]
 4105 0034 D150     	 str r1,[r2,r3]
1187:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4106              	 .loc 2 1187 1
 4107 0036 C046     	 nop
 4108 0038 BD46     	 mov sp,r7
 4109 003a 04B0     	 add sp,sp,#16
 4110              	 
 4111 003c 80BD     	 pop {r7,pc}
 4112              	 .cfi_endproc
 4113              	.LFE190:
 4115              	 .section .text.XMC_VADC_GROUP_ScanRemoveChannel,"ax",%progbits
 4116              	 .align 1
 4117              	 .global XMC_VADC_GROUP_ScanRemoveChannel
 4118              	 .syntax unified
 4119              	 .code 16
 4120              	 .thumb_func
 4121              	 .fpu softvfp
 4123              	XMC_VADC_GROUP_ScanRemoveChannel:
 4124              	.LFB191:
1188:../Libraries/XMCLib/src/xmc_vadc.c **** 
1189:../Libraries/XMCLib/src/xmc_vadc.c **** /* Removes the selected channel from conversion*/
1190:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
1191:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4125              	 .loc 2 1191 1
 4126              	 .cfi_startproc
 4127              	 
 4128              	 
 4129 0000 80B5     	 push {r7,lr}
 4130              	.LCFI154:
 4131              	 .cfi_def_cfa_offset 8
 4132              	 .cfi_offset 7,-8
 4133              	 .cfi_offset 14,-4
 4134 0002 84B0     	 sub sp,sp,#16
 4135              	.LCFI155:
 4136              	 .cfi_def_cfa_offset 24
 4137 0004 00AF     	 add r7,sp,#0
 4138              	.LCFI156:
 4139              	 .cfi_def_cfa_register 7
 4140 0006 7860     	 str r0,[r7,#4]
 4141 0008 3960     	 str r1,[r7]
1192:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t assel;
1193:../Libraries/XMCLib/src/xmc_vadc.c **** 
1194:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1195:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong channel number", ((channel_num)< XMC_VADC_NUM_
1196:../Libraries/XMCLib/src/xmc_vadc.c **** 
1197:../Libraries/XMCLib/src/xmc_vadc.c ****   assel = group_ptr->ASSEL; 
 4142              	 .loc 2 1197 9
 4143 000a 7A68     	 ldr r2,[r7,#4]
 4144 000c 9423     	 movs r3,#148
 4145 000e 5B00     	 lsls r3,r3,#1
 4146 0010 D358     	 ldr r3,[r2,r3]
 4147 0012 FB60     	 str r3,[r7,#12]
1198:../Libraries/XMCLib/src/xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 4148              	 .loc 2 1198 18
 4149 0014 0122     	 movs r2,#1
 4150 0016 3B68     	 ldr r3,[r7]
 4151 0018 9A40     	 lsls r2,r2,r3
 4152 001a 1300     	 movs r3,r2
 4153              	 .loc 2 1198 13
 4154 001c DB43     	 mvns r3,r3
 4155 001e 1A00     	 movs r2,r3
 4156              	 .loc 2 1198 9
 4157 0020 FB68     	 ldr r3,[r7,#12]
 4158 0022 1340     	 ands r3,r2
 4159 0024 FB60     	 str r3,[r7,#12]
1199:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASSEL  = assel;
 4160              	 .loc 2 1199 21
 4161 0026 7A68     	 ldr r2,[r7,#4]
 4162 0028 9423     	 movs r3,#148
 4163 002a 5B00     	 lsls r3,r3,#1
 4164 002c F968     	 ldr r1,[r7,#12]
 4165 002e D150     	 str r1,[r2,r3]
1200:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4166              	 .loc 2 1200 1
 4167 0030 C046     	 nop
 4168 0032 BD46     	 mov sp,r7
 4169 0034 04B0     	 add sp,sp,#16
 4170              	 
 4171 0036 80BD     	 pop {r7,pc}
 4172              	 .cfi_endproc
 4173              	.LFE191:
 4175              	 .section .text.XMC_VADC_GLOBAL_BackgroundInit,"ax",%progbits
 4176              	 .align 1
 4177              	 .global XMC_VADC_GLOBAL_BackgroundInit
 4178              	 .syntax unified
 4179              	 .code 16
 4180              	 .thumb_func
 4181              	 .fpu softvfp
 4183              	XMC_VADC_GLOBAL_BackgroundInit:
 4184              	.LFB192:
1201:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1202:../Libraries/XMCLib/src/xmc_vadc.c **** 
1203:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize background scan request source hardware */
1204:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
1205:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4185              	 .loc 2 1205 1
 4186              	 .cfi_startproc
 4187              	 
 4188              	 
 4189 0000 90B5     	 push {r4,r7,lr}
 4190              	.LCFI157:
 4191              	 .cfi_def_cfa_offset 12
 4192              	 .cfi_offset 4,-12
 4193              	 .cfi_offset 7,-8
 4194              	 .cfi_offset 14,-4
 4195 0002 87B0     	 sub sp,sp,#28
 4196              	.LCFI158:
 4197              	 .cfi_def_cfa_offset 40
 4198 0004 00AF     	 add r7,sp,#0
 4199              	.LCFI159:
 4200              	 .cfi_def_cfa_register 7
 4201 0006 7860     	 str r0,[r7,#4]
 4202 0008 3960     	 str r1,[r7]
1206:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1207:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
1208:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1209:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t conv_start_mask;
1210:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1211:../Libraries/XMCLib/src/xmc_vadc.c ****   
1212:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))
1213:../Libraries/XMCLib/src/xmc_vadc.c **** 
1214:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4203              	 .loc 2 1215 8
 4204 000a 1723     	 movs r3,#23
 4205 000c FB18     	 adds r3,r7,r3
 4206 000e 0022     	 movs r2,#0
 4207 0010 1A70     	 strb r2,[r3]
 4208              	 .loc 2 1215 3
 4209 0012 0DE0     	 b .L166
 4210              	.L167:
1216:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1217:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 4211              	 .loc 2 1217 5 discriminator 3
 4212 0014 1724     	 movs r4,#23
 4213 0016 3B19     	 adds r3,r7,r4
 4214 0018 1A78     	 ldrb r2,[r3]
 4215              	 .loc 2 1217 95 discriminator 3
 4216 001a 484B     	 ldr r3,.L174
 4217 001c 9200     	 lsls r2,r2,#2
 4218 001e D358     	 ldr r3,[r2,r3]
 4219              	 .loc 2 1217 5 discriminator 3
 4220 0020 1800     	 movs r0,r3
 4221 0022 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4222              	 .loc 2 1215 55 discriminator 3
 4223 0026 3B19     	 adds r3,r7,r4
 4224 0028 1A78     	 ldrb r2,[r3]
 4225 002a 3B19     	 adds r3,r7,r4
 4226 002c 0132     	 adds r2,r2,#1
 4227 002e 1A70     	 strb r2,[r3]
 4228              	.L166:
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4229              	 .loc 2 1215 3 discriminator 1
 4230 0030 1723     	 movs r3,#23
 4231 0032 FB18     	 adds r3,r7,r3
 4232 0034 1B78     	 ldrb r3,[r3]
 4233 0036 012B     	 cmp r3,#1
 4234 0038 ECD9     	 bls .L167
1218:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1219:../Libraries/XMCLib/src/xmc_vadc.c ****   
1220:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_start_mask = (uint32_t) 0;
 4235              	 .loc 2 1220 19
 4236 003a 0023     	 movs r3,#0
 4237 003c 3B61     	 str r3,[r7,#16]
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 4238              	 .loc 2 1221 30
 4239 003e 3B68     	 ldr r3,[r7]
 4240 0040 1B78     	 ldrb r3,[r3]
 4241 0042 0322     	 movs r2,#3
 4242 0044 1340     	 ands r3,r2
 4243 0046 DBB2     	 uxtb r3,r3
 4244              	 .loc 2 1221 6
 4245 0048 002B     	 cmp r3,#0
 4246 004a 02D0     	 beq .L168
1222:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1223:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 4247              	 .loc 2 1223 21
 4248 004c 8023     	 movs r3,#128
 4249 004e 1B01     	 lsls r3,r3,#4
 4250 0050 3B61     	 str r3,[r7,#16]
 4251              	.L168:
1224:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1225:../Libraries/XMCLib/src/xmc_vadc.c ****   
1226:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4252              	 .loc 2 1226 8
 4253 0052 1723     	 movs r3,#23
 4254 0054 FB18     	 adds r3,r7,r3
 4255 0056 0022     	 movs r2,#0
 4256 0058 1A70     	 strb r2,[r3]
 4257              	 .loc 2 1226 3
 4258 005a 27E0     	 b .L169
 4259              	.L170:
1227:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1228:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = g_xmc_vadc_group_array[i]->ARBPR;
 4260              	 .loc 2 1228 33 discriminator 3
 4261 005c 1721     	 movs r1,#23
 4262 005e 7B18     	 adds r3,r7,r1
 4263 0060 1A78     	 ldrb r2,[r3]
 4264 0062 364B     	 ldr r3,.L174
 4265 0064 9200     	 lsls r2,r2,#2
 4266 0066 D358     	 ldr r3,[r2,r3]
 4267              	 .loc 2 1228 9 discriminator 3
 4268 0068 8422     	 movs r2,#132
 4269 006a 9B58     	 ldr r3,[r3,r2]
 4270 006c FB60     	 str r3,[r7,#12]
1229:../Libraries/XMCLib/src/xmc_vadc.c **** 
1230:../Libraries/XMCLib/src/xmc_vadc.c ****     reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 4271              	 .loc 2 1230 9 discriminator 3
 4272 006e FB68     	 ldr r3,[r7,#12]
 4273 0070 334A     	 ldr r2,.L174+4
 4274 0072 1340     	 ands r3,r2
 4275 0074 FB60     	 str r3,[r7,#12]
1231:../Libraries/XMCLib/src/xmc_vadc.c **** 
1232:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the priority of the request source */
1233:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 4276              	 .loc 2 1233 39 discriminator 3
 4277 0076 3B68     	 ldr r3,[r7]
 4278 0078 1B78     	 ldrb r3,[r3]
 4279 007a 1B07     	 lsls r3,r3,#28
 4280 007c 9B0F     	 lsrs r3,r3,#30
 4281 007e DBB2     	 uxtb r3,r3
 4282              	 .loc 2 1233 12 discriminator 3
 4283 0080 1B02     	 lsls r3,r3,#8
 4284              	 .loc 2 1233 9 discriminator 3
 4285 0082 FA68     	 ldr r2,[r7,#12]
 4286 0084 1343     	 orrs r3,r2
 4287 0086 FB60     	 str r3,[r7,#12]
1234:../Libraries/XMCLib/src/xmc_vadc.c ****   
1235:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the start mode */
1236:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= conv_start_mask;
 4288              	 .loc 2 1236 9 discriminator 3
 4289 0088 FA68     	 ldr r2,[r7,#12]
 4290 008a 3B69     	 ldr r3,[r7,#16]
 4291 008c 1343     	 orrs r3,r2
 4292 008e FB60     	 str r3,[r7,#12]
1237:../Libraries/XMCLib/src/xmc_vadc.c **** 
1238:../Libraries/XMCLib/src/xmc_vadc.c ****     g_xmc_vadc_group_array[i]->ARBPR = reg;
 4293              	 .loc 2 1238 27 discriminator 3
 4294 0090 0800     	 movs r0,r1
 4295 0092 7B18     	 adds r3,r7,r1
 4296 0094 1A78     	 ldrb r2,[r3]
 4297 0096 294B     	 ldr r3,.L174
 4298 0098 9200     	 lsls r2,r2,#2
 4299 009a D358     	 ldr r3,[r2,r3]
 4300              	 .loc 2 1238 38 discriminator 3
 4301 009c 8421     	 movs r1,#132
 4302 009e FA68     	 ldr r2,[r7,#12]
 4303 00a0 5A50     	 str r2,[r3,r1]
1226:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4304              	 .loc 2 1226 47 discriminator 3
 4305 00a2 3B18     	 adds r3,r7,r0
 4306 00a4 1A78     	 ldrb r2,[r3]
 4307 00a6 3B18     	 adds r3,r7,r0
 4308 00a8 0132     	 adds r2,r2,#1
 4309 00aa 1A70     	 strb r2,[r3]
 4310              	.L169:
1226:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4311              	 .loc 2 1226 3 discriminator 1
 4312 00ac 1723     	 movs r3,#23
 4313 00ae FB18     	 adds r3,r7,r3
 4314 00b0 1B78     	 ldrb r3,[r3]
 4315 00b2 012B     	 cmp r3,#1
 4316 00b4 D2D9     	 bls .L170
1239:../Libraries/XMCLib/src/xmc_vadc.c ****   
1240:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1241:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1242:../Libraries/XMCLib/src/xmc_vadc.c **** 
1243:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSCTRL register */
1244:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VAD
 4317              	 .loc 2 1244 42
 4318 00b6 3B68     	 ldr r3,[r7]
 4319 00b8 5B68     	 ldr r3,[r3,#4]
 4320              	 .loc 2 1244 25
 4321 00ba 224A     	 ldr r2,.L174+8
 4322 00bc 1A43     	 orrs r2,r3
 4323 00be 1100     	 movs r1,r2
 4324              	 .loc 2 1244 23
 4325 00c0 7A68     	 ldr r2,[r7,#4]
 4326 00c2 8023     	 movs r3,#128
 4327 00c4 9B00     	 lsls r3,r3,#2
 4328 00c6 D150     	 str r1,[r2,r3]
1245:../Libraries/XMCLib/src/xmc_vadc.c **** 
1246:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSMR register */
1247:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << V
 4329              	 .loc 2 1247 41
 4330 00c8 3B68     	 ldr r3,[r7]
 4331 00ca 9B68     	 ldr r3,[r3,#8]
 4332              	 .loc 2 1247 23
 4333 00cc 0122     	 movs r2,#1
 4334 00ce 1A43     	 orrs r2,r3
 4335 00d0 1100     	 movs r1,r2
 4336              	 .loc 2 1247 21
 4337 00d2 7A68     	 ldr r2,[r7,#4]
 4338 00d4 8123     	 movs r3,#129
 4339 00d6 9B00     	 lsls r3,r3,#2
 4340 00d8 D150     	 str r1,[r2,r3]
1248:../Libraries/XMCLib/src/xmc_vadc.c ****   
1249:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1250:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 4341              	 .loc 2 1250 30
 4342 00da 3B68     	 ldr r3,[r7]
 4343 00dc 1B78     	 ldrb r3,[r3]
 4344 00de 0322     	 movs r2,#3
 4345 00e0 1340     	 ands r3,r2
 4346 00e2 DBB2     	 uxtb r3,r3
 4347              	 .loc 2 1250 6
 4348 00e4 022B     	 cmp r3,#2
 4349 00e6 0BD1     	 bne .L171
1251:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1252:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 4350              	 .loc 2 1252 23
 4351 00e8 7A68     	 ldr r2,[r7,#4]
 4352 00ea 8123     	 movs r3,#129
 4353 00ec 9B00     	 lsls r3,r3,#2
 4354 00ee D358     	 ldr r3,[r2,r3]
 4355 00f0 8022     	 movs r2,#128
 4356 00f2 5202     	 lsls r2,r2,#9
 4357 00f4 1A43     	 orrs r2,r3
 4358 00f6 1100     	 movs r1,r2
 4359 00f8 7A68     	 ldr r2,[r7,#4]
 4360 00fa 8123     	 movs r3,#129
 4361 00fc 9B00     	 lsls r3,r3,#2
 4362 00fe D150     	 str r1,[r2,r3]
 4363              	.L171:
1253:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1254:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1255:../Libraries/XMCLib/src/xmc_vadc.c ****   
1256:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1257:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4364              	 .loc 2 1257 8
 4365 0100 1723     	 movs r3,#23
 4366 0102 FB18     	 adds r3,r7,r3
 4367 0104 0022     	 movs r2,#0
 4368 0106 1A70     	 strb r2,[r3]
 4369              	 .loc 2 1257 3
 4370 0108 0DE0     	 b .L172
 4371              	.L173:
1258:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1259:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 4372              	 .loc 2 1259 5 discriminator 3
 4373 010a 1724     	 movs r4,#23
 4374 010c 3B19     	 adds r3,r7,r4
 4375 010e 1A78     	 ldrb r2,[r3]
 4376              	 .loc 2 1259 94 discriminator 3
 4377 0110 0A4B     	 ldr r3,.L174
 4378 0112 9200     	 lsls r2,r2,#2
 4379 0114 D358     	 ldr r3,[r2,r3]
 4380              	 .loc 2 1259 5 discriminator 3
 4381 0116 1800     	 movs r0,r3
 4382 0118 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
1257:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4383              	 .loc 2 1257 55 discriminator 3
 4384 011c 3B19     	 adds r3,r7,r4
 4385 011e 1A78     	 ldrb r2,[r3]
 4386 0120 3B19     	 adds r3,r7,r4
 4387 0122 0132     	 adds r2,r2,#1
 4388 0124 1A70     	 strb r2,[r3]
 4389              	.L172:
1257:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4390              	 .loc 2 1257 3 discriminator 1
 4391 0126 1723     	 movs r3,#23
 4392 0128 FB18     	 adds r3,r7,r3
 4393 012a 1B78     	 ldrb r3,[r3]
 4394 012c 012B     	 cmp r3,#1
 4395 012e ECD9     	 bls .L173
1260:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1261:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1262:../Libraries/XMCLib/src/xmc_vadc.c ****   
1263:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4396              	 .loc 2 1263 1
 4397 0130 C046     	 nop
 4398 0132 C046     	 nop
 4399 0134 BD46     	 mov sp,r7
 4400 0136 07B0     	 add sp,sp,#28
 4401              	 
 4402 0138 90BD     	 pop {r4,r7,pc}
 4403              	.L175:
 4404 013a C046     	 .align 2
 4405              	.L174:
 4406 013c 00000000 	 .word g_xmc_vadc_group_array
 4407 0140 FFFCFFFF 	 .word -769
 4408 0144 00808000 	 .word 8421376
 4409              	 .cfi_endproc
 4410              	.LFE192:
 4412              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger,"ax",%progbits
 4413              	 .align 1
 4414              	 .global XMC_VADC_GLOBAL_BackgroundSelectTrigger
 4415              	 .syntax unified
 4416              	 .code 16
 4417              	 .thumb_func
 4418              	 .fpu softvfp
 4420              	XMC_VADC_GLOBAL_BackgroundSelectTrigger:
 4421              	.LFB193:
1264:../Libraries/XMCLib/src/xmc_vadc.c **** 
1265:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger for background scan request source */
1266:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
1267:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4422              	 .loc 2 1267 1
 4423              	 .cfi_startproc
 4424              	 
 4425              	 
 4426 0000 80B5     	 push {r7,lr}
 4427              	.LCFI160:
 4428              	 .cfi_def_cfa_offset 8
 4429              	 .cfi_offset 7,-8
 4430              	 .cfi_offset 14,-4
 4431 0002 84B0     	 sub sp,sp,#16
 4432              	.LCFI161:
 4433              	 .cfi_def_cfa_offset 24
 4434 0004 00AF     	 add r7,sp,#0
 4435              	.LCFI162:
 4436              	 .cfi_def_cfa_register 7
 4437 0006 7860     	 str r0,[r7,#4]
 4438 0008 3960     	 str r1,[r7]
1268:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1269:../Libraries/XMCLib/src/xmc_vadc.c **** 
1270:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("VADC_BCKGND_SelectTriggerInput:Wrong Module Pointer", (global_ptr == VADC))
1271:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_N
1272:../Libraries/XMCLib/src/xmc_vadc.c **** 
1273:../Libraries/XMCLib/src/xmc_vadc.c ****   
1274:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 4439              	 .loc 2 1274 18
 4440 000a 7A68     	 ldr r2,[r7,#4]
 4441 000c 8023     	 movs r3,#128
 4442 000e 9B00     	 lsls r3,r3,#2
 4443 0010 D358     	 ldr r3,[r2,r3]
 4444 0012 FB60     	 str r3,[r7,#12]
1275:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
 4445              	 .loc 2 1275 17
 4446 0014 FB68     	 ldr r3,[r7,#12]
 4447 0016 8022     	 movs r2,#128
 4448 0018 1202     	 lsls r2,r2,#8
 4449 001a 1343     	 orrs r3,r2
 4450 001c FB60     	 str r3,[r7,#12]
1276:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_XTSEL_Msk);
 4451              	 .loc 2 1276 17
 4452 001e FB68     	 ldr r3,[r7,#12]
 4453 0020 084A     	 ldr r2,.L177
 4454 0022 1340     	 ands r3,r2
 4455 0024 FB60     	 str r3,[r7,#12]
1277:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 4456              	 .loc 2 1277 41
 4457 0026 3B68     	 ldr r3,[r7]
 4458 0028 1B02     	 lsls r3,r3,#8
 4459              	 .loc 2 1277 17
 4460 002a FA68     	 ldr r2,[r7,#12]
 4461 002c 1343     	 orrs r3,r2
 4462 002e FB60     	 str r3,[r7,#12]
1278:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4463              	 .loc 2 1278 24
 4464 0030 7A68     	 ldr r2,[r7,#4]
 4465 0032 8023     	 movs r3,#128
 4466 0034 9B00     	 lsls r3,r3,#2
 4467 0036 F968     	 ldr r1,[r7,#12]
 4468 0038 D150     	 str r1,[r2,r3]
1279:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4469              	 .loc 2 1279 1
 4470 003a C046     	 nop
 4471 003c BD46     	 mov sp,r7
 4472 003e 04B0     	 add sp,sp,#16
 4473              	 
 4474 0040 80BD     	 pop {r7,pc}
 4475              	.L178:
 4476 0042 C046     	 .align 2
 4477              	.L177:
 4478 0044 FFF0FFFF 	 .word -3841
 4479              	 .cfi_endproc
 4480              	.LFE193:
 4482              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge,"ax",%progbits
 4483              	 .align 1
 4484              	 .global XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
 4485              	 .syntax unified
 4486              	 .code 16
 4487              	 .thumb_func
 4488              	 .fpu softvfp
 4490              	XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:
 4491              	.LFB194:
1280:../Libraries/XMCLib/src/xmc_vadc.c **** 
1281:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1282:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr,
1283:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
1284:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4492              	 .loc 2 1284 1
 4493              	 .cfi_startproc
 4494              	 
 4495              	 
 4496 0000 80B5     	 push {r7,lr}
 4497              	.LCFI163:
 4498              	 .cfi_def_cfa_offset 8
 4499              	 .cfi_offset 7,-8
 4500              	 .cfi_offset 14,-4
 4501 0002 84B0     	 sub sp,sp,#16
 4502              	.LCFI164:
 4503              	 .cfi_def_cfa_offset 24
 4504 0004 00AF     	 add r7,sp,#0
 4505              	.LCFI165:
 4506              	 .cfi_def_cfa_register 7
 4507 0006 7860     	 str r0,[r7,#4]
 4508 0008 0A00     	 movs r2,r1
 4509 000a FB1C     	 adds r3,r7,#3
 4510 000c 1A70     	 strb r2,[r3]
1285:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1286:../Libraries/XMCLib/src/xmc_vadc.c **** 
1287:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Global Pointer", (global_ptr == VAD
1288:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Trigger Port",
1289:../Libraries/XMCLib/src/xmc_vadc.c ****             ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))
1290:../Libraries/XMCLib/src/xmc_vadc.c **** 
1291:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = global_ptr->BRSCTRL;
 4511              	 .loc 2 1291 17
 4512 000e 7A68     	 ldr r2,[r7,#4]
 4513 0010 8023     	 movs r3,#128
 4514 0012 9B00     	 lsls r3,r3,#2
 4515 0014 D358     	 ldr r3,[r2,r3]
 4516 0016 FB60     	 str r3,[r7,#12]
1292:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
 4517              	 .loc 2 1292 16
 4518 0018 FB68     	 ldr r3,[r7,#12]
 4519 001a 8022     	 movs r2,#128
 4520 001c 1202     	 lsls r2,r2,#8
 4521 001e 1343     	 orrs r3,r2
 4522 0020 FB60     	 str r3,[r7,#12]
1293:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_BRSCTRL_XTMODE_Msk);
 4523              	 .loc 2 1293 16
 4524 0022 FB68     	 ldr r3,[r7,#12]
 4525 0024 084A     	 ldr r2,.L180
 4526 0026 1340     	 ands r3,r2
 4527 0028 FB60     	 str r3,[r7,#12]
1294:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 4528              	 .loc 2 1294 30
 4529 002a FB1C     	 adds r3,r7,#3
 4530 002c 1B78     	 ldrb r3,[r3]
 4531              	 .loc 2 1294 19
 4532 002e 5B03     	 lsls r3,r3,#13
 4533              	 .loc 2 1294 16
 4534 0030 FA68     	 ldr r2,[r7,#12]
 4535 0032 1343     	 orrs r3,r2
 4536 0034 FB60     	 str r3,[r7,#12]
1295:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4537              	 .loc 2 1295 24
 4538 0036 7A68     	 ldr r2,[r7,#4]
 4539 0038 8023     	 movs r3,#128
 4540 003a 9B00     	 lsls r3,r3,#2
 4541 003c F968     	 ldr r1,[r7,#12]
 4542 003e D150     	 str r1,[r2,r3]
1296:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4543              	 .loc 2 1296 1
 4544 0040 C046     	 nop
 4545 0042 BD46     	 mov sp,r7
 4546 0044 04B0     	 add sp,sp,#16
 4547              	 
 4548 0046 80BD     	 pop {r7,pc}
 4549              	.L181:
 4550              	 .align 2
 4551              	.L180:
 4552 0048 FF9FFFFF 	 .word -24577
 4553              	 .cfi_endproc
 4554              	.LFE194:
 4556              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectGating,"ax",%progbits
 4557              	 .align 1
 4558              	 .global XMC_VADC_GLOBAL_BackgroundSelectGating
 4559              	 .syntax unified
 4560              	 .code 16
 4561              	 .thumb_func
 4562              	 .fpu softvfp
 4564              	XMC_VADC_GLOBAL_BackgroundSelectGating:
 4565              	.LFB195:
1297:../Libraries/XMCLib/src/xmc_vadc.c **** 
1298:../Libraries/XMCLib/src/xmc_vadc.c **** 
1299:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gate for background scan request source */
1300:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
1301:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4566              	 .loc 2 1301 1
 4567              	 .cfi_startproc
 4568              	 
 4569              	 
 4570 0000 80B5     	 push {r7,lr}
 4571              	.LCFI166:
 4572              	 .cfi_def_cfa_offset 8
 4573              	 .cfi_offset 7,-8
 4574              	 .cfi_offset 14,-4
 4575 0002 84B0     	 sub sp,sp,#16
 4576              	.LCFI167:
 4577              	 .cfi_def_cfa_offset 24
 4578 0004 00AF     	 add r7,sp,#0
 4579              	.LCFI168:
 4580              	 .cfi_def_cfa_register 7
 4581 0006 7860     	 str r0,[r7,#4]
 4582 0008 3960     	 str r1,[r7]
1302:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1303:../Libraries/XMCLib/src/xmc_vadc.c **** 
1304:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Module Pointer", (global_ptr == VADC))
1305:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM
1306:../Libraries/XMCLib/src/xmc_vadc.c **** 
1307:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 4583              	 .loc 2 1307 18
 4584 000a 7A68     	 ldr r2,[r7,#4]
 4585 000c 8023     	 movs r3,#128
 4586 000e 9B00     	 lsls r3,r3,#2
 4587 0010 D358     	 ldr r3,[r2,r3]
 4588 0012 FB60     	 str r3,[r7,#12]
1308:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
 4589              	 .loc 2 1308 17
 4590 0014 FB68     	 ldr r3,[r7,#12]
 4591 0016 8022     	 movs r2,#128
 4592 0018 1204     	 lsls r2,r2,#16
 4593 001a 1343     	 orrs r3,r2
 4594 001c FB60     	 str r3,[r7,#12]
1309:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_GTSEL_Msk);
 4595              	 .loc 2 1309 17
 4596 001e FB68     	 ldr r3,[r7,#12]
 4597 0020 084A     	 ldr r2,.L183
 4598 0022 1340     	 ands r3,r2
 4599 0024 FB60     	 str r3,[r7,#12]
1310:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 4600              	 .loc 2 1310 41
 4601 0026 3B68     	 ldr r3,[r7]
 4602 0028 1B04     	 lsls r3,r3,#16
 4603              	 .loc 2 1310 17
 4604 002a FA68     	 ldr r2,[r7,#12]
 4605 002c 1343     	 orrs r3,r2
 4606 002e FB60     	 str r3,[r7,#12]
1311:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4607              	 .loc 2 1311 24
 4608 0030 7A68     	 ldr r2,[r7,#4]
 4609 0032 8023     	 movs r3,#128
 4610 0034 9B00     	 lsls r3,r3,#2
 4611 0036 F968     	 ldr r1,[r7,#12]
 4612 0038 D150     	 str r1,[r2,r3]
1312:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4613              	 .loc 2 1312 1
 4614 003a C046     	 nop
 4615 003c BD46     	 mov sp,r7
 4616 003e 04B0     	 add sp,sp,#16
 4617              	 
 4618 0040 80BD     	 pop {r7,pc}
 4619              	.L184:
 4620 0042 C046     	 .align 2
 4621              	.L183:
 4622 0044 FFFFF0FF 	 .word -983041
 4623              	 .cfi_endproc
 4624              	.LFE195:
 4626              	 .section .text.XMC_VADC_GLOBAL_BackgroundAbortSequence,"ax",%progbits
 4627              	 .align 1
 4628              	 .global XMC_VADC_GLOBAL_BackgroundAbortSequence
 4629              	 .syntax unified
 4630              	 .code 16
 4631              	 .thumb_func
 4632              	 .fpu softvfp
 4634              	XMC_VADC_GLOBAL_BackgroundAbortSequence:
 4635              	.LFB196:
1313:../Libraries/XMCLib/src/xmc_vadc.c **** 
1314:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a sequence */
1315:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr)
1316:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4636              	 .loc 2 1316 1
 4637              	 .cfi_startproc
 4638              	 
 4639              	 
 4640 0000 80B5     	 push {r7,lr}
 4641              	.LCFI169:
 4642              	 .cfi_def_cfa_offset 8
 4643              	 .cfi_offset 7,-8
 4644              	 .cfi_offset 14,-4
 4645 0002 86B0     	 sub sp,sp,#24
 4646              	.LCFI170:
 4647              	 .cfi_def_cfa_offset 32
 4648 0004 00AF     	 add r7,sp,#0
 4649              	.LCFI171:
 4650              	 .cfi_def_cfa_register 7
 4651 0006 7860     	 str r0,[r7,#4]
1317:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t brsctrl;
1318:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1319:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1320:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t grp_asen2_flag[XMC_VADC_MAXIMUM_NUM_GROUPS];
1321:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1322:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAbortSequence:Wrong Module Pointer", (global_ptr == VADC))
1323:../Libraries/XMCLib/src/xmc_vadc.c **** 
1324:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1325:../Libraries/XMCLib/src/xmc_vadc.c ****   brsctrl = global_ptr->BRSCTRL;
 4652              	 .loc 2 1325 11
 4653 0008 7A68     	 ldr r2,[r7,#4]
 4654 000a 8023     	 movs r3,#128
 4655 000c 9B00     	 lsls r3,r3,#2
 4656 000e D358     	 ldr r3,[r2,r3]
 4657 0010 3B61     	 str r3,[r7,#16]
1326:../Libraries/XMCLib/src/xmc_vadc.c **** 
1327:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 4658              	 .loc 2 1327 23
 4659 0012 7A68     	 ldr r2,[r7,#4]
 4660 0014 8023     	 movs r3,#128
 4661 0016 9B00     	 lsls r3,r3,#2
 4662 0018 2749     	 ldr r1,.L191
 4663 001a D150     	 str r1,[r2,r3]
1328:../Libraries/XMCLib/src/xmc_vadc.c **** 
1329:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable Background Request source */
1330:../Libraries/XMCLib/src/xmc_vadc.c **** 
1331:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1332:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4664              	 .loc 2 1332 8
 4665 001c 0023     	 movs r3,#0
 4666 001e 7B61     	 str r3,[r7,#20]
 4667              	 .loc 2 1332 3
 4668 0020 17E0     	 b .L186
 4669              	.L187:
1333:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1334:../Libraries/XMCLib/src/xmc_vadc.c ****     grp_asen2_flag[i] = (uint8_t)(g_xmc_vadc_group_array[i]->ARBPR >> VADC_G_ARBPR_ASEN2_Pos);
 4670              	 .loc 2 1334 57 discriminator 3
 4671 0022 264B     	 ldr r3,.L191+4
 4672 0024 7A69     	 ldr r2,[r7,#20]
 4673 0026 9200     	 lsls r2,r2,#2
 4674 0028 D358     	 ldr r3,[r2,r3]
 4675              	 .loc 2 1334 60 discriminator 3
 4676 002a 8422     	 movs r2,#132
 4677 002c 9B58     	 ldr r3,[r3,r2]
 4678              	 .loc 2 1334 68 discriminator 3
 4679 002e 9B0E     	 lsrs r3,r3,#26
 4680              	 .loc 2 1334 25 discriminator 3
 4681 0030 D9B2     	 uxtb r1,r3
 4682              	 .loc 2 1334 23 discriminator 3
 4683 0032 0C23     	 movs r3,#12
 4684 0034 FA18     	 adds r2,r7,r3
 4685 0036 7B69     	 ldr r3,[r7,#20]
 4686 0038 D318     	 adds r3,r2,r3
 4687 003a 0A1C     	 adds r2,r1,#0
 4688 003c 1A70     	 strb r2,[r3]
1335:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 4689              	 .loc 2 1335 95 discriminator 3
 4690 003e 1F4B     	 ldr r3,.L191+4
 4691 0040 7A69     	 ldr r2,[r7,#20]
 4692 0042 9200     	 lsls r2,r2,#2
 4693 0044 D358     	 ldr r3,[r2,r3]
 4694              	 .loc 2 1335 5 discriminator 3
 4695 0046 1800     	 movs r0,r3
 4696 0048 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1332:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4697              	 .loc 2 1332 55 discriminator 3
 4698 004c 7B69     	 ldr r3,[r7,#20]
 4699 004e 0133     	 adds r3,r3,#1
 4700 0050 7B61     	 str r3,[r7,#20]
 4701              	.L186:
1332:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4702              	 .loc 2 1332 3 discriminator 1
 4703 0052 7B69     	 ldr r3,[r7,#20]
 4704 0054 012B     	 cmp r3,#1
 4705 0056 E4D9     	 bls .L187
1336:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1337:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1338:../Libraries/XMCLib/src/xmc_vadc.c **** 
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Abort the ongoing sequence */
1340:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;
 4706              	 .loc 2 1340 21
 4707 0058 7A68     	 ldr r2,[r7,#4]
 4708 005a 8123     	 movs r3,#129
 4709 005c 9B00     	 lsls r3,r3,#2
 4710 005e D358     	 ldr r3,[r2,r3]
 4711 0060 8022     	 movs r2,#128
 4712 0062 5200     	 lsls r2,r2,#1
 4713 0064 1A43     	 orrs r2,r3
 4714 0066 1100     	 movs r1,r2
 4715 0068 7A68     	 ldr r2,[r7,#4]
 4716 006a 8123     	 movs r3,#129
 4717 006c 9B00     	 lsls r3,r3,#2
 4718 006e D150     	 str r1,[r2,r3]
1341:../Libraries/XMCLib/src/xmc_vadc.c **** 
1342:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1343:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable Background Request source */
1344:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4719              	 .loc 2 1344 8
 4720 0070 0023     	 movs r3,#0
 4721 0072 7B61     	 str r3,[r7,#20]
 4722              	 .loc 2 1344 3
 4723 0074 10E0     	 b .L188
 4724              	.L190:
1345:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1346:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint8_t)1 == grp_asen2_flag[i])
 4725              	 .loc 2 1346 37
 4726 0076 0C23     	 movs r3,#12
 4727 0078 FA18     	 adds r2,r7,r3
 4728 007a 7B69     	 ldr r3,[r7,#20]
 4729 007c D318     	 adds r3,r2,r3
 4730 007e 1B78     	 ldrb r3,[r3]
 4731              	 .loc 2 1346 8
 4732 0080 012B     	 cmp r3,#1
 4733 0082 06D1     	 bne .L189
1347:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1348:../Libraries/XMCLib/src/xmc_vadc.c ****       XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t*)g_xmc_vadc_group_array[i]);
 4734              	 .loc 2 1348 95
 4735 0084 0D4B     	 ldr r3,.L191+4
 4736 0086 7A69     	 ldr r2,[r7,#20]
 4737 0088 9200     	 lsls r2,r2,#2
 4738 008a D358     	 ldr r3,[r2,r3]
 4739              	 .loc 2 1348 7
 4740 008c 1800     	 movs r0,r3
 4741 008e FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
 4742              	.L189:
1344:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4743              	 .loc 2 1344 55 discriminator 2
 4744 0092 7B69     	 ldr r3,[r7,#20]
 4745 0094 0133     	 adds r3,r3,#1
 4746 0096 7B61     	 str r3,[r7,#20]
 4747              	.L188:
1344:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4748              	 .loc 2 1344 3 discriminator 1
 4749 0098 7B69     	 ldr r3,[r7,#20]
 4750 009a 012B     	 cmp r3,#1
 4751 009c EBD9     	 bls .L190
1349:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1350:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1351:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1352:../Libraries/XMCLib/src/xmc_vadc.c **** 
1353:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Re-enable any disabled trigger and gating*/
1354:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(brsctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk
 4752              	 .loc 2 1354 67
 4753 009e 3B69     	 ldr r3,[r7,#16]
 4754 00a0 054A     	 ldr r2,.L191
 4755 00a2 1A43     	 orrs r2,r3
 4756 00a4 1100     	 movs r1,r2
 4757              	 .loc 2 1354 23
 4758 00a6 7A68     	 ldr r2,[r7,#4]
 4759 00a8 8023     	 movs r3,#128
 4760 00aa 9B00     	 lsls r3,r3,#2
 4761 00ac D150     	 str r1,[r2,r3]
1355:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4762              	 .loc 2 1355 1
 4763 00ae C046     	 nop
 4764 00b0 BD46     	 mov sp,r7
 4765 00b2 06B0     	 add sp,sp,#24
 4766              	 
 4767 00b4 80BD     	 pop {r7,pc}
 4768              	.L192:
 4769 00b6 C046     	 .align 2
 4770              	.L191:
 4771 00b8 00808000 	 .word 8421376
 4772 00bc 00000000 	 .word g_xmc_vadc_group_array
 4773              	 .cfi_endproc
 4774              	.LFE196:
 4776              	 .section .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending,"ax",%progbits
 4777              	 .align 1
 4778              	 .global XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
 4779              	 .syntax unified
 4780              	 .code 16
 4781              	 .thumb_func
 4782              	 .fpu softvfp
 4784              	XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:
 4785              	.LFB197:
1356:../Libraries/XMCLib/src/xmc_vadc.c **** 
1357:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine how many channels are awaiting conversion */
1358:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr)
1359:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4786              	 .loc 2 1359 1
 4787              	 .cfi_startproc
 4788              	 
 4789              	 
 4790 0000 80B5     	 push {r7,lr}
 4791              	.LCFI172:
 4792              	 .cfi_def_cfa_offset 8
 4793              	 .cfi_offset 7,-8
 4794              	 .cfi_offset 14,-4
 4795 0002 86B0     	 sub sp,sp,#24
 4796              	.LCFI173:
 4797              	 .cfi_def_cfa_offset 32
 4798 0004 00AF     	 add r7,sp,#0
 4799              	.LCFI174:
 4800              	 .cfi_def_cfa_register 7
 4801 0006 7860     	 str r0,[r7,#4]
1360:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1361:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1362:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t j;
1363:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1364:../Libraries/XMCLib/src/xmc_vadc.c **** 
1365:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr ==
1366:../Libraries/XMCLib/src/xmc_vadc.c **** 
1367:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 4802              	 .loc 2 1367 9
 4803 0008 0023     	 movs r3,#0
 4804 000a BB60     	 str r3,[r7,#8]
1368:../Libraries/XMCLib/src/xmc_vadc.c ****   
1369:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop through all groups and find out who is awaiting conversion */
1370:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4805              	 .loc 2 1370 9
 4806 000c 0023     	 movs r3,#0
 4807 000e 3B61     	 str r3,[r7,#16]
 4808              	 .loc 2 1370 3
 4809 0010 22E0     	 b .L194
 4810              	.L199:
1371:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1372:../Libraries/XMCLib/src/xmc_vadc.c ****     if (global_ptr->BRSSEL[i])
 4811              	 .loc 2 1372 27
 4812 0012 7B68     	 ldr r3,[r7,#4]
 4813 0014 3A69     	 ldr r2,[r7,#16]
 4814 0016 6032     	 adds r2,r2,#96
 4815 0018 9200     	 lsls r2,r2,#2
 4816 001a D358     	 ldr r3,[r2,r3]
 4817              	 .loc 2 1372 8
 4818 001c 002B     	 cmp r3,#0
 4819 001e 18D0     	 beq .L195
1373:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1374:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = global_ptr->BRSPND[i];
 4820              	 .loc 2 1374 11
 4821 0020 7B68     	 ldr r3,[r7,#4]
 4822 0022 3A69     	 ldr r2,[r7,#16]
 4823 0024 7032     	 adds r2,r2,#112
 4824 0026 9200     	 lsls r2,r2,#2
 4825 0028 D358     	 ldr r3,[r2,r3]
 4826 002a 7B61     	 str r3,[r7,#20]
1375:../Libraries/XMCLib/src/xmc_vadc.c **** 
1376:../Libraries/XMCLib/src/xmc_vadc.c ****       for(j=0U;j<XMC_VADC_NUM_CHANNELS_PER_GROUP;j++)
 4827              	 .loc 2 1376 12
 4828 002c 0023     	 movs r3,#0
 4829 002e FB60     	 str r3,[r7,#12]
 4830              	 .loc 2 1376 7
 4831 0030 0CE0     	 b .L196
 4832              	.L198:
1377:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1378:../Libraries/XMCLib/src/xmc_vadc.c ****         if (reg & 1U)
 4833              	 .loc 2 1378 17
 4834 0032 7B69     	 ldr r3,[r7,#20]
 4835 0034 0122     	 movs r2,#1
 4836 0036 1340     	 ands r3,r2
 4837              	 .loc 2 1378 12
 4838 0038 02D0     	 beq .L197
1379:../Libraries/XMCLib/src/xmc_vadc.c ****         {
1380:../Libraries/XMCLib/src/xmc_vadc.c ****           count++;
 4839              	 .loc 2 1380 16
 4840 003a BB68     	 ldr r3,[r7,#8]
 4841 003c 0133     	 adds r3,r3,#1
 4842 003e BB60     	 str r3,[r7,#8]
 4843              	.L197:
1381:../Libraries/XMCLib/src/xmc_vadc.c ****         }
1382:../Libraries/XMCLib/src/xmc_vadc.c **** 
1383:../Libraries/XMCLib/src/xmc_vadc.c ****         reg = reg >> 1U;
 4844              	 .loc 2 1383 13 discriminator 2
 4845 0040 7B69     	 ldr r3,[r7,#20]
 4846 0042 5B08     	 lsrs r3,r3,#1
 4847 0044 7B61     	 str r3,[r7,#20]
1376:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 4848              	 .loc 2 1376 51 discriminator 2
 4849 0046 FB68     	 ldr r3,[r7,#12]
 4850 0048 0133     	 adds r3,r3,#1
 4851 004a FB60     	 str r3,[r7,#12]
 4852              	.L196:
1376:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 4853              	 .loc 2 1376 7 discriminator 1
 4854 004c FB68     	 ldr r3,[r7,#12]
 4855 004e 072B     	 cmp r3,#7
 4856 0050 EFD9     	 bls .L198
 4857              	.L195:
1370:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4858              	 .loc 2 1370 49 discriminator 2
 4859 0052 3B69     	 ldr r3,[r7,#16]
 4860 0054 0133     	 adds r3,r3,#1
 4861 0056 3B61     	 str r3,[r7,#16]
 4862              	.L194:
1370:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4863              	 .loc 2 1370 3 discriminator 1
 4864 0058 3B69     	 ldr r3,[r7,#16]
 4865 005a 012B     	 cmp r3,#1
 4866 005c D9D9     	 bls .L199
1384:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1385:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1386:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1387:../Libraries/XMCLib/src/xmc_vadc.c **** 
1388:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 4867              	 .loc 2 1388 10
 4868 005e BB68     	 ldr r3,[r7,#8]
1389:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4869              	 .loc 2 1389 1
 4870 0060 1800     	 movs r0,r3
 4871 0062 BD46     	 mov sp,r7
 4872 0064 06B0     	 add sp,sp,#24
 4873              	 
 4874 0066 80BD     	 pop {r7,pc}
 4875              	 .cfi_endproc
 4876              	.LFE197:
 4878              	 .section .text.XMC_VADC_GROUP_QueueInit,"ax",%progbits
 4879              	 .align 1
 4880              	 .global XMC_VADC_GROUP_QueueInit
 4881              	 .syntax unified
 4882              	 .code 16
 4883              	 .thumb_func
 4884              	 .fpu softvfp
 4886              	XMC_VADC_GROUP_QueueInit:
 4887              	.LFB198:
1390:../Libraries/XMCLib/src/xmc_vadc.c **** 
1391:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
1392:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize queue request source */
1393:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
1394:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4888              	 .loc 2 1394 1
 4889              	 .cfi_startproc
 4890              	 
 4891              	 
 4892 0000 80B5     	 push {r7,lr}
 4893              	.LCFI175:
 4894              	 .cfi_def_cfa_offset 8
 4895              	 .cfi_offset 7,-8
 4896              	 .cfi_offset 14,-4
 4897 0002 84B0     	 sub sp,sp,#16
 4898              	.LCFI176:
 4899              	 .cfi_def_cfa_offset 24
 4900 0004 00AF     	 add r7,sp,#0
 4901              	.LCFI177:
 4902              	 .cfi_def_cfa_register 7
 4903 0006 7860     	 str r0,[r7,#4]
 4904 0008 3960     	 str r1,[r7]
1395:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t          reg;
1396:../Libraries/XMCLib/src/xmc_vadc.c **** 
1397:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1398:../Libraries/XMCLib/src/xmc_vadc.c **** 
1399:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable arbitration slot of the queue request source */
1400:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4905              	 .loc 2 1400 3
 4906 000a 7B68     	 ldr r3,[r7,#4]
 4907 000c 1800     	 movs r0,r3
 4908 000e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1401:../Libraries/XMCLib/src/xmc_vadc.c ****   
1402:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 4909              	 .loc 2 1402 7
 4910 0012 7B68     	 ldr r3,[r7,#4]
 4911 0014 8422     	 movs r2,#132
 4912 0016 9B58     	 ldr r3,[r3,r2]
 4913 0018 FB60     	 str r3,[r7,#12]
1403:../Libraries/XMCLib/src/xmc_vadc.c **** 
1404:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Request Source priority */
1405:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 4914              	 .loc 2 1405 7
 4915 001a FB68     	 ldr r3,[r7,#12]
 4916 001c 0322     	 movs r2,#3
 4917 001e 9343     	 bics r3,r2
 4918 0020 FB60     	 str r3,[r7,#12]
1406:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 4919              	 .loc 2 1406 38
 4920 0022 3B68     	 ldr r3,[r7]
 4921 0024 1B78     	 ldrb r3,[r3]
 4922 0026 1B07     	 lsls r3,r3,#28
 4923 0028 9B0F     	 lsrs r3,r3,#30
 4924 002a DBB2     	 uxtb r3,r3
 4925              	 .loc 2 1406 10
 4926 002c 1A00     	 movs r2,r3
 4927              	 .loc 2 1406 7
 4928 002e FB68     	 ldr r3,[r7,#12]
 4929 0030 1343     	 orrs r3,r2
 4930 0032 FB60     	 str r3,[r7,#12]
1407:../Libraries/XMCLib/src/xmc_vadc.c **** 
1408:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Conversion Start mode */
1409:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 4931              	 .loc 2 1409 30
 4932 0034 3B68     	 ldr r3,[r7]
 4933 0036 1B78     	 ldrb r3,[r3]
 4934 0038 0322     	 movs r2,#3
 4935 003a 1340     	 ands r3,r2
 4936 003c DBB2     	 uxtb r3,r3
 4937              	 .loc 2 1409 6
 4938 003e 002B     	 cmp r3,#0
 4939 0040 03D0     	 beq .L202
1410:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1411:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 4940              	 .loc 2 1411 9
 4941 0042 FB68     	 ldr r3,[r7,#12]
 4942 0044 0822     	 movs r2,#8
 4943 0046 1343     	 orrs r3,r2
 4944 0048 FB60     	 str r3,[r7,#12]
 4945              	.L202:
1412:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1413:../Libraries/XMCLib/src/xmc_vadc.c **** 
1414:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 4946              	 .loc 2 1414 20
 4947 004a 7B68     	 ldr r3,[r7,#4]
 4948 004c 8421     	 movs r1,#132
 4949 004e FA68     	 ldr r2,[r7,#12]
 4950 0050 5A50     	 str r2,[r3,r1]
1415:../Libraries/XMCLib/src/xmc_vadc.c **** 
1416:../Libraries/XMCLib/src/xmc_vadc.c **** 
1417:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 4951              	 .loc 2 1417 41
 4952 0052 3B68     	 ldr r3,[r7]
 4953 0054 5B68     	 ldr r3,[r3,#4]
 4954              	 .loc 2 1417 23
 4955 0056 154A     	 ldr r2,.L204
 4956 0058 1A43     	 orrs r2,r3
 4957 005a 1100     	 movs r1,r2
 4958              	 .loc 2 1417 21
 4959 005c 7A68     	 ldr r2,[r7,#4]
 4960 005e 8023     	 movs r3,#128
 4961 0060 5B00     	 lsls r3,r3,#1
 4962 0062 D150     	 str r1,[r2,r3]
1418:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
1419:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));
1420:../Libraries/XMCLib/src/xmc_vadc.c **** 
1421:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Gating mode */
1422:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 4963              	 .loc 2 1422 39
 4964 0064 3B68     	 ldr r3,[r7]
 4965 0066 9B68     	 ldr r3,[r3,#8]
 4966              	 .loc 2 1422 47
 4967 0068 0122     	 movs r2,#1
 4968 006a 1A43     	 orrs r2,r3
 4969 006c 1100     	 movs r1,r2
 4970              	 .loc 2 1422 19
 4971 006e 7A68     	 ldr r2,[r7,#4]
 4972 0070 8223     	 movs r3,#130
 4973 0072 5B00     	 lsls r3,r3,#1
 4974 0074 D150     	 str r1,[r2,r3]
1423:../Libraries/XMCLib/src/xmc_vadc.c **** 
1424:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 4975              	 .loc 2 1424 30
 4976 0076 3B68     	 ldr r3,[r7]
 4977 0078 1B78     	 ldrb r3,[r3]
 4978 007a 0322     	 movs r2,#3
 4979 007c 1340     	 ands r3,r2
 4980 007e DBB2     	 uxtb r3,r3
 4981              	 .loc 2 1424 6
 4982 0080 022B     	 cmp r3,#2
 4983 0082 0BD1     	 bne .L203
1425:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1426:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 4984              	 .loc 2 1426 21
 4985 0084 7A68     	 ldr r2,[r7,#4]
 4986 0086 8223     	 movs r3,#130
 4987 0088 5B00     	 lsls r3,r3,#1
 4988 008a D358     	 ldr r3,[r2,r3]
 4989 008c 8022     	 movs r2,#128
 4990 008e 5202     	 lsls r2,r2,#9
 4991 0090 1A43     	 orrs r2,r3
 4992 0092 1100     	 movs r1,r2
 4993 0094 7A68     	 ldr r2,[r7,#4]
 4994 0096 8223     	 movs r3,#130
 4995 0098 5B00     	 lsls r3,r3,#1
 4996 009a D150     	 str r1,[r2,r3]
 4997              	.L203:
1427:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1428:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot for the queue request source */
1429:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 4998              	 .loc 2 1429 3
 4999 009c 7B68     	 ldr r3,[r7,#4]
 5000 009e 1800     	 movs r0,r3
 5001 00a0 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueEnableArbitrationSlot
1430:../Libraries/XMCLib/src/xmc_vadc.c **** 
1431:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5002              	 .loc 2 1431 1
 5003 00a4 C046     	 nop
 5004 00a6 BD46     	 mov sp,r7
 5005 00a8 04B0     	 add sp,sp,#16
 5006              	 
 5007 00aa 80BD     	 pop {r7,pc}
 5008              	.L205:
 5009              	 .align 2
 5010              	.L204:
 5011 00ac 00808080 	 .word -2139062272
 5012              	 .cfi_endproc
 5013              	.LFE198:
 5015              	 .section .text.XMC_VADC_GROUP_QueueSelectTrigger,"ax",%progbits
 5016              	 .align 1
 5017              	 .global XMC_VADC_GROUP_QueueSelectTrigger
 5018              	 .syntax unified
 5019              	 .code 16
 5020              	 .thumb_func
 5021              	 .fpu softvfp
 5023              	XMC_VADC_GROUP_QueueSelectTrigger:
 5024              	.LFB199:
1432:../Libraries/XMCLib/src/xmc_vadc.c **** 
1433:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible triggers as a conversion trigger for queue request source *
1434:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
1435:../Libraries/XMCLib/src/xmc_vadc.c ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)
1436:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5025              	 .loc 2 1436 1
 5026              	 .cfi_startproc
 5027              	 
 5028              	 
 5029 0000 80B5     	 push {r7,lr}
 5030              	.LCFI178:
 5031              	 .cfi_def_cfa_offset 8
 5032              	 .cfi_offset 7,-8
 5033              	 .cfi_offset 14,-4
 5034 0002 84B0     	 sub sp,sp,#16
 5035              	.LCFI179:
 5036              	 .cfi_def_cfa_offset 24
 5037 0004 00AF     	 add r7,sp,#0
 5038              	.LCFI180:
 5039              	 .cfi_def_cfa_register 7
 5040 0006 7860     	 str r0,[r7,#4]
 5041 0008 0A00     	 movs r2,r1
 5042 000a FB1C     	 adds r3,r7,#3
 5043 000c 1A70     	 strb r2,[r3]
1437:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    qctrl;
1438:../Libraries/XMCLib/src/xmc_vadc.c ****   
1439:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1440:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_NUM_POR
1441:../Libraries/XMCLib/src/xmc_vadc.c **** 
1442:../Libraries/XMCLib/src/xmc_vadc.c ****   
1443:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the conversion trigger */
1444:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 5044              	 .loc 2 1444 10
 5045 000e 7A68     	 ldr r2,[r7,#4]
 5046 0010 8023     	 movs r3,#128
 5047 0012 5B00     	 lsls r3,r3,#1
 5048 0014 D358     	 ldr r3,[r2,r3]
 5049 0016 FB60     	 str r3,[r7,#12]
1445:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 5050              	 .loc 2 1445 10
 5051 0018 FB68     	 ldr r3,[r7,#12]
 5052 001a 8022     	 movs r2,#128
 5053 001c 1202     	 lsls r2,r2,#8
 5054 001e 1343     	 orrs r3,r2
 5055 0020 FB60     	 str r3,[r7,#12]
1446:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTSEL_Msk);
 5056              	 .loc 2 1446 9
 5057 0022 FB68     	 ldr r3,[r7,#12]
 5058 0024 084A     	 ldr r2,.L207
 5059 0026 1340     	 ands r3,r2
 5060 0028 FB60     	 str r3,[r7,#12]
1447:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 5061              	 .loc 2 1447 23
 5062 002a FB1C     	 adds r3,r7,#3
 5063 002c 1B78     	 ldrb r3,[r3]
 5064              	 .loc 2 1447 12
 5065 002e 1B02     	 lsls r3,r3,#8
 5066              	 .loc 2 1447 9
 5067 0030 FA68     	 ldr r2,[r7,#12]
 5068 0032 1343     	 orrs r3,r2
 5069 0034 FB60     	 str r3,[r7,#12]
1448:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 5070              	 .loc 2 1448 21
 5071 0036 7A68     	 ldr r2,[r7,#4]
 5072 0038 8023     	 movs r3,#128
 5073 003a 5B00     	 lsls r3,r3,#1
 5074 003c F968     	 ldr r1,[r7,#12]
 5075 003e D150     	 str r1,[r2,r3]
1449:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5076              	 .loc 2 1449 1
 5077 0040 C046     	 nop
 5078 0042 BD46     	 mov sp,r7
 5079 0044 04B0     	 add sp,sp,#16
 5080              	 
 5081 0046 80BD     	 pop {r7,pc}
 5082              	.L208:
 5083              	 .align 2
 5084              	.L207:
 5085 0048 FFF0FFFF 	 .word -3841
 5086              	 .cfi_endproc
 5087              	.LFE199:
 5089              	 .section .text.XMC_VADC_GROUP_QueueSelectTriggerEdge,"ax",%progbits
 5090              	 .align 1
 5091              	 .global XMC_VADC_GROUP_QueueSelectTriggerEdge
 5092              	 .syntax unified
 5093              	 .code 16
 5094              	 .thumb_func
 5095              	 .fpu softvfp
 5097              	XMC_VADC_GROUP_QueueSelectTriggerEdge:
 5098              	.LFB200:
1450:../Libraries/XMCLib/src/xmc_vadc.c **** 
1451:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1452:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
1453:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5099              	 .loc 2 1453 1
 5100              	 .cfi_startproc
 5101              	 
 5102              	 
 5103 0000 80B5     	 push {r7,lr}
 5104              	.LCFI181:
 5105              	 .cfi_def_cfa_offset 8
 5106              	 .cfi_offset 7,-8
 5107              	 .cfi_offset 14,-4
 5108 0002 84B0     	 sub sp,sp,#16
 5109              	.LCFI182:
 5110              	 .cfi_def_cfa_offset 24
 5111 0004 00AF     	 add r7,sp,#0
 5112              	.LCFI183:
 5113              	 .cfi_def_cfa_register 7
 5114 0006 7860     	 str r0,[r7,#4]
 5115 0008 0A00     	 movs r2,r1
 5116 000a FB1C     	 adds r3,r7,#3
 5117 000c 1A70     	 strb r2,[r3]
1454:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1455:../Libraries/XMCLib/src/xmc_vadc.c **** 
1456:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1457:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Gating Port", ((trigger_edge)<= XMC_VADC_
1458:../Libraries/XMCLib/src/xmc_vadc.c **** 
1459:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1460:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 5118              	 .loc 2 1460 10
 5119 000e 7A68     	 ldr r2,[r7,#4]
 5120 0010 8023     	 movs r3,#128
 5121 0012 5B00     	 lsls r3,r3,#1
 5122 0014 D358     	 ldr r3,[r2,r3]
 5123 0016 FB60     	 str r3,[r7,#12]
1461:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 5124              	 .loc 2 1461 9
 5125 0018 FB68     	 ldr r3,[r7,#12]
 5126 001a 8022     	 movs r2,#128
 5127 001c 1202     	 lsls r2,r2,#8
 5128 001e 1343     	 orrs r3,r2
 5129 0020 FB60     	 str r3,[r7,#12]
1462:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTMODE_Msk);
 5130              	 .loc 2 1462 9
 5131 0022 FB68     	 ldr r3,[r7,#12]
 5132 0024 084A     	 ldr r2,.L210
 5133 0026 1340     	 ands r3,r2
 5134 0028 FB60     	 str r3,[r7,#12]
1463:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 5135              	 .loc 2 1463 23
 5136 002a FB1C     	 adds r3,r7,#3
 5137 002c 1B78     	 ldrb r3,[r3]
 5138              	 .loc 2 1463 12
 5139 002e 5B03     	 lsls r3,r3,#13
 5140              	 .loc 2 1463 9
 5141 0030 FA68     	 ldr r2,[r7,#12]
 5142 0032 1343     	 orrs r3,r2
 5143 0034 FB60     	 str r3,[r7,#12]
1464:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 5144              	 .loc 2 1464 21
 5145 0036 7A68     	 ldr r2,[r7,#4]
 5146 0038 8023     	 movs r3,#128
 5147 003a 5B00     	 lsls r3,r3,#1
 5148 003c F968     	 ldr r1,[r7,#12]
 5149 003e D150     	 str r1,[r2,r3]
1465:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5150              	 .loc 2 1465 1
 5151 0040 C046     	 nop
 5152 0042 BD46     	 mov sp,r7
 5153 0044 04B0     	 add sp,sp,#16
 5154              	 
 5155 0046 80BD     	 pop {r7,pc}
 5156              	.L211:
 5157              	 .align 2
 5158              	.L210:
 5159 0048 FF9FFFFF 	 .word -24577
 5160              	 .cfi_endproc
 5161              	.LFE200:
 5163              	 .section .text.XMC_VADC_GROUP_QueueSelectGating,"ax",%progbits
 5164              	 .align 1
 5165              	 .global XMC_VADC_GROUP_QueueSelectGating
 5166              	 .syntax unified
 5167              	 .code 16
 5168              	 .thumb_func
 5169              	 .fpu softvfp
 5171              	XMC_VADC_GROUP_QueueSelectGating:
 5172              	.LFB201:
1466:../Libraries/XMCLib/src/xmc_vadc.c **** 
1467:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible trigger gates as a trigger gating signal for queue request 
1468:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
1469:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5173              	 .loc 2 1469 1
 5174              	 .cfi_startproc
 5175              	 
 5176              	 
 5177 0000 80B5     	 push {r7,lr}
 5178              	.LCFI184:
 5179              	 .cfi_def_cfa_offset 8
 5180              	 .cfi_offset 7,-8
 5181              	 .cfi_offset 14,-4
 5182 0002 84B0     	 sub sp,sp,#16
 5183              	.LCFI185:
 5184              	 .cfi_def_cfa_offset 24
 5185 0004 00AF     	 add r7,sp,#0
 5186              	.LCFI186:
 5187              	 .cfi_def_cfa_register 7
 5188 0006 7860     	 str r0,[r7,#4]
 5189 0008 0A00     	 movs r2,r1
 5190 000a FB1C     	 adds r3,r7,#3
 5191 000c 1A70     	 strb r2,[r3]
1470:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1471:../Libraries/XMCLib/src/xmc_vadc.c **** 
1472:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1473:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM_PORTS
1474:../Libraries/XMCLib/src/xmc_vadc.c ****   
1475:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1476:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 5192              	 .loc 2 1476 10
 5193 000e 7A68     	 ldr r2,[r7,#4]
 5194 0010 8023     	 movs r3,#128
 5195 0012 5B00     	 lsls r3,r3,#1
 5196 0014 D358     	 ldr r3,[r2,r3]
 5197 0016 FB60     	 str r3,[r7,#12]
1477:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
 5198              	 .loc 2 1477 9
 5199 0018 FB68     	 ldr r3,[r7,#12]
 5200 001a 8022     	 movs r2,#128
 5201 001c 1204     	 lsls r2,r2,#16
 5202 001e 1343     	 orrs r3,r2
 5203 0020 FB60     	 str r3,[r7,#12]
1478:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_GTSEL_Msk);
 5204              	 .loc 2 1478 9
 5205 0022 FB68     	 ldr r3,[r7,#12]
 5206 0024 084A     	 ldr r2,.L213
 5207 0026 1340     	 ands r3,r2
 5208 0028 FB60     	 str r3,[r7,#12]
1479:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 5209              	 .loc 2 1479 23
 5210 002a FB1C     	 adds r3,r7,#3
 5211 002c 1B78     	 ldrb r3,[r3]
 5212              	 .loc 2 1479 12
 5213 002e 1B04     	 lsls r3,r3,#16
 5214              	 .loc 2 1479 9
 5215 0030 FA68     	 ldr r2,[r7,#12]
 5216 0032 1343     	 orrs r3,r2
 5217 0034 FB60     	 str r3,[r7,#12]
1480:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 5218              	 .loc 2 1480 21
 5219 0036 7A68     	 ldr r2,[r7,#4]
 5220 0038 8023     	 movs r3,#128
 5221 003a 5B00     	 lsls r3,r3,#1
 5222 003c F968     	 ldr r1,[r7,#12]
 5223 003e D150     	 str r1,[r2,r3]
1481:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5224              	 .loc 2 1481 1
 5225 0040 C046     	 nop
 5226 0042 BD46     	 mov sp,r7
 5227 0044 04B0     	 add sp,sp,#16
 5228              	 
 5229 0046 80BD     	 pop {r7,pc}
 5230              	.L214:
 5231              	 .align 2
 5232              	.L213:
 5233 0048 FFFFF0FF 	 .word -983041
 5234              	 .cfi_endproc
 5235              	.LFE201:
 5237              	 .section .text.XMC_VADC_GROUP_QueueGetLength,"ax",%progbits
 5238              	 .align 1
 5239              	 .global XMC_VADC_GROUP_QueueGetLength
 5240              	 .syntax unified
 5241              	 .code 16
 5242              	 .thumb_func
 5243              	 .fpu softvfp
 5245              	XMC_VADC_GROUP_QueueGetLength:
 5246              	.LFB202:
1482:../Libraries/XMCLib/src/xmc_vadc.c **** 
1483:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine the number of channels in the queue (length includes the valid channel in the B
1484:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr)
1485:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5247              	 .loc 2 1485 1
 5248              	 .cfi_startproc
 5249              	 
 5250              	 
 5251 0000 80B5     	 push {r7,lr}
 5252              	.LCFI187:
 5253              	 .cfi_def_cfa_offset 8
 5254              	 .cfi_offset 7,-8
 5255              	 .cfi_offset 14,-4
 5256 0002 86B0     	 sub sp,sp,#24
 5257              	.LCFI188:
 5258              	 .cfi_def_cfa_offset 32
 5259 0004 00AF     	 add r7,sp,#0
 5260              	.LCFI189:
 5261              	 .cfi_def_cfa_register 7
 5262 0006 7860     	 str r0,[r7,#4]
1486:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qsr;
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qbur0;
1488:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        length;
1489:../Libraries/XMCLib/src/xmc_vadc.c **** 
1490:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetLength:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
1491:../Libraries/XMCLib/src/xmc_vadc.c **** 
1492:../Libraries/XMCLib/src/xmc_vadc.c ****   qsr = group_ptr->QSR0;
 5263              	 .loc 2 1492 7
 5264 0008 7A68     	 ldr r2,[r7,#4]
 5265 000a 8423     	 movs r3,#132
 5266 000c 5B00     	 lsls r3,r3,#1
 5267 000e D358     	 ldr r3,[r2,r3]
 5268 0010 3B61     	 str r3,[r7,#16]
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 5269              	 .loc 2 1493 9
 5270 0012 7A68     	 ldr r2,[r7,#4]
 5271 0014 8823     	 movs r3,#136
 5272 0016 5B00     	 lsls r3,r3,#1
 5273 0018 D358     	 ldr r3,[r2,r3]
 5274 001a FB60     	 str r3,[r7,#12]
1494:../Libraries/XMCLib/src/xmc_vadc.c **** 
1495:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qsr & (uint32_t)VADC_G_QSR0_EMPTY_Msk)
 5275              	 .loc 2 1495 11
 5276 001c 3B69     	 ldr r3,[r7,#16]
 5277 001e 2022     	 movs r2,#32
 5278 0020 1340     	 ands r3,r2
 5279              	 .loc 2 1495 6
 5280 0022 02D0     	 beq .L216
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1497:../Libraries/XMCLib/src/xmc_vadc.c ****     length = 0U;
 5281              	 .loc 2 1497 12
 5282 0024 0023     	 movs r3,#0
 5283 0026 7B61     	 str r3,[r7,#20]
 5284 0028 04E0     	 b .L217
 5285              	.L216:
1498:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1499:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1500:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1501:../Libraries/XMCLib/src/xmc_vadc.c ****     length = (qsr & (uint32_t)VADC_G_QSR0_FILL_Msk) + 1U;
 5286              	 .loc 2 1501 19
 5287 002a 3B69     	 ldr r3,[r7,#16]
 5288 002c 0F22     	 movs r2,#15
 5289 002e 1340     	 ands r3,r2
 5290              	 .loc 2 1501 12
 5291 0030 0133     	 adds r3,r3,#1
 5292 0032 7B61     	 str r3,[r7,#20]
 5293              	.L217:
1502:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1503:../Libraries/XMCLib/src/xmc_vadc.c ****   
1504:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qbur0 & (uint32_t)VADC_G_QBUR0_V_Msk )
 5294              	 .loc 2 1504 13
 5295 0034 FA68     	 ldr r2,[r7,#12]
 5296 0036 8023     	 movs r3,#128
 5297 0038 5B00     	 lsls r3,r3,#1
 5298 003a 1340     	 ands r3,r2
 5299              	 .loc 2 1504 6
 5300 003c 02D0     	 beq .L218
1505:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1506:../Libraries/XMCLib/src/xmc_vadc.c ****     length++;
 5301              	 .loc 2 1506 11
 5302 003e 7B69     	 ldr r3,[r7,#20]
 5303 0040 0133     	 adds r3,r3,#1
 5304 0042 7B61     	 str r3,[r7,#20]
 5305              	.L218:
1507:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1508:../Libraries/XMCLib/src/xmc_vadc.c **** 
1509:../Libraries/XMCLib/src/xmc_vadc.c ****   return length;
 5306              	 .loc 2 1509 10
 5307 0044 7B69     	 ldr r3,[r7,#20]
1510:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5308              	 .loc 2 1510 1
 5309 0046 1800     	 movs r0,r3
 5310 0048 BD46     	 mov sp,r7
 5311 004a 06B0     	 add sp,sp,#24
 5312              	 
 5313 004c 80BD     	 pop {r7,pc}
 5314              	 .cfi_endproc
 5315              	.LFE202:
 5317              	 .section .text.XMC_VADC_GROUP_QueueAbortSequence,"ax",%progbits
 5318              	 .align 1
 5319              	 .global XMC_VADC_GROUP_QueueAbortSequence
 5320              	 .syntax unified
 5321              	 .code 16
 5322              	 .thumb_func
 5323              	 .fpu softvfp
 5325              	XMC_VADC_GROUP_QueueAbortSequence:
 5326              	.LFB203:
1511:../Libraries/XMCLib/src/xmc_vadc.c **** 
1512:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a channel sequence */
1513:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr)
1514:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5327              	 .loc 2 1514 1
 5328              	 .cfi_startproc
 5329              	 
 5330              	 
 5331 0000 90B5     	 push {r4,r7,lr}
 5332              	.LCFI190:
 5333              	 .cfi_def_cfa_offset 12
 5334              	 .cfi_offset 4,-12
 5335              	 .cfi_offset 7,-8
 5336              	 .cfi_offset 14,-4
 5337 0002 85B0     	 sub sp,sp,#20
 5338              	.LCFI191:
 5339              	 .cfi_def_cfa_offset 32
 5340 0004 00AF     	 add r7,sp,#0
 5341              	.LCFI192:
 5342              	 .cfi_def_cfa_register 7
 5343 0006 7860     	 str r0,[r7,#4]
1515:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1516:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1517:../Libraries/XMCLib/src/xmc_vadc.c **** 
1518:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueAbortSequence:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1519:../Libraries/XMCLib/src/xmc_vadc.c **** 
1520:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1521:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0 = group_ptr->QCTRL0;
 5344              	 .loc 2 1521 10
 5345 0008 7A68     	 ldr r2,[r7,#4]
 5346 000a 8023     	 movs r3,#128
 5347 000c 5B00     	 lsls r3,r3,#1
 5348 000e D358     	 ldr r3,[r2,r3]
 5349 0010 FB60     	 str r3,[r7,#12]
1522:../Libraries/XMCLib/src/xmc_vadc.c **** 
1523:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 5350              	 .loc 2 1523 21
 5351 0012 7A68     	 ldr r2,[r7,#4]
 5352 0014 8023     	 movs r3,#128
 5353 0016 5B00     	 lsls r3,r3,#1
 5354 0018 1549     	 ldr r1,.L221
 5355 001a D150     	 str r1,[r2,r3]
1524:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1525:../Libraries/XMCLib/src/xmc_vadc.c ****   
1526:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1527:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 5356              	 .loc 2 1527 51
 5357 001c 7B68     	 ldr r3,[r7,#4]
 5358 001e 8422     	 movs r2,#132
 5359 0020 9B58     	 ldr r3,[r3,r2]
 5360              	 .loc 2 1527 59
 5361 0022 1B0E     	 lsrs r3,r3,#24
 5362              	 .loc 2 1527 86
 5363 0024 0122     	 movs r2,#1
 5364 0026 1A40     	 ands r2,r3
 5365              	 .loc 2 1527 22
 5366 0028 0B24     	 movs r4,#11
 5367 002a 3B19     	 adds r3,r7,r4
 5368 002c 511E     	 subs r1,r2,#1
 5369 002e 8A41     	 sbcs r2,r2,r1
 5370 0030 1A70     	 strb r2,[r3]
1528:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 5371              	 .loc 2 1528 3
 5372 0032 7B68     	 ldr r3,[r7,#4]
 5373 0034 1800     	 movs r0,r3
 5374 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1529:../Libraries/XMCLib/src/xmc_vadc.c ****    
1530:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Flush the Entries from queue*/
1531:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueFlushEntries(group_ptr);
 5375              	 .loc 2 1531 3
 5376 003a 7B68     	 ldr r3,[r7,#4]
 5377 003c 1800     	 movs r0,r3
 5378 003e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueFlushEntries
1532:../Libraries/XMCLib/src/xmc_vadc.c ****   
1533:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1534:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 5379              	 .loc 2 1534 20
 5380 0042 7B68     	 ldr r3,[r7,#4]
 5381 0044 8422     	 movs r2,#132
 5382 0046 9A58     	 ldr r2,[r3,r2]
 5383              	 .loc 2 1534 34
 5384 0048 3B19     	 adds r3,r7,r4
 5385 004a 1B78     	 ldrb r3,[r3]
 5386              	 .loc 2 1534 23
 5387 004c 1B06     	 lsls r3,r3,#24
 5388              	 .loc 2 1534 20
 5389 004e 1A43     	 orrs r2,r3
 5390 0050 7B68     	 ldr r3,[r7,#4]
 5391 0052 8421     	 movs r1,#132
 5392 0054 5A50     	 str r2,[r3,r1]
1535:../Libraries/XMCLib/src/xmc_vadc.c ****   
1536:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1537:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1538:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 5393              	 .loc 2 1538 69
 5394 0056 FB68     	 ldr r3,[r7,#12]
 5395 0058 054A     	 ldr r2,.L221
 5396 005a 1A43     	 orrs r2,r3
 5397 005c 1100     	 movs r1,r2
1537:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 5398              	 .loc 2 1537 21
 5399 005e 7A68     	 ldr r2,[r7,#4]
 5400 0060 8023     	 movs r3,#128
 5401 0062 5B00     	 lsls r3,r3,#1
 5402 0064 D150     	 str r1,[r2,r3]
1539:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5403              	 .loc 2 1539 1
 5404 0066 C046     	 nop
 5405 0068 BD46     	 mov sp,r7
 5406 006a 05B0     	 add sp,sp,#20
 5407              	 
 5408 006c 90BD     	 pop {r4,r7,pc}
 5409              	.L222:
 5410 006e C046     	 .align 2
 5411              	.L221:
 5412 0070 00808080 	 .word -2139062272
 5413              	 .cfi_endproc
 5414              	.LFE203:
 5416              	 .section .text.XMC_VADC_GROUP_QueueRemoveChannel,"ax",%progbits
 5417              	 .align 1
 5418              	 .global XMC_VADC_GROUP_QueueRemoveChannel
 5419              	 .syntax unified
 5420              	 .code 16
 5421              	 .thumb_func
 5422              	 .fpu softvfp
 5424              	XMC_VADC_GROUP_QueueRemoveChannel:
 5425              	.LFB204:
1540:../Libraries/XMCLib/src/xmc_vadc.c **** 
1541:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort conversion of the channel queued up next */
1542:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr)
1543:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5426              	 .loc 2 1543 1
 5427              	 .cfi_startproc
 5428              	 
 5429              	 
 5430 0000 80B5     	 push {r7,lr}
 5431              	.LCFI193:
 5432              	 .cfi_def_cfa_offset 8
 5433              	 .cfi_offset 7,-8
 5434              	 .cfi_offset 14,-4
 5435 0002 86B0     	 sub sp,sp,#24
 5436              	.LCFI194:
 5437              	 .cfi_def_cfa_offset 32
 5438 0004 00AF     	 add r7,sp,#0
 5439              	.LCFI195:
 5440              	 .cfi_def_cfa_register 7
 5441 0006 7860     	 str r0,[r7,#4]
1544:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_before_abort;
1545:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_after_abort;
1546:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1547:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1548:../Libraries/XMCLib/src/xmc_vadc.c **** 
1549:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1550:../Libraries/XMCLib/src/xmc_vadc.c ****   
1551:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1552:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0= group_ptr->QCTRL0;
 5442              	 .loc 2 1552 9
 5443 0008 7A68     	 ldr r2,[r7,#4]
 5444 000a 8023     	 movs r3,#128
 5445 000c 5B00     	 lsls r3,r3,#1
 5446 000e D358     	 ldr r3,[r2,r3]
 5447 0010 3B61     	 str r3,[r7,#16]
1553:../Libraries/XMCLib/src/xmc_vadc.c **** 
1554:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 5448              	 .loc 2 1554 21
 5449 0012 7A68     	 ldr r2,[r7,#4]
 5450 0014 8023     	 movs r3,#128
 5451 0016 5B00     	 lsls r3,r3,#1
 5452 0018 2649     	 ldr r1,.L227
 5453 001a D150     	 str r1,[r2,r3]
1555:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1556:../Libraries/XMCLib/src/xmc_vadc.c ****   
1557:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1558:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 5454              	 .loc 2 1558 51
 5455 001c 7B68     	 ldr r3,[r7,#4]
 5456 001e 8422     	 movs r2,#132
 5457 0020 9B58     	 ldr r3,[r3,r2]
 5458              	 .loc 2 1558 59
 5459 0022 1B0E     	 lsrs r3,r3,#24
 5460              	 .loc 2 1558 86
 5461 0024 0122     	 movs r2,#1
 5462 0026 1A40     	 ands r2,r3
 5463              	 .loc 2 1558 22
 5464 0028 0F23     	 movs r3,#15
 5465 002a FB18     	 adds r3,r7,r3
 5466 002c 511E     	 subs r1,r2,#1
 5467 002e 8A41     	 sbcs r2,r2,r1
 5468 0030 1A70     	 strb r2,[r3]
1559:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 5469              	 .loc 2 1559 3
 5470 0032 7B68     	 ldr r3,[r7,#4]
 5471 0034 1800     	 movs r0,r3
 5472 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1560:../Libraries/XMCLib/src/xmc_vadc.c **** 
1561:../Libraries/XMCLib/src/xmc_vadc.c ****   length_before_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 5473              	 .loc 2 1561 25
 5474 003a 7B68     	 ldr r3,[r7,#4]
 5475 003c 1800     	 movs r0,r3
 5476 003e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 5477 0042 0300     	 movs r3,r0
 5478 0044 BB60     	 str r3,[r7,#8]
1562:../Libraries/XMCLib/src/xmc_vadc.c **** 
1563:../Libraries/XMCLib/src/xmc_vadc.c ****   if (length_before_abort)
 5479              	 .loc 2 1563 6
 5480 0046 BB68     	 ldr r3,[r7,#8]
 5481 0048 002B     	 cmp r3,#0
 5482 004a 1CD0     	 beq .L224
1564:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1565:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Remove the first entry of the queue */
1566:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;
 5483              	 .loc 2 1566 21
 5484 004c 7A68     	 ldr r2,[r7,#4]
 5485 004e 8223     	 movs r3,#130
 5486 0050 5B00     	 lsls r3,r3,#1
 5487 0052 D358     	 ldr r3,[r2,r3]
 5488 0054 8022     	 movs r2,#128
 5489 0056 5200     	 lsls r2,r2,#1
 5490 0058 1A43     	 orrs r2,r3
 5491 005a 1100     	 movs r1,r2
 5492 005c 7A68     	 ldr r2,[r7,#4]
 5493 005e 8223     	 movs r3,#130
 5494 0060 5B00     	 lsls r3,r3,#1
 5495 0062 D150     	 str r1,[r2,r3]
1567:../Libraries/XMCLib/src/xmc_vadc.c **** 
1568:../Libraries/XMCLib/src/xmc_vadc.c ****     length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 5496              	 .loc 2 1568 26
 5497 0064 7B68     	 ldr r3,[r7,#4]
 5498 0066 1800     	 movs r0,r3
 5499 0068 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 5500 006c 0300     	 movs r3,r0
 5501 006e 7B61     	 str r3,[r7,#20]
1569:../Libraries/XMCLib/src/xmc_vadc.c **** 
1570:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Loop until a reduction in queue length is assessed */
1571:../Libraries/XMCLib/src/xmc_vadc.c ****     while(length_after_abort == length_before_abort)
 5502              	 .loc 2 1571 10
 5503 0070 05E0     	 b .L225
 5504              	.L226:
1572:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1573:../Libraries/XMCLib/src/xmc_vadc.c ****       length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 5505              	 .loc 2 1573 28
 5506 0072 7B68     	 ldr r3,[r7,#4]
 5507 0074 1800     	 movs r0,r3
 5508 0076 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 5509 007a 0300     	 movs r3,r0
 5510 007c 7B61     	 str r3,[r7,#20]
 5511              	.L225:
1571:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5512              	 .loc 2 1571 10
 5513 007e 7A69     	 ldr r2,[r7,#20]
 5514 0080 BB68     	 ldr r3,[r7,#8]
 5515 0082 9A42     	 cmp r2,r3
 5516 0084 F5D0     	 beq .L226
 5517              	.L224:
1574:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1575:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1576:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1577:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 5518              	 .loc 2 1577 20
 5519 0086 7B68     	 ldr r3,[r7,#4]
 5520 0088 8422     	 movs r2,#132
 5521 008a 9A58     	 ldr r2,[r3,r2]
 5522              	 .loc 2 1577 34
 5523 008c 0F23     	 movs r3,#15
 5524 008e FB18     	 adds r3,r7,r3
 5525 0090 1B78     	 ldrb r3,[r3]
 5526              	 .loc 2 1577 23
 5527 0092 1B06     	 lsls r3,r3,#24
 5528              	 .loc 2 1577 20
 5529 0094 1A43     	 orrs r2,r3
 5530 0096 7B68     	 ldr r3,[r7,#4]
 5531 0098 8421     	 movs r1,#132
 5532 009a 5A50     	 str r2,[r3,r1]
1578:../Libraries/XMCLib/src/xmc_vadc.c ****   
1579:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1580:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1581:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 5533              	 .loc 2 1581 69
 5534 009c 3B69     	 ldr r3,[r7,#16]
 5535 009e 054A     	 ldr r2,.L227
 5536 00a0 1A43     	 orrs r2,r3
 5537 00a2 1100     	 movs r1,r2
1580:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 5538              	 .loc 2 1580 21
 5539 00a4 7A68     	 ldr r2,[r7,#4]
 5540 00a6 8023     	 movs r3,#128
 5541 00a8 5B00     	 lsls r3,r3,#1
 5542 00aa D150     	 str r1,[r2,r3]
1582:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5543              	 .loc 2 1582 1
 5544 00ac C046     	 nop
 5545 00ae BD46     	 mov sp,r7
 5546 00b0 06B0     	 add sp,sp,#24
 5547              	 
 5548 00b2 80BD     	 pop {r7,pc}
 5549              	.L228:
 5550              	 .align 2
 5551              	.L227:
 5552 00b4 00808080 	 .word -2139062272
 5553              	 .cfi_endproc
 5554              	.LFE204:
 5556              	 .section .text.XMC_VADC_GROUP_QueueGetNextChannel,"ax",%progbits
 5557              	 .align 1
 5558              	 .global XMC_VADC_GROUP_QueueGetNextChannel
 5559              	 .syntax unified
 5560              	 .code 16
 5561              	 .thumb_func
 5562              	 .fpu softvfp
 5564              	XMC_VADC_GROUP_QueueGetNextChannel:
 5565              	.LFB205:
1583:../Libraries/XMCLib/src/xmc_vadc.c **** 
1584:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get details of channel meant to be converted right after the ongoing conversion */
1585:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr)
1586:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5566              	 .loc 2 1586 1
 5567              	 .cfi_startproc
 5568              	 
 5569              	 
 5570 0000 80B5     	 push {r7,lr}
 5571              	.LCFI196:
 5572              	 .cfi_def_cfa_offset 8
 5573              	 .cfi_offset 7,-8
 5574              	 .cfi_offset 14,-4
 5575 0002 84B0     	 sub sp,sp,#16
 5576              	.LCFI197:
 5577              	 .cfi_def_cfa_offset 24
 5578 0004 00AF     	 add r7,sp,#0
 5579              	.LCFI198:
 5580              	 .cfi_def_cfa_register 7
 5581 0006 7860     	 str r0,[r7,#4]
1587:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1588:../Libraries/XMCLib/src/xmc_vadc.c **** 
1589:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetNextChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1590:../Libraries/XMCLib/src/xmc_vadc.c ****   
1591:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1592:../Libraries/XMCLib/src/xmc_vadc.c ****    * Check if there is something in the backup stage. If not, read queue-0
1593:../Libraries/XMCLib/src/xmc_vadc.c ****    * entry.
1594:../Libraries/XMCLib/src/xmc_vadc.c ****    */
1595:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 5582              	 .loc 2 1595 18
 5583 0008 7A68     	 ldr r2,[r7,#4]
 5584 000a 8823     	 movs r3,#136
 5585 000c 5B00     	 lsls r3,r3,#1
 5586 000e D258     	 ldr r2,[r2,r3]
 5587              	 .loc 2 1595 27
 5588 0010 8023     	 movs r3,#128
 5589 0012 5B00     	 lsls r3,r3,#1
 5590 0014 1340     	 ands r3,r2
 5591              	 .loc 2 1595 6
 5592 0016 08D0     	 beq .L230
1596:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1597:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 5593              	 .loc 2 1597 33
 5594 0018 7A68     	 ldr r2,[r7,#4]
 5595 001a 8823     	 movs r3,#136
 5596 001c 5B00     	 lsls r3,r3,#1
 5597 001e D358     	 ldr r3,[r2,r3]
 5598              	 .loc 2 1597 41
 5599 0020 1A00     	 movs r2,r3
 5600              	 .loc 2 1597 12
 5601 0022 1F23     	 movs r3,#31
 5602 0024 1340     	 ands r3,r2
 5603 0026 FB60     	 str r3,[r7,#12]
 5604 0028 13E0     	 b .L231
 5605              	.L230:
1598:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1599:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( (group_ptr->Q0R0) & (uint32_t)VADC_G_Q0R0_V_Msk)
 5606              	 .loc 2 1599 23
 5607 002a 7A68     	 ldr r2,[r7,#4]
 5608 002c 8623     	 movs r3,#134
 5609 002e 5B00     	 lsls r3,r3,#1
 5610 0030 D258     	 ldr r2,[r2,r3]
 5611              	 .loc 2 1599 31
 5612 0032 8023     	 movs r3,#128
 5613 0034 5B00     	 lsls r3,r3,#1
 5614 0036 1340     	 ands r3,r2
 5615              	 .loc 2 1599 11
 5616 0038 08D0     	 beq .L232
1600:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1601:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->Q0R0 & (uint32_t)VADC_G_Q0R0_REQCHNR_Msk);
 5617              	 .loc 2 1601 33
 5618 003a 7A68     	 ldr r2,[r7,#4]
 5619 003c 8623     	 movs r3,#134
 5620 003e 5B00     	 lsls r3,r3,#1
 5621 0040 D358     	 ldr r3,[r2,r3]
 5622              	 .loc 2 1601 40
 5623 0042 1A00     	 movs r2,r3
 5624              	 .loc 2 1601 12
 5625 0044 1F23     	 movs r3,#31
 5626 0046 1340     	 ands r3,r2
 5627 0048 FB60     	 str r3,[r7,#12]
 5628 004a 02E0     	 b .L231
 5629              	.L232:
1602:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1603:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1604:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1605:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Nothing is pending */
1606:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 5630              	 .loc 2 1606 12
 5631 004c 0123     	 movs r3,#1
 5632 004e 5B42     	 rsbs r3,r3,#0
 5633 0050 FB60     	 str r3,[r7,#12]
 5634              	.L231:
1607:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1608:../Libraries/XMCLib/src/xmc_vadc.c **** 
1609:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 5635              	 .loc 2 1609 10
 5636 0052 FB68     	 ldr r3,[r7,#12]
1610:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5637              	 .loc 2 1610 1
 5638 0054 1800     	 movs r0,r3
 5639 0056 BD46     	 mov sp,r7
 5640 0058 04B0     	 add sp,sp,#16
 5641              	 
 5642 005a 80BD     	 pop {r7,pc}
 5643              	 .cfi_endproc
 5644              	.LFE205:
 5646              	 .section .text.XMC_VADC_GROUP_QueueGetInterruptedChannel,"ax",%progbits
 5647              	 .align 1
 5648              	 .global XMC_VADC_GROUP_QueueGetInterruptedChannel
 5649              	 .syntax unified
 5650              	 .code 16
 5651              	 .thumb_func
 5652              	 .fpu softvfp
 5654              	XMC_VADC_GROUP_QueueGetInterruptedChannel:
 5655              	.LFB206:
1611:../Libraries/XMCLib/src/xmc_vadc.c **** 
1612:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get the channel number of the channel whose conversion had been interrupted */
1613:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr)
1614:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5656              	 .loc 2 1614 1
 5657              	 .cfi_startproc
 5658              	 
 5659              	 
 5660 0000 80B5     	 push {r7,lr}
 5661              	.LCFI199:
 5662              	 .cfi_def_cfa_offset 8
 5663              	 .cfi_offset 7,-8
 5664              	 .cfi_offset 14,-4
 5665 0002 84B0     	 sub sp,sp,#16
 5666              	.LCFI200:
 5667              	 .cfi_def_cfa_offset 24
 5668 0004 00AF     	 add r7,sp,#0
 5669              	.LCFI201:
 5670              	 .cfi_def_cfa_register 7
 5671 0006 7860     	 str r0,[r7,#4]
1615:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1616:../Libraries/XMCLib/src/xmc_vadc.c **** 
1617:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetInterruptedChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1618:../Libraries/XMCLib/src/xmc_vadc.c ****   
1619:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 5672              	 .loc 2 1619 17
 5673 0008 7A68     	 ldr r2,[r7,#4]
 5674 000a 8823     	 movs r3,#136
 5675 000c 5B00     	 lsls r3,r3,#1
 5676 000e D258     	 ldr r2,[r2,r3]
 5677              	 .loc 2 1619 26
 5678 0010 8023     	 movs r3,#128
 5679 0012 5B00     	 lsls r3,r3,#1
 5680 0014 1340     	 ands r3,r2
 5681              	 .loc 2 1619 6
 5682 0016 08D0     	 beq .L235
1620:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1621:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 5683              	 .loc 2 1621 33
 5684 0018 7A68     	 ldr r2,[r7,#4]
 5685 001a 8823     	 movs r3,#136
 5686 001c 5B00     	 lsls r3,r3,#1
 5687 001e D358     	 ldr r3,[r2,r3]
 5688              	 .loc 2 1621 41
 5689 0020 1A00     	 movs r2,r3
 5690              	 .loc 2 1621 12
 5691 0022 1F23     	 movs r3,#31
 5692 0024 1340     	 ands r3,r2
 5693 0026 FB60     	 str r3,[r7,#12]
 5694 0028 02E0     	 b .L236
 5695              	.L235:
1622:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1623:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1624:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1625:../Libraries/XMCLib/src/xmc_vadc.c ****     /* No such channel */
1626:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 5696              	 .loc 2 1626 12
 5697 002a 0123     	 movs r3,#1
 5698 002c 5B42     	 rsbs r3,r3,#0
 5699 002e FB60     	 str r3,[r7,#12]
 5700              	.L236:
1627:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1628:../Libraries/XMCLib/src/xmc_vadc.c **** 
1629:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 5701              	 .loc 2 1629 10
 5702 0030 FB68     	 ldr r3,[r7,#12]
1630:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5703              	 .loc 2 1630 1
 5704 0032 1800     	 movs r0,r3
 5705 0034 BD46     	 mov sp,r7
 5706 0036 04B0     	 add sp,sp,#16
 5707              	 
 5708 0038 80BD     	 pop {r7,pc}
 5709              	 .cfi_endproc
 5710              	.LFE206:
 5712              	 .section .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode,"ax",%progbits
 5713              	 .align 1
 5714              	 .global XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
 5715              	 .syntax unified
 5716              	 .code 16
 5717              	 .thumb_func
 5718              	 .fpu softvfp
 5720              	XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:
 5721              	.LFB207:
1631:../Libraries/XMCLib/src/xmc_vadc.c **** 
1632:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a Service Request line for the request source event */
1633:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
1634:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5722              	 .loc 2 1634 1
 5723              	 .cfi_startproc
 5724              	 
 5725              	 
 5726 0000 80B5     	 push {r7,lr}
 5727              	.LCFI202:
 5728              	 .cfi_def_cfa_offset 8
 5729              	 .cfi_offset 7,-8
 5730              	 .cfi_offset 14,-4
 5731 0002 84B0     	 sub sp,sp,#16
 5732              	.LCFI203:
 5733              	 .cfi_def_cfa_offset 24
 5734 0004 00AF     	 add r7,sp,#0
 5735              	.LCFI204:
 5736              	 .cfi_def_cfa_register 7
 5737 0006 7860     	 str r0,[r7,#4]
 5738 0008 0A00     	 movs r2,r1
 5739 000a FB1C     	 adds r3,r7,#3
 5740 000c 1A70     	 strb r2,[r3]
1635:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1636:../Libraries/XMCLib/src/xmc_vadc.c **** 
1637:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_
1638:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC
1639:../Libraries/XMCLib/src/xmc_vadc.c **** 
1640:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 5741              	 .loc 2 1640 9
 5742 000e 7A68     	 ldr r2,[r7,#4]
 5743 0010 E023     	 movs r3,#224
 5744 0012 5B00     	 lsls r3,r3,#1
 5745 0014 D358     	 ldr r3,[r2,r3]
 5746 0016 FB60     	 str r3,[r7,#12]
1641:../Libraries/XMCLib/src/xmc_vadc.c **** 
1642:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 5747              	 .loc 2 1642 9
 5748 0018 FB68     	 ldr r3,[r7,#12]
 5749 001a 0F22     	 movs r2,#15
 5750 001c 9343     	 bics r3,r2
 5751 001e FB60     	 str r3,[r7,#12]
1643:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 5752              	 .loc 2 1643 12
 5753 0020 FB1C     	 adds r3,r7,#3
 5754 0022 1B78     	 ldrb r3,[r3]
 5755              	 .loc 2 1643 9
 5756 0024 FA68     	 ldr r2,[r7,#12]
 5757 0026 1343     	 orrs r3,r2
 5758 0028 FB60     	 str r3,[r7,#12]
1644:../Libraries/XMCLib/src/xmc_vadc.c **** 
1645:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 5759              	 .loc 2 1645 20
 5760 002a 7A68     	 ldr r2,[r7,#4]
 5761 002c E023     	 movs r3,#224
 5762 002e 5B00     	 lsls r3,r3,#1
 5763 0030 F968     	 ldr r1,[r7,#12]
 5764 0032 D150     	 str r1,[r2,r3]
1646:../Libraries/XMCLib/src/xmc_vadc.c **** 
1647:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5765              	 .loc 2 1647 1
 5766 0034 C046     	 nop
 5767 0036 BD46     	 mov sp,r7
 5768 0038 04B0     	 add sp,sp,#16
 5769              	 
 5770 003a 80BD     	 pop {r7,pc}
 5771              	 .cfi_endproc
 5772              	.LFE207:
 5774              	 .section .text.XMC_VADC_GROUP_ChannelInit,"ax",%progbits
 5775              	 .align 1
 5776              	 .global XMC_VADC_GROUP_ChannelInit
 5777              	 .syntax unified
 5778              	 .code 16
 5779              	 .thumb_func
 5780              	 .fpu softvfp
 5782              	XMC_VADC_GROUP_ChannelInit:
 5783              	.LFB208:
1648:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1649:../Libraries/XMCLib/src/xmc_vadc.c **** 
1650:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1651:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize a channel unit */
1652:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
1653:../Libraries/XMCLib/src/xmc_vadc.c ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config)
1654:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5784              	 .loc 2 1654 1
 5785              	 .cfi_startproc
 5786              	 
 5787              	 
 5788 0000 80B5     	 push {r7,lr}
 5789              	.LCFI205:
 5790              	 .cfi_def_cfa_offset 8
 5791              	 .cfi_offset 7,-8
 5792              	 .cfi_offset 14,-4
 5793 0002 88B0     	 sub sp,sp,#32
 5794              	.LCFI206:
 5795              	 .cfi_def_cfa_offset 40
 5796 0004 00AF     	 add r7,sp,#0
 5797              	.LCFI207:
 5798              	 .cfi_def_cfa_register 7
 5799 0006 F860     	 str r0,[r7,#12]
 5800 0008 B960     	 str r1,[r7,#8]
 5801 000a 7A60     	 str r2,[r7,#4]
1655:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t prio;
1656:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_assign;
1657:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1658:../Libraries/XMCLib/src/xmc_vadc.c **** 
1659:../Libraries/XMCLib/src/xmc_vadc.c **** 
1660:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1661:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_P
1662:../Libraries/XMCLib/src/xmc_vadc.c ****   
1663:../Libraries/XMCLib/src/xmc_vadc.c ****   prio  = (uint32_t)config->channel_priority;
 5802              	 .loc 2 1663 27
 5803 000c 7B68     	 ldr r3,[r7,#4]
 5804 000e 1B7B     	 ldrb r3,[r3,#12]
 5805              	 .loc 2 1663 9
 5806 0010 BB61     	 str r3,[r7,#24]
1664:../Libraries/XMCLib/src/xmc_vadc.c **** 
1665:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Priority channel */
1666:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign  = group_ptr->CHASS;
 5807              	 .loc 2 1666 14
 5808 0012 FB68     	 ldr r3,[r7,#12]
 5809 0014 8822     	 movs r2,#136
 5810 0016 9B58     	 ldr r3,[r3,r2]
 5811 0018 7B61     	 str r3,[r7,#20]
1667:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 5812              	 .loc 2 1667 18
 5813 001a 0122     	 movs r2,#1
 5814 001c BB68     	 ldr r3,[r7,#8]
 5815 001e 9A40     	 lsls r2,r2,r3
 5816 0020 1300     	 movs r3,r2
 5817              	 .loc 2 1667 16
 5818 0022 DA43     	 mvns r2,r3
 5819              	 .loc 2 1667 13
 5820 0024 7B69     	 ldr r3,[r7,#20]
 5821 0026 1340     	 ands r3,r2
 5822 0028 7B61     	 str r3,[r7,#20]
1668:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign |= (uint32_t)(prio << ch_num);
 5823              	 .loc 2 1668 32
 5824 002a BA69     	 ldr r2,[r7,#24]
 5825 002c BB68     	 ldr r3,[r7,#8]
 5826 002e 9A40     	 lsls r2,r2,r3
 5827 0030 1300     	 movs r3,r2
 5828              	 .loc 2 1668 13
 5829 0032 7A69     	 ldr r2,[r7,#20]
 5830 0034 1343     	 orrs r3,r2
 5831 0036 7B61     	 str r3,[r7,#20]
1669:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHASS = ch_assign;
 5832              	 .loc 2 1669 20
 5833 0038 FB68     	 ldr r3,[r7,#12]
 5834 003a 8821     	 movs r1,#136
 5835 003c 7A69     	 ldr r2,[r7,#20]
 5836 003e 5A50     	 str r2,[r3,r1]
1670:../Libraries/XMCLib/src/xmc_vadc.c **** 
1671:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Alias channel */
1672:../Libraries/XMCLib/src/xmc_vadc.c ****   if (config->alias_channel >= (int32_t)0)
 5837              	 .loc 2 1672 13
 5838 0040 7B68     	 ldr r3,[r7,#4]
 5839 0042 5B7B     	 ldrb r3,[r3,#13]
 5840 0044 5BB2     	 sxtb r3,r3
 5841              	 .loc 2 1672 6
 5842 0046 002B     	 cmp r3,#0
 5843 0048 2BDB     	 blt .L240
1673:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1674:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)0;
 5844              	 .loc 2 1674 10
 5845 004a 0023     	 movs r3,#0
 5846 004c FB61     	 str r3,[r7,#28]
1675:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint32_t)1 == ch_num)
 5847              	 .loc 2 1675 8
 5848 004e BB68     	 ldr r3,[r7,#8]
 5849 0050 012B     	 cmp r3,#1
 5850 0052 0AD1     	 bne .L241
1676:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1677:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS1_Pos;
 5851              	 .loc 2 1677 12
 5852 0054 0823     	 movs r3,#8
 5853 0056 FB61     	 str r3,[r7,#28]
1678:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 5854              	 .loc 2 1678 24
 5855 0058 FB68     	 ldr r3,[r7,#12]
 5856 005a B022     	 movs r2,#176
 5857 005c 9B58     	 ldr r3,[r3,r2]
 5858 005e 1F4A     	 ldr r2,.L243
 5859 0060 1A40     	 ands r2,r3
 5860 0062 FB68     	 ldr r3,[r7,#12]
 5861 0064 B021     	 movs r1,#176
 5862 0066 5A50     	 str r2,[r3,r1]
 5863 0068 0DE0     	 b .L242
 5864              	.L241:
1679:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1680:../Libraries/XMCLib/src/xmc_vadc.c ****     else if ((uint32_t)0 == ch_num)
 5865              	 .loc 2 1680 13
 5866 006a BB68     	 ldr r3,[r7,#8]
 5867 006c 002B     	 cmp r3,#0
 5868 006e 0AD1     	 bne .L242
1681:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1682:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS0_Pos;
 5869              	 .loc 2 1682 12
 5870 0070 0023     	 movs r3,#0
 5871 0072 FB61     	 str r3,[r7,#28]
1683:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 5872              	 .loc 2 1683 24
 5873 0074 FB68     	 ldr r3,[r7,#12]
 5874 0076 B022     	 movs r2,#176
 5875 0078 9B58     	 ldr r3,[r3,r2]
 5876 007a 1F22     	 movs r2,#31
 5877 007c 9343     	 bics r3,r2
 5878 007e 1A00     	 movs r2,r3
 5879 0080 FB68     	 ldr r3,[r7,#12]
 5880 0082 B021     	 movs r1,#176
 5881 0084 5A50     	 str r2,[r3,r1]
 5882              	.L242:
1684:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1685:../Libraries/XMCLib/src/xmc_vadc.c **** 
1686:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 5883              	 .loc 2 1686 22
 5884 0086 FB68     	 ldr r3,[r7,#12]
 5885 0088 B022     	 movs r2,#176
 5886 008a 9B58     	 ldr r3,[r3,r2]
 5887              	 .loc 2 1686 42
 5888 008c 7A68     	 ldr r2,[r7,#4]
 5889 008e 527B     	 ldrb r2,[r2,#13]
 5890 0090 52B2     	 sxtb r2,r2
 5891 0092 1100     	 movs r1,r2
 5892              	 .loc 2 1686 58
 5893 0094 FA69     	 ldr r2,[r7,#28]
 5894 0096 9140     	 lsls r1,r1,r2
 5895 0098 0A00     	 movs r2,r1
 5896              	 .loc 2 1686 22
 5897 009a 1A43     	 orrs r2,r3
 5898 009c FB68     	 ldr r3,[r7,#12]
 5899 009e B021     	 movs r1,#176
 5900 00a0 5A50     	 str r2,[r3,r1]
 5901              	.L240:
1687:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1688:../Libraries/XMCLib/src/xmc_vadc.c **** 
1689:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFL |= config->bfl;
 5902              	 .loc 2 1689 18
 5903 00a2 FB68     	 ldr r3,[r7,#12]
 5904 00a4 C822     	 movs r2,#200
 5905 00a6 9A58     	 ldr r2,[r3,r2]
 5906              	 .loc 2 1689 27
 5907 00a8 7B68     	 ldr r3,[r7,#4]
 5908 00aa 5B68     	 ldr r3,[r3,#4]
 5909              	 .loc 2 1689 18
 5910 00ac 1A43     	 orrs r2,r3
 5911 00ae FB68     	 ldr r3,[r7,#12]
 5912 00b0 C821     	 movs r1,#200
 5913 00b2 5A50     	 str r2,[r3,r1]
1690:../Libraries/XMCLib/src/xmc_vadc.c **** 
1691:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
1692:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLC |= config->bflc;
 5914              	 .loc 2 1692 19
 5915 00b4 FB68     	 ldr r3,[r7,#12]
 5916 00b6 D022     	 movs r2,#208
 5917 00b8 9A58     	 ldr r2,[r3,r2]
 5918              	 .loc 2 1692 28
 5919 00ba 7B68     	 ldr r3,[r7,#4]
 5920 00bc 9B68     	 ldr r3,[r3,#8]
 5921              	 .loc 2 1692 19
 5922 00be 1A43     	 orrs r2,r3
 5923 00c0 FB68     	 ldr r3,[r7,#12]
 5924 00c2 D021     	 movs r1,#208
 5925 00c4 5A50     	 str r2,[r3,r1]
1693:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1694:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the CHCTR register */
1695:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = config->chctr;
 5926              	 .loc 2 1695 36
 5927 00c6 7B68     	 ldr r3,[r7,#4]
 5928 00c8 1968     	 ldr r1,[r3]
 5929              	 .loc 2 1695 28
 5930 00ca FB68     	 ldr r3,[r7,#12]
 5931 00cc BA68     	 ldr r2,[r7,#8]
 5932 00ce 8032     	 adds r2,r2,#128
 5933 00d0 9200     	 lsls r2,r2,#2
 5934 00d2 D150     	 str r1,[r2,r3]
1696:../Libraries/XMCLib/src/xmc_vadc.c **** 
1697:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5935              	 .loc 2 1697 1
 5936 00d4 C046     	 nop
 5937 00d6 BD46     	 mov sp,r7
 5938 00d8 08B0     	 add sp,sp,#32
 5939              	 
 5940 00da 80BD     	 pop {r7,pc}
 5941              	.L244:
 5942              	 .align 2
 5943              	.L243:
 5944 00dc FFE0FFFF 	 .word -7937
 5945              	 .cfi_endproc
 5946              	.LFE208:
 5948              	 .section .text.XMC_VADC_GROUP_SetChannelAlias,"ax",%progbits
 5949              	 .align 1
 5950              	 .global XMC_VADC_GROUP_SetChannelAlias
 5951              	 .syntax unified
 5952              	 .code 16
 5953              	 .thumb_func
 5954              	 .fpu softvfp
 5956              	XMC_VADC_GROUP_SetChannelAlias:
 5957              	.LFB209:
1698:../Libraries/XMCLib/src/xmc_vadc.c **** 
1699:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an alias channel for channels numbered 2 through 7 */
1700:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
1701:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t src_ch_num,
1702:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t alias_ch_num)
1703:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5958              	 .loc 2 1703 1
 5959              	 .cfi_startproc
 5960              	 
 5961              	 
 5962 0000 80B5     	 push {r7,lr}
 5963              	.LCFI208:
 5964              	 .cfi_def_cfa_offset 8
 5965              	 .cfi_offset 7,-8
 5966              	 .cfi_offset 14,-4
 5967 0002 88B0     	 sub sp,sp,#32
 5968              	.LCFI209:
 5969              	 .cfi_def_cfa_offset 40
 5970 0004 00AF     	 add r7,sp,#0
 5971              	.LCFI210:
 5972              	 .cfi_def_cfa_register 7
 5973 0006 F860     	 str r0,[r7,#12]
 5974 0008 B960     	 str r1,[r7,#8]
 5975 000a 7A60     	 str r2,[r7,#4]
1704:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t alias;
1705:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1706:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
1707:../Libraries/XMCLib/src/xmc_vadc.c **** 
1708:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1709:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Alias Channel", ((alias_ch_num == 0)|| (alias_ch
1710:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Aliased Channel", ((src_ch_num < 8U)))
1711:../Libraries/XMCLib/src/xmc_vadc.c **** 
1712:../Libraries/XMCLib/src/xmc_vadc.c ****   alias = group_ptr->ALIAS;
 5976              	 .loc 2 1712 9
 5977 000c FB68     	 ldr r3,[r7,#12]
 5978 000e B022     	 movs r2,#176
 5979 0010 9B58     	 ldr r3,[r3,r2]
 5980 0012 7B61     	 str r3,[r7,#20]
1713:../Libraries/XMCLib/src/xmc_vadc.c **** 
1714:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == alias_ch_num)
 5981              	 .loc 2 1714 6
 5982 0014 7B68     	 ldr r3,[r7,#4]
 5983 0016 002B     	 cmp r3,#0
 5984 0018 04D1     	 bne .L246
1715:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1716:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS0_Msk;
 5985              	 .loc 2 1716 10
 5986 001a 1F23     	 movs r3,#31
 5987 001c FB61     	 str r3,[r7,#28]
1717:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS0_Pos;
 5988              	 .loc 2 1717 10
 5989 001e 0023     	 movs r3,#0
 5990 0020 BB61     	 str r3,[r7,#24]
 5991 0022 04E0     	 b .L247
 5992              	.L246:
1718:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1719:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1720:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1721:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS1_Msk;
 5993              	 .loc 2 1721 10
 5994 0024 F823     	 movs r3,#248
 5995 0026 5B01     	 lsls r3,r3,#5
 5996 0028 FB61     	 str r3,[r7,#28]
1722:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS1_Pos;
 5997              	 .loc 2 1722 10
 5998 002a 0823     	 movs r3,#8
 5999 002c BB61     	 str r3,[r7,#24]
 6000              	.L247:
1723:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1724:../Libraries/XMCLib/src/xmc_vadc.c ****   alias &= ~mask;
 6001              	 .loc 2 1724 12
 6002 002e FB69     	 ldr r3,[r7,#28]
 6003 0030 DA43     	 mvns r2,r3
 6004              	 .loc 2 1724 9
 6005 0032 7B69     	 ldr r3,[r7,#20]
 6006 0034 1340     	 ands r3,r2
 6007 0036 7B61     	 str r3,[r7,#20]
1725:../Libraries/XMCLib/src/xmc_vadc.c ****   alias |= (uint32_t)(src_ch_num << pos);
 6008              	 .loc 2 1725 34
 6009 0038 BA68     	 ldr r2,[r7,#8]
 6010 003a BB69     	 ldr r3,[r7,#24]
 6011 003c 9A40     	 lsls r2,r2,r3
 6012 003e 1300     	 movs r3,r2
 6013              	 .loc 2 1725 9
 6014 0040 7A69     	 ldr r2,[r7,#20]
 6015 0042 1343     	 orrs r3,r2
 6016 0044 7B61     	 str r3,[r7,#20]
1726:../Libraries/XMCLib/src/xmc_vadc.c **** 
1727:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ALIAS = alias;
 6017              	 .loc 2 1727 20
 6018 0046 FB68     	 ldr r3,[r7,#12]
 6019 0048 B021     	 movs r1,#176
 6020 004a 7A69     	 ldr r2,[r7,#20]
 6021 004c 5A50     	 str r2,[r3,r1]
1728:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6022              	 .loc 2 1728 1
 6023 004e C046     	 nop
 6024 0050 BD46     	 mov sp,r7
 6025 0052 08B0     	 add sp,sp,#32
 6026              	 
 6027 0054 80BD     	 pop {r7,pc}
 6028              	 .cfi_endproc
 6029              	.LFE209:
 6031              	 .section .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds,"ax",%progbits
 6032              	 .align 1
 6033              	 .global XMC_VADC_GROUP_ChannelIsResultOutOfBounds
 6034              	 .syntax unified
 6035              	 .code 16
 6036              	 .thumb_func
 6037              	 .fpu softvfp
 6039              	XMC_VADC_GROUP_ChannelIsResultOutOfBounds:
 6040              	.LFB210:
1729:../Libraries/XMCLib/src/xmc_vadc.c **** 
1730:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine whether input to a channel has violated boundary conditions */
1731:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
1732:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6041              	 .loc 2 1732 1
 6042              	 .cfi_startproc
 6043              	 
 6044              	 
 6045 0000 80B5     	 push {r7,lr}
 6046              	.LCFI211:
 6047              	 .cfi_def_cfa_offset 8
 6048              	 .cfi_offset 7,-8
 6049              	 .cfi_offset 14,-4
 6050 0002 86B0     	 sub sp,sp,#24
 6051              	.LCFI212:
 6052              	 .cfi_def_cfa_offset 32
 6053 0004 00AF     	 add r7,sp,#0
 6054              	.LCFI213:
 6055              	 .cfi_def_cfa_register 7
 6056 0006 7860     	 str r0,[r7,#4]
 6057 0008 3960     	 str r1,[r7]
1733:../Libraries/XMCLib/src/xmc_vadc.c ****   bool retval;
1734:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    chctr;
1735:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    ceflag;
1736:../Libraries/XMCLib/src/xmc_vadc.c **** 
1737:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1738:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Channel Number",
1739:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1740:../Libraries/XMCLib/src/xmc_vadc.c **** 
1741:../Libraries/XMCLib/src/xmc_vadc.c ****   retval = (bool)false;
 6058              	 .loc 2 1741 10
 6059 000a 1723     	 movs r3,#23
 6060 000c FB18     	 adds r3,r7,r3
 6061 000e 0022     	 movs r2,#0
 6062 0010 1A70     	 strb r2,[r3]
1742:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1743:../Libraries/XMCLib/src/xmc_vadc.c ****     Check if the Channel event is configured to be generated in the event of
1744:../Libraries/XMCLib/src/xmc_vadc.c ****     boundary violation and if affirmative, check if the channel event is set.
1745:../Libraries/XMCLib/src/xmc_vadc.c ****   */
1746:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CHEVMODE for requested channel */
1747:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 6063              	 .loc 2 1747 10
 6064 0012 7B68     	 ldr r3,[r7,#4]
 6065 0014 3A68     	 ldr r2,[r7]
 6066 0016 8032     	 adds r2,r2,#128
 6067 0018 9200     	 lsls r2,r2,#2
 6068 001a D358     	 ldr r3,[r2,r3]
 6069 001c 3B61     	 str r3,[r7,#16]
1748:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
 6070              	 .loc 2 1748 29
 6071 001e 3B69     	 ldr r3,[r7,#16]
 6072 0020 1B0A     	 lsrs r3,r3,#8
 6073              	 .loc 2 1748 10
 6074 0022 0322     	 movs r2,#3
 6075 0024 1340     	 ands r3,r2
 6076 0026 3B61     	 str r3,[r7,#16]
1749:../Libraries/XMCLib/src/xmc_vadc.c **** 
1750:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CEFLAG for the requested channel */
1751:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = group_ptr->CEFLAG;
 6077              	 .loc 2 1751 10
 6078 0028 7A68     	 ldr r2,[r7,#4]
 6079 002a C023     	 movs r3,#192
 6080 002c 5B00     	 lsls r3,r3,#1
 6081 002e D358     	 ldr r3,[r2,r3]
 6082 0030 FB60     	 str r3,[r7,#12]
1752:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
 6083              	 .loc 2 1752 22
 6084 0032 0122     	 movs r2,#1
 6085 0034 3B68     	 ldr r3,[r7]
 6086 0036 9A40     	 lsls r2,r2,r3
 6087              	 .loc 2 1752 10
 6088 0038 FB68     	 ldr r3,[r7,#12]
 6089 003a 1340     	 ands r3,r2
 6090 003c FB60     	 str r3,[r7,#12]
1753:../Libraries/XMCLib/src/xmc_vadc.c **** 
1754:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Check what was the channel event generation criteria */
1755:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (( (uint32_t)XMC_VADC_CHANNEL_EVGEN_INBOUND == chctr) \
 6091              	 .loc 2 1755 6
 6092 003e 3B69     	 ldr r3,[r7,#16]
 6093 0040 012B     	 cmp r3,#1
 6094 0042 02D0     	 beq .L249
1756:../Libraries/XMCLib/src/xmc_vadc.c ****       || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 6095              	 .loc 2 1756 7
 6096 0044 3B69     	 ldr r3,[r7,#16]
 6097 0046 022B     	 cmp r3,#2
 6098 0048 06D1     	 bne .L250
 6099              	.L249:
 6100              	 .loc 2 1756 65 discriminator 1
 6101 004a FB68     	 ldr r3,[r7,#12]
 6102 004c 002B     	 cmp r3,#0
 6103 004e 03D0     	 beq .L250
1757:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1758:../Libraries/XMCLib/src/xmc_vadc.c ****     retval = (bool)true;
 6104              	 .loc 2 1758 12
 6105 0050 1723     	 movs r3,#23
 6106 0052 FB18     	 adds r3,r7,r3
 6107 0054 0122     	 movs r2,#1
 6108 0056 1A70     	 strb r2,[r3]
 6109              	.L250:
1759:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1760:../Libraries/XMCLib/src/xmc_vadc.c **** 
1761:../Libraries/XMCLib/src/xmc_vadc.c ****   return retval;
 6110              	 .loc 2 1761 10
 6111 0058 1723     	 movs r3,#23
 6112 005a FB18     	 adds r3,r7,r3
 6113 005c 1B78     	 ldrb r3,[r3]
1762:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6114              	 .loc 2 1762 1
 6115 005e 1800     	 movs r0,r3
 6116 0060 BD46     	 mov sp,r7
 6117 0062 06B0     	 add sp,sp,#24
 6118              	 
 6119 0064 80BD     	 pop {r7,pc}
 6120              	 .cfi_endproc
 6121              	.LFE210:
 6123              	 .section .text.XMC_VADC_GROUP_ChannelSetInputReference,"ax",%progbits
 6124              	 .align 1
 6125              	 .global XMC_VADC_GROUP_ChannelSetInputReference
 6126              	 .syntax unified
 6127              	 .code 16
 6128              	 .thumb_func
 6129              	 .fpu softvfp
 6131              	XMC_VADC_GROUP_ChannelSetInputReference:
 6132              	.LFB211:
1763:../Libraries/XMCLib/src/xmc_vadc.c **** 
1764:../Libraries/XMCLib/src/xmc_vadc.c **** /* Set a reference voltage for conversion */
1765:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
1766:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1767:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const XMC_VADC_CHANNEL_REF_t ref)
1768:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6133              	 .loc 2 1768 1
 6134              	 .cfi_startproc
 6135              	 
 6136              	 
 6137 0000 80B5     	 push {r7,lr}
 6138              	.LCFI214:
 6139              	 .cfi_def_cfa_offset 8
 6140              	 .cfi_offset 7,-8
 6141              	 .cfi_offset 14,-4
 6142 0002 86B0     	 sub sp,sp,#24
 6143              	.LCFI215:
 6144              	 .cfi_def_cfa_offset 32
 6145 0004 00AF     	 add r7,sp,#0
 6146              	.LCFI216:
 6147              	 .cfi_def_cfa_register 7
 6148 0006 F860     	 str r0,[r7,#12]
 6149 0008 B960     	 str r1,[r7,#8]
 6150 000a FB1D     	 adds r3,r7,#7
 6151 000c 1A70     	 strb r2,[r3]
1769:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1770:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1771:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_N
1772:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref)<= XMC_VADC_C
1773:../Libraries/XMCLib/src/xmc_vadc.c **** 
1774:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 6152              	 .loc 2 1774 9
 6153 000e FB68     	 ldr r3,[r7,#12]
 6154 0010 BA68     	 ldr r2,[r7,#8]
 6155 0012 8032     	 adds r2,r2,#128
 6156 0014 9200     	 lsls r2,r2,#2
 6157 0016 D358     	 ldr r3,[r2,r3]
 6158 0018 7B61     	 str r3,[r7,#20]
1775:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 6159              	 .loc 2 1775 9
 6160 001a 7B69     	 ldr r3,[r7,#20]
 6161 001c 094A     	 ldr r2,.L253
 6162 001e 1340     	 ands r3,r2
 6163 0020 7B61     	 str r3,[r7,#20]
1776:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 6164              	 .loc 2 1776 23
 6165 0022 FB1D     	 adds r3,r7,#7
 6166 0024 1B78     	 ldrb r3,[r3]
 6167              	 .loc 2 1776 12
 6168 0026 DB02     	 lsls r3,r3,#11
 6169              	 .loc 2 1776 9
 6170 0028 7A69     	 ldr r2,[r7,#20]
 6171 002a 1343     	 orrs r3,r2
 6172 002c 7B61     	 str r3,[r7,#20]
1777:../Libraries/XMCLib/src/xmc_vadc.c **** 
1778:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 6173              	 .loc 2 1778 28
 6174 002e FB68     	 ldr r3,[r7,#12]
 6175 0030 BA68     	 ldr r2,[r7,#8]
 6176 0032 8032     	 adds r2,r2,#128
 6177 0034 9200     	 lsls r2,r2,#2
 6178 0036 7969     	 ldr r1,[r7,#20]
 6179 0038 D150     	 str r1,[r2,r3]
1779:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6180              	 .loc 2 1779 1
 6181 003a C046     	 nop
 6182 003c BD46     	 mov sp,r7
 6183 003e 06B0     	 add sp,sp,#24
 6184              	 
 6185 0040 80BD     	 pop {r7,pc}
 6186              	.L254:
 6187 0042 C046     	 .align 2
 6188              	.L253:
 6189 0044 FFF7FFFF 	 .word -2049
 6190              	 .cfi_endproc
 6191              	.LFE211:
 6193              	 .section .text.XMC_VADC_GROUP_ChannelSetResultRegister,"ax",%progbits
 6194              	 .align 1
 6195              	 .global XMC_VADC_GROUP_ChannelSetResultRegister
 6196              	 .syntax unified
 6197              	 .code 16
 6198              	 .thumb_func
 6199              	 .fpu softvfp
 6201              	XMC_VADC_GROUP_ChannelSetResultRegister:
 6202              	.LFB212:
1780:../Libraries/XMCLib/src/xmc_vadc.c **** 
1781:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 16 registers for storing the channel result */
1782:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
1783:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1784:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t result_reg_num)
1785:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6203              	 .loc 2 1785 1
 6204              	 .cfi_startproc
 6205              	 
 6206              	 
 6207 0000 80B5     	 push {r7,lr}
 6208              	.LCFI217:
 6209              	 .cfi_def_cfa_offset 8
 6210              	 .cfi_offset 7,-8
 6211              	 .cfi_offset 14,-4
 6212 0002 86B0     	 sub sp,sp,#24
 6213              	.LCFI218:
 6214              	 .cfi_def_cfa_offset 32
 6215 0004 00AF     	 add r7,sp,#0
 6216              	.LCFI219:
 6217              	 .cfi_def_cfa_register 7
 6218 0006 F860     	 str r0,[r7,#12]
 6219 0008 B960     	 str r1,[r7,#8]
 6220 000a 7A60     	 str r2,[r7,#4]
1786:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1787:../Libraries/XMCLib/src/xmc_vadc.c **** 
1788:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1789:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Channel Number",
1790:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1791:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Result Register",
1792:../Libraries/XMCLib/src/xmc_vadc.c ****              ((result_reg_num) < XMC_VADC_NUM_RESULT_REGISTERS))
1793:../Libraries/XMCLib/src/xmc_vadc.c **** 
1794:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 6221              	 .loc 2 1794 9
 6222 000c FB68     	 ldr r3,[r7,#12]
 6223 000e BA68     	 ldr r2,[r7,#8]
 6224 0010 8032     	 adds r2,r2,#128
 6225 0012 9200     	 lsls r2,r2,#2
 6226 0014 D358     	 ldr r3,[r2,r3]
 6227 0016 7B61     	 str r3,[r7,#20]
1795:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 6228              	 .loc 2 1795 9
 6229 0018 7B69     	 ldr r3,[r7,#20]
 6230 001a 094A     	 ldr r2,.L256
 6231 001c 1340     	 ands r3,r2
 6232 001e 7B61     	 str r3,[r7,#20]
1796:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)(result_reg_num <<  VADC_G_CHCTR_RESREG_Pos);
 6233              	 .loc 2 1796 38
 6234 0020 7B68     	 ldr r3,[r7,#4]
 6235 0022 1B04     	 lsls r3,r3,#16
 6236              	 .loc 2 1796 9
 6237 0024 7A69     	 ldr r2,[r7,#20]
 6238 0026 1343     	 orrs r3,r2
 6239 0028 7B61     	 str r3,[r7,#20]
1797:../Libraries/XMCLib/src/xmc_vadc.c **** 
1798:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 6240              	 .loc 2 1798 28
 6241 002a FB68     	 ldr r3,[r7,#12]
 6242 002c BA68     	 ldr r2,[r7,#8]
 6243 002e 8032     	 adds r2,r2,#128
 6244 0030 9200     	 lsls r2,r2,#2
 6245 0032 7969     	 ldr r1,[r7,#20]
 6246 0034 D150     	 str r1,[r2,r3]
1799:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6247              	 .loc 2 1799 1
 6248 0036 C046     	 nop
 6249 0038 BD46     	 mov sp,r7
 6250 003a 06B0     	 add sp,sp,#24
 6251              	 
 6252 003c 80BD     	 pop {r7,pc}
 6253              	.L257:
 6254 003e C046     	 .align 2
 6255              	.L256:
 6256 0040 FFFFF0FF 	 .word -983041
 6257              	 .cfi_endproc
 6258              	.LFE212:
 6260              	 .section .text.XMC_VADC_GROUP_ChannelSetIclass,"ax",%progbits
 6261              	 .align 1
 6262              	 .global XMC_VADC_GROUP_ChannelSetIclass
 6263              	 .syntax unified
 6264              	 .code 16
 6265              	 .thumb_func
 6266              	 .fpu softvfp
 6268              	XMC_VADC_GROUP_ChannelSetIclass:
 6269              	.LFB213:
1800:../Libraries/XMCLib/src/xmc_vadc.c **** 
1801:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 4 class conversion */
1802:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
1803:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const uint32_t ch_num,
1804:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class)
1805:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6270              	 .loc 2 1805 1
 6271              	 .cfi_startproc
 6272              	 
 6273              	 
 6274 0000 80B5     	 push {r7,lr}
 6275              	.LCFI220:
 6276              	 .cfi_def_cfa_offset 8
 6277              	 .cfi_offset 7,-8
 6278              	 .cfi_offset 14,-4
 6279 0002 86B0     	 sub sp,sp,#24
 6280              	.LCFI221:
 6281              	 .cfi_def_cfa_offset 32
 6282 0004 00AF     	 add r7,sp,#0
 6283              	.LCFI222:
 6284              	 .cfi_def_cfa_register 7
 6285 0006 F860     	 str r0,[r7,#12]
 6286 0008 B960     	 str r1,[r7,#8]
 6287 000a FB1D     	 adds r3,r7,#7
 6288 000c 1A70     	 strb r2,[r3]
1806:../Libraries/XMCLib/src/xmc_vadc.c **** 
1807:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1808:../Libraries/XMCLib/src/xmc_vadc.c **** 
1809:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1810:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Channel Number",
1811:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1812:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong input class ",
1813:../Libraries/XMCLib/src/xmc_vadc.c ****              (XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1 >= conversion_class))
1814:../Libraries/XMCLib/src/xmc_vadc.c **** 
1815:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 6289              	 .loc 2 1815 9
 6290 000e FB68     	 ldr r3,[r7,#12]
 6291 0010 BA68     	 ldr r2,[r7,#8]
 6292 0012 8032     	 adds r2,r2,#128
 6293 0014 9200     	 lsls r2,r2,#2
 6294 0016 D358     	 ldr r3,[r2,r3]
 6295 0018 7B61     	 str r3,[r7,#20]
1816:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 6296              	 .loc 2 1816 9
 6297 001a 7B69     	 ldr r3,[r7,#20]
 6298 001c 0322     	 movs r2,#3
 6299 001e 9343     	 bics r3,r2
 6300 0020 7B61     	 str r3,[r7,#20]
1817:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 6301              	 .loc 2 1817 12
 6302 0022 FB1D     	 adds r3,r7,#7
 6303 0024 1B78     	 ldrb r3,[r3]
 6304              	 .loc 2 1817 9
 6305 0026 7A69     	 ldr r2,[r7,#20]
 6306 0028 1343     	 orrs r3,r2
 6307 002a 7B61     	 str r3,[r7,#20]
1818:../Libraries/XMCLib/src/xmc_vadc.c **** 
1819:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 6308              	 .loc 2 1819 28
 6309 002c FB68     	 ldr r3,[r7,#12]
 6310 002e BA68     	 ldr r2,[r7,#8]
 6311 0030 8032     	 adds r2,r2,#128
 6312 0032 9200     	 lsls r2,r2,#2
 6313 0034 7969     	 ldr r1,[r7,#20]
 6314 0036 D150     	 str r1,[r2,r3]
1820:../Libraries/XMCLib/src/xmc_vadc.c **** 
1821:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6315              	 .loc 2 1821 1
 6316 0038 C046     	 nop
 6317 003a BD46     	 mov sp,r7
 6318 003c 06B0     	 add sp,sp,#24
 6319              	 
 6320 003e 80BD     	 pop {r7,pc}
 6321              	 .cfi_endproc
 6322              	.LFE213:
 6324              	 .section .text.XMC_VADC_GROUP_ChannelGetResultRegister,"ax",%progbits
 6325              	 .align 1
 6326              	 .global XMC_VADC_GROUP_ChannelGetResultRegister
 6327              	 .syntax unified
 6328              	 .code 16
 6329              	 .thumb_func
 6330              	 .fpu softvfp
 6332              	XMC_VADC_GROUP_ChannelGetResultRegister:
 6333              	.LFB214:
1822:../Libraries/XMCLib/src/xmc_vadc.c **** 
1823:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result register bound with specified channel */
1824:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
1825:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6334              	 .loc 2 1825 1
 6335              	 .cfi_startproc
 6336              	 
 6337              	 
 6338 0000 80B5     	 push {r7,lr}
 6339              	.LCFI223:
 6340              	 .cfi_def_cfa_offset 8
 6341              	 .cfi_offset 7,-8
 6342              	 .cfi_offset 14,-4
 6343 0002 84B0     	 sub sp,sp,#16
 6344              	.LCFI224:
 6345              	 .cfi_def_cfa_offset 24
 6346 0004 00AF     	 add r7,sp,#0
 6347              	.LCFI225:
 6348              	 .cfi_def_cfa_register 7
 6349 0006 7860     	 str r0,[r7,#4]
 6350 0008 3960     	 str r1,[r7]
1826:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t resreg;
1827:../Libraries/XMCLib/src/xmc_vadc.c **** 
1828:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1829:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
1830:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1831:../Libraries/XMCLib/src/xmc_vadc.c **** 
1832:../Libraries/XMCLib/src/xmc_vadc.c ****   resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR
 6351              	 .loc 2 1832 39
 6352 000a 7B68     	 ldr r3,[r7,#4]
 6353 000c 3A68     	 ldr r2,[r7]
 6354 000e 8032     	 adds r2,r2,#128
 6355 0010 9200     	 lsls r2,r2,#2
 6356 0012 D358     	 ldr r3,[r2,r3]
 6357              	 .loc 2 1832 85
 6358 0014 1B0C     	 lsrs r3,r3,#16
 6359              	 .loc 2 1832 12
 6360 0016 DAB2     	 uxtb r2,r3
 6361              	 .loc 2 1832 10
 6362 0018 0F20     	 movs r0,#15
 6363 001a 3B18     	 adds r3,r7,r0
 6364 001c 0F21     	 movs r1,#15
 6365 001e 0A40     	 ands r2,r1
 6366 0020 1A70     	 strb r2,[r3]
1833:../Libraries/XMCLib/src/xmc_vadc.c **** 
1834:../Libraries/XMCLib/src/xmc_vadc.c ****   return resreg;
 6367              	 .loc 2 1834 10
 6368 0022 3B18     	 adds r3,r7,r0
 6369 0024 1B78     	 ldrb r3,[r3]
1835:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6370              	 .loc 2 1835 1
 6371 0026 1800     	 movs r0,r3
 6372 0028 BD46     	 mov sp,r7
 6373 002a 04B0     	 add sp,sp,#16
 6374              	 
 6375 002c 80BD     	 pop {r7,pc}
 6376              	 .cfi_endproc
 6377              	.LFE214:
 6379              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEvent,"ax",%progbits
 6380              	 .align 1
 6381              	 .global XMC_VADC_GROUP_ChannelTriggerEvent
 6382              	 .syntax unified
 6383              	 .code 16
 6384              	 .thumb_func
 6385              	 .fpu softvfp
 6387              	XMC_VADC_GROUP_ChannelTriggerEvent:
 6388              	.LFB215:
1836:../Libraries/XMCLib/src/xmc_vadc.c **** 
1837:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to manually assert channel event */
1838:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
1839:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6389              	 .loc 2 1839 1
 6390              	 .cfi_startproc
 6391              	 
 6392              	 
 6393 0000 80B5     	 push {r7,lr}
 6394              	.LCFI226:
 6395              	 .cfi_def_cfa_offset 8
 6396              	 .cfi_offset 7,-8
 6397              	 .cfi_offset 14,-4
 6398 0002 84B0     	 sub sp,sp,#16
 6399              	.LCFI227:
 6400              	 .cfi_def_cfa_offset 24
 6401 0004 00AF     	 add r7,sp,#0
 6402              	.LCFI228:
 6403              	 .cfi_def_cfa_register 7
 6404 0006 7860     	 str r0,[r7,#4]
 6405 0008 3960     	 str r1,[r7]
1840:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ceflag;
1841:../Libraries/XMCLib/src/xmc_vadc.c **** 
1842:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1843:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CH
1844:../Libraries/XMCLib/src/xmc_vadc.c **** 
1845:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag  = group_ptr->CEFLAG;
 6406              	 .loc 2 1845 11
 6407 000a 7A68     	 ldr r2,[r7,#4]
 6408 000c C023     	 movs r3,#192
 6409 000e 5B00     	 lsls r3,r3,#1
 6410 0010 D358     	 ldr r3,[r2,r3]
 6411 0012 FB60     	 str r3,[r7,#12]
1846:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 6412              	 .loc 2 1846 13
 6413 0014 0122     	 movs r2,#1
 6414 0016 3B68     	 ldr r3,[r7]
 6415 0018 9A40     	 lsls r2,r2,r3
 6416 001a 1300     	 movs r3,r2
 6417              	 .loc 2 1846 10
 6418 001c FA68     	 ldr r2,[r7,#12]
 6419 001e 1343     	 orrs r3,r2
 6420 0020 FB60     	 str r3,[r7,#12]
1847:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
 6421              	 .loc 2 1847 21
 6422 0022 7A68     	 ldr r2,[r7,#4]
 6423 0024 C023     	 movs r3,#192
 6424 0026 5B00     	 lsls r3,r3,#1
 6425 0028 F968     	 ldr r1,[r7,#12]
 6426 002a D150     	 str r1,[r2,r3]
1848:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6427              	 .loc 2 1848 1
 6428 002c C046     	 nop
 6429 002e BD46     	 mov sp,r7
 6430 0030 04B0     	 add sp,sp,#16
 6431              	 
 6432 0032 80BD     	 pop {r7,pc}
 6433              	 .cfi_endproc
 6434              	.LFE215:
 6436              	 .section .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode,"ax",%progbits
 6437              	 .align 1
 6438              	 .global XMC_VADC_GROUP_ChannelSetEventInterruptNode
 6439              	 .syntax unified
 6440              	 .code 16
 6441              	 .thumb_func
 6442              	 .fpu softvfp
 6444              	XMC_VADC_GROUP_ChannelSetEventInterruptNode:
 6445              	.LFB216:
1849:../Libraries/XMCLib/src/xmc_vadc.c **** 
1850:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind channel event with a service request (NVIC Node) */
1851:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1852:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1853:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_SR_t sr)
1854:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6446              	 .loc 2 1854 1
 6447              	 .cfi_startproc
 6448              	 
 6449              	 
 6450 0000 80B5     	 push {r7,lr}
 6451              	.LCFI229:
 6452              	 .cfi_def_cfa_offset 8
 6453              	 .cfi_offset 7,-8
 6454              	 .cfi_offset 14,-4
 6455 0002 86B0     	 sub sp,sp,#24
 6456              	.LCFI230:
 6457              	 .cfi_def_cfa_offset 32
 6458 0004 00AF     	 add r7,sp,#0
 6459              	.LCFI231:
 6460              	 .cfi_def_cfa_register 7
 6461 0006 F860     	 str r0,[r7,#12]
 6462 0008 B960     	 str r1,[r7,#8]
 6463 000a FB1D     	 adds r3,r7,#7
 6464 000c 1A70     	 strb r2,[r3]
1855:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1856:../Libraries/XMCLib/src/xmc_vadc.c **** 
1857:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROU
1858:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Channel Number",
1859:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1860:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VAD
1861:../Libraries/XMCLib/src/xmc_vadc.c **** 
1862:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask  = group_ptr->CEVNP0;
 6465              	 .loc 2 1862 15
 6466 000e FA68     	 ldr r2,[r7,#12]
 6467 0010 D023     	 movs r3,#208
 6468 0012 5B00     	 lsls r3,r3,#1
 6469 0014 D358     	 ldr r3,[r2,r3]
 6470 0016 7B61     	 str r3,[r7,#20]
1863:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 6471              	 .loc 2 1863 43
 6472 0018 BB68     	 ldr r3,[r7,#8]
 6473 001a 9B00     	 lsls r3,r3,#2
 6474              	 .loc 2 1863 32
 6475 001c 0F22     	 movs r2,#15
 6476 001e 9A40     	 lsls r2,r2,r3
 6477 0020 1300     	 movs r3,r2
 6478              	 .loc 2 1863 17
 6479 0022 DA43     	 mvns r2,r3
 6480              	 .loc 2 1863 14
 6481 0024 7B69     	 ldr r3,[r7,#20]
 6482 0026 1340     	 ands r3,r2
 6483 0028 7B61     	 str r3,[r7,#20]
1864:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 6484              	 .loc 2 1864 29
 6485 002a FB1D     	 adds r3,r7,#7
 6486 002c 1A78     	 ldrb r2,[r3]
 6487              	 .loc 2 1864 53
 6488 002e BB68     	 ldr r3,[r7,#8]
 6489 0030 9B00     	 lsls r3,r3,#2
 6490              	 .loc 2 1864 17
 6491 0032 9A40     	 lsls r2,r2,r3
 6492 0034 1300     	 movs r3,r2
 6493              	 .loc 2 1864 14
 6494 0036 7A69     	 ldr r2,[r7,#20]
 6495 0038 1343     	 orrs r3,r2
 6496 003a 7B61     	 str r3,[r7,#20]
1865:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEVNP0 = route_mask;
 6497              	 .loc 2 1865 21
 6498 003c FA68     	 ldr r2,[r7,#12]
 6499 003e D023     	 movs r3,#208
 6500 0040 5B00     	 lsls r3,r3,#1
 6501 0042 7969     	 ldr r1,[r7,#20]
 6502 0044 D150     	 str r1,[r2,r3]
1866:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6503              	 .loc 2 1866 1
 6504 0046 C046     	 nop
 6505 0048 BD46     	 mov sp,r7
 6506 004a 06B0     	 add sp,sp,#24
 6507              	 
 6508 004c 80BD     	 pop {r7,pc}
 6509              	 .cfi_endproc
 6510              	.LFE216:
 6512              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria,"ax",%progbits
 6513              	 .align 1
 6514              	 .global XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
 6515              	 .syntax unified
 6516              	 .code 16
 6517              	 .thumb_func
 6518              	 .fpu softvfp
 6520              	XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:
 6521              	.LFB217:
1867:../Libraries/XMCLib/src/xmc_vadc.c **** 
1868:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure conditions for generation of channel event */
1869:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria( XMC_VADC_GROUP_t *const group_ptr,
1870:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const uint32_t ch_num,
1871:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria)
1872:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6522              	 .loc 2 1872 1
 6523              	 .cfi_startproc
 6524              	 
 6525              	 
 6526 0000 80B5     	 push {r7,lr}
 6527              	.LCFI232:
 6528              	 .cfi_def_cfa_offset 8
 6529              	 .cfi_offset 7,-8
 6530              	 .cfi_offset 14,-4
 6531 0002 86B0     	 sub sp,sp,#24
 6532              	.LCFI233:
 6533              	 .cfi_def_cfa_offset 32
 6534 0004 00AF     	 add r7,sp,#0
 6535              	.LCFI234:
 6536              	 .cfi_def_cfa_register 7
 6537 0006 F860     	 str r0,[r7,#12]
 6538 0008 B960     	 str r1,[r7,#8]
 6539 000a FB1D     	 adds r3,r7,#7
 6540 000c 1A70     	 strb r2,[r3]
1873:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1874:../Libraries/XMCLib/src/xmc_vadc.c **** 
1875:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Group Pointer", XMC_VADC_CHECK_GR
1876:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Channel Number",
1877:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1878:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Event Generation Criteria",
1879:../Libraries/XMCLib/src/xmc_vadc.c ****              ((criteria) <= XMC_VADC_CHANNEL_EVGEN_ALWAYS))
1880:../Libraries/XMCLib/src/xmc_vadc.c **** 
1881:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 6541              	 .loc 2 1881 10
 6542 000e FB68     	 ldr r3,[r7,#12]
 6543 0010 BA68     	 ldr r2,[r7,#8]
 6544 0012 8032     	 adds r2,r2,#128
 6545 0014 9200     	 lsls r2,r2,#2
 6546 0016 D358     	 ldr r3,[r2,r3]
 6547 0018 7B61     	 str r3,[r7,#20]
1882:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 6548              	 .loc 2 1882 9
 6549 001a 7B69     	 ldr r3,[r7,#20]
 6550 001c 094A     	 ldr r2,.L264
 6551 001e 1340     	 ands r3,r2
 6552 0020 7B61     	 str r3,[r7,#20]
1883:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)criteria << VADC_G_CHCTR_CHEVMODE_Pos);
 6553              	 .loc 2 1883 23
 6554 0022 FB1D     	 adds r3,r7,#7
 6555 0024 1B78     	 ldrb r3,[r3]
 6556              	 .loc 2 1883 12
 6557 0026 1B02     	 lsls r3,r3,#8
 6558              	 .loc 2 1883 9
 6559 0028 7A69     	 ldr r2,[r7,#20]
 6560 002a 1343     	 orrs r3,r2
 6561 002c 7B61     	 str r3,[r7,#20]
1884:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 6562              	 .loc 2 1884 28
 6563 002e FB68     	 ldr r3,[r7,#12]
 6564 0030 BA68     	 ldr r2,[r7,#8]
 6565 0032 8032     	 adds r2,r2,#128
 6566 0034 9200     	 lsls r2,r2,#2
 6567 0036 7969     	 ldr r1,[r7,#20]
 6568 0038 D150     	 str r1,[r2,r3]
1885:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6569              	 .loc 2 1885 1
 6570 003a C046     	 nop
 6571 003c BD46     	 mov sp,r7
 6572 003e 06B0     	 add sp,sp,#24
 6573              	 
 6574 0040 80BD     	 pop {r7,pc}
 6575              	.L265:
 6576 0042 C046     	 .align 2
 6577              	.L264:
 6578 0044 FFFCFFFF 	 .word -769
 6579              	 .cfi_endproc
 6580              	.LFE217:
 6582              	 .section .text.XMC_VADC_GROUP_ChannelSetBoundarySelection,"ax",%progbits
 6583              	 .align 1
 6584              	 .global XMC_VADC_GROUP_ChannelSetBoundarySelection
 6585              	 .syntax unified
 6586              	 .code 16
 6587              	 .thumb_func
 6588              	 .fpu softvfp
 6590              	XMC_VADC_GROUP_ChannelSetBoundarySelection:
 6591              	.LFB218:
1886:../Libraries/XMCLib/src/xmc_vadc.c **** 
1887:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure the boundary selection */
1888:../Libraries/XMCLib/src/xmc_vadc.c **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
1889:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1890:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
1891:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection)
1892:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6592              	 .loc 2 1892 1
 6593              	 .cfi_startproc
 6594              	 
 6595              	 
 6596 0000 80B5     	 push {r7,lr}
 6597              	.LCFI235:
 6598              	 .cfi_def_cfa_offset 8
 6599              	 .cfi_offset 7,-8
 6600              	 .cfi_offset 14,-4
 6601 0002 84B0     	 sub sp,sp,#16
 6602              	.LCFI236:
 6603              	 .cfi_def_cfa_offset 24
 6604 0004 00AF     	 add r7,sp,#0
 6605              	.LCFI237:
 6606              	 .cfi_def_cfa_register 7
 6607 0006 F860     	 str r0,[r7,#12]
 6608 0008 B960     	 str r1,[r7,#8]
 6609 000a 1900     	 movs r1,r3
 6610 000c FB1D     	 adds r3,r7,#7
 6611 000e 1A70     	 strb r2,[r3]
 6612 0010 BB1D     	 adds r3,r7,#6
 6613 0012 0A1C     	 adds r2,r1,#0
 6614 0014 1A70     	 strb r2,[r3]
1893:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
1894:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Channel Number",
1895:../Libraries/XMCLib/src/xmc_vadc.c ****               ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1896:../Libraries/XMCLib/src/xmc_vadc.c **** 
1897:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_BNDSELL_Msk << boundary_sel);
 6615              	 .loc 2 1897 28
 6616 0016 FB68     	 ldr r3,[r7,#12]
 6617 0018 BA68     	 ldr r2,[r7,#8]
 6618 001a 8032     	 adds r2,r2,#128
 6619 001c 9200     	 lsls r2,r2,#2
 6620 001e D358     	 ldr r3,[r2,r3]
 6621              	 .loc 2 1897 68
 6622 0020 FA1D     	 adds r2,r7,#7
 6623 0022 1278     	 ldrb r2,[r2]
 6624 0024 3021     	 movs r1,#48
 6625 0026 9140     	 lsls r1,r1,r2
 6626 0028 0A00     	 movs r2,r1
 6627              	 .loc 2 1897 31
 6628 002a D243     	 mvns r2,r2
 6629              	 .loc 2 1897 28
 6630 002c 1A40     	 ands r2,r3
 6631 002e 1100     	 movs r1,r2
 6632 0030 FB68     	 ldr r3,[r7,#12]
 6633 0032 BA68     	 ldr r2,[r7,#8]
 6634 0034 8032     	 adds r2,r2,#128
 6635 0036 9200     	 lsls r2,r2,#2
 6636 0038 D150     	 str r1,[r2,r3]
1898:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 6637              	 .loc 2 1898 28
 6638 003a FB68     	 ldr r3,[r7,#12]
 6639 003c BA68     	 ldr r2,[r7,#8]
 6640 003e 8032     	 adds r2,r2,#128
 6641 0040 9200     	 lsls r2,r2,#2
 6642 0042 D358     	 ldr r3,[r2,r3]
 6643              	 .loc 2 1898 41
 6644 0044 BA1D     	 adds r2,r7,#6
 6645 0046 1178     	 ldrb r1,[r2]
 6646              	 .loc 2 1898 82
 6647 0048 FA1D     	 adds r2,r7,#7
 6648 004a 1278     	 ldrb r2,[r2]
 6649              	 .loc 2 1898 80
 6650 004c 0432     	 adds r2,r2,#4
 6651              	 .loc 2 1898 41
 6652 004e 9140     	 lsls r1,r1,r2
 6653 0050 0A00     	 movs r2,r1
 6654              	 .loc 2 1898 28
 6655 0052 1343     	 orrs r3,r2
 6656 0054 1900     	 movs r1,r3
 6657 0056 FB68     	 ldr r3,[r7,#12]
 6658 0058 BA68     	 ldr r2,[r7,#8]
 6659 005a 8032     	 adds r2,r2,#128
 6660 005c 9200     	 lsls r2,r2,#2
 6661 005e D150     	 str r1,[r2,r3]
1899:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6662              	 .loc 2 1899 1
 6663 0060 C046     	 nop
 6664 0062 BD46     	 mov sp,r7
 6665 0064 04B0     	 add sp,sp,#16
 6666              	 
 6667 0066 80BD     	 pop {r7,pc}
 6668              	 .cfi_endproc
 6669              	.LFE218:
 6671              	 .section .text.XMC_VADC_GROUP_AddResultToFifo,"ax",%progbits
 6672              	 .align 1
 6673              	 .global XMC_VADC_GROUP_AddResultToFifo
 6674              	 .syntax unified
 6675              	 .code 16
 6676              	 .thumb_func
 6677              	 .fpu softvfp
 6679              	XMC_VADC_GROUP_AddResultToFifo:
 6680              	.LFB219:
1900:../Libraries/XMCLib/src/xmc_vadc.c **** 
1901:../Libraries/XMCLib/src/xmc_vadc.c **** /* Make the specified result register part of Result FIFO */ 
1902:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
1903:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6681              	 .loc 2 1903 1
 6682              	 .cfi_startproc
 6683              	 
 6684              	 
 6685 0000 80B5     	 push {r7,lr}
 6686              	.LCFI238:
 6687              	 .cfi_def_cfa_offset 8
 6688              	 .cfi_offset 7,-8
 6689              	 .cfi_offset 14,-4
 6690 0002 84B0     	 sub sp,sp,#16
 6691              	.LCFI239:
 6692              	 .cfi_def_cfa_offset 24
 6693 0004 00AF     	 add r7,sp,#0
 6694              	.LCFI240:
 6695              	 .cfi_def_cfa_register 7
 6696 0006 7860     	 str r0,[r7,#4]
 6697 0008 3960     	 str r1,[r7]
1904:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t fen;
1905:../Libraries/XMCLib/src/xmc_vadc.c **** 
1906:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1907:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESU
1908:../Libraries/XMCLib/src/xmc_vadc.c **** 
1909:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract and clear the FIFO enable field */
1910:../Libraries/XMCLib/src/xmc_vadc.c ****   fen = group_ptr->RCR[res_reg];
 6698              	 .loc 2 1910 7
 6699 000a 7B68     	 ldr r3,[r7,#4]
 6700 000c 3A68     	 ldr r2,[r7]
 6701 000e A032     	 adds r2,r2,#160
 6702 0010 9200     	 lsls r2,r2,#2
 6703 0012 D358     	 ldr r3,[r2,r3]
 6704 0014 FB60     	 str r3,[r7,#12]
1911:../Libraries/XMCLib/src/xmc_vadc.c ****   fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 6705              	 .loc 2 1911 7
 6706 0016 FB68     	 ldr r3,[r7,#12]
 6707 0018 084A     	 ldr r2,.L268
 6708 001a 1340     	 ands r3,r2
 6709 001c FB60     	 str r3,[r7,#12]
1912:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set this register up as a FIFO member */
1913:../Libraries/XMCLib/src/xmc_vadc.c ****   fen |= (uint32_t)((uint32_t)1 << VADC_G_RCR_FEN_Pos);
 6710              	 .loc 2 1913 7
 6711 001e FB68     	 ldr r3,[r7,#12]
 6712 0020 8022     	 movs r2,#128
 6713 0022 9204     	 lsls r2,r2,#18
 6714 0024 1343     	 orrs r3,r2
 6715 0026 FB60     	 str r3,[r7,#12]
1914:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RCR[res_reg] = fen;
 6716              	 .loc 2 1914 27
 6717 0028 7B68     	 ldr r3,[r7,#4]
 6718 002a 3A68     	 ldr r2,[r7]
 6719 002c A032     	 adds r2,r2,#160
 6720 002e 9200     	 lsls r2,r2,#2
 6721 0030 F968     	 ldr r1,[r7,#12]
 6722 0032 D150     	 str r1,[r2,r3]
1915:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6723              	 .loc 2 1915 1
 6724 0034 C046     	 nop
 6725 0036 BD46     	 mov sp,r7
 6726 0038 04B0     	 add sp,sp,#16
 6727              	 
 6728 003a 80BD     	 pop {r7,pc}
 6729              	.L269:
 6730              	 .align 2
 6731              	.L268:
 6732 003c FFFFFFF9 	 .word -100663297
 6733              	 .cfi_endproc
 6734              	.LFE219:
 6736              	 .section .text.XMC_VADC_GROUP_SetResultFastCompareValue,"ax",%progbits
 6737              	 .align 1
 6738              	 .global XMC_VADC_GROUP_SetResultFastCompareValue
 6739              	 .syntax unified
 6740              	 .code 16
 6741              	 .thumb_func
 6742              	 .fpu softvfp
 6744              	XMC_VADC_GROUP_SetResultFastCompareValue:
 6745              	.LFB220:
1916:../Libraries/XMCLib/src/xmc_vadc.c **** 
1917:../Libraries/XMCLib/src/xmc_vadc.c **** 
1918:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1919:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultFastCompareValue(XMC_VADC_GROUP_t *const group_ptr,
1920:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint32_t res_reg,
1921:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const XMC_VADC_RESULT_SIZE_t compare_val)
1922:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6746              	 .loc 2 1922 1
 6747              	 .cfi_startproc
 6748              	 
 6749              	 
 6750 0000 80B5     	 push {r7,lr}
 6751              	.LCFI241:
 6752              	 .cfi_def_cfa_offset 8
 6753              	 .cfi_offset 7,-8
 6754              	 .cfi_offset 14,-4
 6755 0002 86B0     	 sub sp,sp,#24
 6756              	.LCFI242:
 6757              	 .cfi_def_cfa_offset 32
 6758 0004 00AF     	 add r7,sp,#0
 6759              	.LCFI243:
 6760              	 .cfi_def_cfa_register 7
 6761 0006 F860     	 str r0,[r7,#12]
 6762 0008 B960     	 str r1,[r7,#8]
 6763 000a BB1D     	 adds r3,r7,#6
 6764 000c 1A80     	 strh r2,[r3]
1923:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res = group_ptr->RES[res_reg];
 6765              	 .loc 2 1923 12
 6766 000e FB68     	 ldr r3,[r7,#12]
 6767 0010 BA68     	 ldr r2,[r7,#8]
 6768 0012 C032     	 adds r2,r2,#192
 6769 0014 9200     	 lsls r2,r2,#2
 6770 0016 D358     	 ldr r3,[r2,r3]
 6771 0018 7B61     	 str r3,[r7,#20]
1924:../Libraries/XMCLib/src/xmc_vadc.c **** 
1925:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1926:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Result Register",
1927:../Libraries/XMCLib/src/xmc_vadc.c ****             ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
1928:../Libraries/XMCLib/src/xmc_vadc.c **** 
1929:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 6772              	 .loc 2 1929 7
 6773 001a 7B69     	 ldr r3,[r7,#20]
 6774 001c 1B0C     	 lsrs r3,r3,#16
 6775 001e 1B04     	 lsls r3,r3,#16
 6776 0020 7B61     	 str r3,[r7,#20]
1930:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 6777              	 .loc 2 1930 21
 6778 0022 BB1D     	 adds r3,r7,#6
 6779 0024 1B88     	 ldrh r3,[r3]
 6780              	 .loc 2 1930 10
 6781 0026 9B00     	 lsls r3,r3,#2
 6782              	 .loc 2 1930 7
 6783 0028 7A69     	 ldr r2,[r7,#20]
 6784 002a 1343     	 orrs r3,r2
 6785 002c 7B61     	 str r3,[r7,#20]
1931:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[res_reg] = res;
 6786              	 .loc 2 1931 27
 6787 002e FB68     	 ldr r3,[r7,#12]
 6788 0030 BA68     	 ldr r2,[r7,#8]
 6789 0032 C032     	 adds r2,r2,#192
 6790 0034 9200     	 lsls r2,r2,#2
 6791 0036 7969     	 ldr r1,[r7,#20]
 6792 0038 D150     	 str r1,[r2,r3]
1932:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6793              	 .loc 2 1932 1
 6794 003a C046     	 nop
 6795 003c BD46     	 mov sp,r7
 6796 003e 06B0     	 add sp,sp,#24
 6797              	 
 6798 0040 80BD     	 pop {r7,pc}
 6799              	 .cfi_endproc
 6800              	.LFE220:
 6802              	 .section .text.XMC_VADC_GROUP_GetFastCompareResult,"ax",%progbits
 6803              	 .align 1
 6804              	 .global XMC_VADC_GROUP_GetFastCompareResult
 6805              	 .syntax unified
 6806              	 .code 16
 6807              	 .thumb_func
 6808              	 .fpu softvfp
 6810              	XMC_VADC_GROUP_GetFastCompareResult:
 6811              	.LFB221:
1933:../Libraries/XMCLib/src/xmc_vadc.c **** 
1934:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of fast mode comparison */
1935:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult(XMC_VADC_GROUP_t *const group_ptr, cons
1936:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6812              	 .loc 2 1936 1
 6813              	 .cfi_startproc
 6814              	 
 6815              	 
 6816 0000 80B5     	 push {r7,lr}
 6817              	.LCFI244:
 6818              	 .cfi_def_cfa_offset 8
 6819              	 .cfi_offset 7,-8
 6820              	 .cfi_offset 14,-4
 6821 0002 84B0     	 sub sp,sp,#16
 6822              	.LCFI245:
 6823              	 .cfi_def_cfa_offset 24
 6824 0004 00AF     	 add r7,sp,#0
 6825              	.LCFI246:
 6826              	 .cfi_def_cfa_register 7
 6827 0006 7860     	 str r0,[r7,#4]
 6828 0008 3960     	 str r1,[r7]
1937:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
1938:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1939:../Libraries/XMCLib/src/xmc_vadc.c **** 
1940:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
1941:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM
1942:../Libraries/XMCLib/src/xmc_vadc.c **** 
1943:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[res_reg];
 6829              	 .loc 2 1943 7
 6830 000a 7B68     	 ldr r3,[r7,#4]
 6831 000c 3A68     	 ldr r2,[r7]
 6832 000e C032     	 adds r2,r2,#192
 6833 0010 9200     	 lsls r2,r2,#2
 6834 0012 D358     	 ldr r3,[r2,r3]
 6835 0014 BB60     	 str r3,[r7,#8]
1944:../Libraries/XMCLib/src/xmc_vadc.c **** 
1945:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_G_RES_VF_Msk)
 6836              	 .loc 2 1945 7
 6837 0016 BB68     	 ldr r3,[r7,#8]
 6838              	 .loc 2 1945 6
 6839 0018 002B     	 cmp r3,#0
 6840 001a 08DA     	 bge .L272
1946:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1947:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_G_RES_FCR_Pos) & (uint32_t)
 6841              	 .loc 2 1947 55
 6842 001c BB68     	 ldr r3,[r7,#8]
 6843 001e 9B0F     	 lsrs r3,r3,#30
 6844              	 .loc 2 1947 14
 6845 0020 DAB2     	 uxtb r2,r3
 6846              	 .loc 2 1947 12
 6847 0022 0F23     	 movs r3,#15
 6848 0024 FB18     	 adds r3,r7,r3
 6849 0026 0121     	 movs r1,#1
 6850 0028 0A40     	 ands r2,r1
 6851 002a 1A70     	 strb r2,[r3]
 6852 002c 03E0     	 b .L273
 6853              	.L272:
1948:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1949:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1950:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1951:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 6854              	 .loc 2 1951 12
 6855 002e 0F23     	 movs r3,#15
 6856 0030 FB18     	 adds r3,r7,r3
 6857 0032 0222     	 movs r2,#2
 6858 0034 1A70     	 strb r2,[r3]
 6859              	.L273:
1952:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1953:../Libraries/XMCLib/src/xmc_vadc.c **** 
1954:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 6860              	 .loc 2 1954 10
 6861 0036 0F23     	 movs r3,#15
 6862 0038 FB18     	 adds r3,r7,r3
 6863 003a 1B78     	 ldrb r3,[r3]
1955:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6864              	 .loc 2 1955 1
 6865 003c 1800     	 movs r0,r3
 6866 003e BD46     	 mov sp,r7
 6867 0040 04B0     	 add sp,sp,#16
 6868              	 
 6869 0042 80BD     	 pop {r7,pc}
 6870              	 .cfi_endproc
 6871              	.LFE221:
 6873              	 .section .text.XMC_VADC_GROUP_SetResultSubtractionValue,"ax",%progbits
 6874              	 .align 1
 6875              	 .global XMC_VADC_GROUP_SetResultSubtractionValue
 6876              	 .syntax unified
 6877              	 .code 16
 6878              	 .thumb_func
 6879              	 .fpu softvfp
 6881              	XMC_VADC_GROUP_SetResultSubtractionValue:
 6882              	.LFB222:
1956:../Libraries/XMCLib/src/xmc_vadc.c **** 
1957:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1958:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultSubtractionValue(XMC_VADC_GROUP_t *const group_ptr,
1959:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint16_t subtraction_val)
1960:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6883              	 .loc 2 1960 1
 6884              	 .cfi_startproc
 6885              	 
 6886              	 
 6887 0000 80B5     	 push {r7,lr}
 6888              	.LCFI247:
 6889              	 .cfi_def_cfa_offset 8
 6890              	 .cfi_offset 7,-8
 6891              	 .cfi_offset 14,-4
 6892 0002 84B0     	 sub sp,sp,#16
 6893              	.LCFI248:
 6894              	 .cfi_def_cfa_offset 24
 6895 0004 00AF     	 add r7,sp,#0
 6896              	.LCFI249:
 6897              	 .cfi_def_cfa_register 7
 6898 0006 7860     	 str r0,[r7,#4]
 6899 0008 0A00     	 movs r2,r1
 6900 000a BB1C     	 adds r3,r7,#2
 6901 000c 1A80     	 strh r2,[r3]
1961:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1962:../Libraries/XMCLib/src/xmc_vadc.c **** 
1963:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultSubtractionValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1964:../Libraries/XMCLib/src/xmc_vadc.c **** 
1965:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[0];
 6902              	 .loc 2 1965 7
 6903 000e 7A68     	 ldr r2,[r7,#4]
 6904 0010 C023     	 movs r3,#192
 6905 0012 9B00     	 lsls r3,r3,#2
 6906 0014 D358     	 ldr r3,[r2,r3]
 6907 0016 FB60     	 str r3,[r7,#12]
1966:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 6908              	 .loc 2 1966 7
 6909 0018 FB68     	 ldr r3,[r7,#12]
 6910 001a 1B0C     	 lsrs r3,r3,#16
 6911 001c 1B04     	 lsls r3,r3,#16
 6912 001e FB60     	 str r3,[r7,#12]
1967:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)subtraction_val;
 6913              	 .loc 2 1967 10
 6914 0020 BB1C     	 adds r3,r7,#2
 6915 0022 1B88     	 ldrh r3,[r3]
 6916              	 .loc 2 1967 7
 6917 0024 FA68     	 ldr r2,[r7,#12]
 6918 0026 1343     	 orrs r3,r2
 6919 0028 FB60     	 str r3,[r7,#12]
1968:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[0] = res;
 6920              	 .loc 2 1968 21
 6921 002a 7A68     	 ldr r2,[r7,#4]
 6922 002c C023     	 movs r3,#192
 6923 002e 9B00     	 lsls r3,r3,#2
 6924 0030 F968     	 ldr r1,[r7,#12]
 6925 0032 D150     	 str r1,[r2,r3]
1969:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6926              	 .loc 2 1969 1
 6927 0034 C046     	 nop
 6928 0036 BD46     	 mov sp,r7
 6929 0038 04B0     	 add sp,sp,#16
 6930              	 
 6931 003a 80BD     	 pop {r7,pc}
 6932              	 .cfi_endproc
 6933              	.LFE222:
 6935              	 .section .text.XMC_VADC_GROUP_SetResultInterruptNode,"ax",%progbits
 6936              	 .align 1
 6937              	 .global XMC_VADC_GROUP_SetResultInterruptNode
 6938              	 .syntax unified
 6939              	 .code 16
 6940              	 .thumb_func
 6941              	 .fpu softvfp
 6943              	XMC_VADC_GROUP_SetResultInterruptNode:
 6944              	.LFB223:
1970:../Libraries/XMCLib/src/xmc_vadc.c **** 
1971:../Libraries/XMCLib/src/xmc_vadc.c **** 
1972:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for result event of specified unit of result ha
1973:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1974:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint32_t res_reg,
1975:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_SR_t sr)
1976:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6945              	 .loc 2 1976 1
 6946              	 .cfi_startproc
 6947              	 
 6948              	 
 6949 0000 80B5     	 push {r7,lr}
 6950              	.LCFI250:
 6951              	 .cfi_def_cfa_offset 8
 6952              	 .cfi_offset 7,-8
 6953              	 .cfi_offset 14,-4
 6954 0002 86B0     	 sub sp,sp,#24
 6955              	.LCFI251:
 6956              	 .cfi_def_cfa_offset 32
 6957 0004 00AF     	 add r7,sp,#0
 6958              	.LCFI252:
 6959              	 .cfi_def_cfa_register 7
 6960 0006 F860     	 str r0,[r7,#12]
 6961 0008 B960     	 str r1,[r7,#8]
 6962 000a FB1D     	 adds r3,r7,#7
 6963 000c 1A70     	 strb r2,[r3]
1977:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1978:../Libraries/XMCLib/src/xmc_vadc.c **** 
1979:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1980:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_N
1981:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_S
1982:../Libraries/XMCLib/src/xmc_vadc.c **** 
1983:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res_reg <= 7U)
 6964              	 .loc 2 1983 6
 6965 000e BB68     	 ldr r3,[r7,#8]
 6966 0010 072B     	 cmp r3,#7
 6967 0012 1CD8     	 bhi .L277
1984:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1985:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask  = group_ptr->REVNP0;
 6968              	 .loc 2 1985 17
 6969 0014 FA68     	 ldr r2,[r7,#12]
 6970 0016 D823     	 movs r3,#216
 6971 0018 5B00     	 lsls r3,r3,#1
 6972 001a D358     	 ldr r3,[r2,r3]
 6973 001c 7B61     	 str r3,[r7,#20]
1986:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 6974              	 .loc 2 1986 57
 6975 001e BB68     	 ldr r3,[r7,#8]
 6976 0020 9B00     	 lsls r3,r3,#2
 6977              	 .loc 2 1986 21
 6978 0022 0F22     	 movs r2,#15
 6979 0024 9A40     	 lsls r2,r2,r3
 6980 0026 1300     	 movs r3,r2
 6981              	 .loc 2 1986 19
 6982 0028 DA43     	 mvns r2,r3
 6983              	 .loc 2 1986 16
 6984 002a 7B69     	 ldr r3,[r7,#20]
 6985 002c 1340     	 ands r3,r2
 6986 002e 7B61     	 str r3,[r7,#20]
1987:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 6987              	 .loc 2 1987 30
 6988 0030 FB1D     	 adds r3,r7,#7
 6989 0032 1A78     	 ldrb r2,[r3]
 6990              	 .loc 2 1987 55
 6991 0034 BB68     	 ldr r3,[r7,#8]
 6992 0036 9B00     	 lsls r3,r3,#2
 6993              	 .loc 2 1987 19
 6994 0038 9A40     	 lsls r2,r2,r3
 6995 003a 1300     	 movs r3,r2
 6996              	 .loc 2 1987 16
 6997 003c 7A69     	 ldr r2,[r7,#20]
 6998 003e 1343     	 orrs r3,r2
 6999 0040 7B61     	 str r3,[r7,#20]
1988:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP0 = route_mask;
 7000              	 .loc 2 1988 23
 7001 0042 FA68     	 ldr r2,[r7,#12]
 7002 0044 D823     	 movs r3,#216
 7003 0046 5B00     	 lsls r3,r3,#1
 7004 0048 7969     	 ldr r1,[r7,#20]
 7005 004a D150     	 str r1,[r2,r3]
1989:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1990:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1991:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1992:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask = group_ptr->REVNP1;
1993:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
1994:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
1995:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
1996:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1997:../Libraries/XMCLib/src/xmc_vadc.c **** }
 7006              	 .loc 2 1997 1
 7007 004c 1DE0     	 b .L279
 7008              	.L277:
1992:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 7009              	 .loc 2 1992 16
 7010 004e FA68     	 ldr r2,[r7,#12]
 7011 0050 DA23     	 movs r3,#218
 7012 0052 5B00     	 lsls r3,r3,#1
 7013 0054 D358     	 ldr r3,[r2,r3]
 7014 0056 7B61     	 str r3,[r7,#20]
1993:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 7015              	 .loc 2 1993 59
 7016 0058 BB68     	 ldr r3,[r7,#8]
 7017 005a 083B     	 subs r3,r3,#8
1993:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 7018              	 .loc 2 1993 74
 7019 005c 9B00     	 lsls r3,r3,#2
1993:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 7020              	 .loc 2 1993 21
 7021 005e 0F22     	 movs r2,#15
 7022 0060 9A40     	 lsls r2,r2,r3
 7023 0062 1300     	 movs r3,r2
1993:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 7024              	 .loc 2 1993 19
 7025 0064 DA43     	 mvns r2,r3
1993:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 7026              	 .loc 2 1993 16
 7027 0066 7B69     	 ldr r3,[r7,#20]
 7028 0068 1340     	 ands r3,r2
 7029 006a 7B61     	 str r3,[r7,#20]
1994:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 7030              	 .loc 2 1994 30
 7031 006c FB1D     	 adds r3,r7,#7
 7032 006e 1A78     	 ldrb r2,[r3]
1994:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 7033              	 .loc 2 1994 56
 7034 0070 BB68     	 ldr r3,[r7,#8]
 7035 0072 083B     	 subs r3,r3,#8
1994:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 7036              	 .loc 2 1994 71
 7037 0074 9B00     	 lsls r3,r3,#2
1994:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 7038              	 .loc 2 1994 19
 7039 0076 9A40     	 lsls r2,r2,r3
 7040 0078 1300     	 movs r3,r2
1994:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 7041              	 .loc 2 1994 16
 7042 007a 7A69     	 ldr r2,[r7,#20]
 7043 007c 1343     	 orrs r3,r2
 7044 007e 7B61     	 str r3,[r7,#20]
1995:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 7045              	 .loc 2 1995 23
 7046 0080 FA68     	 ldr r2,[r7,#12]
 7047 0082 DA23     	 movs r3,#218
 7048 0084 5B00     	 lsls r3,r3,#1
 7049 0086 7969     	 ldr r1,[r7,#20]
 7050 0088 D150     	 str r1,[r2,r3]
 7051              	.L279:
 7052              	 .loc 2 1997 1
 7053 008a C046     	 nop
 7054 008c BD46     	 mov sp,r7
 7055 008e 06B0     	 add sp,sp,#24
 7056              	 
 7057 0090 80BD     	 pop {r7,pc}
 7058              	 .cfi_endproc
 7059              	.LFE223:
 7061              	 .section .text.XMC_VADC_GROUP_GetResultFifoTail,"ax",%progbits
 7062              	 .align 1
 7063              	 .global XMC_VADC_GROUP_GetResultFifoTail
 7064              	 .syntax unified
 7065              	 .code 16
 7066              	 .thumb_func
 7067              	 .fpu softvfp
 7069              	XMC_VADC_GROUP_GetResultFifoTail:
 7070              	.LFB224:
1998:../Libraries/XMCLib/src/xmc_vadc.c **** 
1999:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the tail of the fifo which the specified result register is a part of */
2000:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoTail(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)
2001:../Libraries/XMCLib/src/xmc_vadc.c **** {
 7071              	 .loc 2 2001 1
 7072              	 .cfi_startproc
 7073              	 
 7074              	 
 7075 0000 80B5     	 push {r7,lr}
 7076              	.LCFI253:
 7077              	 .cfi_def_cfa_offset 8
 7078              	 .cfi_offset 7,-8
 7079              	 .cfi_offset 14,-4
 7080 0002 86B0     	 sub sp,sp,#24
 7081              	.LCFI254:
 7082              	 .cfi_def_cfa_offset 32
 7083 0004 00AF     	 add r7,sp,#0
 7084              	.LCFI255:
 7085              	 .cfi_def_cfa_register 7
 7086 0006 7860     	 str r0,[r7,#4]
 7087 0008 3960     	 str r1,[r7]
2002:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t tail;
2003:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2004:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t i;
2005:../Libraries/XMCLib/src/xmc_vadc.c ****   bool exit_flag;
2006:../Libraries/XMCLib/src/xmc_vadc.c **** 
2007:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2008:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2009:../Libraries/XMCLib/src/xmc_vadc.c **** 
2010:../Libraries/XMCLib/src/xmc_vadc.c ****   tail = 0U;
 7088              	 .loc 2 2010 8
 7089 000a 0023     	 movs r3,#0
 7090 000c 7B61     	 str r3,[r7,#20]
2011:../Libraries/XMCLib/src/xmc_vadc.c ****   exit_flag= (bool)false;
 7091              	 .loc 2 2011 12
 7092 000e 0F23     	 movs r3,#15
 7093 0010 FB18     	 adds r3,r7,r3
 7094 0012 0022     	 movs r2,#0
 7095 0014 1A70     	 strb r2,[r3]
2012:../Libraries/XMCLib/src/xmc_vadc.c **** 
2013:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 7096              	 .loc 2 2013 21
 7097 0016 3A68     	 ldr r2,[r7]
 7098 0018 7B68     	 ldr r3,[r7,#4]
 7099 001a 1100     	 movs r1,r2
 7100 001c 1800     	 movs r0,r3
 7101 001e FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 7102 0022 031E     	 subs r3,r0,#0
 7103              	 .loc 2 2013 6
 7104 0024 02D0     	 beq .L281
2014:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2015:../Libraries/XMCLib/src/xmc_vadc.c ****     res_reg = res_reg - 1U;
 7105              	 .loc 2 2015 13
 7106 0026 3B68     	 ldr r3,[r7]
 7107 0028 013B     	 subs r3,r3,#1
 7108 002a 3B60     	 str r3,[r7]
 7109              	.L281:
2016:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2017:../Libraries/XMCLib/src/xmc_vadc.c **** 
2018:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Border condition */
2019:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == res_reg)
 7110              	 .loc 2 2019 6
 7111 002c 3B68     	 ldr r3,[r7]
 7112 002e 002B     	 cmp r3,#0
 7113 0030 02D1     	 bne .L282
2020:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2021:../Libraries/XMCLib/src/xmc_vadc.c ****     tail = 0U;
 7114              	 .loc 2 2021 10
 7115 0032 0023     	 movs r3,#0
 7116 0034 7B61     	 str r3,[r7,#20]
 7117 0036 2EE0     	 b .L283
 7118              	.L282:
2022:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2023:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2024:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2025:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Stop either at a node that does not have FEN set or at Node-0 */
2026:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = (int32_t)res_reg; i >= (int32_t)0; i--)
 7119              	 .loc 2 2026 11
 7120 0038 3B68     	 ldr r3,[r7]
 7121 003a 3B61     	 str r3,[r7,#16]
 7122              	 .loc 2 2026 5
 7123 003c 26E0     	 b .L284
 7124              	.L288:
2027:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2028:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr = group_ptr->RCR[i];
 7125              	 .loc 2 2028 12
 7126 003e 7B68     	 ldr r3,[r7,#4]
 7127 0040 3A69     	 ldr r2,[r7,#16]
 7128 0042 A032     	 adds r2,r2,#160
 7129 0044 9200     	 lsls r2,r2,#2
 7130 0046 D358     	 ldr r3,[r2,r3]
 7131 0048 BB60     	 str r3,[r7,#8]
2029:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 7132              	 .loc 2 2029 12
 7133 004a BA68     	 ldr r2,[r7,#8]
 7134 004c C023     	 movs r3,#192
 7135 004e DB04     	 lsls r3,r3,#19
 7136 0050 1340     	 ands r3,r2
 7137 0052 BB60     	 str r3,[r7,#8]
2030:../Libraries/XMCLib/src/xmc_vadc.c **** 
2031:../Libraries/XMCLib/src/xmc_vadc.c ****        if (rcr)
 7138              	 .loc 2 2031 11
 7139 0054 BB68     	 ldr r3,[r7,#8]
 7140 0056 002B     	 cmp r3,#0
 7141 0058 09D0     	 beq .L285
2032:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2033:../Libraries/XMCLib/src/xmc_vadc.c ****          if ((int32_t)0 == i)
 7142              	 .loc 2 2033 13
 7143 005a 3B69     	 ldr r3,[r7,#16]
 7144 005c 002B     	 cmp r3,#0
 7145 005e 0DD1     	 bne .L286
2034:../Libraries/XMCLib/src/xmc_vadc.c ****          {
2035:../Libraries/XMCLib/src/xmc_vadc.c ****           /* No more nodes. Stop here */
2036:../Libraries/XMCLib/src/xmc_vadc.c ****           tail = (uint32_t)0;
 7146              	 .loc 2 2036 16
 7147 0060 0023     	 movs r3,#0
 7148 0062 7B61     	 str r3,[r7,#20]
2037:../Libraries/XMCLib/src/xmc_vadc.c ****           exit_flag = (bool)true;
 7149              	 .loc 2 2037 21
 7150 0064 0F23     	 movs r3,#15
 7151 0066 FB18     	 adds r3,r7,r3
 7152 0068 0122     	 movs r2,#1
 7153 006a 1A70     	 strb r2,[r3]
 7154 006c 06E0     	 b .L286
 7155              	.L285:
2038:../Libraries/XMCLib/src/xmc_vadc.c ****          }
2039:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2040:../Libraries/XMCLib/src/xmc_vadc.c ****        else
2041:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2042:../Libraries/XMCLib/src/xmc_vadc.c ****          /* The preceding register forms the tail of the FIFO */
2043:../Libraries/XMCLib/src/xmc_vadc.c ****          tail = (uint32_t)i + (uint32_t)1;
 7156              	 .loc 2 2043 17
 7157 006e 3B69     	 ldr r3,[r7,#16]
 7158              	 .loc 2 2043 15
 7159 0070 0133     	 adds r3,r3,#1
 7160 0072 7B61     	 str r3,[r7,#20]
2044:../Libraries/XMCLib/src/xmc_vadc.c ****          exit_flag = (bool)true;
 7161              	 .loc 2 2044 20
 7162 0074 0F23     	 movs r3,#15
 7163 0076 FB18     	 adds r3,r7,r3
 7164 0078 0122     	 movs r2,#1
 7165 007a 1A70     	 strb r2,[r3]
 7166              	.L286:
2045:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2046:../Libraries/XMCLib/src/xmc_vadc.c ****        if (exit_flag)
 7167              	 .loc 2 2046 11
 7168 007c 0F23     	 movs r3,#15
 7169 007e FB18     	 adds r3,r7,r3
 7170 0080 1B78     	 ldrb r3,[r3]
 7171 0082 002B     	 cmp r3,#0
 7172 0084 06D1     	 bne .L290
2026:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 7173              	 .loc 2 2026 49 discriminator 2
 7174 0086 3B69     	 ldr r3,[r7,#16]
 7175 0088 013B     	 subs r3,r3,#1
 7176 008a 3B61     	 str r3,[r7,#16]
 7177              	.L284:
2026:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 7178              	 .loc 2 2026 5 discriminator 1
 7179 008c 3B69     	 ldr r3,[r7,#16]
 7180 008e 002B     	 cmp r3,#0
 7181 0090 D5DA     	 bge .L288
 7182 0092 00E0     	 b .L283
 7183              	.L290:
2047:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2048:../Libraries/XMCLib/src/xmc_vadc.c ****          break;
 7184              	 .loc 2 2048 10
 7185 0094 C046     	 nop
 7186              	.L283:
2049:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2050:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2051:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2052:../Libraries/XMCLib/src/xmc_vadc.c ****   return tail;
 7187              	 .loc 2 2052 10
 7188 0096 7B69     	 ldr r3,[r7,#20]
2053:../Libraries/XMCLib/src/xmc_vadc.c **** }
 7189              	 .loc 2 2053 1
 7190 0098 1800     	 movs r0,r3
 7191 009a BD46     	 mov sp,r7
 7192 009c 06B0     	 add sp,sp,#24
 7193              	 
 7194 009e 80BD     	 pop {r7,pc}
 7195              	 .cfi_endproc
 7196              	.LFE224:
 7198              	 .section .text.XMC_VADC_GROUP_GetResultFifoHead,"ax",%progbits
 7199              	 .align 1
 7200              	 .global XMC_VADC_GROUP_GetResultFifoHead
 7201              	 .syntax unified
 7202              	 .code 16
 7203              	 .thumb_func
 7204              	 .fpu softvfp
 7206              	XMC_VADC_GROUP_GetResultFifoHead:
 7207              	.LFB225:
2054:../Libraries/XMCLib/src/xmc_vadc.c **** 
2055:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the head of the fifo which the specified result register is a part of */
2056:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg
2057:../Libraries/XMCLib/src/xmc_vadc.c **** {
 7208              	 .loc 2 2057 1
 7209              	 .cfi_startproc
 7210              	 
 7211              	 
 7212 0000 80B5     	 push {r7,lr}
 7213              	.LCFI256:
 7214              	 .cfi_def_cfa_offset 8
 7215              	 .cfi_offset 7,-8
 7216              	 .cfi_offset 14,-4
 7217 0002 86B0     	 sub sp,sp,#24
 7218              	.LCFI257:
 7219              	 .cfi_def_cfa_offset 32
 7220 0004 00AF     	 add r7,sp,#0
 7221              	.LCFI258:
 7222              	 .cfi_def_cfa_register 7
 7223 0006 7860     	 str r0,[r7,#4]
 7224 0008 3960     	 str r1,[r7]
2058:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t head;
2059:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2060:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
2061:../Libraries/XMCLib/src/xmc_vadc.c **** 
2062:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2063:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2064:../Libraries/XMCLib/src/xmc_vadc.c **** 
2065:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 7225              	 .loc 2 2065 21
 7226 000a 3A68     	 ldr r2,[r7]
 7227 000c 7B68     	 ldr r3,[r7,#4]
 7228 000e 1100     	 movs r1,r2
 7229 0010 1800     	 movs r0,r3
 7230 0012 FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 7231 0016 031E     	 subs r3,r0,#0
 7232              	 .loc 2 2065 6
 7233 0018 02D0     	 beq .L292
2066:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2067:../Libraries/XMCLib/src/xmc_vadc.c ****       head = res_reg;
 7234              	 .loc 2 2067 12
 7235 001a 3B68     	 ldr r3,[r7]
 7236 001c 7B61     	 str r3,[r7,#20]
 7237 001e 1BE0     	 b .L293
 7238              	.L292:
2068:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2069:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2070:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2071:../Libraries/XMCLib/src/xmc_vadc.c ****     head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;
 7239              	 .loc 2 2071 10
 7240 0020 0F23     	 movs r3,#15
 7241 0022 7B61     	 str r3,[r7,#20]
2072:../Libraries/XMCLib/src/xmc_vadc.c **** 
2073:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
 7242              	 .loc 2 2073 11
 7243 0024 3B68     	 ldr r3,[r7]
 7244 0026 3B61     	 str r3,[r7,#16]
 7245              	 .loc 2 2073 5
 7246 0028 13E0     	 b .L294
 7247              	.L296:
2074:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2075:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr = group_ptr->RCR[i];
 7248              	 .loc 2 2075 11
 7249 002a 7B68     	 ldr r3,[r7,#4]
 7250 002c 3A69     	 ldr r2,[r7,#16]
 7251 002e A032     	 adds r2,r2,#160
 7252 0030 9200     	 lsls r2,r2,#2
 7253 0032 D358     	 ldr r3,[r2,r3]
 7254 0034 FB60     	 str r3,[r7,#12]
2076:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 7255              	 .loc 2 2076 11
 7256 0036 FA68     	 ldr r2,[r7,#12]
 7257 0038 C023     	 movs r3,#192
 7258 003a DB04     	 lsls r3,r3,#19
 7259 003c 1340     	 ands r3,r2
 7260 003e FB60     	 str r3,[r7,#12]
2077:../Libraries/XMCLib/src/xmc_vadc.c **** 
2078:../Libraries/XMCLib/src/xmc_vadc.c ****       if (!rcr)
 7261              	 .loc 2 2078 10
 7262 0040 FB68     	 ldr r3,[r7,#12]
 7263 0042 002B     	 cmp r3,#0
 7264 0044 02D1     	 bne .L295
2079:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2080:../Libraries/XMCLib/src/xmc_vadc.c ****         /* This node forms the head of the FIFO */
2081:../Libraries/XMCLib/src/xmc_vadc.c ****         head = i ;
 7265              	 .loc 2 2081 14
 7266 0046 3B69     	 ldr r3,[r7,#16]
 7267 0048 7B61     	 str r3,[r7,#20]
2082:../Libraries/XMCLib/src/xmc_vadc.c ****         break;
 7268              	 .loc 2 2082 9
 7269 004a 05E0     	 b .L293
 7270              	.L295:
2073:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 7271              	 .loc 2 2073 59 discriminator 2
 7272 004c 3B69     	 ldr r3,[r7,#16]
 7273 004e 0133     	 adds r3,r3,#1
 7274 0050 3B61     	 str r3,[r7,#16]
 7275              	.L294:
2073:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 7276              	 .loc 2 2073 5 discriminator 1
 7277 0052 3B69     	 ldr r3,[r7,#16]
 7278 0054 0F2B     	 cmp r3,#15
 7279 0056 E8D9     	 bls .L296
 7280              	.L293:
2083:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2084:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2085:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2086:../Libraries/XMCLib/src/xmc_vadc.c ****   return head;
 7281              	 .loc 2 2086 10
 7282 0058 7B69     	 ldr r3,[r7,#20]
2087:../Libraries/XMCLib/src/xmc_vadc.c **** }
 7283              	 .loc 2 2087 1
 7284 005a 1800     	 movs r0,r3
 7285 005c BD46     	 mov sp,r7
 7286 005e 06B0     	 add sp,sp,#24
 7287              	 
 7288 0060 80BD     	 pop {r7,pc}
 7289              	 .cfi_endproc
 7290              	.LFE225:
 7292              	 .section .text.XMC_VADC_GROUP_IsResultRegisterFifoHead,"ax",%progbits
 7293              	 .align 1
 7294              	 .global XMC_VADC_GROUP_IsResultRegisterFifoHead
 7295              	 .syntax unified
 7296              	 .code 16
 7297              	 .thumb_func
 7298              	 .fpu softvfp
 7300              	XMC_VADC_GROUP_IsResultRegisterFifoHead:
 7301              	.LFB226:
2088:../Libraries/XMCLib/src/xmc_vadc.c **** 
2089:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine if the specified result register is the head of a result fifo */
2090:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_IsResultRegisterFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_
2091:../Libraries/XMCLib/src/xmc_vadc.c **** {
 7302              	 .loc 2 2091 1
 7303              	 .cfi_startproc
 7304              	 
 7305              	 
 7306 0000 80B5     	 push {r7,lr}
 7307              	.LCFI259:
 7308              	 .cfi_def_cfa_offset 8
 7309              	 .cfi_offset 7,-8
 7310              	 .cfi_offset 14,-4
 7311 0002 86B0     	 sub sp,sp,#24
 7312              	.LCFI260:
 7313              	 .cfi_def_cfa_offset 32
 7314 0004 00AF     	 add r7,sp,#0
 7315              	.LCFI261:
 7316              	 .cfi_def_cfa_register 7
 7317 0006 7860     	 str r0,[r7,#4]
 7318 0008 3960     	 str r1,[r7]
2092:../Libraries/XMCLib/src/xmc_vadc.c ****   bool ret_val;
2093:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_head;
2094:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_next;
2095:../Libraries/XMCLib/src/xmc_vadc.c **** 
2096:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2097:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Result Register",
2098:../Libraries/XMCLib/src/xmc_vadc.c ****              ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
2099:../Libraries/XMCLib/src/xmc_vadc.c **** 
2100:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head = group_ptr->RCR[res_reg];
 7319              	 .loc 2 2100 12
 7320 000a 7B68     	 ldr r3,[r7,#4]
 7321 000c 3A68     	 ldr r2,[r7]
 7322 000e A032     	 adds r2,r2,#160
 7323 0010 9200     	 lsls r2,r2,#2
 7324 0012 D358     	 ldr r3,[r2,r3]
 7325 0014 3B61     	 str r3,[r7,#16]
2101:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 7326              	 .loc 2 2101 12
 7327 0016 3A69     	 ldr r2,[r7,#16]
 7328 0018 C023     	 movs r3,#192
 7329 001a DB04     	 lsls r3,r3,#19
 7330 001c 1340     	 ands r3,r2
 7331 001e 3B61     	 str r3,[r7,#16]
2102:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 7332              	 .loc 2 2102 37
 7333 0020 3B68     	 ldr r3,[r7]
 7334 0022 5A1E     	 subs r2,r3,#1
 7335              	 .loc 2 2102 12
 7336 0024 7B68     	 ldr r3,[r7,#4]
 7337 0026 A032     	 adds r2,r2,#160
 7338 0028 9200     	 lsls r2,r2,#2
 7339 002a D358     	 ldr r3,[r2,r3]
 7340 002c FB60     	 str r3,[r7,#12]
2103:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 7341              	 .loc 2 2103 12
 7342 002e FA68     	 ldr r2,[r7,#12]
 7343 0030 C023     	 movs r3,#192
 7344 0032 DB04     	 lsls r3,r3,#19
 7345 0034 1340     	 ands r3,r2
 7346 0036 FB60     	 str r3,[r7,#12]
2104:../Libraries/XMCLib/src/xmc_vadc.c **** 
2105:../Libraries/XMCLib/src/xmc_vadc.c ****   if (rcr_head)
 7347              	 .loc 2 2105 6
 7348 0038 3B69     	 ldr r3,[r7,#16]
 7349 003a 002B     	 cmp r3,#0
 7350 003c 04D0     	 beq .L299
2106:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2107:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 7351              	 .loc 2 2107 13
 7352 003e 1723     	 movs r3,#23
 7353 0040 FB18     	 adds r3,r7,r3
 7354 0042 0022     	 movs r2,#0
 7355 0044 1A70     	 strb r2,[r3]
 7356 0046 0BE0     	 b .L300
 7357              	.L299:
2108:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2109:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (rcr_next)
 7358              	 .loc 2 2109 11
 7359 0048 FB68     	 ldr r3,[r7,#12]
 7360 004a 002B     	 cmp r3,#0
 7361 004c 04D0     	 beq .L301
2110:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2111:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)true;
 7362              	 .loc 2 2111 13
 7363 004e 1723     	 movs r3,#23
 7364 0050 FB18     	 adds r3,r7,r3
 7365 0052 0122     	 movs r2,#1
 7366 0054 1A70     	 strb r2,[r3]
 7367 0056 03E0     	 b .L300
 7368              	.L301:
2112:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2113:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2114:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2115:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 7369              	 .loc 2 2115 13
 7370 0058 1723     	 movs r3,#23
 7371 005a FB18     	 adds r3,r7,r3
 7372 005c 0022     	 movs r2,#0
 7373 005e 1A70     	 strb r2,[r3]
 7374              	.L300:
2116:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2117:../Libraries/XMCLib/src/xmc_vadc.c **** 
2118:../Libraries/XMCLib/src/xmc_vadc.c ****   return ret_val;
 7375              	 .loc 2 2118 10
 7376 0060 1723     	 movs r3,#23
 7377 0062 FB18     	 adds r3,r7,r3
 7378 0064 1B78     	 ldrb r3,[r3]
2119:../Libraries/XMCLib/src/xmc_vadc.c **** }
 7379              	 .loc 2 2119 1
 7380 0066 1800     	 movs r0,r3
 7381 0068 BD46     	 mov sp,r7
 7382 006a 06B0     	 add sp,sp,#24
 7383              	 
 7384 006c 80BD     	 pop {r7,pc}
 7385              	 .cfi_endproc
 7386              	.LFE226:
 7388              	 .text
 7389              	.Letext0:
 7390              	 .file 3 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
 7391              	 .file 4 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 7392              	 .file 5 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/lock.h"
 7393              	 .file 6 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h"
 7394              	 .file 7 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 7395              	 .file 8 "/usr/local/Caskroom/gcc-arm-embedded/9-2019-q4-major/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h"
 7396              	 .file 9 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
 7397              	 .file 10 "..//Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 7398              	 .file 11 "..//Libraries/XMCLib/inc/xmc1_scu.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 xmc_vadc.c
    {standard input}:16     .text.XMC_VADC_GROUP_ExternalMuxControlInit:0000000000000000 $t
    {standard input}:23     .text.XMC_VADC_GROUP_ExternalMuxControlInit:0000000000000000 XMC_VADC_GROUP_ExternalMuxControlInit
    {standard input}:134    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:0000000000000000 $t
    {standard input}:140    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:0000000000000000 XMC_VADC_GROUP_ScanEnableArbitrationSlot
    {standard input}:178    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:0000000000000000 $t
    {standard input}:184    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:0000000000000000 XMC_VADC_GROUP_ScanDisableArbitrationSlot
    {standard input}:220    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:0000000000000020 $d
    {standard input}:225    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:0000000000000000 $t
    {standard input}:231    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:0000000000000000 XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
    {standard input}:269    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:0000000000000000 $t
    {standard input}:275    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:0000000000000000 XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
    {standard input}:311    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:0000000000000020 $d
    {standard input}:316    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:0000000000000000 $t
    {standard input}:322    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:0000000000000000 XMC_VADC_GROUP_QueueEnableArbitrationSlot
    {standard input}:360    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:0000000000000000 $t
    {standard input}:366    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:0000000000000000 XMC_VADC_GROUP_QueueDisableArbitrationSlot
    {standard input}:402    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:0000000000000020 $d
    {standard input}:407    .text.XMC_VADC_GROUP_QueueFlushEntries:0000000000000000 $t
    {standard input}:413    .text.XMC_VADC_GROUP_QueueFlushEntries:0000000000000000 XMC_VADC_GROUP_QueueFlushEntries
    {standard input}:468    .rodata.g_xmc_vadc_group_array:0000000000000000 $d
    {standard input}:471    .rodata.g_xmc_vadc_group_array:0000000000000000 g_xmc_vadc_group_array
    {standard input}:475    .text.XMC_VADC_GLOBAL_EnableModule:0000000000000000 $t
    {standard input}:482    .text.XMC_VADC_GLOBAL_EnableModule:0000000000000000 XMC_VADC_GLOBAL_EnableModule
    {standard input}:513    .text.XMC_VADC_GLOBAL_EnableModule:0000000000000018 $d
    {standard input}:518    .text.XMC_VADC_GLOBAL_DisableModule:0000000000000000 $t
    {standard input}:525    .text.XMC_VADC_GLOBAL_DisableModule:0000000000000000 XMC_VADC_GLOBAL_DisableModule
    {standard input}:551    .text.XMC_VADC_GLOBAL_Init:0000000000000000 $t
    {standard input}:558    .text.XMC_VADC_GLOBAL_Init:0000000000000000 XMC_VADC_GLOBAL_Init
    {standard input}:635    .text.XMC_VADC_GLOBAL_InputClassInit:0000000000000000 $t
    {standard input}:642    .text.XMC_VADC_GLOBAL_InputClassInit:0000000000000000 XMC_VADC_GLOBAL_InputClassInit
    {standard input}:706    .text.XMC_VADC_GLOBAL_InputClassInit:0000000000000048 $d
    {standard input}:712    .text.XMC_VADC_GLOBAL_StartupCalibration:0000000000000000 $t
    {standard input}:719    .text.XMC_VADC_GLOBAL_StartupCalibration:0000000000000000 XMC_VADC_GLOBAL_StartupCalibration
    {standard input}:812    .text.XMC_VADC_GLOBAL_StartupCalibration:0000000000000070 $d
    {standard input}:817    .text.XMC_VADC_GLOBAL_SetBoundaries:0000000000000000 $t
    {standard input}:824    .text.XMC_VADC_GLOBAL_SetBoundaries:0000000000000000 XMC_VADC_GLOBAL_SetBoundaries
    {standard input}:874    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:0000000000000000 $t
    {standard input}:881    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:0000000000000000 XMC_VADC_GLOBAL_SetIndividualBoundary
    {standard input}:965    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:0000000000000068 $d
    {standard input}:970    .text.XMC_VADC_GLOBAL_SetCompareValue:0000000000000000 $t
    {standard input}:977    .text.XMC_VADC_GLOBAL_SetCompareValue:0000000000000000 XMC_VADC_GLOBAL_SetCompareValue
    {standard input}:1036   .text.XMC_VADC_GLOBAL_GetCompareResult:0000000000000000 $t
    {standard input}:1043   .text.XMC_VADC_GLOBAL_GetCompareResult:0000000000000000 XMC_VADC_GLOBAL_GetCompareResult
    {standard input}:1105   .text.XMC_VADC_GLOBAL_BindGroupToEMux:0000000000000000 $t
    {standard input}:1112   .text.XMC_VADC_GLOBAL_BindGroupToEMux:0000000000000000 XMC_VADC_GLOBAL_BindGroupToEMux
    {standard input}:1193   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:0000000000000000 $t
    {standard input}:1200   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:0000000000000000 XMC_VADC_GLOBAL_SetResultEventInterruptNode
    {standard input}:1275   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:000000000000005c $d
    {standard input}:1280   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:0000000000000000 $t
    {standard input}:1287   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:0000000000000000 XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
    {standard input}:1360   .text.XMC_VADC_GROUP_Init:0000000000000000 $t
    {standard input}:1367   .text.XMC_VADC_GROUP_Init:0000000000000000 XMC_VADC_GROUP_Init
    {standard input}:1452   .text.XMC_VADC_GROUP_InputClassInit:0000000000000000 XMC_VADC_GROUP_InputClassInit
    {standard input}:1445   .text.XMC_VADC_GROUP_InputClassInit:0000000000000000 $t
    {standard input}:1608   .text.XMC_VADC_GROUP_SetPowerMode:0000000000000000 $t
    {standard input}:1615   .text.XMC_VADC_GROUP_SetPowerMode:0000000000000000 XMC_VADC_GROUP_SetPowerMode
    {standard input}:1668   .text.XMC_VADC_GROUP_SetSyncSlave:0000000000000000 $t
    {standard input}:1675   .text.XMC_VADC_GROUP_SetSyncSlave:0000000000000000 XMC_VADC_GROUP_SetSyncSlave
    {standard input}:1735   .text.XMC_VADC_GROUP_SetSyncMaster:0000000000000000 $t
    {standard input}:1742   .text.XMC_VADC_GROUP_SetSyncMaster:0000000000000000 XMC_VADC_GROUP_SetSyncMaster
    {standard input}:1785   .text.XMC_VADC_GROUP_CheckSlaveReadiness:0000000000000000 $t
    {standard input}:1792   .text.XMC_VADC_GROUP_CheckSlaveReadiness:0000000000000000 XMC_VADC_GROUP_CheckSlaveReadiness
    {standard input}:1877   .text.XMC_VADC_GROUP_CheckSlaveReadiness:0000000000000060 $d
    {standard input}:1882   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:0000000000000000 $t
    {standard input}:1889   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:0000000000000000 XMC_VADC_GROUP_IgnoreSlaveReadiness
    {standard input}:1976   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:0000000000000064 $d
    {standard input}:1981   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:0000000000000000 $t
    {standard input}:1988   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:0000000000000000 XMC_VADC_GROUP_SetSyncSlaveReadySignal
    {standard input}:2044   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:0000000000000000 $t
    {standard input}:2051   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:0000000000000000 XMC_VADC_GROUP_EnableChannelSyncRequest
    {standard input}:2107   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:0000000000000000 $t
    {standard input}:2114   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:0000000000000000 XMC_VADC_GROUP_DisableChannelSyncRequest
    {standard input}:2168   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:000000000000003c $d
    {standard input}:2173   .text.XMC_VADC_GROUP_IsConverterBusy:0000000000000000 $t
    {standard input}:2180   .text.XMC_VADC_GROUP_IsConverterBusy:0000000000000000 XMC_VADC_GROUP_IsConverterBusy
    {standard input}:2226   .text.XMC_VADC_GROUP_SetBoundaries:0000000000000000 $t
    {standard input}:2233   .text.XMC_VADC_GROUP_SetBoundaries:0000000000000000 XMC_VADC_GROUP_SetBoundaries
    {standard input}:2294   .text.XMC_VADC_GROUP_SetBoundaries:0000000000000048 $d
    {standard input}:2299   .text.XMC_VADC_GROUP_SetIndividualBoundary:0000000000000000 $t
    {standard input}:2306   .text.XMC_VADC_GROUP_SetIndividualBoundary:0000000000000000 XMC_VADC_GROUP_SetIndividualBoundary
    {standard input}:2390   .text.XMC_VADC_GROUP_SetIndividualBoundary:0000000000000068 $d
    {standard input}:2395   .text.XMC_VADC_GROUP_TriggerServiceRequest:0000000000000000 $t
    {standard input}:2402   .text.XMC_VADC_GROUP_TriggerServiceRequest:0000000000000000 XMC_VADC_GROUP_TriggerServiceRequest
    {standard input}:2473   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:0000000000000000 $t
    {standard input}:2480   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:0000000000000000 XMC_VADC_GROUP_SetBoundaryEventInterruptNode
    {standard input}:2554   .text.XMC_VADC_GLOBAL_SHS_Init:0000000000000000 $t
    {standard input}:2561   .text.XMC_VADC_GLOBAL_SHS_Init:0000000000000000 XMC_VADC_GLOBAL_SHS_Init
    {standard input}:2622   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:0000000000000000 $t
    {standard input}:2629   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:0000000000000000 XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
    {standard input}:2692   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:0000000000000000 $t
    {standard input}:2699   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:0000000000000000 XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
    {standard input}:2764   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:0000000000000000 $t
    {standard input}:2771   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:0000000000000000 XMC_VADC_GLOBAL_SHS_SetShortSampleTime
    {standard input}:2866   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:000000000000007c $d
    {standard input}:2871   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:0000000000000000 $t
    {standard input}:2878   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:0000000000000000 XMC_VADC_GLOBAL_SHS_SetGainFactor
    {standard input}:3015   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:0000000000000000 $t
    {standard input}:3022   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:0000000000000000 XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
    {standard input}:3085   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:0000000000000000 $t
    {standard input}:3092   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:0000000000000000 XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
    {standard input}:3157   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:0000000000000000 $t
    {standard input}:3164   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:0000000000000000 XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
    {standard input}:3247   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:0000000000000000 $t
    {standard input}:3254   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:0000000000000000 XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
    {standard input}:3397   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:0000000000000000 $t
    {standard input}:3404   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:0000000000000000 XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
    {standard input}:3483   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:000000000000005c $d
    {standard input}:3488   .text.XMC_VADC_GROUP_ScanInit:0000000000000000 $t
    {standard input}:3495   .text.XMC_VADC_GROUP_ScanInit:0000000000000000 XMC_VADC_GROUP_ScanInit
    {standard input}:3620   .text.XMC_VADC_GROUP_ScanInit:00000000000000ac $d
    {standard input}:3625   .text.XMC_VADC_GROUP_ScanSelectTrigger:0000000000000000 $t
    {standard input}:3632   .text.XMC_VADC_GROUP_ScanSelectTrigger:0000000000000000 XMC_VADC_GROUP_ScanSelectTrigger
    {standard input}:3694   .text.XMC_VADC_GROUP_ScanSelectTrigger:0000000000000048 $d
    {standard input}:3699   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:0000000000000000 $t
    {standard input}:3706   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:0000000000000000 XMC_VADC_GROUP_ScanSelectTriggerEdge
    {standard input}:3768   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:0000000000000048 $d
    {standard input}:3773   .text.XMC_VADC_GROUP_ScanSelectGating:0000000000000000 $t
    {standard input}:3780   .text.XMC_VADC_GROUP_ScanSelectGating:0000000000000000 XMC_VADC_GROUP_ScanSelectGating
    {standard input}:3842   .text.XMC_VADC_GROUP_ScanSelectGating:0000000000000048 $d
    {standard input}:3847   .text.XMC_VADC_GROUP_ScanSequenceAbort:0000000000000000 $t
    {standard input}:3854   .text.XMC_VADC_GROUP_ScanSequenceAbort:0000000000000000 XMC_VADC_GROUP_ScanSequenceAbort
    {standard input}:3962   .text.XMC_VADC_GROUP_ScanSequenceAbort:0000000000000094 $d
    {standard input}:3967   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:0000000000000000 $t
    {standard input}:3974   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:0000000000000000 XMC_VADC_GROUP_ScanGetNumChannelsPending
    {standard input}:4052   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:0000000000000000 $t
    {standard input}:4059   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:0000000000000000 XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
    {standard input}:4116   .text.XMC_VADC_GROUP_ScanRemoveChannel:0000000000000000 $t
    {standard input}:4123   .text.XMC_VADC_GROUP_ScanRemoveChannel:0000000000000000 XMC_VADC_GROUP_ScanRemoveChannel
    {standard input}:4176   .text.XMC_VADC_GLOBAL_BackgroundInit:0000000000000000 $t
    {standard input}:4183   .text.XMC_VADC_GLOBAL_BackgroundInit:0000000000000000 XMC_VADC_GLOBAL_BackgroundInit
    {standard input}:4406   .text.XMC_VADC_GLOBAL_BackgroundInit:000000000000013c $d
    {standard input}:4413   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:0000000000000000 $t
    {standard input}:4420   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:0000000000000000 XMC_VADC_GLOBAL_BackgroundSelectTrigger
    {standard input}:4478   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:0000000000000044 $d
    {standard input}:4483   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:0000000000000000 $t
    {standard input}:4490   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:0000000000000000 XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
    {standard input}:4552   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:0000000000000048 $d
    {standard input}:4557   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:0000000000000000 $t
    {standard input}:4564   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:0000000000000000 XMC_VADC_GLOBAL_BackgroundSelectGating
    {standard input}:4622   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:0000000000000044 $d
    {standard input}:4627   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:0000000000000000 $t
    {standard input}:4634   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:0000000000000000 XMC_VADC_GLOBAL_BackgroundAbortSequence
    {standard input}:4771   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000000000b8 $d
    {standard input}:4777   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:0000000000000000 $t
    {standard input}:4784   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:0000000000000000 XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
    {standard input}:4879   .text.XMC_VADC_GROUP_QueueInit:0000000000000000 $t
    {standard input}:4886   .text.XMC_VADC_GROUP_QueueInit:0000000000000000 XMC_VADC_GROUP_QueueInit
    {standard input}:5011   .text.XMC_VADC_GROUP_QueueInit:00000000000000ac $d
    {standard input}:5016   .text.XMC_VADC_GROUP_QueueSelectTrigger:0000000000000000 $t
    {standard input}:5023   .text.XMC_VADC_GROUP_QueueSelectTrigger:0000000000000000 XMC_VADC_GROUP_QueueSelectTrigger
    {standard input}:5085   .text.XMC_VADC_GROUP_QueueSelectTrigger:0000000000000048 $d
    {standard input}:5090   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:0000000000000000 $t
    {standard input}:5097   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:0000000000000000 XMC_VADC_GROUP_QueueSelectTriggerEdge
    {standard input}:5159   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:0000000000000048 $d
    {standard input}:5164   .text.XMC_VADC_GROUP_QueueSelectGating:0000000000000000 $t
    {standard input}:5171   .text.XMC_VADC_GROUP_QueueSelectGating:0000000000000000 XMC_VADC_GROUP_QueueSelectGating
    {standard input}:5233   .text.XMC_VADC_GROUP_QueueSelectGating:0000000000000048 $d
    {standard input}:5238   .text.XMC_VADC_GROUP_QueueGetLength:0000000000000000 $t
    {standard input}:5245   .text.XMC_VADC_GROUP_QueueGetLength:0000000000000000 XMC_VADC_GROUP_QueueGetLength
    {standard input}:5318   .text.XMC_VADC_GROUP_QueueAbortSequence:0000000000000000 $t
    {standard input}:5325   .text.XMC_VADC_GROUP_QueueAbortSequence:0000000000000000 XMC_VADC_GROUP_QueueAbortSequence
    {standard input}:5412   .text.XMC_VADC_GROUP_QueueAbortSequence:0000000000000070 $d
    {standard input}:5417   .text.XMC_VADC_GROUP_QueueRemoveChannel:0000000000000000 $t
    {standard input}:5424   .text.XMC_VADC_GROUP_QueueRemoveChannel:0000000000000000 XMC_VADC_GROUP_QueueRemoveChannel
    {standard input}:5552   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000000000b4 $d
    {standard input}:5557   .text.XMC_VADC_GROUP_QueueGetNextChannel:0000000000000000 $t
    {standard input}:5564   .text.XMC_VADC_GROUP_QueueGetNextChannel:0000000000000000 XMC_VADC_GROUP_QueueGetNextChannel
    {standard input}:5647   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:0000000000000000 $t
    {standard input}:5654   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:0000000000000000 XMC_VADC_GROUP_QueueGetInterruptedChannel
    {standard input}:5713   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:0000000000000000 $t
    {standard input}:5720   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:0000000000000000 XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
    {standard input}:5775   .text.XMC_VADC_GROUP_ChannelInit:0000000000000000 $t
    {standard input}:5782   .text.XMC_VADC_GROUP_ChannelInit:0000000000000000 XMC_VADC_GROUP_ChannelInit
    {standard input}:5944   .text.XMC_VADC_GROUP_ChannelInit:00000000000000dc $d
    {standard input}:5949   .text.XMC_VADC_GROUP_SetChannelAlias:0000000000000000 $t
    {standard input}:5956   .text.XMC_VADC_GROUP_SetChannelAlias:0000000000000000 XMC_VADC_GROUP_SetChannelAlias
    {standard input}:6032   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:0000000000000000 $t
    {standard input}:6039   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:0000000000000000 XMC_VADC_GROUP_ChannelIsResultOutOfBounds
    {standard input}:6124   .text.XMC_VADC_GROUP_ChannelSetInputReference:0000000000000000 $t
    {standard input}:6131   .text.XMC_VADC_GROUP_ChannelSetInputReference:0000000000000000 XMC_VADC_GROUP_ChannelSetInputReference
    {standard input}:6189   .text.XMC_VADC_GROUP_ChannelSetInputReference:0000000000000044 $d
    {standard input}:6194   .text.XMC_VADC_GROUP_ChannelSetResultRegister:0000000000000000 $t
    {standard input}:6201   .text.XMC_VADC_GROUP_ChannelSetResultRegister:0000000000000000 XMC_VADC_GROUP_ChannelSetResultRegister
    {standard input}:6256   .text.XMC_VADC_GROUP_ChannelSetResultRegister:0000000000000040 $d
    {standard input}:6261   .text.XMC_VADC_GROUP_ChannelSetIclass:0000000000000000 $t
    {standard input}:6268   .text.XMC_VADC_GROUP_ChannelSetIclass:0000000000000000 XMC_VADC_GROUP_ChannelSetIclass
    {standard input}:6325   .text.XMC_VADC_GROUP_ChannelGetResultRegister:0000000000000000 $t
    {standard input}:6332   .text.XMC_VADC_GROUP_ChannelGetResultRegister:0000000000000000 XMC_VADC_GROUP_ChannelGetResultRegister
    {standard input}:6380   .text.XMC_VADC_GROUP_ChannelTriggerEvent:0000000000000000 $t
    {standard input}:6387   .text.XMC_VADC_GROUP_ChannelTriggerEvent:0000000000000000 XMC_VADC_GROUP_ChannelTriggerEvent
    {standard input}:6437   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:0000000000000000 $t
    {standard input}:6444   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:0000000000000000 XMC_VADC_GROUP_ChannelSetEventInterruptNode
    {standard input}:6513   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:0000000000000000 $t
    {standard input}:6520   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:0000000000000000 XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
    {standard input}:6578   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:0000000000000044 $d
    {standard input}:6583   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:0000000000000000 $t
    {standard input}:6590   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:0000000000000000 XMC_VADC_GROUP_ChannelSetBoundarySelection
    {standard input}:6672   .text.XMC_VADC_GROUP_AddResultToFifo:0000000000000000 $t
    {standard input}:6679   .text.XMC_VADC_GROUP_AddResultToFifo:0000000000000000 XMC_VADC_GROUP_AddResultToFifo
    {standard input}:6732   .text.XMC_VADC_GROUP_AddResultToFifo:000000000000003c $d
    {standard input}:6737   .text.XMC_VADC_GROUP_SetResultFastCompareValue:0000000000000000 $t
    {standard input}:6744   .text.XMC_VADC_GROUP_SetResultFastCompareValue:0000000000000000 XMC_VADC_GROUP_SetResultFastCompareValue
    {standard input}:6803   .text.XMC_VADC_GROUP_GetFastCompareResult:0000000000000000 $t
    {standard input}:6810   .text.XMC_VADC_GROUP_GetFastCompareResult:0000000000000000 XMC_VADC_GROUP_GetFastCompareResult
    {standard input}:6874   .text.XMC_VADC_GROUP_SetResultSubtractionValue:0000000000000000 $t
    {standard input}:6881   .text.XMC_VADC_GROUP_SetResultSubtractionValue:0000000000000000 XMC_VADC_GROUP_SetResultSubtractionValue
    {standard input}:6936   .text.XMC_VADC_GROUP_SetResultInterruptNode:0000000000000000 $t
    {standard input}:6943   .text.XMC_VADC_GROUP_SetResultInterruptNode:0000000000000000 XMC_VADC_GROUP_SetResultInterruptNode
    {standard input}:7062   .text.XMC_VADC_GROUP_GetResultFifoTail:0000000000000000 $t
    {standard input}:7069   .text.XMC_VADC_GROUP_GetResultFifoTail:0000000000000000 XMC_VADC_GROUP_GetResultFifoTail
    {standard input}:7300   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:0000000000000000 XMC_VADC_GROUP_IsResultRegisterFifoHead
    {standard input}:7199   .text.XMC_VADC_GROUP_GetResultFifoHead:0000000000000000 $t
    {standard input}:7206   .text.XMC_VADC_GROUP_GetResultFifoHead:0000000000000000 XMC_VADC_GROUP_GetResultFifoHead
    {standard input}:7293   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:0000000000000000 $t

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_CLOCK_GatePeripheralClock
